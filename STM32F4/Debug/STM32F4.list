
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  080077bc  080077bc  000087bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008548  08008548  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008548  08008548  00009548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008550  08008550  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008550  08008550  00009550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008558  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  2000005c  080085b4  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  080085b4  0000aabc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d0c  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000355d  00000000  00000000  00022d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  000262f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001063  00000000  00000000  000277f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247f6  00000000  00000000  0002885b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b229  00000000  00000000  0004d051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7644  00000000  00000000  0006827a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f8be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c34  00000000  00000000  0013f904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00145538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080077a4 	.word	0x080077a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	080077a4 	.word	0x080077a4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <HAL_UART_RxCpltCallback>:
    }
    return crc;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_UART_RxCpltCallback+0x20>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d102      	bne.n	8000558 <HAL_UART_RxCpltCallback+0x18>
	{
		writeDisplay("Hello World");
 8000552:	4804      	ldr	r0, [pc, #16]	@ (8000564 <HAL_UART_RxCpltCallback+0x24>)
 8000554:	f001 ffb8 	bl	80024c8 <writeDisplay>
//		writeDisplay(feedback_msg);
//		HAL_UART_Receive_IT(huart, datagram, 10);
	}


}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40004400 	.word	0x40004400
 8000564:	080077bc 	.word	0x080077bc

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	f5ad 6d10 	sub.w	sp, sp, #2304	@ 0x900
 800056e:	af00      	add	r7, sp, #0
	motor_t motor1;
	motor_t motor2;
	motor_t motor3;
	motor_t motor4;
	motor_t motor5;
	motors[0] = &motor1;
 8000570:	4a37      	ldr	r2, [pc, #220]	@ (8000650 <main+0xe8>)
 8000572:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8000576:	6013      	str	r3, [r2, #0]
	motors[1] = &motor2;
 8000578:	4a35      	ldr	r2, [pc, #212]	@ (8000650 <main+0xe8>)
 800057a:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 800057e:	6053      	str	r3, [r2, #4]
	motors[2] = &motor3;
 8000580:	4a33      	ldr	r2, [pc, #204]	@ (8000650 <main+0xe8>)
 8000582:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8000586:	6093      	str	r3, [r2, #8]
	motors[3] = &motor4;
 8000588:	4a31      	ldr	r2, [pc, #196]	@ (8000650 <main+0xe8>)
 800058a:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 800058e:	60d3      	str	r3, [r2, #12]
	motors[4] = &motor5;
 8000590:	4a2f      	ldr	r2, [pc, #188]	@ (8000650 <main+0xe8>)
 8000592:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8000596:	6113      	str	r3, [r2, #16]
	tmc2209_stepper_driver_t driver2;
	tmc2209_stepper_driver_t driver3;
	tmc2209_stepper_driver_t driver4;
	tmc2209_stepper_driver_t driver5;

	motors[0]->driver = &driver1;
 8000598:	4b2d      	ldr	r3, [pc, #180]	@ (8000650 <main+0xe8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 80005a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	motors[1]->driver = &driver2;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000650 <main+0xe8>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80005ac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	motors[2]->driver = &driver3;
 80005b0:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <main+0xe8>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 80005b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	motors[3]->driver = &driver4;
 80005bc:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <main+0xe8>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80005c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	motors[4]->driver = &driver5;
 80005c8:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <main+0xe8>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	1d3a      	adds	r2, r7, #4
 80005ce:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f003 f857 	bl	8003684 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f83f 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 fd1f 	bl	800101c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005de:	f000 fc9f 	bl	8000f20 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005e2:	f000 fc73 	bl	8000ecc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005e6:	f000 f8a5 	bl	8000734 <MX_I2C1_Init>
  MX_UART4_Init();
 80005ea:	f000 fc1b 	bl	8000e24 <MX_UART4_Init>
  MX_UART5_Init();
 80005ee:	f000 fc43 	bl	8000e78 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 fcbf 	bl	8000f74 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005f6:	f000 fce7 	bl	8000fc8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80005fa:	f000 f919 	bl	8000830 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005fe:	f000 f98b 	bl	8000918 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000602:	f000 fb07 	bl	8000c14 <MX_TIM9_Init>
  MX_TIM8_Init();
 8000606:	f000 fa67 	bl	8000ad8 <MX_TIM8_Init>
  MX_TIM12_Init();
 800060a:	f000 fb61 	bl	8000cd0 <MX_TIM12_Init>
  MX_TIM13_Init();
 800060e:	f000 fbbf 	bl	8000d90 <MX_TIM13_Init>
  MX_TIM1_Init();
 8000612:	f000 f8bd 	bl	8000790 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000616:	f000 f9f3 	bl	8000a00 <MX_TIM6_Init>
  MX_TIM7_Init();
 800061a:	f000 fa27 	bl	8000a6c <MX_TIM7_Init>
  MX_TIM10_Init();
 800061e:	f000 fb33 	bl	8000c88 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  initAllMotors(MODE_5_UART);
 8000622:	2001      	movs	r0, #1
 8000624:	f002 fb94 	bl	8002d50 <initAllMotors>

  while(start_flag == 0);
 8000628:	bf00      	nop
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <main+0xec>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0fb      	beq.n	800062a <main+0xc2>
  tmc2209_input_t input;
  input.bytes = get_input(motors[0]->driver);
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <main+0xe8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fb8c 	bl	8001d58 <get_input>
 8000640:	4602      	mov	r2, r0
 8000642:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8000646:	f5a3 6310 	sub.w	r3, r3, #2304	@ 0x900
 800064a:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0xe4>
 8000650:	2000054c 	.word	0x2000054c
 8000654:	20000560 	.word	0x20000560

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	@ 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 f800 	bl	800766c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a29      	ldr	r2, [pc, #164]	@ (800072c <SystemClock_Config+0xd4>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <SystemClock_Config+0xd4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <SystemClock_Config+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <SystemClock_Config+0xd8>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <SystemClock_Config+0xd8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fbde 	bl	8004ea8 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 fd81 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f004 f87e 	bl	8004814 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071e:	f000 fd6b 	bl	80011f8 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	@ 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_I2C1_Init+0x50>)
 800073a:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <MX_I2C1_Init+0x54>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_I2C1_Init+0x50>)
 8000740:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_I2C1_Init+0x58>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_I2C1_Init+0x50>)
 8000752:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_I2C1_Init+0x50>)
 8000772:	f003 fba1 	bl	8003eb8 <HAL_I2C_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 fd3c 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000078 	.word	0x20000078
 8000788:	40005400 	.word	0x40005400
 800078c:	000186a0 	.word	0x000186a0

08000790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007ae:	4a1f      	ldr	r2, [pc, #124]	@ (800082c <MX_TIM1_Init+0x9c>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007b4:	2253      	movs	r2, #83	@ 0x53
 80007b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d8:	4813      	ldr	r0, [pc, #76]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007da:	f004 fe03 	bl	80053e4 <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 fd08 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007f6:	f005 f8d7 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000800:	f000 fcfa 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_TIM1_Init+0x98>)
 8000812:	f005 fcc5 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800081c:	f000 fcec 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000cc 	.word	0x200000cc
 800082c:	40010000 	.word	0x40010000

08000830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	@ 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000860:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <MX_TIM3_Init+0xe0>)
 8000862:	4a2c      	ldr	r2, [pc, #176]	@ (8000914 <MX_TIM3_Init+0xe4>)
 8000864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8000866:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <MX_TIM3_Init+0xe0>)
 8000868:	2229      	movs	r2, #41	@ 0x29
 800086a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <MX_TIM3_Init+0xe0>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000872:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <MX_TIM3_Init+0xe0>)
 8000874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000878:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <MX_TIM3_Init+0xe0>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <MX_TIM3_Init+0xe0>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000886:	4822      	ldr	r0, [pc, #136]	@ (8000910 <MX_TIM3_Init+0xe0>)
 8000888:	f004 fdac 	bl	80053e4 <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000892:	f000 fcb1 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800089c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a0:	4619      	mov	r1, r3
 80008a2:	481b      	ldr	r0, [pc, #108]	@ (8000910 <MX_TIM3_Init+0xe0>)
 80008a4:	f005 f880 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008ae:	f000 fca3 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008b2:	4817      	ldr	r0, [pc, #92]	@ (8000910 <MX_TIM3_Init+0xe0>)
 80008b4:	f004 fe14 	bl	80054e0 <HAL_TIM_OC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008be:	f000 fc9b 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	4619      	mov	r1, r3
 80008d0:	480f      	ldr	r0, [pc, #60]	@ (8000910 <MX_TIM3_Init+0xe0>)
 80008d2:	f005 fc65 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008dc:	f000 fc8c 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <MX_TIM3_Init+0xe0>)
 80008f8:	f004 fffa 	bl	80058f0 <HAL_TIM_OC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000902:	f000 fc79 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3738      	adds	r7, #56	@ 0x38
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000114 	.word	0x20000114
 8000914:	40000400 	.word	0x40000400

08000918 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	@ 0x38
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000948:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 800094a:	4a2c      	ldr	r2, [pc, #176]	@ (80009fc <MX_TIM4_Init+0xe4>)
 800094c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 800094e:	4b2a      	ldr	r3, [pc, #168]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 8000950:	2229      	movs	r2, #41	@ 0x29
 8000952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b28      	ldr	r3, [pc, #160]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800095a:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 800095c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800096e:	4822      	ldr	r0, [pc, #136]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 8000970:	f004 fd38 	bl	80053e4 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800097a:	f000 fc3d 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000988:	4619      	mov	r1, r3
 800098a:	481b      	ldr	r0, [pc, #108]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 800098c:	f005 f80c 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000996:	f000 fc2f 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800099a:	4817      	ldr	r0, [pc, #92]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 800099c:	f004 fda0 	bl	80054e0 <HAL_TIM_OC_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009a6:	f000 fc27 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	4619      	mov	r1, r3
 80009b8:	480f      	ldr	r0, [pc, #60]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 80009ba:	f005 fbf1 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009c4:	f000 fc18 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <MX_TIM4_Init+0xe0>)
 80009e0:	f004 ff86 	bl	80058f0 <HAL_TIM_OC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80009ea:	f000 fc05 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3738      	adds	r7, #56	@ 0x38
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000015c 	.word	0x2000015c
 80009fc:	40000800 	.word	0x40000800

08000a00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_TIM6_Init+0x64>)
 8000a10:	4a15      	ldr	r2, [pc, #84]	@ (8000a68 <MX_TIM6_Init+0x68>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 839;
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_TIM6_Init+0x64>)
 8000a16:	f240 3247 	movw	r2, #839	@ 0x347
 8000a1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_TIM6_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <MX_TIM6_Init+0x64>)
 8000a24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_TIM6_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <MX_TIM6_Init+0x64>)
 8000a32:	f004 fcd7 	bl	80053e4 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a3c:	f000 fbdc 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_TIM6_Init+0x64>)
 8000a4e:	f005 fba7 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 fbce 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200001a4 	.word	0x200001a4
 8000a68:	40001000 	.word	0x40001000

08000a6c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <MX_TIM7_Init+0x64>)
 8000a7c:	4a15      	ldr	r2, [pc, #84]	@ (8000ad4 <MX_TIM7_Init+0x68>)
 8000a7e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 839;
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_TIM7_Init+0x64>)
 8000a82:	f240 3247 	movw	r2, #839	@ 0x347
 8000a86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_TIM7_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <MX_TIM7_Init+0x64>)
 8000a90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_TIM7_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <MX_TIM7_Init+0x64>)
 8000a9e:	f004 fca1 	bl	80053e4 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000aa8:	f000 fba6 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_TIM7_Init+0x64>)
 8000aba:	f005 fb71 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ac4:	f000 fb98 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200001ec 	.word	0x200001ec
 8000ad4:	40001400 	.word	0x40001400

08000ad8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b096      	sub	sp, #88	@ 0x58
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 fdab 	bl	800766c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b16:	4b3d      	ldr	r3, [pc, #244]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b18:	4a3d      	ldr	r2, [pc, #244]	@ (8000c10 <MX_TIM8_Init+0x138>)
 8000b1a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 8000b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b1e:	2229      	movs	r2, #41	@ 0x29
 8000b20:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b3a      	ldr	r3, [pc, #232]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b28:	4b38      	ldr	r3, [pc, #224]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b2e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b36      	ldr	r3, [pc, #216]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b36:	4b35      	ldr	r3, [pc, #212]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b33      	ldr	r3, [pc, #204]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b42:	4832      	ldr	r0, [pc, #200]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b44:	f004 fc4e 	bl	80053e4 <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000b4e:	f000 fb53 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b56:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	482b      	ldr	r0, [pc, #172]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b60:	f004 ff22 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000b6a:	f000 fb45 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000b6e:	4827      	ldr	r0, [pc, #156]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b70:	f004 fcb6 	bl	80054e0 <HAL_TIM_OC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000b7a:	f000 fb3d 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481f      	ldr	r0, [pc, #124]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000b8e:	f005 fb07 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000b98:	f000 fb2e 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4812      	ldr	r0, [pc, #72]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000bc2:	f004 fe95 	bl	80058f0 <HAL_TIM_OC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000bcc:	f000 fb14 	bl	80011f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <MX_TIM8_Init+0x134>)
 8000bf4:	f005 fb50 	bl	8006298 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8000bfe:	f000 fafb 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	3758      	adds	r7, #88	@ 0x58
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000234 	.word	0x20000234
 8000c10:	40010400 	.word	0x40010400

08000c14 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <MX_TIM9_Init+0x6c>)
 8000c28:	4a16      	ldr	r2, [pc, #88]	@ (8000c84 <MX_TIM9_Init+0x70>)
 8000c2a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_TIM9_Init+0x6c>)
 8000c2e:	f240 3247 	movw	r2, #839	@ 0x347
 8000c32:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_TIM9_Init+0x6c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_TIM9_Init+0x6c>)
 8000c3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c40:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_TIM9_Init+0x6c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <MX_TIM9_Init+0x6c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000c4e:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <MX_TIM9_Init+0x6c>)
 8000c50:	f004 fbc8 	bl	80053e4 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8000c5a:	f000 facd 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c62:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_TIM9_Init+0x6c>)
 8000c6a:	f004 fe9d 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000c74:	f000 fac0 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000027c 	.word	0x2000027c
 8000c84:	40014000 	.word	0x40014000

08000c88 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_TIM10_Init+0x40>)
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ccc <MX_TIM10_Init+0x44>)
 8000c90:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <MX_TIM10_Init+0x40>)
 8000c94:	f240 3247 	movw	r2, #839	@ 0x347
 8000c98:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_TIM10_Init+0x40>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_TIM10_Init+0x40>)
 8000ca2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ca6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <MX_TIM10_Init+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_TIM10_Init+0x40>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <MX_TIM10_Init+0x40>)
 8000cb6:	f004 fb95 	bl	80053e4 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000cc0:	f000 fa9a 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200002c4 	.word	0x200002c4
 8000ccc:	40014400 	.word	0x40014400

08000cd0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	@ 0x30
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	615a      	str	r2, [r3, #20]
 8000cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000cf8:	4a24      	ldr	r2, [pc, #144]	@ (8000d8c <MX_TIM12_Init+0xbc>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000cfe:	2229      	movs	r2, #41	@ 0x29
 8000d00:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d0e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000d1c:	481a      	ldr	r0, [pc, #104]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000d1e:	f004 fb61 	bl	80053e4 <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000d28:	f000 fa66 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d30:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	4619      	mov	r1, r3
 8000d38:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000d3a:	f004 fe35 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000d44:	f000 fa58 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8000d48:	480f      	ldr	r0, [pc, #60]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000d4a:	f004 fbc9 	bl	80054e0 <HAL_TIM_OC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000d54:	f000 fa50 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	@ (8000d88 <MX_TIM12_Init+0xb8>)
 8000d70:	f004 fdbe 	bl	80058f0 <HAL_TIM_OC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8000d7a:	f000 fa3d 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3730      	adds	r7, #48	@ 0x30
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000030c 	.word	0x2000030c
 8000d8c:	40001800 	.word	0x40001800

08000d90 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000daa:	4a1d      	ldr	r2, [pc, #116]	@ (8000e20 <MX_TIM13_Init+0x90>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000db0:	2229      	movs	r2, #41	@ 0x29
 8000db2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000dce:	4813      	ldr	r0, [pc, #76]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000dd0:	f004 fb08 	bl	80053e4 <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000dda:	f000 fa0d 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8000dde:	480f      	ldr	r0, [pc, #60]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000de0:	f004 fb7e 	bl	80054e0 <HAL_TIM_OC_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000dea:	f000 fa05 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_TIM13_Init+0x8c>)
 8000e06:	f004 fd73 	bl	80058f0 <HAL_TIM_OC_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000e10:	f000 f9f2 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000354 	.word	0x20000354
 8000e20:	40001c00 	.word	0x40001c00

08000e24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <MX_UART4_Init+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_UART4_Init+0x4c>)
 8000e5c:	f005 fa82 	bl	8006364 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000e66:	f000 f9c7 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000039c 	.word	0x2000039c
 8000e74:	40004c00 	.word	0x40004c00

08000e78 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <MX_UART5_Init+0x50>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_UART5_Init+0x4c>)
 8000eb0:	f005 fa58 	bl	8006364 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000eba:	f000 f99d 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200003e4 	.word	0x200003e4
 8000ec8:	40005000 	.word	0x40005000

08000ecc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <MX_USART1_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000f04:	f005 fa2e 	bl	8006364 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f973 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000042c 	.word	0x2000042c
 8000f1c:	40011000 	.word	0x40011000

08000f20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <MX_USART2_UART_Init+0x50>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <MX_USART2_UART_Init+0x4c>)
 8000f58:	f005 fa04 	bl	8006364 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f62:	f000 f949 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000474 	.word	0x20000474
 8000f70:	40004400 	.word	0x40004400

08000f74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <MX_USART3_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fac:	f005 f9da 	bl	8006364 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f000 f91f 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200004bc 	.word	0x200004bc
 8000fc4:	40004800 	.word	0x40004800

08000fc8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <MX_USART6_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_USART6_UART_Init+0x4c>)
 8001000:	f005 f9b0 	bl	8006364 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f000 f8f5 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000504 	.word	0x20000504
 8001018:	40011400 	.word	0x40011400

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b62      	ldr	r3, [pc, #392]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a61      	ldr	r2, [pc, #388]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b5f      	ldr	r3, [pc, #380]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b5b      	ldr	r3, [pc, #364]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a5a      	ldr	r2, [pc, #360]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b58      	ldr	r3, [pc, #352]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a53      	ldr	r2, [pc, #332]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b51      	ldr	r3, [pc, #324]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b4d      	ldr	r3, [pc, #308]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a4c      	ldr	r2, [pc, #304]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b4a      	ldr	r3, [pc, #296]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	4b46      	ldr	r3, [pc, #280]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a45      	ldr	r2, [pc, #276]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b43      	ldr	r3, [pc, #268]	@ (80011c0 <MX_GPIO_Init+0x1a4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 80010be:	2200      	movs	r2, #0
 80010c0:	f640 311f 	movw	r1, #2847	@ 0xb1f
 80010c4:	483f      	ldr	r0, [pc, #252]	@ (80011c4 <MX_GPIO_Init+0x1a8>)
 80010c6:	f002 feab 	bl	8003e20 <HAL_GPIO_WritePin>
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80010d0:	483d      	ldr	r0, [pc, #244]	@ (80011c8 <MX_GPIO_Init+0x1ac>)
 80010d2:	f002 fea5 	bl	8003e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 80010d6:	2200      	movs	r2, #0
 80010d8:	f247 0117 	movw	r1, #28695	@ 0x7017
 80010dc:	483b      	ldr	r0, [pc, #236]	@ (80011cc <MX_GPIO_Init+0x1b0>)
 80010de:	f002 fe9f 	bl	8003e20 <HAL_GPIO_WritePin>
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4832      	ldr	r0, [pc, #200]	@ (80011c4 <MX_GPIO_Init+0x1a8>)
 80010fa:	f002 fcfd 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_yellow_Pin LED_green_Pin MOT_EN_3_Pin STEP_3_Pin
                           MOT_EN_5_Pin STEP_5_Pin DIR_5_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 80010fe:	f640 331f 	movw	r3, #2847	@ 0xb1f
 8001102:	617b      	str	r3, [r7, #20]
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	482b      	ldr	r0, [pc, #172]	@ (80011c4 <MX_GPIO_Init+0x1a8>)
 8001118:	f002 fcee 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 800111c:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4825      	ldr	r0, [pc, #148]	@ (80011c8 <MX_GPIO_Init+0x1ac>)
 8001132:	f002 fce1 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_EN_2_Pin STEP_2_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin;
 8001136:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	481e      	ldr	r0, [pc, #120]	@ (80011c8 <MX_GPIO_Init+0x1ac>)
 8001150:	f002 fcd2 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin MOT_EN_4_Pin STEP_4_Pin MOT_EN_1_Pin
                           STEP_1_Pin DIR_1_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001154:	f247 0317 	movw	r3, #28695	@ 0x7017
 8001158:	617b      	str	r3, [r7, #20]
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4817      	ldr	r0, [pc, #92]	@ (80011cc <MX_GPIO_Init+0x1b0>)
 800116e:	f002 fcc3 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB5 DIAG_3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|DIAG_3_Pin;
 8001172:	f248 2320 	movw	r3, #33312	@ 0x8220
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4811      	ldr	r0, [pc, #68]	@ (80011cc <MX_GPIO_Init+0x1b0>)
 8001188:	f002 fcb6 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800118c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4808      	ldr	r0, [pc, #32]	@ (80011c4 <MX_GPIO_Init+0x1a8>)
 80011a2:	f002 fca9 	bl	8003af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2028      	movs	r0, #40	@ 0x28
 80011ac:	f002 fbdb 	bl	8003966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b0:	2028      	movs	r0, #40	@ 0x28
 80011b2:	f002 fbf4 	bl	800399e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	@ 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400

080011d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)  // Check if User Button
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011e0:	d102      	bne.n	80011e8 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start_flag = 1;
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
	}
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20000560 	.word	0x20000560

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	@ 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001242:	2007      	movs	r0, #7
 8001244:	f002 fb84 	bl	8003950 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	@ (80012d8 <HAL_I2C_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12b      	bne.n	80012ce <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001292:	23c0      	movs	r3, #192	@ 0xc0
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	2312      	movs	r3, #18
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a2:	2304      	movs	r3, #4
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <HAL_I2C_MspInit+0x8c>)
 80012ae:	f002 fc23 	bl	8003af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400

080012e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	@ 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a98      	ldr	r2, [pc, #608]	@ (8001554 <HAL_TIM_Base_MspInit+0x270>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d11e      	bne.n	8001334 <HAL_TIM_Base_MspInit+0x50>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012fa:	4b97      	ldr	r3, [pc, #604]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a96      	ldr	r2, [pc, #600]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b94      	ldr	r3, [pc, #592]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2018      	movs	r0, #24
 8001318:	f002 fb25 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800131c:	2018      	movs	r0, #24
 800131e:	f002 fb3e 	bl	800399e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2019      	movs	r0, #25
 8001328:	f002 fb1d 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800132c:	2019      	movs	r0, #25
 800132e:	f002 fb36 	bl	800399e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001332:	e10a      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM3)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a88      	ldr	r2, [pc, #544]	@ (800155c <HAL_TIM_Base_MspInit+0x278>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d116      	bne.n	800136c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001342:	4b85      	ldr	r3, [pc, #532]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a84      	ldr	r2, [pc, #528]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b82      	ldr	r3, [pc, #520]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	201d      	movs	r0, #29
 8001360:	f002 fb01 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001364:	201d      	movs	r0, #29
 8001366:	f002 fb1a 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 800136a:	e0ee      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM4)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a7b      	ldr	r2, [pc, #492]	@ (8001560 <HAL_TIM_Base_MspInit+0x27c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d116      	bne.n	80013a4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
 800137a:	4b77      	ldr	r3, [pc, #476]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a76      	ldr	r2, [pc, #472]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b74      	ldr	r3, [pc, #464]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	201e      	movs	r0, #30
 8001398:	f002 fae5 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800139c:	201e      	movs	r0, #30
 800139e:	f002 fafe 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 80013a2:	e0d2      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM6)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001564 <HAL_TIM_Base_MspInit+0x280>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d116      	bne.n	80013dc <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	4b69      	ldr	r3, [pc, #420]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a68      	ldr	r2, [pc, #416]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b66      	ldr	r3, [pc, #408]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2036      	movs	r0, #54	@ 0x36
 80013d0:	f002 fac9 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013d4:	2036      	movs	r0, #54	@ 0x36
 80013d6:	f002 fae2 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 80013da:	e0b6      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM7)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a61      	ldr	r2, [pc, #388]	@ (8001568 <HAL_TIM_Base_MspInit+0x284>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d116      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f6:	4b58      	ldr	r3, [pc, #352]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2037      	movs	r0, #55	@ 0x37
 8001408:	f002 faad 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800140c:	2037      	movs	r0, #55	@ 0x37
 800140e:	f002 fac6 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 8001412:	e09a      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM8)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a54      	ldr	r2, [pc, #336]	@ (800156c <HAL_TIM_Base_MspInit+0x288>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d126      	bne.n	800146c <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	4b4d      	ldr	r3, [pc, #308]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	4a4c      	ldr	r2, [pc, #304]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6453      	str	r3, [r2, #68]	@ 0x44
 800142e:	4b4a      	ldr	r3, [pc, #296]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	202b      	movs	r0, #43	@ 0x2b
 8001440:	f002 fa91 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001444:	202b      	movs	r0, #43	@ 0x2b
 8001446:	f002 faaa 	bl	800399e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	202c      	movs	r0, #44	@ 0x2c
 8001450:	f002 fa89 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001454:	202c      	movs	r0, #44	@ 0x2c
 8001456:	f002 faa2 	bl	800399e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	202e      	movs	r0, #46	@ 0x2e
 8001460:	f002 fa81 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001464:	202e      	movs	r0, #46	@ 0x2e
 8001466:	f002 fa9a 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 800146a:	e06e      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM9)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a3f      	ldr	r2, [pc, #252]	@ (8001570 <HAL_TIM_Base_MspInit+0x28c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d116      	bne.n	80014a4 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a36      	ldr	r2, [pc, #216]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2018      	movs	r0, #24
 8001498:	f002 fa65 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800149c:	2018      	movs	r0, #24
 800149e:	f002 fa7e 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 80014a2:	e052      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM10)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a32      	ldr	r2, [pc, #200]	@ (8001574 <HAL_TIM_Base_MspInit+0x290>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d116      	bne.n	80014dc <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	4a28      	ldr	r2, [pc, #160]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2019      	movs	r0, #25
 80014d0:	f002 fa49 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014d4:	2019      	movs	r0, #25
 80014d6:	f002 fa62 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 80014da:	e036      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM12)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a25      	ldr	r2, [pc, #148]	@ (8001578 <HAL_TIM_Base_MspInit+0x294>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d116      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x230>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80014f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	202b      	movs	r0, #43	@ 0x2b
 8001508:	f002 fa2d 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800150c:	202b      	movs	r0, #43	@ 0x2b
 800150e:	f002 fa46 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 8001512:	e01a      	b.n	800154a <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM13)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <HAL_TIM_Base_MspInit+0x298>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d115      	bne.n	800154a <HAL_TIM_Base_MspInit+0x266>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a0c      	ldr	r2, [pc, #48]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <HAL_TIM_Base_MspInit+0x274>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	202c      	movs	r0, #44	@ 0x2c
 8001540:	f002 fa11 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001544:	202c      	movs	r0, #44	@ 0x2c
 8001546:	f002 fa2a 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	@ 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40010000 	.word	0x40010000
 8001558:	40023800 	.word	0x40023800
 800155c:	40000400 	.word	0x40000400
 8001560:	40000800 	.word	0x40000800
 8001564:	40001000 	.word	0x40001000
 8001568:	40001400 	.word	0x40001400
 800156c:	40010400 	.word	0x40010400
 8001570:	40014000 	.word	0x40014000
 8001574:	40014400 	.word	0x40014400
 8001578:	40001800 	.word	0x40001800
 800157c:	40001c00 	.word	0x40001c00

08001580 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b096      	sub	sp, #88	@ 0x58
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a9f      	ldr	r2, [pc, #636]	@ (800181c <HAL_UART_MspInit+0x29c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12c      	bne.n	80015fc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80015a6:	4b9e      	ldr	r3, [pc, #632]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a9d      	ldr	r2, [pc, #628]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80015ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b9b      	ldr	r3, [pc, #620]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80015bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015c2:	4b97      	ldr	r3, [pc, #604]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a96      	ldr	r2, [pc, #600]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b94      	ldr	r3, [pc, #592]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015da:	2303      	movs	r3, #3
 80015dc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ea:	2308      	movs	r3, #8
 80015ec:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80015f2:	4619      	mov	r1, r3
 80015f4:	488b      	ldr	r0, [pc, #556]	@ (8001824 <HAL_UART_MspInit+0x2a4>)
 80015f6:	f002 fa7f 	bl	8003af8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80015fa:	e154      	b.n	80018a6 <HAL_UART_MspInit+0x326>
  else if(huart->Instance==UART5)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a89      	ldr	r2, [pc, #548]	@ (8001828 <HAL_UART_MspInit+0x2a8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d14b      	bne.n	800169e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	63bb      	str	r3, [r7, #56]	@ 0x38
 800160a:	4b85      	ldr	r3, [pc, #532]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a84      	ldr	r2, [pc, #528]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001610:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b82      	ldr	r3, [pc, #520]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	@ 0x34
 8001626:	4b7e      	ldr	r3, [pc, #504]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a7d      	ldr	r2, [pc, #500]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b7b      	ldr	r3, [pc, #492]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	637b      	str	r3, [r7, #52]	@ 0x34
 800163c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	@ 0x30
 8001642:	4b77      	ldr	r3, [pc, #476]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a76      	ldr	r2, [pc, #472]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b74      	ldr	r3, [pc, #464]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	633b      	str	r3, [r7, #48]	@ 0x30
 8001658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800165a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800166c:	2308      	movs	r3, #8
 800166e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001670:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001674:	4619      	mov	r1, r3
 8001676:	486d      	ldr	r0, [pc, #436]	@ (800182c <HAL_UART_MspInit+0x2ac>)
 8001678:	f002 fa3e 	bl	8003af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800167c:	2304      	movs	r3, #4
 800167e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800168c:	2308      	movs	r3, #8
 800168e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001690:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001694:	4619      	mov	r1, r3
 8001696:	4866      	ldr	r0, [pc, #408]	@ (8001830 <HAL_UART_MspInit+0x2b0>)
 8001698:	f002 fa2e 	bl	8003af8 <HAL_GPIO_Init>
}
 800169c:	e103      	b.n	80018a6 <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a64      	ldr	r2, [pc, #400]	@ (8001834 <HAL_UART_MspInit+0x2b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d12d      	bne.n	8001704 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80016ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b0:	4a5b      	ldr	r2, [pc, #364]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b8:	4b59      	ldr	r3, [pc, #356]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80016ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016c8:	4b55      	ldr	r3, [pc, #340]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016cc:	4a54      	ldr	r2, [pc, #336]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d4:	4b52      	ldr	r3, [pc, #328]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016e4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f2:	2307      	movs	r3, #7
 80016f4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80016fa:	4619      	mov	r1, r3
 80016fc:	4849      	ldr	r0, [pc, #292]	@ (8001824 <HAL_UART_MspInit+0x2a4>)
 80016fe:	f002 f9fb 	bl	8003af8 <HAL_GPIO_Init>
}
 8001702:	e0d0      	b.n	80018a6 <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a4b      	ldr	r2, [pc, #300]	@ (8001838 <HAL_UART_MspInit+0x2b8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d134      	bne.n	8001778 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
 8001712:	4b43      	ldr	r3, [pc, #268]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a42      	ldr	r2, [pc, #264]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b40      	ldr	r3, [pc, #256]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a3b      	ldr	r2, [pc, #236]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001746:	230c      	movs	r3, #12
 8001748:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001756:	2307      	movs	r3, #7
 8001758:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800175e:	4619      	mov	r1, r3
 8001760:	4830      	ldr	r0, [pc, #192]	@ (8001824 <HAL_UART_MspInit+0x2a4>)
 8001762:	f002 f9c9 	bl	8003af8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2026      	movs	r0, #38	@ 0x26
 800176c:	f002 f8fb 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001770:	2026      	movs	r0, #38	@ 0x26
 8001772:	f002 f914 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 8001776:	e096      	b.n	80018a6 <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2f      	ldr	r2, [pc, #188]	@ (800183c <HAL_UART_MspInit+0x2bc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d160      	bne.n	8001844 <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	4b26      	ldr	r3, [pc, #152]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a25      	ldr	r2, [pc, #148]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_UART_MspInit+0x2a0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017d6:	2320      	movs	r3, #32
 80017d8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017e6:	2307      	movs	r3, #7
 80017e8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80017ee:	4619      	mov	r1, r3
 80017f0:	480e      	ldr	r0, [pc, #56]	@ (800182c <HAL_UART_MspInit+0x2ac>)
 80017f2:	f002 f981 	bl	8003af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017fa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001808:	2307      	movs	r3, #7
 800180a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001810:	4619      	mov	r1, r3
 8001812:	480b      	ldr	r0, [pc, #44]	@ (8001840 <HAL_UART_MspInit+0x2c0>)
 8001814:	f002 f970 	bl	8003af8 <HAL_GPIO_Init>
}
 8001818:	e045      	b.n	80018a6 <HAL_UART_MspInit+0x326>
 800181a:	bf00      	nop
 800181c:	40004c00 	.word	0x40004c00
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	40005000 	.word	0x40005000
 800182c:	40020800 	.word	0x40020800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40011000 	.word	0x40011000
 8001838:	40004400 	.word	0x40004400
 800183c:	40004800 	.word	0x40004800
 8001840:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <HAL_UART_MspInit+0x330>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12b      	bne.n	80018a6 <HAL_UART_MspInit+0x326>
    __HAL_RCC_USART6_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_UART_MspInit+0x334>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <HAL_UART_MspInit+0x334>)
 8001858:	f043 0320 	orr.w	r3, r3, #32
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_UART_MspInit+0x334>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_UART_MspInit+0x334>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_UART_MspInit+0x334>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_UART_MspInit+0x334>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001886:	23c0      	movs	r3, #192	@ 0xc0
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001896:	2308      	movs	r3, #8
 8001898:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <HAL_UART_MspInit+0x338>)
 80018a2:	f002 f929 	bl	8003af8 <HAL_GPIO_Init>
}
 80018a6:	bf00      	nop
 80018a8:	3758      	adds	r7, #88	@ 0x58
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40011400 	.word	0x40011400
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020800 	.word	0x40020800

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f001 ff09 	bl	8003728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001920:	4803      	ldr	r0, [pc, #12]	@ (8001930 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001922:	f003 fef5 	bl	8005710 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001926:	4803      	ldr	r0, [pc, #12]	@ (8001934 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001928:	f003 fef2 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200000cc 	.word	0x200000cc
 8001934:	2000027c 	.word	0x2000027c

08001938 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800193c:	4803      	ldr	r0, [pc, #12]	@ (800194c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800193e:	f003 fee7 	bl	8005710 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001942:	4803      	ldr	r0, [pc, #12]	@ (8001950 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001944:	f003 fee4 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000cc 	.word	0x200000cc
 8001950:	200002c4 	.word	0x200002c4

08001954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <TIM3_IRQHandler+0x10>)
 800195a:	f003 fed9 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000114 	.word	0x20000114

08001968 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <TIM4_IRQHandler+0x10>)
 800196e:	f003 fecf 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000015c 	.word	0x2000015c

0800197c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <USART2_IRQHandler+0x10>)
 8001982:	f004 fe61 	bl	8006648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000474 	.word	0x20000474

08001990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001994:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001998:	f002 fa76 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80019a4:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80019a6:	f003 feb3 	bl	8005710 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80019aa:	4803      	ldr	r0, [pc, #12]	@ (80019b8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80019ac:	f003 feb0 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000234 	.word	0x20000234
 80019b8:	2000030c 	.word	0x2000030c

080019bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80019c2:	f003 fea5 	bl	8005710 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80019c6:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80019c8:	f003 fea2 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000234 	.word	0x20000234
 80019d4:	20000354 	.word	0x20000354

080019d8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <TIM8_CC_IRQHandler+0x10>)
 80019de:	f003 fe97 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000234 	.word	0x20000234

080019ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM6_DAC_IRQHandler+0x10>)
 80019f2:	f003 fe8d 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001a4 	.word	0x200001a4

08001a00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <TIM7_IRQHandler+0x10>)
 8001a06:	f003 fe83 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200001ec 	.word	0x200001ec

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f005 fe2a 	bl	800769c <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20020000 	.word	0x20020000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	20000564 	.word	0x20000564
 8001a7c:	20000ac0 	.word	0x20000ac0

08001a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <tmc2209_setup>:
#include "tmc2209.h"


void tmc2209_setup(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_  = serial_baud_rate;
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	601a      	str	r2, [r3, #0]
  stepper_driver->serial_address_    = serial_address;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	711a      	strb	r2, [r3, #4]
  stepper_driver->cool_step_enabled_ = false;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

  tmc2209_initialize(stepper_driver, serial_baud_rate, serial_address);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f952 	bl	8001d76 <tmc2209_initialize>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <map>:

// unidirectional methods

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	1a8a      	subs	r2, r1, r2
 8001af4:	fb03 f202 	mul.w	r2, r3, r2
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1acb      	subs	r3, r1, r3
 8001afe:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4413      	add	r3, r2
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <constrain>:

long constrain(long x, long a, long b)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  if (x < a)
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	da01      	bge.n	8001b2a <constrain+0x18>
  {
    return a;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	e006      	b.n	8001b38 <constrain+0x26>
  }
  else if (b < x)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	da01      	bge.n	8001b36 <constrain+0x24>
  {
    return b;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	e000      	b.n	8001b38 <constrain+0x26>
  }
  else
  {
    return x;
 8001b36:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <set_micro_steps_per_step>:

void set_micro_steps_per_step(tmc2209_stepper_driver_t *stepper_driver, uint16_t microsteps_per_step)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  uint16_t microsteps_per_step_shifted = constrain(microsteps_per_step, MICROSTEPS_PER_STEP_MIN, MICROSTEPS_PER_STEP_MAX);
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ffda 	bl	8001b12 <constrain>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	81fb      	strh	r3, [r7, #14]
  microsteps_per_step_shifted          = microsteps_per_step >> 1;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	81fb      	strh	r3, [r7, #14]
  uint16_t exponent                    = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8001b6c:	e005      	b.n	8001b7a <set_micro_steps_per_step+0x36>
  {
    microsteps_per_step_shifted = microsteps_per_step_shifted >> 1;
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	085b      	lsrs	r3, r3, #1
 8001b72:	81fb      	strh	r3, [r7, #14]
    ++exponent;
 8001b74:	89bb      	ldrh	r3, [r7, #12]
 8001b76:	3301      	adds	r3, #1
 8001b78:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8001b7a:	89fb      	ldrh	r3, [r7, #14]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f6      	bne.n	8001b6e <set_micro_steps_per_step+0x2a>
  }
  set_micro_steps_per_step_power_of_two(stepper_driver, exponent);
 8001b80:	89bb      	ldrh	r3, [r7, #12]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f804 	bl	8001b94 <set_micro_steps_per_step_power_of_two>
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <set_micro_steps_per_step_power_of_two>:

void set_micro_steps_per_step_power_of_two(tmc2209_stepper_driver_t *stepper_driver, uint8_t exponent)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
  switch (exponent)
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	2b07      	cmp	r3, #7
 8001ba4:	d85a      	bhi.n	8001c5c <set_micro_steps_per_step_power_of_two+0xc8>
 8001ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bac <set_micro_steps_per_step_power_of_two+0x18>)
 8001ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bac:	08001bcd 	.word	0x08001bcd
 8001bb0:	08001bdf 	.word	0x08001bdf
 8001bb4:	08001bf1 	.word	0x08001bf1
 8001bb8:	08001c03 	.word	0x08001c03
 8001bbc:	08001c15 	.word	0x08001c15
 8001bc0:	08001c27 	.word	0x08001c27
 8001bc4:	08001c39 	.word	0x08001c39
 8001bc8:	08001c4b 	.word	0x08001c4b
  {
    case 0: {
      stepper_driver->chopper_config_.mres = MRES_001;
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	f361 0303 	bfi	r3, r1, #0, #4
 8001bd8:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001bdc:	e046      	b.n	8001c6c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 1: {
      stepper_driver->chopper_config_.mres = MRES_002;
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001be4:	2107      	movs	r1, #7
 8001be6:	f361 0303 	bfi	r3, r1, #0, #4
 8001bea:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001bee:	e03d      	b.n	8001c6c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 2: {
      stepper_driver->chopper_config_.mres = MRES_004;
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001bf6:	2106      	movs	r1, #6
 8001bf8:	f361 0303 	bfi	r3, r1, #0, #4
 8001bfc:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001c00:	e034      	b.n	8001c6c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 3: {
      stepper_driver->chopper_config_.mres = MRES_008;
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001c08:	2105      	movs	r1, #5
 8001c0a:	f361 0303 	bfi	r3, r1, #0, #4
 8001c0e:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001c12:	e02b      	b.n	8001c6c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 4: {
      stepper_driver->chopper_config_.mres = MRES_016;
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	f361 0303 	bfi	r3, r1, #0, #4
 8001c20:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001c24:	e022      	b.n	8001c6c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 5: {
      stepper_driver->chopper_config_.mres = MRES_032;
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	f361 0303 	bfi	r3, r1, #0, #4
 8001c32:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001c36:	e019      	b.n	8001c6c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 6: {
      stepper_driver->chopper_config_.mres = MRES_064;
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001c3e:	2102      	movs	r1, #2
 8001c40:	f361 0303 	bfi	r3, r1, #0, #4
 8001c44:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001c48:	e010      	b.n	8001c6c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 7: {
      stepper_driver->chopper_config_.mres = MRES_128;
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001c50:	2101      	movs	r1, #1
 8001c52:	f361 0303 	bfi	r3, r1, #0, #4
 8001c56:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001c5a:	e007      	b.n	8001c6c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 8:
    default: {
      stepper_driver->chopper_config_.mres = MRES_256;
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001c62:	f023 030f 	bic.w	r3, r3, #15
 8001c66:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001c6a:	bf00      	nop
    }
  }
  write_stored_chopper_config(stepper_driver);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fad4 	bl	800221a <write_stored_chopper_config>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop

08001c7c <set_all_current_percent_values>:

void set_all_current_percent_values(tmc2209_stepper_driver_t *stepper_driver,
                                    uint8_t                   run_current_percent,
                                    uint8_t                   hold_current_percent,
                                    uint8_t                   hold_delay_percent)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	70fb      	strb	r3, [r7, #3]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	70bb      	strb	r3, [r7, #2]
 8001c92:	4613      	mov	r3, r2
 8001c94:	707b      	strb	r3, [r7, #1]
  uint8_t run_current  = percent_to_current_settings(stepper_driver, run_current_percent);
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fa42 	bl	8002124 <percent_to_current_settings>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_current = percent_to_current_settings(stepper_driver, hold_current_percent);
 8001ca4:	78bb      	ldrb	r3, [r7, #2]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fa3b 	bl	8002124 <percent_to_current_settings>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73bb      	strb	r3, [r7, #14]
  uint8_t hold_delay   = percent_to_hold_delay_setting(stepper_driver, hold_delay_percent);
 8001cb2:	787b      	ldrb	r3, [r7, #1]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fa51 	bl	800215e <percent_to_hold_delay_setting>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	737b      	strb	r3, [r7, #13]

  stepper_driver->driver_current_.irun       = run_current;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	b2d9      	uxtb	r1, r3
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8001cce:	f361 0304 	bfi	r3, r1, #0, #5
 8001cd2:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold      = hold_current;
 8001cd6:	7bbb      	ldrb	r3, [r7, #14]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	b2d9      	uxtb	r1, r3
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8001ce4:	f361 0304 	bfi	r3, r1, #0, #5
 8001ce8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.iholddelay = hold_delay;
 8001cec:	7b7b      	ldrb	r3, [r7, #13]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2d9      	uxtb	r1, r3
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001cfa:	f361 0303 	bfi	r3, r1, #0, #4
 8001cfe:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  write_stored_driver_current(stepper_driver);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fa57 	bl	80021b6 <write_stored_driver_current>
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <enable_automatic_current_scaling>:
  stepper_driver->pwm_config_.freewheel = mode;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_current_scaling(tmc2209_stepper_driver_t *stepper_driver)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fa86 	bl	8002238 <write_stored_pwm_config>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <enable_automatic_gradient_adaptation>:
  stepper_driver->pwm_config_.pwm_freq = pwm_freq;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_gradient_adaptation(tmc2209_stepper_driver_t *stepper_driver)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8001d42:	f043 0308 	orr.w	r3, r3, #8
 8001d46:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa74 	bl	8002238 <write_stored_pwm_config>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <get_input>:

  return input.version;
}

uint32_t get_input(tmc2209_stepper_driver_t *stepper_driver)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  tmc2209_input_t input;
  input.bytes = tmc2209_read(stepper_driver, ADDRESS_IOIN);
 8001d60:	2106      	movs	r1, #6
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fb07 	bl	8002376 <tmc2209_read>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]

  return input.bytes;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <tmc2209_initialize>:
{
  return tmc2209_read(stepper_driver, ADDRESS_MSCNT);
}

void tmc2209_initialize(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_ = serial_baud_rate;
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]

  set_operation_mode_to_serial(stepper_driver, serial_address);
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f813 	bl	8001dba <set_operation_mode_to_serial>
  set_registers_to_default(stepper_driver);
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f83f 	bl	8001e18 <set_registers_to_default>

  minimize_motor_current(stepper_driver);
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f8c2 	bl	8001f24 <minimize_motor_current>
  tmc2209_disable(stepper_driver);
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fa6f 	bl	8002284 <tmc2209_disable>
  enable_automatic_current_scaling(stepper_driver);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7ff ffb2 	bl	8001d10 <enable_automatic_current_scaling>
  enable_automatic_gradient_adaptation(stepper_driver);
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff ffc1 	bl	8001d34 <enable_automatic_gradient_adaptation>
//  disable_automatic_current_scaling(stepper_driver);
//  disable_automatic_gradient_adaptation(stepper_driver);
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <set_operation_mode_to_serial>:

void set_operation_mode_to_serial(tmc2209_stepper_driver_t *stepper_driver, tmc2209_serial_address_t serial_address)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  stepper_driver->serial_address_ = serial_address;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	711a      	strb	r2, [r3, #4]

  stepper_driver->global_config_.bytes            = 0;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	66da      	str	r2, [r3, #108]	@ 0x6c
  stepper_driver->global_config_.i_scale_analog   = 1;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.pdn_disable      = 1;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8001de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dea:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.mstep_reg_select = 1;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8001df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001df8:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.multistep_filt   = 1;
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

  write_stored_global_config(stepper_driver);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f9c4 	bl	8002198 <write_stored_global_config>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <set_registers_to_default>:

void set_registers_to_default(tmc2209_stepper_driver_t *stepper_driver)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.bytes      = 0;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	669a      	str	r2, [r3, #104]	@ 0x68
  stepper_driver->driver_current_.ihold      = IHOLD_DEFAULT;
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	f361 0304 	bfi	r3, r1, #0, #5
 8001e32:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.irun       = IRUN_DEFAULT;
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8001e3c:	f043 031f 	orr.w	r3, r3, #31
 8001e40:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	f361 0303 	bfi	r3, r1, #0, #4
 8001e50:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fa2b 	bl	80022b8 <tmc2209_write>

  stepper_driver->chopper_config_.bytes  = CHOPPER_CONFIG_DEFAULT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2d      	ldr	r2, [pc, #180]	@ (8001f1c <set_registers_to_default+0x104>)
 8001e66:	659a      	str	r2, [r3, #88]	@ 0x58
  stepper_driver->chopper_config_.tbl    = TBL_DEFAULT;
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	f361 33d0 	bfi	r3, r1, #15, #2
 8001e72:	6593      	str	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hend   = HEND_DEFAULT;
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 8001e7a:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 8001e7e:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hstart = HSTART_DEFAULT;
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8001e88:	2105      	movs	r1, #5
 8001e8a:	f361 1306 	bfi	r3, r1, #4, #3
 8001e8e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.toff   = TOFF_DEFAULT;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8001e98:	2103      	movs	r1, #3
 8001e9a:	f361 0303 	bfi	r3, r1, #0, #4
 8001e9e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	216c      	movs	r1, #108	@ 0x6c
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fa04 	bl	80022b8 <tmc2209_write>

  stepper_driver->pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <set_registers_to_default+0x108>)
 8001eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2170      	movs	r1, #112	@ 0x70
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f9fa 	bl	80022b8 <tmc2209_write>

  stepper_driver->cool_config_.bytes = COOLCONF_DEFAULT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	661a      	str	r2, [r3, #96]	@ 0x60
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2142      	movs	r1, #66	@ 0x42
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f9f0 	bl	80022b8 <tmc2209_write>

  tmc2209_write(stepper_driver, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8001ed8:	2214      	movs	r2, #20
 8001eda:	2111      	movs	r1, #17
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f9eb 	bl	80022b8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2113      	movs	r1, #19
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f9e6 	bl	80022b8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2122      	movs	r1, #34	@ 0x22
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f9e1 	bl	80022b8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2114      	movs	r1, #20
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f9dc 	bl	80022b8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2140      	movs	r1, #64	@ 0x40
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f9d7 	bl	80022b8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2142      	movs	r1, #66	@ 0x42
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f9d2 	bl	80022b8 <tmc2209_write>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	10000053 	.word	0x10000053
 8001f20:	c10d0024 	.word	0xc10d0024

08001f24 <minimize_motor_current>:

  return global_config.pdn_disable;
}

void minimize_motor_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.irun  = CURRENT_SETTING_MIN;
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8001f32:	f023 031f 	bic.w	r3, r3, #31
 8001f36:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold = CURRENT_SETTING_MIN;
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8001f40:	f023 031f 	bic.w	r3, r3, #31
 8001f44:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  write_stored_driver_current(stepper_driver);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f934 	bl	80021b6 <write_stored_driver_current>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <reverse_data>:

uint32_t reverse_data(uint32_t data)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
  uint8_t  right_shift;
  uint8_t  left_shift;
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8001f62:	2300      	movs	r3, #0
 8001f64:	72fb      	strb	r3, [r7, #11]
 8001f66:	e016      	b.n	8001f96 <reverse_data+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	f1c3 0303 	rsb	r3, r3, #3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	72bb      	strb	r3, [r7, #10]
    left_shift  = i * BITS_PER_BYTE;
 8001f74:	7afb      	ldrb	r3, [r7, #11]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8001f7a:	7abb      	ldrb	r3, [r7, #10]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	7a7b      	ldrb	r3, [r7, #9]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8001f90:	7afb      	ldrb	r3, [r7, #11]
 8001f92:	3301      	adds	r3, #1
 8001f94:	72fb      	strb	r3, [r7, #11]
 8001f96:	7afb      	ldrb	r3, [r7, #11]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d9e5      	bls.n	8001f68 <reverse_data+0x12>
  }
  return reversed_data;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <calculate_crc_write>:

uint8_t calculate_crc_write(write_read_reply_datagram_t *datagram, uint8_t datagram_size)
{
 8001faa:	b4f0      	push	{r4, r5, r6, r7}
 8001fac:	b088      	sub	sp, #32
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	70f9      	strb	r1, [r7, #3]
  uint8_t crc = 0;
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	77f9      	strb	r1, [r7, #31]
  uint8_t byte;
  uint8_t datagram_bytes[7];
  for (int i = 0; i < datagram_size - 1; i++)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	61b9      	str	r1, [r7, #24]
 8001fbc:	e01c      	b.n	8001ff8 <calculate_crc_write+0x4e>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fc4:	69bc      	ldr	r4, [r7, #24]
 8001fc6:	00e4      	lsls	r4, r4, #3
 8001fc8:	f1c4 0620 	rsb	r6, r4, #32
 8001fcc:	f1a4 0520 	sub.w	r5, r4, #32
 8001fd0:	fa20 f204 	lsr.w	r2, r0, r4
 8001fd4:	fa01 f606 	lsl.w	r6, r1, r6
 8001fd8:	4332      	orrs	r2, r6
 8001fda:	fa21 f505 	lsr.w	r5, r1, r5
 8001fde:	432a      	orrs	r2, r5
 8001fe0:	fa21 f304 	lsr.w	r3, r1, r4
 8001fe4:	b2d4      	uxtb	r4, r2
 8001fe6:	f107 000c 	add.w	r0, r7, #12
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	4401      	add	r1, r0
 8001fee:	4620      	mov	r0, r4
 8001ff0:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < datagram_size - 1; i++)
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	3101      	adds	r1, #1
 8001ff6:	61b9      	str	r1, [r7, #24]
 8001ff8:	78f9      	ldrb	r1, [r7, #3]
 8001ffa:	3901      	subs	r1, #1
 8001ffc:	69b8      	ldr	r0, [r7, #24]
 8001ffe:	4288      	cmp	r0, r1
 8002000:	dbdd      	blt.n	8001fbe <calculate_crc_write+0x14>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
 8002006:	e029      	b.n	800205c <calculate_crc_write+0xb2>
  {
    byte = datagram_bytes[i];
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	3320      	adds	r3, #32
 800200c:	443b      	add	r3, r7
 800200e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002012:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002014:	2300      	movs	r3, #0
 8002016:	75bb      	strb	r3, [r7, #22]
 8002018:	e01a      	b.n	8002050 <calculate_crc_write+0xa6>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 800201a:	7ffb      	ldrb	r3, [r7, #31]
 800201c:	09db      	lsrs	r3, r3, #7
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	7fbb      	ldrb	r3, [r7, #30]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	429a      	cmp	r2, r3
 800202a:	d008      	beq.n	800203e <calculate_crc_write+0x94>
      {
        crc = (crc << 1) ^ 0x07;
 800202c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b25b      	sxtb	r3, r3
 8002034:	f083 0307 	eor.w	r3, r3, #7
 8002038:	b25b      	sxtb	r3, r3
 800203a:	77fb      	strb	r3, [r7, #31]
 800203c:	e002      	b.n	8002044 <calculate_crc_write+0x9a>
      }
      else
      {
        crc = crc << 1;
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
      }
      byte = byte >> 1;
 8002044:	7fbb      	ldrb	r3, [r7, #30]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 800204a:	7dbb      	ldrb	r3, [r7, #22]
 800204c:	3301      	adds	r3, #1
 800204e:	75bb      	strb	r3, [r7, #22]
 8002050:	7dbb      	ldrb	r3, [r7, #22]
 8002052:	2b07      	cmp	r3, #7
 8002054:	d9e1      	bls.n	800201a <calculate_crc_write+0x70>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	3301      	adds	r3, #1
 800205a:	75fb      	strb	r3, [r7, #23]
 800205c:	7dfa      	ldrb	r2, [r7, #23]
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	3b01      	subs	r3, #1
 8002062:	429a      	cmp	r2, r3
 8002064:	dbd0      	blt.n	8002008 <calculate_crc_write+0x5e>
    }
  }
  return crc;
 8002066:	7ffb      	ldrb	r3, [r7, #31]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bcf0      	pop	{r4, r5, r6, r7}
 8002070:	4770      	bx	lr

08002072 <calculate_crc_read>:

uint8_t calculate_crc_read(read_request_datagram_t *datagram, uint8_t datagram_size)
{
 8002072:	b480      	push	{r7}
 8002074:	b087      	sub	sp, #28
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  uint8_t datagram_bytes[4];
  for (int i = 0; i < (datagram_size - 1); i++)
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e00f      	b.n	80020a8 <calculate_crc_read+0x36>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	b2d9      	uxtb	r1, r3
 8002096:	f107 0208 	add.w	r2, r7, #8
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	460a      	mov	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < (datagram_size - 1); i++)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	3301      	adds	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dbea      	blt.n	8002088 <calculate_crc_read+0x16>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e029      	b.n	800210c <calculate_crc_read+0x9a>
  {
    byte = datagram_bytes[i];
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	3318      	adds	r3, #24
 80020bc:	443b      	add	r3, r7
 80020be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020c2:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 80020c4:	2300      	movs	r3, #0
 80020c6:	73bb      	strb	r3, [r7, #14]
 80020c8:	e01a      	b.n	8002100 <calculate_crc_read+0x8e>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	09db      	lsrs	r3, r3, #7
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	7dbb      	ldrb	r3, [r7, #22]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	429a      	cmp	r2, r3
 80020da:	d008      	beq.n	80020ee <calculate_crc_read+0x7c>
      {
        crc = (crc << 1) ^ 0x07;
 80020dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	f083 0307 	eor.w	r3, r3, #7
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	e002      	b.n	80020f4 <calculate_crc_read+0x82>
      }
      else
      {
        crc = crc << 1;
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 80020f4:	7dbb      	ldrb	r3, [r7, #22]
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 80020fa:	7bbb      	ldrb	r3, [r7, #14]
 80020fc:	3301      	adds	r3, #1
 80020fe:	73bb      	strb	r3, [r7, #14]
 8002100:	7bbb      	ldrb	r3, [r7, #14]
 8002102:	2b07      	cmp	r3, #7
 8002104:	d9e1      	bls.n	80020ca <calculate_crc_read+0x58>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3301      	adds	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	3b01      	subs	r3, #1
 8002112:	429a      	cmp	r2, r3
 8002114:	dbd0      	blt.n	80020b8 <calculate_crc_read+0x46>
    }
  }
  return crc;
 8002116:	7dfb      	ldrb	r3, [r7, #23]
}
 8002118:	4618      	mov	r0, r3
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <percent_to_current_settings>:

uint8_t percent_to_current_settings(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af02      	add	r7, sp, #8
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	2264      	movs	r2, #100	@ 0x64
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fceb 	bl	8001b12 <constrain>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
  uint8_t current_setting     = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
 8002140:	7bf8      	ldrb	r0, [r7, #15]
 8002142:	231f      	movs	r3, #31
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	2264      	movs	r2, #100	@ 0x64
 800214a:	2100      	movs	r1, #0
 800214c:	f7ff fcc5 	bl	8001ada <map>
 8002150:	4603      	mov	r3, r0
 8002152:	73bb      	strb	r3, [r7, #14]
  return current_setting;
 8002154:	7bbb      	ldrb	r3, [r7, #14]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <percent_to_hold_delay_setting>:
  uint8_t percent = map(current_setting, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

uint8_t percent_to_hold_delay_setting(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af02      	add	r7, sp, #8
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	2264      	movs	r2, #100	@ 0x64
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fcce 	bl	8001b12 <constrain>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_delay_setting  = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
 800217a:	7bf8      	ldrb	r0, [r7, #15]
 800217c:	230f      	movs	r3, #15
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	2264      	movs	r2, #100	@ 0x64
 8002184:	2100      	movs	r1, #0
 8002186:	f7ff fca8 	bl	8001ada <map>
 800218a:	4603      	mov	r3, r0
 800218c:	73bb      	strb	r3, [r7, #14]
  return hold_delay_setting;
 800218e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <write_stored_global_config>:
  uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

void write_stored_global_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_GCONF, stepper_driver->global_config_.bytes);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021a4:	461a      	mov	r2, r3
 80021a6:	2100      	movs	r1, #0
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f885 	bl	80022b8 <tmc2209_write>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <write_stored_driver_current>:
{
  return tmc2209_read(stepper_driver, ADDRESS_GCONF);
}

void write_stored_driver_current(tmc2209_stepper_driver_t *stepper_driver)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021c2:	461a      	mov	r2, r3
 80021c4:	2110      	movs	r1, #16
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f876 	bl	80022b8 <tmc2209_write>

  if (stepper_driver->driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80021d2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b13      	cmp	r3, #19
 80021da:	d907      	bls.n	80021ec <write_stored_driver_current+0x36>
  {
    stepper_driver->cool_config_.seimin = SEIMIN_UPPER_SETTING;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 80021e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e6:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
 80021ea:	e006      	b.n	80021fa <write_stored_driver_current+0x44>
  }
  else
  {
    stepper_driver->cool_config_.seimin = SEIMIN_LOWER_SETTING;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 80021f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021f6:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  }
  if (stepper_driver->cool_step_enabled_)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <write_stored_driver_current+0x5c>
  {
    tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002208:	461a      	mov	r2, r3
 800220a:	2142      	movs	r1, #66	@ 0x42
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f853 	bl	80022b8 <tmc2209_write>
  }
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <write_stored_chopper_config>:

void write_stored_chopper_config(tmc2209_stepper_driver_t *stepper_driver)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002226:	461a      	mov	r2, r3
 8002228:	216c      	movs	r1, #108	@ 0x6c
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f844 	bl	80022b8 <tmc2209_write>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <write_stored_pwm_config>:
{
  return tmc2209_read(stepper_driver, ADDRESS_CHOPCONF);
}

void write_stored_pwm_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002244:	461a      	mov	r2, r3
 8002246:	2170      	movs	r1, #112	@ 0x70
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f835 	bl	80022b8 <tmc2209_write>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <tmc2209_set_hardware_enable_pin>:

extern UART_HandleTypeDef huart1;


void tmc2209_set_hardware_enable_pin(tmc2209_stepper_driver_t *stepper_driver, uint16_t hardware_enable_pin, GPIO_TypeDef* hardware_enable_gpio_port)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	460b      	mov	r3, r1
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	817b      	strh	r3, [r7, #10]
   stepper_driver->hardware_enable_pin_ = hardware_enable_pin;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	897a      	ldrh	r2, [r7, #10]
 8002268:	80da      	strh	r2, [r3, #6]
   stepper_driver->hardware_enable_gpio_port_ = hardware_enable_gpio_port;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	651a      	str	r2, [r3, #80]	@ 0x50

   HAL_GPIO_WritePin(hardware_enable_gpio_port, hardware_enable_pin, GPIO_PIN_SET);
 8002270:	897b      	ldrh	r3, [r7, #10]
 8002272:	2201      	movs	r2, #1
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f001 fdd2 	bl	8003e20 <HAL_GPIO_WritePin>
 }
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <tmc2209_disable>:
   stepper_driver->chopper_config_.toff = TOFF_DEFAULT;
   write_stored_chopper_config(stepper_driver);
 }

 void tmc2209_disable(tmc2209_stepper_driver_t* stepper_driver)
 {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
   HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_SET);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	88db      	ldrh	r3, [r3, #6]
 8002294:	2201      	movs	r2, #1
 8002296:	4619      	mov	r1, r3
 8002298:	f001 fdc2 	bl	8003e20 <HAL_GPIO_WritePin>
   }
   stepper_driver->chopper_config_.toff = TOFF_DISABLE;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80022a2:	f023 030f 	bic.w	r3, r3, #15
 80022a6:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffb5 	bl	800221a <write_stored_chopper_config>
 }
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <tmc2209_write>:

 void tmc2209_write(tmc2209_stepper_driver_t *stepper_driver, uint8_t register_address, uint32_t data)
 {
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	b08b      	sub	sp, #44	@ 0x2c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	460b      	mov	r3, r1
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	72fb      	strb	r3, [r7, #11]
   write_read_reply_datagram_t write_datagram;
   write_datagram.bytes            = 0;
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
   write_datagram.sync             = SYNC;
 80022d2:	7e3b      	ldrb	r3, [r7, #24]
 80022d4:	2205      	movs	r2, #5
 80022d6:	f362 0303 	bfi	r3, r2, #0, #4
 80022da:	763b      	strb	r3, [r7, #24]
   write_datagram.serial_address   = stepper_driver->serial_address_;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	767b      	strb	r3, [r7, #25]
   write_datagram.register_address = register_address;
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	7ebb      	ldrb	r3, [r7, #26]
 80022ec:	f362 0306 	bfi	r3, r2, #0, #7
 80022f0:	76bb      	strb	r3, [r7, #26]
   write_datagram.rw               = RW_WRITE;
 80022f2:	7ebb      	ldrb	r3, [r7, #26]
 80022f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f8:	76bb      	strb	r3, [r7, #26]
   write_datagram.data             = reverse_data(data);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fe2b 	bl	8001f56 <reverse_data>
 8002300:	4603      	mov	r3, r0
 8002302:	f8c7 301b 	str.w	r3, [r7, #27]
   write_datagram.crc              = calculate_crc_write(&write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	2108      	movs	r1, #8
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fe4c 	bl	8001faa <calculate_crc_write>
 8002312:	4603      	mov	r3, r0
 8002314:	77fb      	strb	r3, [r7, #31]

   uint8_t datagram_bytes[8];
   for (int i = 0; i < 8; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
 800231a:	e01b      	b.n	8002354 <tmc2209_write+0x9c>
   {
     datagram_bytes[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 800231c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002320:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002322:	00c9      	lsls	r1, r1, #3
 8002324:	f1c1 0620 	rsb	r6, r1, #32
 8002328:	f1a1 0020 	sub.w	r0, r1, #32
 800232c:	fa22 f401 	lsr.w	r4, r2, r1
 8002330:	fa03 f606 	lsl.w	r6, r3, r6
 8002334:	4334      	orrs	r4, r6
 8002336:	fa23 f000 	lsr.w	r0, r3, r0
 800233a:	4304      	orrs	r4, r0
 800233c:	fa23 f501 	lsr.w	r5, r3, r1
 8002340:	b2e1      	uxtb	r1, r4
 8002342:	f107 0210 	add.w	r2, r7, #16
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	4413      	add	r3, r2
 800234a:	460a      	mov	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	2b07      	cmp	r3, #7
 8002358:	dde0      	ble.n	800231c <tmc2209_write+0x64>
   }
   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, WRITE_READ_REPLY_DATAGRAM_SIZE, 0XFFFF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f103 0008 	add.w	r0, r3, #8
 8002360:	f107 0110 	add.w	r1, r7, #16
 8002364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002368:	2208      	movs	r2, #8
 800236a:	f004 f84b 	bl	8006404 <HAL_UART_Transmit>
   //   printf("Write Data Request: %s", datagram_bytes);
 }
 800236e:	bf00      	nop
 8002370:	372c      	adds	r7, #44	@ 0x2c
 8002372:	46bd      	mov	sp, r7
 8002374:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002376 <tmc2209_read>:

 uint32_t tmc2209_read(tmc2209_stepper_driver_t * stepper_driver, uint8_t register_address)
 {
 8002376:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800237a:	b090      	sub	sp, #64	@ 0x40
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
   read_request_datagram_t read_request_datagram;
   read_request_datagram.bytes            = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
   read_request_datagram.sync             = SYNC;
 8002388:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800238c:	2205      	movs	r2, #5
 800238e:	f362 0303 	bfi	r3, r2, #0, #4
 8002392:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
   read_request_datagram.serial_address   = stepper_driver->serial_address_;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
   read_request_datagram.register_address = register_address;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80023aa:	f362 0306 	bfi	r3, r2, #0, #7
 80023ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.rw               = RW_READ;
 80023b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80023b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.crc              = calculate_crc_read(&read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 80023be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023c2:	2104      	movs	r1, #4
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fe54 	bl	8002072 <calculate_crc_read>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

   uint8_t datagram_bytes[WRITE_READ_REPLY_DATAGRAM_SIZE];
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023d4:	e00e      	b.n	80023f4 <tmc2209_read+0x7e>
   {
     datagram_bytes[i] = (read_request_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80023d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	b2d9      	uxtb	r1, r3
 80023e2:	f107 0220 	add.w	r2, r7, #32
 80023e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e8:	4413      	add	r3, r2
 80023ea:	460a      	mov	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 80023ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f0:	3301      	adds	r3, #1
 80023f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	dded      	ble.n	80023d6 <tmc2209_read+0x60>
   }

   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, READ_REQUEST_DATAGRAM_SIZE, 0XFFFF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f103 0008 	add.w	r0, r3, #8
 8002400:	f107 0120 	add.w	r1, r7, #32
 8002404:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002408:	2204      	movs	r2, #4
 800240a:	f003 fffb 	bl	8006404 <HAL_UART_Transmit>
//   printf("Write Data Request: %s", datagram_bytes);


   uint8_t                     byte_count = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
   write_read_reply_datagram_t read_reply_datagram;
   read_reply_datagram.bytes = 0;
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9c7 2306 	strd	r2, r3, [r7, #24]
//   {
//     HAL_UART_Receive(&huart1, (uint8_t *)&byte, 1, 100);
//     datagram_bytes[i] = byte;
//   }
   uint8_t uart_reply[WRITE_READ_REPLY_DATAGRAM_SIZE + 1];
   HAL_UART_Receive(&stepper_driver->uart_, uart_reply, 9, 100);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f103 0008 	add.w	r0, r3, #8
 8002426:	f107 010c 	add.w	r1, r7, #12
 800242a:	2364      	movs	r3, #100	@ 0x64
 800242c:	2209      	movs	r2, #9
 800242e:	f004 f874 	bl	800651a <HAL_UART_Receive>
   uint8_t* datagram = uart_reply + sizeof(uint8_t);
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	3301      	adds	r3, #1
 8002438:	637b      	str	r3, [r7, #52]	@ 0x34

   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 800243a:	2300      	movs	r3, #0
 800243c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002440:	e029      	b.n	8002496 <tmc2209_read+0x120>
   {
     read_reply_datagram.bytes |= ((uint64_t)datagram[i] << (byte_count++ * BITS_PER_BYTE));
 8002442:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2200      	movs	r2, #0
 8002450:	4698      	mov	r8, r3
 8002452:	4691      	mov	r9, r2
 8002454:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	f1a3 0120 	sub.w	r1, r3, #32
 8002464:	f1c3 0220 	rsb	r2, r3, #32
 8002468:	fa09 f503 	lsl.w	r5, r9, r3
 800246c:	fa08 f101 	lsl.w	r1, r8, r1
 8002470:	430d      	orrs	r5, r1
 8002472:	fa28 f202 	lsr.w	r2, r8, r2
 8002476:	4315      	orrs	r5, r2
 8002478:	fa08 f403 	lsl.w	r4, r8, r3
 800247c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002480:	ea44 0a02 	orr.w	sl, r4, r2
 8002484:	ea45 0b03 	orr.w	fp, r5, r3
 8002488:	e9c7 ab06 	strd	sl, fp, [r7, #24]
   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 800248c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002490:	3301      	adds	r3, #1
 8002492:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002496:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800249a:	2b07      	cmp	r3, #7
 800249c:	d9d1      	bls.n	8002442 <tmc2209_read+0xcc>
   }
   uint32_t reversed_data = reverse_data(read_reply_datagram.data);
 800249e:	f8d7 301b 	ldr.w	r3, [r7, #27]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fd57 	bl	8001f56 <reverse_data>
 80024a8:	6338      	str	r0, [r7, #48]	@ 0x30
   uint8_t  crc           = calculate_crc_write(&read_reply_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	2108      	movs	r1, #8
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fd7a 	bl	8001faa <calculate_crc_write>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   if (crc != read_reply_datagram.crc)
   {
   }
   return reversed_data;
 80024bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 }
 80024be:	4618      	mov	r0, r3
 80024c0:	3740      	adds	r7, #64	@ 0x40
 80024c2:	46bd      	mov	sp, r7
 80024c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080024c8 <writeDisplay>:
 * To write to external display with only one parameter, the string.
 * Also wraps the text around the edges if string size is bigger than the width of the monitor
 */

void writeDisplay(char* str)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	@ 0x30
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	6078      	str	r0, [r7, #4]
	ssd1306_Init();
 80024d0:	f000 f8b8 	bl	8002644 <ssd1306_Init>
	SSD1306_Font_t font = Font_11x18; //Set font size
 80024d4:	4a3d      	ldr	r2, [pc, #244]	@ (80025cc <writeDisplay+0x104>)
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	ca07      	ldmia	r2, {r0, r1, r2}
 80024dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t y = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int8_t str_length = strlen(str);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fd fe8c 	bl	8000204 <strlen>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t display_length = 128;
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	77fb      	strb	r3, [r7, #31]
	uint8_t display_height = 64;
 80024f6:	2340      	movs	r3, #64	@ 0x40
 80024f8:	77bb      	strb	r3, [r7, #30]
	uint8_t max_char = (display_length-2)/font.width; //Calculate maximum number of characters that fit in one line
 80024fa:	7ffb      	ldrb	r3, [r7, #31]
 80024fc:	3b02      	subs	r3, #2
 80024fe:	7b3a      	ldrb	r2, [r7, #12]
 8002500:	fb93 f3f2 	sdiv	r3, r3, r2
 8002504:	777b      	strb	r3, [r7, #29]
	uint8_t max_lines = display_height/font.height;
 8002506:	7b7b      	ldrb	r3, [r7, #13]
 8002508:	7fba      	ldrb	r2, [r7, #30]
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	773b      	strb	r3, [r7, #28]
	uint8_t line = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	ssd1306_Fill(Black);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f8fe 	bl	8002718 <ssd1306_Fill>

	while(str_length > 0 && line < max_lines)
 800251c:	e047      	b.n	80025ae <writeDisplay+0xe6>
	{
		ssd1306_SetCursor(2, y); //Set cursor to start of the line
 800251e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002522:	4619      	mov	r1, r3
 8002524:	2002      	movs	r0, #2
 8002526:	f000 fa43 	bl	80029b0 <ssd1306_SetCursor>

		char* sub_str = malloc(max_char + 1); //Variable needed to store the string of the current line
 800252a:	7f7b      	ldrb	r3, [r7, #29]
 800252c:	3301      	adds	r3, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f004 ffde 	bl	80074f0 <malloc>
 8002534:	4603      	mov	r3, r0
 8002536:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < max_char; i++)
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	e011      	b.n	8002562 <writeDisplay+0x9a>
		{
			sub_str[i] = str[i + max_char * line];
 800253e:	7f7b      	ldrb	r3, [r7, #29]
 8002540:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002544:	fb03 f202 	mul.w	r2, r3, r2
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	4413      	add	r3, r2
 800254c:	461a      	mov	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	441a      	add	r2, r3
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	69b9      	ldr	r1, [r7, #24]
 8002556:	440b      	add	r3, r1
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < max_char; i++)
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	3301      	adds	r3, #1
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	7f7b      	ldrb	r3, [r7, #29]
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	429a      	cmp	r2, r3
 8002568:	dbe9      	blt.n	800253e <writeDisplay+0x76>
		}
		sub_str[max_char] = '\0';	//At the end of the string, add a null terminator
 800256a:	7f7b      	ldrb	r3, [r7, #29]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(sub_str, font, White); //Write the current line to the buffer
 8002574:	2301      	movs	r3, #1
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257e:	69b8      	ldr	r0, [r7, #24]
 8002580:	f000 f9f0 	bl	8002964 <ssd1306_WriteString>
		str_length = str_length - max_char;
 8002584:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002588:	7f7b      	ldrb	r3, [r7, #29]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		y += font.height;
 8002592:	7b7a      	ldrb	r2, [r7, #13]
 8002594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002598:	4413      	add	r3, r2
 800259a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		line++;
 800259e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80025a2:	3301      	adds	r3, #1
 80025a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		free(sub_str);
 80025a8:	69b8      	ldr	r0, [r7, #24]
 80025aa:	f004 ffa9 	bl	8007500 <free>
	while(str_length > 0 && line < max_lines)
 80025ae:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	dd04      	ble.n	80025c0 <writeDisplay+0xf8>
 80025b6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80025ba:	7f3b      	ldrb	r3, [r7, #28]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3ae      	bcc.n	800251e <writeDisplay+0x56>
	}
	ssd1306_UpdateScreen();
 80025c0:	f000 f8c2 	bl	8002748 <ssd1306_UpdateScreen>
}
 80025c4:	bf00      	nop
 80025c6:	3728      	adds	r7, #40	@ 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	0800853c 	.word	0x0800853c

080025d0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	9302      	str	r3, [sp, #8]
 80025f0:	2301      	movs	r3, #1
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	1dfb      	adds	r3, r7, #7
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2301      	movs	r3, #1
 80025fa:	2200      	movs	r2, #0
 80025fc:	2178      	movs	r1, #120	@ 0x78
 80025fe:	4803      	ldr	r0, [pc, #12]	@ (800260c <ssd1306_WriteCommand+0x2c>)
 8002600:	f001 fd9e 	bl	8004140 <HAL_I2C_Mem_Write>
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000078 	.word	0x20000078

08002610 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af04      	add	r7, sp, #16
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	9202      	str	r2, [sp, #8]
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2301      	movs	r3, #1
 800262c:	2240      	movs	r2, #64	@ 0x40
 800262e:	2178      	movs	r1, #120	@ 0x78
 8002630:	4803      	ldr	r0, [pc, #12]	@ (8002640 <ssd1306_WriteData+0x30>)
 8002632:	f001 fd85 	bl	8004140 <HAL_I2C_Mem_Write>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000078 	.word	0x20000078

08002644 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002648:	f7ff ffc2 	bl	80025d0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800264c:	2064      	movs	r0, #100	@ 0x64
 800264e:	f001 f88b 	bl	8003768 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002652:	2000      	movs	r0, #0
 8002654:	f000 f9d8 	bl	8002a08 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002658:	2020      	movs	r0, #32
 800265a:	f7ff ffc1 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff ffbe 	bl	80025e0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002664:	20b0      	movs	r0, #176	@ 0xb0
 8002666:	f7ff ffbb 	bl	80025e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800266a:	20c8      	movs	r0, #200	@ 0xc8
 800266c:	f7ff ffb8 	bl	80025e0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002670:	2000      	movs	r0, #0
 8002672:	f7ff ffb5 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002676:	2010      	movs	r0, #16
 8002678:	f7ff ffb2 	bl	80025e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800267c:	2040      	movs	r0, #64	@ 0x40
 800267e:	f7ff ffaf 	bl	80025e0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002682:	20ff      	movs	r0, #255	@ 0xff
 8002684:	f000 f9ac 	bl	80029e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002688:	20a1      	movs	r0, #161	@ 0xa1
 800268a:	f7ff ffa9 	bl	80025e0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800268e:	20a6      	movs	r0, #166	@ 0xa6
 8002690:	f7ff ffa6 	bl	80025e0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002694:	20a8      	movs	r0, #168	@ 0xa8
 8002696:	f7ff ffa3 	bl	80025e0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800269a:	203f      	movs	r0, #63	@ 0x3f
 800269c:	f7ff ffa0 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80026a0:	20a4      	movs	r0, #164	@ 0xa4
 80026a2:	f7ff ff9d 	bl	80025e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80026a6:	20d3      	movs	r0, #211	@ 0xd3
 80026a8:	f7ff ff9a 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff ff97 	bl	80025e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80026b2:	20d5      	movs	r0, #213	@ 0xd5
 80026b4:	f7ff ff94 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80026b8:	20f0      	movs	r0, #240	@ 0xf0
 80026ba:	f7ff ff91 	bl	80025e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80026be:	20d9      	movs	r0, #217	@ 0xd9
 80026c0:	f7ff ff8e 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80026c4:	2022      	movs	r0, #34	@ 0x22
 80026c6:	f7ff ff8b 	bl	80025e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80026ca:	20da      	movs	r0, #218	@ 0xda
 80026cc:	f7ff ff88 	bl	80025e0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80026d0:	2012      	movs	r0, #18
 80026d2:	f7ff ff85 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80026d6:	20db      	movs	r0, #219	@ 0xdb
 80026d8:	f7ff ff82 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80026dc:	2020      	movs	r0, #32
 80026de:	f7ff ff7f 	bl	80025e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80026e2:	208d      	movs	r0, #141	@ 0x8d
 80026e4:	f7ff ff7c 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80026e8:	2014      	movs	r0, #20
 80026ea:	f7ff ff79 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80026ee:	2001      	movs	r0, #1
 80026f0:	f000 f98a 	bl	8002a08 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f000 f80f 	bl	8002718 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80026fa:	f000 f825 	bl	8002748 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80026fe:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <ssd1306_Init+0xd0>)
 8002700:	2200      	movs	r2, #0
 8002702:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <ssd1306_Init+0xd0>)
 8002706:	2200      	movs	r2, #0
 8002708:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800270a:	4b02      	ldr	r3, [pc, #8]	@ (8002714 <ssd1306_Init+0xd0>)
 800270c:	2201      	movs	r2, #1
 800270e:	711a      	strb	r2, [r3, #4]
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000968 	.word	0x20000968

08002718 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <ssd1306_Fill+0x14>
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <ssd1306_Fill+0x16>
 800272c:	23ff      	movs	r3, #255	@ 0xff
 800272e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002732:	4619      	mov	r1, r3
 8002734:	4803      	ldr	r0, [pc, #12]	@ (8002744 <ssd1306_Fill+0x2c>)
 8002736:	f004 ff99 	bl	800766c <memset>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000568 	.word	0x20000568

08002748 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800274e:	2300      	movs	r3, #0
 8002750:	71fb      	strb	r3, [r7, #7]
 8002752:	e016      	b.n	8002782 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	3b50      	subs	r3, #80	@ 0x50
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff40 	bl	80025e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002760:	2000      	movs	r0, #0
 8002762:	f7ff ff3d 	bl	80025e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002766:	2010      	movs	r0, #16
 8002768:	f7ff ff3a 	bl	80025e0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	01db      	lsls	r3, r3, #7
 8002770:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <ssd1306_UpdateScreen+0x4c>)
 8002772:	4413      	add	r3, r2
 8002774:	2180      	movs	r1, #128	@ 0x80
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff4a 	bl	8002610 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	3301      	adds	r3, #1
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2b07      	cmp	r3, #7
 8002786:	d9e5      	bls.n	8002754 <ssd1306_UpdateScreen+0xc>
    }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000568 	.word	0x20000568

08002798 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
 80027a2:	460b      	mov	r3, r1
 80027a4:	71bb      	strb	r3, [r7, #6]
 80027a6:	4613      	mov	r3, r2
 80027a8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db3d      	blt.n	800282e <ssd1306_DrawPixel+0x96>
 80027b2:	79bb      	ldrb	r3, [r7, #6]
 80027b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80027b6:	d83a      	bhi.n	800282e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80027b8:	797b      	ldrb	r3, [r7, #5]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d11a      	bne.n	80027f4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027be:	79fa      	ldrb	r2, [r7, #7]
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	08db      	lsrs	r3, r3, #3
 80027c4:	b2d8      	uxtb	r0, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	01db      	lsls	r3, r3, #7
 80027ca:	4413      	add	r3, r2
 80027cc:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <ssd1306_DrawPixel+0xa4>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	b25a      	sxtb	r2, r3
 80027d2:	79bb      	ldrb	r3, [r7, #6]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b259      	sxtb	r1, r3
 80027e4:	79fa      	ldrb	r2, [r7, #7]
 80027e6:	4603      	mov	r3, r0
 80027e8:	01db      	lsls	r3, r3, #7
 80027ea:	4413      	add	r3, r2
 80027ec:	b2c9      	uxtb	r1, r1
 80027ee:	4a13      	ldr	r2, [pc, #76]	@ (800283c <ssd1306_DrawPixel+0xa4>)
 80027f0:	54d1      	strb	r1, [r2, r3]
 80027f2:	e01d      	b.n	8002830 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027f4:	79fa      	ldrb	r2, [r7, #7]
 80027f6:	79bb      	ldrb	r3, [r7, #6]
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	b2d8      	uxtb	r0, r3
 80027fc:	4603      	mov	r3, r0
 80027fe:	01db      	lsls	r3, r3, #7
 8002800:	4413      	add	r3, r2
 8002802:	4a0e      	ldr	r2, [pc, #56]	@ (800283c <ssd1306_DrawPixel+0xa4>)
 8002804:	5cd3      	ldrb	r3, [r2, r3]
 8002806:	b25a      	sxtb	r2, r3
 8002808:	79bb      	ldrb	r3, [r7, #6]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	b25b      	sxtb	r3, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	b25b      	sxtb	r3, r3
 800281a:	4013      	ands	r3, r2
 800281c:	b259      	sxtb	r1, r3
 800281e:	79fa      	ldrb	r2, [r7, #7]
 8002820:	4603      	mov	r3, r0
 8002822:	01db      	lsls	r3, r3, #7
 8002824:	4413      	add	r3, r2
 8002826:	b2c9      	uxtb	r1, r1
 8002828:	4a04      	ldr	r2, [pc, #16]	@ (800283c <ssd1306_DrawPixel+0xa4>)
 800282a:	54d1      	strb	r1, [r2, r3]
 800282c:	e000      	b.n	8002830 <ssd1306_DrawPixel+0x98>
        return;
 800282e:	bf00      	nop
    }
}
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000568 	.word	0x20000568

08002840 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4604      	mov	r4, r0
 8002848:	4638      	mov	r0, r7
 800284a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800284e:	4623      	mov	r3, r4
 8002850:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b1f      	cmp	r3, #31
 8002856:	d902      	bls.n	800285e <ssd1306_WriteChar+0x1e>
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b7e      	cmp	r3, #126	@ 0x7e
 800285c:	d901      	bls.n	8002862 <ssd1306_WriteChar+0x22>
        return 0;
 800285e:	2300      	movs	r3, #0
 8002860:	e079      	b.n	8002956 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <ssd1306_WriteChar+0x34>
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	3b20      	subs	r3, #32
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	e000      	b.n	8002876 <ssd1306_WriteChar+0x36>
 8002874:	783b      	ldrb	r3, [r7, #0]
 8002876:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002878:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <ssd1306_WriteChar+0x120>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	4413      	add	r3, r2
 8002882:	2b80      	cmp	r3, #128	@ 0x80
 8002884:	dc06      	bgt.n	8002894 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002886:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <ssd1306_WriteChar+0x120>)
 8002888:	885b      	ldrh	r3, [r3, #2]
 800288a:	461a      	mov	r2, r3
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002890:	2b40      	cmp	r3, #64	@ 0x40
 8002892:	dd01      	ble.n	8002898 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002894:	2300      	movs	r3, #0
 8002896:	e05e      	b.n	8002956 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e04d      	b.n	800293a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	3b20      	subs	r3, #32
 80028a4:	7879      	ldrb	r1, [r7, #1]
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4619      	mov	r1, r3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	440b      	add	r3, r1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e036      	b.n	800292c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d013      	beq.n	80028f6 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028ce:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <ssd1306_WriteChar+0x120>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4413      	add	r3, r2
 80028da:	b2d8      	uxtb	r0, r3
 80028dc:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <ssd1306_WriteChar+0x120>)
 80028de:	885b      	ldrh	r3, [r3, #2]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7ff ff52 	bl	8002798 <ssd1306_DrawPixel>
 80028f4:	e017      	b.n	8002926 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <ssd1306_WriteChar+0x120>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4413      	add	r3, r2
 8002902:	b2d8      	uxtb	r0, r3
 8002904:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <ssd1306_WriteChar+0x120>)
 8002906:	885b      	ldrh	r3, [r3, #2]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4413      	add	r3, r2
 8002910:	b2d9      	uxtb	r1, r3
 8002912:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	f7ff ff39 	bl	8002798 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	3301      	adds	r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	429a      	cmp	r2, r3
 8002932:	d3c4      	bcc.n	80028be <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3301      	adds	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	787b      	ldrb	r3, [r7, #1]
 800293c:	461a      	mov	r2, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4293      	cmp	r3, r2
 8002942:	d3ac      	bcc.n	800289e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002944:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <ssd1306_WriteChar+0x120>)
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	b29b      	uxth	r3, r3
 800294c:	4413      	add	r3, r2
 800294e:	b29a      	uxth	r2, r3
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <ssd1306_WriteChar+0x120>)
 8002952:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd90      	pop	{r4, r7, pc}
 800295e:	bf00      	nop
 8002960:	20000968 	.word	0x20000968

08002964 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	4638      	mov	r0, r7
 800296e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002972:	e013      	b.n	800299c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	7818      	ldrb	r0, [r3, #0]
 8002978:	7e3b      	ldrb	r3, [r7, #24]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	463b      	mov	r3, r7
 800297e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002980:	f7ff ff5e 	bl	8002840 <ssd1306_WriteChar>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d002      	beq.n	8002996 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	e008      	b.n	80029a8 <ssd1306_WriteString+0x44>
        }
        str++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3301      	adds	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e7      	bne.n	8002974 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	781b      	ldrb	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	460a      	mov	r2, r1
 80029ba:	71fb      	strb	r3, [r7, #7]
 80029bc:	4613      	mov	r3, r2
 80029be:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <ssd1306_SetCursor+0x2c>)
 80029c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80029c8:	79bb      	ldrb	r3, [r7, #6]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <ssd1306_SetCursor+0x2c>)
 80029ce:	805a      	strh	r2, [r3, #2]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	20000968 	.word	0x20000968

080029e0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80029ea:	2381      	movs	r3, #129	@ 0x81
 80029ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fdf5 	bl	80025e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fdf1 	bl	80025e0 <ssd1306_WriteCommand>
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002a18:	23af      	movs	r3, #175	@ 0xaf
 8002a1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <ssd1306_SetDisplayOn+0x38>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	715a      	strb	r2, [r3, #5]
 8002a22:	e004      	b.n	8002a2e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002a24:	23ae      	movs	r3, #174	@ 0xae
 8002a26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <ssd1306_SetDisplayOn+0x38>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fdd5 	bl	80025e0 <ssd1306_WriteCommand>
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000968 	.word	0x20000968

08002a44 <stopMotorMovement>:

	return error;
}

void stopMotorMovement(motor_t * motor)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3348      	adds	r3, #72	@ 0x48
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 fd9e 	bl	8005594 <HAL_TIM_OC_Stop_IT>
	motor->active_movement_flag = 0;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	731a      	strb	r2, [r3, #12]
	initializeDefaults(motor);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fda8 	bl	80035b4 <initializeDefaults>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <trapezMove>:
 *       Accel: v = sqrt(2 * a_acc * s)
 *       Const: v = v_max
 *       Decel: v = sqrt(2 * a_dec * s_remaining)
 */
static inline void trapezMove(motion_t* mt)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	if (mt->step >= 0 && mt->step < mt->acc_steps)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db1b      	blt.n	8002ab4 <trapezMove+0x48>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	da15      	bge.n	8002ab4 <trapezMove+0x48>
	{
		mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6a12      	ldr	r2, [r2, #32]
 8002a90:	3201      	adds	r2, #1
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa4:	f004 fd02 	bl	80074ac <sqrtf>
 8002aa8:	eef0 7a40 	vmov.f32	s15, s0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	edc3 7a03 	vstr	s15, [r3, #12]
 8002ab2:	e043      	b.n	8002b3c <trapezMove+0xd0>
		// motion.v = acc_ramp[motion.step]
	}
	else if (mt->const_steps != 0 && mt->step >= mt->acc_steps && mt->step < (mt->total_steps - mt->dec_steps))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d018      	beq.n	8002aee <trapezMove+0x82>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	db12      	blt.n	8002aee <trapezMove+0x82>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1a      	ldr	r2, [r3, #32]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6919      	ldr	r1, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	1acb      	subs	r3, r1, r3
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	da09      	bge.n	8002aee <trapezMove+0x82>
		mt->v = mt->V_MAX;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edc3 7a03 	vstr	s15, [r3, #12]
 8002aec:	e026      	b.n	8002b3c <trapezMove+0xd0>
	else if (mt->step >= (mt->total_steps - mt->dec_steps) && mt->step < mt->total_steps)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6919      	ldr	r1, [r3, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	1acb      	subs	r3, r1, r3
 8002afc:	429a      	cmp	r2, r3
 8002afe:	db1d      	blt.n	8002b3c <trapezMove+0xd0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	da17      	bge.n	8002b3c <trapezMove+0xd0>
	{
		mt->v = sqrtf(2 * mt->DEC_MAX * (mt->total_steps - mt->step));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6911      	ldr	r1, [r2, #16]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6a12      	ldr	r2, [r2, #32]
 8002b18:	1a8a      	subs	r2, r1, r2
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b28:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2c:	f004 fcbe 	bl	80074ac <sqrtf>
 8002b30:	eef0 7a40 	vmov.f32	s15, s0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	edc3 7a03 	vstr	s15, [r3, #12]
		// motion.v = acc_ramp[motion.total_steps - motion.step]
	}
}
 8002b3a:	e7ff      	b.n	8002b3c <trapezMove+0xd0>
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_TIM_OC_DelayElapsedCallback>:
 * Every other motion.cycle, as motion.step only triggers on rising edge,
 * the velocity and the compare value is changed depending on current state of velocity ramp.
 *
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	int8_t index;
	motor_t* motor;

	//To know which timer and thus which motor caused the interrupt
	if (htim->Instance == motors[0]->motion.motor_control_timer.Instance){ index = 0; }
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b62      	ldr	r3, [pc, #392]	@ (8002cdc <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d102      	bne.n	8002b60 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e026      	b.n	8002bae <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[1]->motion.motor_control_timer.Instance){ index = 1; }
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b5d      	ldr	r3, [pc, #372]	@ (8002cdc <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d102      	bne.n	8002b74 <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	77fb      	strb	r3, [r7, #31]
 8002b72:	e01c      	b.n	8002bae <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[2]->motion.motor_control_timer.Instance){ index = 2; }
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b58      	ldr	r3, [pc, #352]	@ (8002cdc <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d102      	bne.n	8002b88 <HAL_TIM_OC_DelayElapsedCallback+0x44>
 8002b82:	2302      	movs	r3, #2
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	e012      	b.n	8002bae <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[3]->motion.motor_control_timer.Instance){ index = 3; }
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b53      	ldr	r3, [pc, #332]	@ (8002cdc <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d102      	bne.n	8002b9c <HAL_TIM_OC_DelayElapsedCallback+0x58>
 8002b96:	2303      	movs	r3, #3
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	e008      	b.n	8002bae <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[4]->motion.motor_control_timer.Instance){ index = 4; }
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b4e      	ldr	r3, [pc, #312]	@ (8002cdc <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 8002baa:	2304      	movs	r3, #4
 8002bac:	77fb      	strb	r3, [r7, #31]

	motor = motors[index];
 8002bae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8002cdc <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	61bb      	str	r3, [r7, #24]
	motion_t* mt = &motor->motion;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3310      	adds	r3, #16
 8002bbe:	617b      	str	r3, [r7, #20]

	//Stop timer and movement if the robot reaches its destination
	if (mt->motion_mode == MOTION_TRAPEZ && mt->step >= mt->total_steps)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_TIM_OC_DelayElapsedCallback+0x9a>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	db03      	blt.n	8002bde <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	{
		stopMotorMovement(motor);
 8002bd6:	69b8      	ldr	r0, [r7, #24]
 8002bd8:	f7ff ff34 	bl	8002a44 <stopMotorMovement>
		return;
 8002bdc:	e07a      	b.n	8002cd4 <HAL_TIM_OC_DelayElapsedCallback+0x190>
	}

	if (mt->cycle % 2 == 0) //Change velocity only every other cycle because step only triggers on rising edge
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d14d      	bne.n	8002c86 <HAL_TIM_OC_DelayElapsedCallback+0x142>
	{
		switch(mt->motion_mode)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xbc>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db31      	blt.n	8002c5c <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d82e      	bhi.n	8002c5c <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8002bfe:	e003      	b.n	8002c08 <HAL_TIM_OC_DelayElapsedCallback+0xc4>
		{
		case MOTION_TRAPEZ:
			trapezMove(mt);
 8002c00:	6978      	ldr	r0, [r7, #20]
 8002c02:	f7ff ff33 	bl	8002a6c <trapezMove>
			break;
 8002c06:	e029      	b.n	8002c5c <HAL_TIM_OC_DelayElapsedCallback+0x118>
		case MOTION_HOME:	//Since we don't know the exact distance to move in these 2 following cases, there's no deceleration
		case MOTION_GRIP:
			if (mt->step >= 0 && mt->step < mt->acc_steps)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db1b      	blt.n	8002c48 <HAL_TIM_OC_DelayElapsedCallback+0x104>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	6a1a      	ldr	r2, [r3, #32]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	da15      	bge.n	8002c48 <HAL_TIM_OC_DelayElapsedCallback+0x104>
				mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	6a12      	ldr	r2, [r2, #32]
 8002c24:	3201      	adds	r2, #1
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c34:	eeb0 0a67 	vmov.f32	s0, s15
 8002c38:	f004 fc38 	bl	80074ac <sqrtf>
 8002c3c:	eef0 7a40 	vmov.f32	s15, s0
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	edc3 7a03 	vstr	s15, [r3, #12]
			else
				mt->v = mt->V_MAX;
			break;
 8002c46:	e008      	b.n	8002c5a <HAL_TIM_OC_DelayElapsedCallback+0x116>
				mt->v = mt->V_MAX;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8002c5a:	bf00      	nop
		}
		mt->step++;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	621a      	str	r2, [r3, #32]
		if (mt->inverse_motor_direction)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_TIM_OC_DelayElapsedCallback+0x138>
			mt->position--;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	1e5a      	subs	r2, r3, #1
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c7a:	e004      	b.n	8002c86 <HAL_TIM_OC_DelayElapsedCallback+0x142>
		else
			mt->position++;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	629a      	str	r2, [r3, #40]	@ 0x28

	}

	mt->cycle++;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_GPIO_TogglePin(motor->gpio_ports.step, motor->gpio_pins.step);
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f001 f8d7 	bl	8003e52 <HAL_GPIO_TogglePin>
	 *	But this is not the answer since the time has to be converted into timer ticks.
	 *	The timer runs at 2 MHz so we need to divide our current period duration by 1 / 2000000 s or 0.5 µs.
	 *	-> delay in ticks = 1/(2*v)/0.0000005 = 2000000/(2*v)
	 */

	int32_t delay = 2000000 / (2 * mt->v);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002caa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002cae:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002ce0 <HAL_TIM_OC_DelayElapsedCallback+0x19c>
 8002cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cba:	ee17 3a90 	vmov	r3, s15
 8002cbe:	613b      	str	r3, [r7, #16]
	//Add delay to current compare value in register
	int32_t total_delay = __HAL_TIM_GET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1) + delay;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1, total_delay);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000054c 	.word	0x2000054c
 8002ce0:	49f42400 	.word	0x49f42400

08002ce4 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupt service routine for timer 9, which periodically invokes status checks.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e024      	b.n	8002d3c <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if (htim->Instance == motors[i]->status_check_timer.Instance)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4915      	ldr	r1, [pc, #84]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d117      	bne.n	8002d36 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if (motors[i]->active_movement_flag)
 8002d06:	4a11      	ldr	r2, [pc, #68]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	7b1b      	ldrb	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_TIM_PeriodElapsedCallback+0x40>
				motors[i]->status_flag = 1;
 8002d14:	4a0d      	ldr	r2, [pc, #52]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
			else
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);

			break;
 8002d22:	e00f      	b.n	8002d44 <HAL_TIM_PeriodElapsedCallback+0x60>
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);
 8002d24:	4a09      	ldr	r2, [pc, #36]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2c:	3394      	adds	r3, #148	@ 0x94
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fba7 	bl	8005482 <HAL_TIM_Base_Stop_IT>
			break;
 8002d34:	e006      	b.n	8002d44 <HAL_TIM_PeriodElapsedCallback+0x60>
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	ddd7      	ble.n	8002cf2 <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
//	writeDisplay("HAHA");
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000054c 	.word	0x2000054c

08002d50 <initAllMotors>:
void initMotor3(uart_mode_t UART_MODE);
void initMotor4(uart_mode_t UART_MODE);
void initMotor5(uart_mode_t UART_MODE);

void initAllMotors(uart_mode_t UART_MODE)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
	initMotor1(UART_MODE);
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 f815 	bl	8002d8c <initMotor1>
	initMotor2(UART_MODE);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f8e3 	bl	8002f30 <initMotor2>
	initMotor3(UART_MODE);
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f9af 	bl	80030d0 <initMotor3>
	initMotor4(UART_MODE);
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fa87 	bl	8003288 <initMotor4>
	initMotor5(UART_MODE);
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fb51 	bl	8003424 <initMotor5>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <initMotor1>:

void initMotor1(uart_mode_t UART_MODE)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
	motor_t * motor1 = motors[0];
 8002d96:	4b5d      	ldr	r3, [pc, #372]	@ (8002f0c <initMotor1+0x180>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver1 = motor1->driver;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8002da2:	60bb      	str	r3, [r7, #8]

	motor1->gpio_pins.mot_en 	= MOT_EN_1_Pin;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002daa:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor1->gpio_ports.mot_en 	= MOT_EN_1_GPIO_Port;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a57      	ldr	r2, [pc, #348]	@ (8002f10 <initMotor1+0x184>)
 8002db2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver1, motor1->gpio_pins.mot_en, motor1->gpio_ports.mot_en);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68b8      	ldr	r0, [r7, #8]
 8002dc6:	f7ff fa46 	bl	8002256 <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver1);
 8002dca:	68b8      	ldr	r0, [r7, #8]
 8002dcc:	f7ff fa5a 	bl	8002284 <tmc2209_disable>

	initializeDefaults(motor1);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fbef 	bl	80035b4 <initializeDefaults>
	motor1->ID = '1';
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2231      	movs	r2, #49	@ 0x31
 8002dda:	701a      	strb	r2, [r3, #0]

	motor1->gear_ratio = GEAR_RATIO_M_1;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a4d      	ldr	r2, [pc, #308]	@ (8002f14 <initMotor1+0x188>)
 8002de0:	605a      	str	r2, [r3, #4]
	motor1->microsteps = MICROSTEPS_M_1;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	609a      	str	r2, [r3, #8]
	motor1->motion.V_MAX 	= V_MAX_M_1;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8002dee:	611a      	str	r2, [r3, #16]
	motor1->motion.ACC_MAX = ACC_MAX_M_1;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002df6:	615a      	str	r2, [r3, #20]
	motor1->motion.DEC_MAX = DEC_MAX_M_1;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002dfe:	619a      	str	r2, [r3, #24]

	motor1->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_1;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	221e      	movs	r2, #30
 8002e04:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor1->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_1;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2246      	movs	r2, #70	@ 0x46
 8002e0c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor1->gpio_pins.step 		= STEP_1_Pin;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e16:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor1->gpio_pins.dir 		= DIR_1_Pin;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e20:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
//	motor1->gpio_pins.diag 		= DIAG_1_Pin;
	motor1->gpio_ports.step 	= STEP_1_GPIO_Port;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <initMotor1+0x184>)
 8002e28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor1->gpio_ports.dir 		= DIR_1_GPIO_Port;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a38      	ldr	r2, [pc, #224]	@ (8002f10 <initMotor1+0x184>)
 8002e30:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	motor1->gpio_ports.diag		= DIAG_1_GPIO_Port;

	motor1->motion.motor_control_timer = htim12;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a38      	ldr	r2, [pc, #224]	@ (8002f18 <initMotor1+0x18c>)
 8002e38:	3348      	adds	r3, #72	@ 0x48
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	2248      	movs	r2, #72	@ 0x48
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f004 fc58 	bl	80076f4 <memcpy>
	motor1->status_check_timer = htim1;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a35      	ldr	r2, [pc, #212]	@ (8002f1c <initMotor1+0x190>)
 8002e48:	3394      	adds	r3, #148	@ 0x94
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	2248      	movs	r2, #72	@ 0x48
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f004 fc50 	bl	80076f4 <memcpy>
	if (UART_MODE == MODE_5_UART)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10f      	bne.n	8002e7a <initMotor1+0xee>
	{
		motor1->uart = huart1;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a30      	ldr	r2, [pc, #192]	@ (8002f20 <initMotor1+0x194>)
 8002e5e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002e62:	4611      	mov	r1, r2
 8002e64:	2248      	movs	r2, #72	@ 0x48
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 fc44 	bl	80076f4 <memcpy>
		tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002e72:	68b8      	ldr	r0, [r7, #8]
 8002e74:	f7fe fe16 	bl	8001aa4 <tmc2209_setup>
 8002e78:	e011      	b.n	8002e9e <initMotor1+0x112>
	}
	else if (UART_MODE == MODE_2_UART)
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10e      	bne.n	8002e9e <initMotor1+0x112>
	{
		motor1->uart = huart1;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a27      	ldr	r2, [pc, #156]	@ (8002f20 <initMotor1+0x194>)
 8002e84:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002e88:	4611      	mov	r1, r2
 8002e8a:	2248      	movs	r2, #72	@ 0x48
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 fc31 	bl	80076f4 <memcpy>
		tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002e98:	68b8      	ldr	r0, [r7, #8]
 8002e9a:	f7fe fe03 	bl	8001aa4 <tmc2209_setup>
	}

	motor1->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f64e 7295 	movw	r2, #61333	@ 0xef95
 8002ea4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor1->motion.HIGH_LIMIT = HIGH_LIMIT_M_1;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8002f24 <initMotor1+0x198>)
 8002eac:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor1->motion.LOW_LIMIT = LOW_LIMIT_M_1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <initMotor1+0x19c>)
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40

	motor1->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_1;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor1->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_1;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8002f2c <initMotor1+0x1a0>)
 8002ec0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor1->stallguard.STALL_BUFFER = STALL_BUFFER_M_1;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2219      	movs	r2, #25
 8002ec8:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver1->uart_ = motor1->uart;
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f102 0008 	add.w	r0, r2, #8
 8002ed4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002ed8:	2248      	movs	r2, #72	@ 0x48
 8002eda:	4619      	mov	r1, r3
 8002edc:	f004 fc0a 	bl	80076f4 <memcpy>

	set_micro_steps_per_step(driver1, motor1->microsteps);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	68b8      	ldr	r0, [r7, #8]
 8002eea:	f7fe fe2b 	bl	8001b44 <set_micro_steps_per_step>
	set_all_current_percent_values(driver1, motor1->current_settings.RUN_CURRENT_PERCENT, motor1->current_settings.HOLD_CURRENT_PERCENT, 0);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8002efa:	2300      	movs	r3, #0
 8002efc:	68b8      	ldr	r0, [r7, #8]
 8002efe:	f7fe febd 	bl	8001c7c <set_all_current_percent_values>

}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2000054c 	.word	0x2000054c
 8002f10:	40020400 	.word	0x40020400
 8002f14:	41200000 	.word	0x41200000
 8002f18:	2000030c 	.word	0x2000030c
 8002f1c:	200000cc 	.word	0x200000cc
 8002f20:	2000042c 	.word	0x2000042c
 8002f24:	43b0c8f6 	.word	0x43b0c8f6
 8002f28:	40cdc28f 	.word	0x40cdc28f
 8002f2c:	43280000 	.word	0x43280000

08002f30 <initMotor2>:

void initMotor2(uart_mode_t UART_MODE)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
	motor_t * motor2 = motors[1];
 8002f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80030ac <initMotor2+0x17c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver2 = motor2->driver;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8002f46:	60bb      	str	r3, [r7, #8]

	motor2->gpio_pins.mot_en 	= MOT_EN_2_Pin;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2240      	movs	r2, #64	@ 0x40
 8002f4c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor2->gpio_ports.mot_en 	= MOT_EN_2_GPIO_Port;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a57      	ldr	r2, [pc, #348]	@ (80030b0 <initMotor2+0x180>)
 8002f54:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver2, motor2->gpio_pins.mot_en, motor2->gpio_ports.mot_en);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f64:	461a      	mov	r2, r3
 8002f66:	68b8      	ldr	r0, [r7, #8]
 8002f68:	f7ff f975 	bl	8002256 <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver2);
 8002f6c:	68b8      	ldr	r0, [r7, #8]
 8002f6e:	f7ff f989 	bl	8002284 <tmc2209_disable>

	initializeDefaults(motor2);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fb1e 	bl	80035b4 <initializeDefaults>
	motor2->ID = '2';
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2232      	movs	r2, #50	@ 0x32
 8002f7c:	701a      	strb	r2, [r3, #0]

	motor2->gear_ratio = GEAR_RATIO_M_2;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a4c      	ldr	r2, [pc, #304]	@ (80030b4 <initMotor2+0x184>)
 8002f82:	605a      	str	r2, [r3, #4]
	motor2->microsteps = MICROSTEPS_M_2;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	609a      	str	r2, [r3, #8]
	motor2->motion.V_MAX 	= V_MAX_M_2;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002f90:	611a      	str	r2, [r3, #16]
	motor2->motion.ACC_MAX = ACC_MAX_M_2;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8002f98:	615a      	str	r2, [r3, #20]
	motor2->motion.DEC_MAX = DEC_MAX_M_2;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8002fa0:	619a      	str	r2, [r3, #24]


	motor2->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_2;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	225a      	movs	r2, #90	@ 0x5a
 8002fa6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor2->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_2;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2264      	movs	r2, #100	@ 0x64
 8002fae:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor2->gpio_pins.step 		= STEP_2_Pin;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2280      	movs	r2, #128	@ 0x80
 8002fb6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor2->gpio_pins.dir 		= DIR_2_Pin;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fc0:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
//	motor2->gpio_pins.diag 		= DIAG_2_Pin;
	motor2->gpio_ports.step 	= STEP_2_GPIO_Port;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80030b0 <initMotor2+0x180>)
 8002fc8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor2->gpio_ports.dir 		= DIR_2_GPIO_Port;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a38      	ldr	r2, [pc, #224]	@ (80030b0 <initMotor2+0x180>)
 8002fd0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	motor2->gpio_ports.diag 	= DIAG_2_GPIO_Port;

	motor2->motion.motor_control_timer = htim13;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a38      	ldr	r2, [pc, #224]	@ (80030b8 <initMotor2+0x188>)
 8002fd8:	3348      	adds	r3, #72	@ 0x48
 8002fda:	4611      	mov	r1, r2
 8002fdc:	2248      	movs	r2, #72	@ 0x48
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 fb88 	bl	80076f4 <memcpy>
	motor2->status_check_timer = htim6;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a35      	ldr	r2, [pc, #212]	@ (80030bc <initMotor2+0x18c>)
 8002fe8:	3394      	adds	r3, #148	@ 0x94
 8002fea:	4611      	mov	r1, r2
 8002fec:	2248      	movs	r2, #72	@ 0x48
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 fb80 	bl	80076f4 <memcpy>

	if (UART_MODE == MODE_5_UART)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10f      	bne.n	800301a <initMotor2+0xea>
	{
		motor2->uart = huart6;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a30      	ldr	r2, [pc, #192]	@ (80030c0 <initMotor2+0x190>)
 8002ffe:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003002:	4611      	mov	r1, r2
 8003004:	2248      	movs	r2, #72	@ 0x48
 8003006:	4618      	mov	r0, r3
 8003008:	f004 fb74 	bl	80076f4 <memcpy>
		tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_0);
 800300c:	2200      	movs	r2, #0
 800300e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003012:	68b8      	ldr	r0, [r7, #8]
 8003014:	f7fe fd46 	bl	8001aa4 <tmc2209_setup>
 8003018:	e011      	b.n	800303e <initMotor2+0x10e>
	}
	else if (UART_MODE == MODE_2_UART)
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10e      	bne.n	800303e <initMotor2+0x10e>
	{
		motor2->uart = huart1;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a28      	ldr	r2, [pc, #160]	@ (80030c4 <initMotor2+0x194>)
 8003024:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003028:	4611      	mov	r1, r2
 800302a:	2248      	movs	r2, #72	@ 0x48
 800302c:	4618      	mov	r0, r3
 800302e:	f004 fb61 	bl	80076f4 <memcpy>
		tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_1);
 8003032:	2201      	movs	r2, #1
 8003034:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003038:	68b8      	ldr	r0, [r7, #8]
 800303a:	f7fe fd33 	bl	8001aa4 <tmc2209_setup>
	}

	motor2->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_2;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8003044:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor2->motion.HIGH_LIMIT = HIGH_LIMIT_M_2;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a1f      	ldr	r2, [pc, #124]	@ (80030c8 <initMotor2+0x198>)
 800304c:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor2->motion.LOW_LIMIT = LOW_LIMIT_M_2;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	@ 0x40

	motor2->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_2;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor2->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_2;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a1a      	ldr	r2, [pc, #104]	@ (80030cc <initMotor2+0x19c>)
 8003062:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor2->stallguard.STALL_BUFFER = STALL_BUFFER_M_2;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2228      	movs	r2, #40	@ 0x28
 800306a:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver2->uart_ = motor2->uart;
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f102 0008 	add.w	r0, r2, #8
 8003076:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800307a:	2248      	movs	r2, #72	@ 0x48
 800307c:	4619      	mov	r1, r3
 800307e:	f004 fb39 	bl	80076f4 <memcpy>


	set_micro_steps_per_step(driver2, motor2->microsteps);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	b29b      	uxth	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	68b8      	ldr	r0, [r7, #8]
 800308c:	f7fe fd5a 	bl	8001b44 <set_micro_steps_per_step>
	set_all_current_percent_values(driver2, motor2->current_settings.RUN_CURRENT_PERCENT, motor2->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800309c:	2300      	movs	r3, #0
 800309e:	68b8      	ldr	r0, [r7, #8]
 80030a0:	f7fe fdec 	bl	8001c7c <set_all_current_percent_values>

}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	2000054c 	.word	0x2000054c
 80030b0:	40020000 	.word	0x40020000
 80030b4:	40f00000 	.word	0x40f00000
 80030b8:	20000354 	.word	0x20000354
 80030bc:	200001a4 	.word	0x200001a4
 80030c0:	20000504 	.word	0x20000504
 80030c4:	2000042c 	.word	0x2000042c
 80030c8:	42e9d70a 	.word	0x42e9d70a
 80030cc:	42a4cccd 	.word	0x42a4cccd

080030d0 <initMotor3>:

void initMotor3(uart_mode_t UART_MODE)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
	motor_t * motor3 = motors[2];
 80030da:	4b61      	ldr	r3, [pc, #388]	@ (8003260 <initMotor3+0x190>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver3 = motor3->driver;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80030e6:	60bb      	str	r3, [r7, #8]

	motor3->gpio_pins.mot_en 	= MOT_EN_3_Pin;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2204      	movs	r2, #4
 80030ec:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor3->gpio_ports.mot_en 	= MOT_EN_3_GPIO_Port;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003264 <initMotor3+0x194>)
 80030f4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver3, motor3->gpio_pins.mot_en, motor3->gpio_ports.mot_en);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003104:	461a      	mov	r2, r3
 8003106:	68b8      	ldr	r0, [r7, #8]
 8003108:	f7ff f8a5 	bl	8002256 <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver3);
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f7ff f8b9 	bl	8002284 <tmc2209_disable>

	initializeDefaults(motor3);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fa4e 	bl	80035b4 <initializeDefaults>

	motor3->ID = '3';
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2233      	movs	r2, #51	@ 0x33
 800311c:	701a      	strb	r2, [r3, #0]

	motor3->gear_ratio = GEAR_RATIO_M_3;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a51      	ldr	r2, [pc, #324]	@ (8003268 <initMotor3+0x198>)
 8003122:	605a      	str	r2, [r3, #4]
	motor3->microsteps = MICROSTEPS_M_3;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	609a      	str	r2, [r3, #8]
	motor3->motion.V_MAX 	= V_MAX_M_3;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8003130:	611a      	str	r2, [r3, #16]
	motor3->motion.ACC_MAX = ACC_MAX_M_3;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003138:	615a      	str	r2, [r3, #20]
	motor3->motion.DEC_MAX = DEC_MAX_M_3;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003140:	619a      	str	r2, [r3, #24]

	motor3->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_3;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2228      	movs	r2, #40	@ 0x28
 8003146:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor3->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_3;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	223c      	movs	r2, #60	@ 0x3c
 800314e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor3->gpio_pins.step 		= STEP_3_Pin;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2208      	movs	r2, #8
 8003156:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor3->gpio_pins.dir 		= DIR_3_Pin;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003160:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor3->gpio_pins.diag 		= DIAG_3_Pin;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800316a:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
	motor3->gpio_ports.step 	= STEP_3_GPIO_Port;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a3c      	ldr	r2, [pc, #240]	@ (8003264 <initMotor3+0x194>)
 8003172:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor3->gpio_ports.dir 		= DIR_3_GPIO_Port;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a3a      	ldr	r2, [pc, #232]	@ (8003264 <initMotor3+0x194>)
 800317a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	motor3->gpio_ports.diag 	= DIAG_3_GPIO_Port;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a3a      	ldr	r2, [pc, #232]	@ (800326c <initMotor3+0x19c>)
 8003182:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	motor3->motion.motor_control_timer = htim3;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4a39      	ldr	r2, [pc, #228]	@ (8003270 <initMotor3+0x1a0>)
 800318a:	3348      	adds	r3, #72	@ 0x48
 800318c:	4611      	mov	r1, r2
 800318e:	2248      	movs	r2, #72	@ 0x48
 8003190:	4618      	mov	r0, r3
 8003192:	f004 faaf 	bl	80076f4 <memcpy>
	motor3->status_check_timer = htim7;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a36      	ldr	r2, [pc, #216]	@ (8003274 <initMotor3+0x1a4>)
 800319a:	3394      	adds	r3, #148	@ 0x94
 800319c:	4611      	mov	r1, r2
 800319e:	2248      	movs	r2, #72	@ 0x48
 80031a0:	4618      	mov	r0, r3
 80031a2:	f004 faa7 	bl	80076f4 <memcpy>

	if (UART_MODE == MODE_5_UART)
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10f      	bne.n	80031cc <initMotor3+0xfc>
	{
		motor3->uart = huart3;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a32      	ldr	r2, [pc, #200]	@ (8003278 <initMotor3+0x1a8>)
 80031b0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80031b4:	4611      	mov	r1, r2
 80031b6:	2248      	movs	r2, #72	@ 0x48
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fa9b 	bl	80076f4 <memcpy>
		tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_0);
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80031c4:	68b8      	ldr	r0, [r7, #8]
 80031c6:	f7fe fc6d 	bl	8001aa4 <tmc2209_setup>
 80031ca:	e011      	b.n	80031f0 <initMotor3+0x120>
	}
	else if (UART_MODE == MODE_2_UART)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10e      	bne.n	80031f0 <initMotor3+0x120>
	{
		motor3->uart = huart1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a29      	ldr	r2, [pc, #164]	@ (800327c <initMotor3+0x1ac>)
 80031d6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80031da:	4611      	mov	r1, r2
 80031dc:	2248      	movs	r2, #72	@ 0x48
 80031de:	4618      	mov	r0, r3
 80031e0:	f004 fa88 	bl	80076f4 <memcpy>
		tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_2);
 80031e4:	2202      	movs	r2, #2
 80031e6:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80031ea:	68b8      	ldr	r0, [r7, #8]
 80031ec:	f7fe fc5a 	bl	8001aa4 <tmc2209_setup>
	}

	motor3->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_3;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 80031f6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor3->motion.HIGH_LIMIT = HIGH_LIMIT_M_3;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a20      	ldr	r2, [pc, #128]	@ (8003280 <initMotor3+0x1b0>)
 80031fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor3->motion.LOW_LIMIT = LOW_LIMIT_M_3;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	@ 0x40

	motor3->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_3;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor3->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_3;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a1c      	ldr	r2, [pc, #112]	@ (8003284 <initMotor3+0x1b4>)
 8003214:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor3->stallguard.STALL_BUFFER = STALL_BUFFER_M_3;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2219      	movs	r2, #25
 800321c:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver3->uart_ = motor3->uart;
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f102 0008 	add.w	r0, r2, #8
 8003228:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800322c:	2248      	movs	r2, #72	@ 0x48
 800322e:	4619      	mov	r1, r3
 8003230:	f004 fa60 	bl	80076f4 <memcpy>

	set_micro_steps_per_step(driver3, motor3->microsteps);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	b29b      	uxth	r3, r3
 800323a:	4619      	mov	r1, r3
 800323c:	68b8      	ldr	r0, [r7, #8]
 800323e:	f7fe fc81 	bl	8001b44 <set_micro_steps_per_step>
	set_all_current_percent_values(driver3, motor3->current_settings.RUN_CURRENT_PERCENT, motor3->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800324e:	2300      	movs	r3, #0
 8003250:	68b8      	ldr	r0, [r7, #8]
 8003252:	f7fe fd13 	bl	8001c7c <set_all_current_percent_values>

}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	2000054c 	.word	0x2000054c
 8003264:	40020800 	.word	0x40020800
 8003268:	40f00000 	.word	0x40f00000
 800326c:	40020400 	.word	0x40020400
 8003270:	20000114 	.word	0x20000114
 8003274:	200001ec 	.word	0x200001ec
 8003278:	200004bc 	.word	0x200004bc
 800327c:	2000042c 	.word	0x2000042c
 8003280:	430ac51f 	.word	0x430ac51f
 8003284:	430c0000 	.word	0x430c0000

08003288 <initMotor4>:

void initMotor4(uart_mode_t UART_MODE)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
	motor_t * motor4 = motors[3];
 8003292:	4b5c      	ldr	r3, [pc, #368]	@ (8003404 <initMotor4+0x17c>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver4 = motor4->driver;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800329e:	60bb      	str	r3, [r7, #8]

	motor4->gpio_pins.mot_en 	= MOT_EN_4_Pin;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor4->gpio_ports.mot_en 	= MOT_EN_4_GPIO_Port;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a57      	ldr	r2, [pc, #348]	@ (8003408 <initMotor4+0x180>)
 80032ac:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver4, motor4->gpio_pins.mot_en, motor4->gpio_ports.mot_en);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80032bc:	461a      	mov	r2, r3
 80032be:	68b8      	ldr	r0, [r7, #8]
 80032c0:	f7fe ffc9 	bl	8002256 <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver4);
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f7fe ffdd 	bl	8002284 <tmc2209_disable>

	initializeDefaults(motor4);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f972 	bl	80035b4 <initializeDefaults>

	motor4->ID = '4';
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2234      	movs	r2, #52	@ 0x34
 80032d4:	701a      	strb	r2, [r3, #0]

	motor4->gear_ratio = GEAR_RATIO_M_4;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a4c      	ldr	r2, [pc, #304]	@ (800340c <initMotor4+0x184>)
 80032da:	605a      	str	r2, [r3, #4]
	motor4->microsteps = MICROSTEPS_M_4;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2208      	movs	r2, #8
 80032e0:	609a      	str	r2, [r3, #8]
	motor4->motion.V_MAX 	= V_MAX_M_4;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80032e8:	611a      	str	r2, [r3, #16]
	motor4->motion.ACC_MAX = ACC_MAX_M_4;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80032f0:	615a      	str	r2, [r3, #20]
	motor4->motion.DEC_MAX = DEC_MAX_M_4;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80032f8:	619a      	str	r2, [r3, #24]

	motor4->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_4;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2232      	movs	r2, #50	@ 0x32
 80032fe:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor4->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_4;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2246      	movs	r2, #70	@ 0x46
 8003306:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor4->gpio_pins.step 		= STEP_4_Pin;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2204      	movs	r2, #4
 800330e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor4->gpio_pins.dir 		= DIR_4_Pin;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2210      	movs	r2, #16
 8003316:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
//	motor4->gpio_pins.diag 		= DIAG_4_Pin;
	motor4->gpio_ports.step 	= STEP_4_GPIO_Port;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a3a      	ldr	r2, [pc, #232]	@ (8003408 <initMotor4+0x180>)
 800331e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor4->gpio_ports.dir 		= DIR_4_GPIO_Port;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a38      	ldr	r2, [pc, #224]	@ (8003408 <initMotor4+0x180>)
 8003326:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	motor4->gpio_ports.diag 		= DIAG_4_GPIO_Port;

	motor4->motion.motor_control_timer = htim4;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a38      	ldr	r2, [pc, #224]	@ (8003410 <initMotor4+0x188>)
 800332e:	3348      	adds	r3, #72	@ 0x48
 8003330:	4611      	mov	r1, r2
 8003332:	2248      	movs	r2, #72	@ 0x48
 8003334:	4618      	mov	r0, r3
 8003336:	f004 f9dd 	bl	80076f4 <memcpy>
	motor4->status_check_timer = htim9;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a35      	ldr	r2, [pc, #212]	@ (8003414 <initMotor4+0x18c>)
 800333e:	3394      	adds	r3, #148	@ 0x94
 8003340:	4611      	mov	r1, r2
 8003342:	2248      	movs	r2, #72	@ 0x48
 8003344:	4618      	mov	r0, r3
 8003346:	f004 f9d5 	bl	80076f4 <memcpy>

	if (UART_MODE == MODE_5_UART)
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d10f      	bne.n	8003370 <initMotor4+0xe8>
	{
		motor4->uart = huart4;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a31      	ldr	r2, [pc, #196]	@ (8003418 <initMotor4+0x190>)
 8003354:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003358:	4611      	mov	r1, r2
 800335a:	2248      	movs	r2, #72	@ 0x48
 800335c:	4618      	mov	r0, r3
 800335e:	f004 f9c9 	bl	80076f4 <memcpy>
		tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8003362:	2200      	movs	r2, #0
 8003364:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003368:	68b8      	ldr	r0, [r7, #8]
 800336a:	f7fe fb9b 	bl	8001aa4 <tmc2209_setup>
 800336e:	e011      	b.n	8003394 <initMotor4+0x10c>
	}
	else if (UART_MODE == MODE_2_UART)
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <initMotor4+0x10c>
	{
		motor4->uart = huart4;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a27      	ldr	r2, [pc, #156]	@ (8003418 <initMotor4+0x190>)
 800337a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800337e:	4611      	mov	r1, r2
 8003380:	2248      	movs	r2, #72	@ 0x48
 8003382:	4618      	mov	r0, r3
 8003384:	f004 f9b6 	bl	80076f4 <memcpy>
		tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800338e:	68b8      	ldr	r0, [r7, #8]
 8003390:	f7fe fb88 	bl	8001aa4 <tmc2209_setup>
	}

	motor4->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_4;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f241 7270 	movw	r2, #6000	@ 0x1770
 800339a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor4->motion.HIGH_LIMIT = HIGH_LIMIT_M_4;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	@ (800341c <initMotor4+0x194>)
 80033a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor4->motion.LOW_LIMIT = LOW_LIMIT_M_4;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40

	motor4->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_4;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor4->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_4;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <initMotor4+0x198>)
 80033b8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor4->stallguard.STALL_BUFFER = STALL_BUFFER_M_4;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2208      	movs	r2, #8
 80033c0:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver4->uart_ = motor4->uart;
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f102 0008 	add.w	r0, r2, #8
 80033cc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80033d0:	2248      	movs	r2, #72	@ 0x48
 80033d2:	4619      	mov	r1, r3
 80033d4:	f004 f98e 	bl	80076f4 <memcpy>

	set_micro_steps_per_step(driver4, motor4->microsteps);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	68b8      	ldr	r0, [r7, #8]
 80033e2:	f7fe fbaf 	bl	8001b44 <set_micro_steps_per_step>
	set_all_current_percent_values(driver4, motor4->current_settings.RUN_CURRENT_PERCENT, motor4->current_settings.HOLD_CURRENT_PERCENT, 0);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 80033f2:	2300      	movs	r3, #0
 80033f4:	68b8      	ldr	r0, [r7, #8]
 80033f6:	f7fe fc41 	bl	8001c7c <set_all_current_percent_values>

}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	2000054c 	.word	0x2000054c
 8003408:	40020400 	.word	0x40020400
 800340c:	40f00000 	.word	0x40f00000
 8003410:	2000015c 	.word	0x2000015c
 8003414:	2000027c 	.word	0x2000027c
 8003418:	2000039c 	.word	0x2000039c
 800341c:	43340000 	.word	0x43340000
 8003420:	421c0000 	.word	0x421c0000

08003424 <initMotor5>:

void initMotor5(uart_mode_t UART_MODE)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
	motor_t * motor5 = motors[4];
 800342e:	4b59      	ldr	r3, [pc, #356]	@ (8003594 <initMotor5+0x170>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver5 = motor5->driver;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800343a:	60bb      	str	r3, [r7, #8]

	motor5->gpio_pins.mot_en 	= MOT_EN_5_Pin;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2210      	movs	r2, #16
 8003440:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor5->gpio_ports.mot_en 	= MOT_EN_5_GPIO_Port;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a54      	ldr	r2, [pc, #336]	@ (8003598 <initMotor5+0x174>)
 8003448:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver5, motor5->gpio_pins.mot_en, motor5->gpio_ports.mot_en);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003458:	461a      	mov	r2, r3
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f7fe fefb 	bl	8002256 <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver5);
 8003460:	68b8      	ldr	r0, [r7, #8]
 8003462:	f7fe ff0f 	bl	8002284 <tmc2209_disable>

	initializeDefaults(motor5);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f8a4 	bl	80035b4 <initializeDefaults>

	motor5->ID = '5';
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2235      	movs	r2, #53	@ 0x35
 8003470:	701a      	strb	r2, [r3, #0]

	motor5->gear_ratio = GEAR_RATIO_M_5;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003478:	605a      	str	r2, [r3, #4]
	motor5->microsteps = MICROSTEPS_M_5;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	609a      	str	r2, [r3, #8]
	motor5->motion.V_MAX 	= V_MAX_M_5;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003486:	611a      	str	r2, [r3, #16]
	motor5->motion.ACC_MAX = ACC_MAX_M_5;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800348e:	615a      	str	r2, [r3, #20]
	motor5->motion.DEC_MAX = DEC_MAX_M_5;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003496:	619a      	str	r2, [r3, #24]

	motor5->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_5;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2214      	movs	r2, #20
 800349c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor5->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_5;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2214      	movs	r2, #20
 80034a4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor5->gpio_pins.step 		= STEP_5_Pin;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor5->gpio_pins.dir 		= DIR_5_Pin;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034b8:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor5->gpio_ports.step 	= STEP_5_GPIO_Port;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a36      	ldr	r2, [pc, #216]	@ (8003598 <initMotor5+0x174>)
 80034c0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor5->gpio_pins.diag 		= DIAG_5_Pin;
	motor5->gpio_ports.dir 		= DIR_5_GPIO_Port;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a34      	ldr	r2, [pc, #208]	@ (8003598 <initMotor5+0x174>)
 80034c8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	motor5->gpio_ports.diag 		= DIAG_5_GPIO_Port;

	motor5->motion.motor_control_timer = htim8;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a33      	ldr	r2, [pc, #204]	@ (800359c <initMotor5+0x178>)
 80034d0:	3348      	adds	r3, #72	@ 0x48
 80034d2:	4611      	mov	r1, r2
 80034d4:	2248      	movs	r2, #72	@ 0x48
 80034d6:	4618      	mov	r0, r3
 80034d8:	f004 f90c 	bl	80076f4 <memcpy>
	motor5->status_check_timer = htim10;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a30      	ldr	r2, [pc, #192]	@ (80035a0 <initMotor5+0x17c>)
 80034e0:	3394      	adds	r3, #148	@ 0x94
 80034e2:	4611      	mov	r1, r2
 80034e4:	2248      	movs	r2, #72	@ 0x48
 80034e6:	4618      	mov	r0, r3
 80034e8:	f004 f904 	bl	80076f4 <memcpy>

	if (UART_MODE == MODE_5_UART)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10f      	bne.n	8003512 <initMotor5+0xee>
	{
		motor5->uart = huart5;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a2b      	ldr	r2, [pc, #172]	@ (80035a4 <initMotor5+0x180>)
 80034f6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80034fa:	4611      	mov	r1, r2
 80034fc:	2248      	movs	r2, #72	@ 0x48
 80034fe:	4618      	mov	r0, r3
 8003500:	f004 f8f8 	bl	80076f4 <memcpy>
		tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_0);
 8003504:	2200      	movs	r2, #0
 8003506:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800350a:	68b8      	ldr	r0, [r7, #8]
 800350c:	f7fe faca 	bl	8001aa4 <tmc2209_setup>
 8003510:	e011      	b.n	8003536 <initMotor5+0x112>
	}
	else if (UART_MODE == MODE_2_UART)
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10e      	bne.n	8003536 <initMotor5+0x112>
	{
		motor5->uart = huart4;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <initMotor5+0x184>)
 800351c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003520:	4611      	mov	r1, r2
 8003522:	2248      	movs	r2, #72	@ 0x48
 8003524:	4618      	mov	r0, r3
 8003526:	f004 f8e5 	bl	80076f4 <memcpy>
		tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_1);
 800352a:	2201      	movs	r2, #1
 800352c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003530:	68b8      	ldr	r0, [r7, #8]
 8003532:	f7fe fab7 	bl	8001aa4 <tmc2209_setup>
	}

	motor5->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_5;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <initMotor5+0x188>)
 800353a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor5->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_5;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor5->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_5;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <initMotor5+0x18c>)
 800354a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor5->stallguard.STALL_BUFFER = STALL_BUFFER_M_5;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2228      	movs	r2, #40	@ 0x28
 8003552:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver5->uart_ = motor5->uart;
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f102 0008 	add.w	r0, r2, #8
 800355e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003562:	2248      	movs	r2, #72	@ 0x48
 8003564:	4619      	mov	r1, r3
 8003566:	f004 f8c5 	bl	80076f4 <memcpy>

	set_micro_steps_per_step(driver5, motor5->microsteps);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	b29b      	uxth	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	68b8      	ldr	r0, [r7, #8]
 8003574:	f7fe fae6 	bl	8001b44 <set_micro_steps_per_step>
	set_all_current_percent_values(driver5, motor5->current_settings.RUN_CURRENT_PERCENT, motor5->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8003584:	2300      	movs	r3, #0
 8003586:	68b8      	ldr	r0, [r7, #8]
 8003588:	f7fe fb78 	bl	8001c7c <set_all_current_percent_values>

}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	2000054c 	.word	0x2000054c
 8003598:	40020800 	.word	0x40020800
 800359c:	20000234 	.word	0x20000234
 80035a0:	200002c4 	.word	0x200002c4
 80035a4:	200003e4 	.word	0x200003e4
 80035a8:	2000039c 	.word	0x2000039c
 80035ac:	00027100 	.word	0x00027100
 80035b0:	433e0000 	.word	0x433e0000

080035b4 <initializeDefaults>:

void initializeDefaults(motor_t * motor)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	motor->motion.v = 0;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	61da      	str	r2, [r3, #28]
	motor->motion.total_steps = 0;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	621a      	str	r2, [r3, #32]
	motor->motion.const_steps = 0;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->motion.acc_steps = 0;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = 0;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.step = 0;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->motion.inverse_motor_direction = 0;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

	motor->active_movement_flag = 0;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	731a      	strb	r2, [r3, #12]

	motor->status_flag = 0;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92

	motor->stallguard.smoothed_result = 0;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	motor->stallguard.previous_smoothed_result = 0;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	motor->stallguard.consecutive_low_counter = 0;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	motor->stallguard.stall_flag = 0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003668 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003634:	f7fe fa24 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003638:	480c      	ldr	r0, [pc, #48]	@ (800366c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800363a:	490d      	ldr	r1, [pc, #52]	@ (8003670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800363c:	4a0d      	ldr	r2, [pc, #52]	@ (8003674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003650:	4c0a      	ldr	r4, [pc, #40]	@ (800367c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800365e:	f004 f823 	bl	80076a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003662:	f7fc ff81 	bl	8000568 <main>
  bx  lr    
 8003666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800366c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003670:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003674:	08008558 	.word	0x08008558
  ldr r2, =_sbss
 8003678:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800367c:	20000abc 	.word	0x20000abc

08003680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003680:	e7fe      	b.n	8003680 <ADC_IRQHandler>
	...

08003684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003688:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <HAL_Init+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <HAL_Init+0x40>)
 800368e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_Init+0x40>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <HAL_Init+0x40>)
 800369a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800369e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a0:	4b08      	ldr	r3, [pc, #32]	@ (80036c4 <HAL_Init+0x40>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a07      	ldr	r2, [pc, #28]	@ (80036c4 <HAL_Init+0x40>)
 80036a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ac:	2003      	movs	r0, #3
 80036ae:	f000 f94f 	bl	8003950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f000 f808 	bl	80036c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b8:	f7fd fda4 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023c00 	.word	0x40023c00

080036c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <HAL_InitTick+0x54>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <HAL_InitTick+0x58>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036de:	fbb3 f3f1 	udiv	r3, r3, r1
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f967 	bl	80039ba <HAL_SYSTICK_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00e      	b.n	8003714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b0f      	cmp	r3, #15
 80036fa:	d80a      	bhi.n	8003712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036fc:	2200      	movs	r2, #0
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	f000 f92f 	bl	8003966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003708:	4a06      	ldr	r2, [pc, #24]	@ (8003724 <HAL_InitTick+0x5c>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000000 	.word	0x20000000
 8003720:	20000008 	.word	0x20000008
 8003724:	20000004 	.word	0x20000004

08003728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <HAL_IncTick+0x20>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_IncTick+0x24>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4413      	add	r3, r2
 8003738:	4a04      	ldr	r2, [pc, #16]	@ (800374c <HAL_IncTick+0x24>)
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000008 	.word	0x20000008
 800374c:	20000970 	.word	0x20000970

08003750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return uwTick;
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <HAL_GetTick+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000970 	.word	0x20000970

08003768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7ff ffee 	bl	8003750 <HAL_GetTick>
 8003774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d005      	beq.n	800378e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003782:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <HAL_Delay+0x44>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800378e:	bf00      	nop
 8003790:	f7ff ffde 	bl	8003750 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	429a      	cmp	r2, r3
 800379e:	d8f7      	bhi.n	8003790 <HAL_Delay+0x28>
  {
  }
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000008 	.word	0x20000008

080037b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c0:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <__NVIC_SetPriorityGrouping+0x44>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037cc:	4013      	ands	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e2:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <__NVIC_SetPriorityGrouping+0x44>)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	60d3      	str	r3, [r2, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <__NVIC_GetPriorityGrouping+0x18>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	f003 0307 	and.w	r3, r3, #7
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	2b00      	cmp	r3, #0
 8003824:	db0b      	blt.n	800383e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	f003 021f 	and.w	r2, r3, #31
 800382c:	4907      	ldr	r1, [pc, #28]	@ (800384c <__NVIC_EnableIRQ+0x38>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2001      	movs	r0, #1
 8003836:	fa00 f202 	lsl.w	r2, r0, r2
 800383a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000e100 	.word	0xe000e100

08003850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	6039      	str	r1, [r7, #0]
 800385a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003860:	2b00      	cmp	r3, #0
 8003862:	db0a      	blt.n	800387a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	490c      	ldr	r1, [pc, #48]	@ (800389c <__NVIC_SetPriority+0x4c>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	0112      	lsls	r2, r2, #4
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	440b      	add	r3, r1
 8003874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003878:	e00a      	b.n	8003890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	4908      	ldr	r1, [pc, #32]	@ (80038a0 <__NVIC_SetPriority+0x50>)
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	3b04      	subs	r3, #4
 8003888:	0112      	lsls	r2, r2, #4
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	440b      	add	r3, r1
 800388e:	761a      	strb	r2, [r3, #24]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	e000e100 	.word	0xe000e100
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	@ 0x24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f1c3 0307 	rsb	r3, r3, #7
 80038be:	2b04      	cmp	r3, #4
 80038c0:	bf28      	it	cs
 80038c2:	2304      	movcs	r3, #4
 80038c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3304      	adds	r3, #4
 80038ca:	2b06      	cmp	r3, #6
 80038cc:	d902      	bls.n	80038d4 <NVIC_EncodePriority+0x30>
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3b03      	subs	r3, #3
 80038d2:	e000      	b.n	80038d6 <NVIC_EncodePriority+0x32>
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d8:	f04f 32ff 	mov.w	r2, #4294967295
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43da      	mvns	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	401a      	ands	r2, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ec:	f04f 31ff 	mov.w	r1, #4294967295
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	43d9      	mvns	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	4313      	orrs	r3, r2
         );
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3724      	adds	r7, #36	@ 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800391c:	d301      	bcc.n	8003922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391e:	2301      	movs	r3, #1
 8003920:	e00f      	b.n	8003942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003922:	4a0a      	ldr	r2, [pc, #40]	@ (800394c <SysTick_Config+0x40>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392a:	210f      	movs	r1, #15
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f7ff ff8e 	bl	8003850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003934:	4b05      	ldr	r3, [pc, #20]	@ (800394c <SysTick_Config+0x40>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393a:	4b04      	ldr	r3, [pc, #16]	@ (800394c <SysTick_Config+0x40>)
 800393c:	2207      	movs	r2, #7
 800393e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	e000e010 	.word	0xe000e010

08003950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff29 	bl	80037b0 <__NVIC_SetPriorityGrouping>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	4603      	mov	r3, r0
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003978:	f7ff ff3e 	bl	80037f8 <__NVIC_GetPriorityGrouping>
 800397c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	6978      	ldr	r0, [r7, #20]
 8003984:	f7ff ff8e 	bl	80038a4 <NVIC_EncodePriority>
 8003988:	4602      	mov	r2, r0
 800398a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff5d 	bl	8003850 <__NVIC_SetPriority>
}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff31 	bl	8003814 <__NVIC_EnableIRQ>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ffa2 	bl	800390c <SysTick_Config>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff feb6 	bl	8003750 <HAL_GetTick>
 80039e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d008      	beq.n	8003a04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2280      	movs	r2, #128	@ 0x80
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e052      	b.n	8003aaa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0216 	bic.w	r2, r2, #22
 8003a12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <HAL_DMA_Abort+0x62>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0208 	bic.w	r2, r2, #8
 8003a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a54:	e013      	b.n	8003a7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a56:	f7ff fe7b 	bl	8003750 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d90c      	bls.n	8003a7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e015      	b.n	8003aaa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e4      	bne.n	8003a56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	223f      	movs	r2, #63	@ 0x3f
 8003a92:	409a      	lsls	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2280      	movs	r2, #128	@ 0x80
 8003aca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e00c      	b.n	8003aea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2205      	movs	r2, #5
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	@ 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e165      	b.n	8003de0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b14:	2201      	movs	r2, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	f040 8154 	bne.w	8003dda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d005      	beq.n	8003b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d130      	bne.n	8003bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b80:	2201      	movs	r2, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 0201 	and.w	r2, r3, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d017      	beq.n	8003be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d123      	bne.n	8003c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	08da      	lsrs	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3208      	adds	r2, #8
 8003bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	220f      	movs	r2, #15
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	08da      	lsrs	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3208      	adds	r2, #8
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	2203      	movs	r2, #3
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0203 	and.w	r2, r3, #3
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80ae 	beq.w	8003dda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b5d      	ldr	r3, [pc, #372]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	4a5c      	ldr	r2, [pc, #368]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c8e:	4b5a      	ldr	r3, [pc, #360]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c9a:	4a58      	ldr	r2, [pc, #352]	@ (8003dfc <HAL_GPIO_Init+0x304>)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4f      	ldr	r2, [pc, #316]	@ (8003e00 <HAL_GPIO_Init+0x308>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d025      	beq.n	8003d12 <HAL_GPIO_Init+0x21a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4e      	ldr	r2, [pc, #312]	@ (8003e04 <HAL_GPIO_Init+0x30c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01f      	beq.n	8003d0e <HAL_GPIO_Init+0x216>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8003e08 <HAL_GPIO_Init+0x310>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d019      	beq.n	8003d0a <HAL_GPIO_Init+0x212>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a4c      	ldr	r2, [pc, #304]	@ (8003e0c <HAL_GPIO_Init+0x314>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_GPIO_Init+0x20e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8003e10 <HAL_GPIO_Init+0x318>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00d      	beq.n	8003d02 <HAL_GPIO_Init+0x20a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8003e14 <HAL_GPIO_Init+0x31c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x206>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a49      	ldr	r2, [pc, #292]	@ (8003e18 <HAL_GPIO_Init+0x320>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_GPIO_Init+0x202>
 8003cf6:	2306      	movs	r3, #6
 8003cf8:	e00c      	b.n	8003d14 <HAL_GPIO_Init+0x21c>
 8003cfa:	2307      	movs	r3, #7
 8003cfc:	e00a      	b.n	8003d14 <HAL_GPIO_Init+0x21c>
 8003cfe:	2305      	movs	r3, #5
 8003d00:	e008      	b.n	8003d14 <HAL_GPIO_Init+0x21c>
 8003d02:	2304      	movs	r3, #4
 8003d04:	e006      	b.n	8003d14 <HAL_GPIO_Init+0x21c>
 8003d06:	2303      	movs	r3, #3
 8003d08:	e004      	b.n	8003d14 <HAL_GPIO_Init+0x21c>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e002      	b.n	8003d14 <HAL_GPIO_Init+0x21c>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_GPIO_Init+0x21c>
 8003d12:	2300      	movs	r3, #0
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	f002 0203 	and.w	r2, r2, #3
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	4093      	lsls	r3, r2
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d24:	4935      	ldr	r1, [pc, #212]	@ (8003dfc <HAL_GPIO_Init+0x304>)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d32:	4b3a      	ldr	r3, [pc, #232]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d56:	4a31      	ldr	r2, [pc, #196]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d80:	4a26      	ldr	r2, [pc, #152]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d86:	4b25      	ldr	r3, [pc, #148]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003daa:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dd4:	4a11      	ldr	r2, [pc, #68]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	f67f ae96 	bls.w	8003b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	3724      	adds	r7, #36	@ 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40013800 	.word	0x40013800
 8003e00:	40020000 	.word	0x40020000
 8003e04:	40020400 	.word	0x40020400
 8003e08:	40020800 	.word	0x40020800
 8003e0c:	40020c00 	.word	0x40020c00
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40021400 	.word	0x40021400
 8003e18:	40021800 	.word	0x40021800
 8003e1c:	40013c00 	.word	0x40013c00

08003e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e30:	787b      	ldrb	r3, [r7, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e3c:	e003      	b.n	8003e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	041a      	lsls	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e64:	887a      	ldrh	r2, [r7, #2]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	041a      	lsls	r2, r3, #16
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43d9      	mvns	r1, r3
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	400b      	ands	r3, r1
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	619a      	str	r2, [r3, #24]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e92:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e9e:	4a05      	ldr	r2, [pc, #20]	@ (8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd f992 	bl	80011d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40013c00 	.word	0x40013c00

08003eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e12b      	b.n	8004122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd f9b8 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	@ 0x24
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f000 fd6c 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8003f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a81      	ldr	r2, [pc, #516]	@ (800412c <HAL_I2C_Init+0x274>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d807      	bhi.n	8003f3c <HAL_I2C_Init+0x84>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a80      	ldr	r2, [pc, #512]	@ (8004130 <HAL_I2C_Init+0x278>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bf94      	ite	ls
 8003f34:	2301      	movls	r3, #1
 8003f36:	2300      	movhi	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e006      	b.n	8003f4a <HAL_I2C_Init+0x92>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a7d      	ldr	r2, [pc, #500]	@ (8004134 <HAL_I2C_Init+0x27c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf94      	ite	ls
 8003f44:	2301      	movls	r3, #1
 8003f46:	2300      	movhi	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0e7      	b.n	8004122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a78      	ldr	r2, [pc, #480]	@ (8004138 <HAL_I2C_Init+0x280>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0c9b      	lsrs	r3, r3, #18
 8003f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a6a      	ldr	r2, [pc, #424]	@ (800412c <HAL_I2C_Init+0x274>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d802      	bhi.n	8003f8c <HAL_I2C_Init+0xd4>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	e009      	b.n	8003fa0 <HAL_I2C_Init+0xe8>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	4a69      	ldr	r2, [pc, #420]	@ (800413c <HAL_I2C_Init+0x284>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003fb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	495c      	ldr	r1, [pc, #368]	@ (800412c <HAL_I2C_Init+0x274>)
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	d819      	bhi.n	8003ff4 <HAL_I2C_Init+0x13c>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e59      	subs	r1, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fce:	1c59      	adds	r1, r3, #1
 8003fd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fd4:	400b      	ands	r3, r1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_I2C_Init+0x138>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1e59      	subs	r1, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fee:	e051      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	e04f      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d111      	bne.n	8004020 <HAL_I2C_Init+0x168>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1e58      	subs	r0, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	440b      	add	r3, r1
 800400a:	fbb0 f3f3 	udiv	r3, r0, r3
 800400e:	3301      	adds	r3, #1
 8004010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e012      	b.n	8004046 <HAL_I2C_Init+0x18e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1e58      	subs	r0, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	0099      	lsls	r1, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	fbb0 f3f3 	udiv	r3, r0, r3
 8004036:	3301      	adds	r3, #1
 8004038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Init+0x196>
 800404a:	2301      	movs	r3, #1
 800404c:	e022      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10e      	bne.n	8004074 <HAL_I2C_Init+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e58      	subs	r0, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	440b      	add	r3, r1
 8004064:	fbb0 f3f3 	udiv	r3, r0, r3
 8004068:	3301      	adds	r3, #1
 800406a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004072:	e00f      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1e58      	subs	r0, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	0099      	lsls	r1, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	fbb0 f3f3 	udiv	r3, r0, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	6809      	ldr	r1, [r1, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80040c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6911      	ldr	r1, [r2, #16]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68d2      	ldr	r2, [r2, #12]
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	000186a0 	.word	0x000186a0
 8004130:	001e847f 	.word	0x001e847f
 8004134:	003d08ff 	.word	0x003d08ff
 8004138:	431bde83 	.word	0x431bde83
 800413c:	10624dd3 	.word	0x10624dd3

08004140 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800415a:	f7ff faf9 	bl	8003750 <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	f040 80d9 	bne.w	8004320 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2319      	movs	r3, #25
 8004174:	2201      	movs	r2, #1
 8004176:	496d      	ldr	r1, [pc, #436]	@ (800432c <HAL_I2C_Mem_Write+0x1ec>)
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f971 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
 8004186:	e0cc      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_I2C_Mem_Write+0x56>
 8004192:	2302      	movs	r3, #2
 8004194:	e0c5      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d007      	beq.n	80041bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2221      	movs	r2, #33	@ 0x21
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2240      	movs	r2, #64	@ 0x40
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004330 <HAL_I2C_Mem_Write+0x1f0>)
 80041fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041fe:	88f8      	ldrh	r0, [r7, #6]
 8004200:	893a      	ldrh	r2, [r7, #8]
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4603      	mov	r3, r0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f890 	bl	8004334 <I2C_RequestMemoryWrite>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d052      	beq.n	80042c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e081      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fa36 	bl	8004694 <I2C_WaitOnTXEFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	2b04      	cmp	r3, #4
 8004234:	d107      	bne.n	8004246 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e06b      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d11b      	bne.n	80042c0 <HAL_I2C_Mem_Write+0x180>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d017      	beq.n	80042c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1aa      	bne.n	800421e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fa29 	bl	8004724 <I2C_WaitOnBTFFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00d      	beq.n	80042f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d107      	bne.n	80042f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e016      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	00100002 	.word	0x00100002
 8004330:	ffff0000 	.word	0xffff0000

08004334 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800435c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2200      	movs	r2, #0
 8004366:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f878 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004384:	d103      	bne.n	800438e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800438c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e05f      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	492d      	ldr	r1, [pc, #180]	@ (800445c <I2C_RequestMemoryWrite+0x128>)
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f8d3 	bl	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e04c      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f95e 	bl	8004694 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e02b      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]
 800440a:	e021      	b.n	8004450 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	b29b      	uxth	r3, r3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f938 	bl	8004694 <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e005      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004446:	893b      	ldrh	r3, [r7, #8]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	00010002 	.word	0x00010002

08004460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004470:	e048      	b.n	8004504 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d044      	beq.n	8004504 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7ff f969 	bl	8003750 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d139      	bne.n	8004504 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10d      	bne.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	43da      	mvns	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	e00c      	b.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	43da      	mvns	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d116      	bne.n	8004504 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e023      	b.n	800454c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	0c1b      	lsrs	r3, r3, #16
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d10d      	bne.n	800452a <I2C_WaitOnFlagUntilTimeout+0xca>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	43da      	mvns	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4013      	ands	r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	e00c      	b.n	8004544 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	43da      	mvns	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	429a      	cmp	r2, r3
 8004548:	d093      	beq.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004562:	e071      	b.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004572:	d123      	bne.n	80045bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004582:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800458c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	f043 0204 	orr.w	r2, r3, #4
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e067      	b.n	800468c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d041      	beq.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c4:	f7ff f8c4 	bl	8003750 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d136      	bne.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d10c      	bne.n	80045fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4013      	ands	r3, r2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	e00b      	b.n	8004616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	43da      	mvns	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d016      	beq.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e021      	b.n	800468c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10c      	bne.n	800466c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	43da      	mvns	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4013      	ands	r3, r2
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e00b      	b.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	43da      	mvns	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf14      	ite	ne
 800467e:	2301      	movne	r3, #1
 8004680:	2300      	moveq	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	f47f af6d 	bne.w	8004564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046a0:	e034      	b.n	800470c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f886 	bl	80047b4 <I2C_IsAcknowledgeFailed>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e034      	b.n	800471c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d028      	beq.n	800470c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ba:	f7ff f849 	bl	8003750 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11d      	bne.n	800470c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d016      	beq.n	800470c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e007      	b.n	800471c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004716:	2b80      	cmp	r3, #128	@ 0x80
 8004718:	d1c3      	bne.n	80046a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004730:	e034      	b.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f83e 	bl	80047b4 <I2C_IsAcknowledgeFailed>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e034      	b.n	80047ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d028      	beq.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7ff f801 	bl	8003750 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11d      	bne.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d016      	beq.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e007      	b.n	80047ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d1c3      	bne.n	8004732 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ca:	d11b      	bne.n	8004804 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	f043 0204 	orr.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0cc      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004828:	4b68      	ldr	r3, [pc, #416]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d90c      	bls.n	8004850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b65      	ldr	r3, [pc, #404]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b63      	ldr	r3, [pc, #396]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0b8      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004868:	4b59      	ldr	r3, [pc, #356]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a58      	ldr	r2, [pc, #352]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004880:	4b53      	ldr	r3, [pc, #332]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a52      	ldr	r2, [pc, #328]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800488a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b50      	ldr	r3, [pc, #320]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	494d      	ldr	r1, [pc, #308]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d044      	beq.n	8004934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	4b47      	ldr	r3, [pc, #284]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d119      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e07f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d003      	beq.n	80048d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	4b3f      	ldr	r3, [pc, #252]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e06f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	4b3b      	ldr	r3, [pc, #236]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e067      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f2:	4b37      	ldr	r3, [pc, #220]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 0203 	bic.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4934      	ldr	r1, [pc, #208]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004904:	f7fe ff24 	bl	8003750 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	e00a      	b.n	8004922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490c:	f7fe ff20 	bl	8003750 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e04f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 020c 	and.w	r2, r3, #12
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	429a      	cmp	r2, r3
 8004932:	d1eb      	bne.n	800490c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004934:	4b25      	ldr	r3, [pc, #148]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d20c      	bcs.n	800495c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e032      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004968:	4b19      	ldr	r3, [pc, #100]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4916      	ldr	r1, [pc, #88]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004986:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	490e      	ldr	r1, [pc, #56]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800499a:	f000 f855 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	490a      	ldr	r1, [pc, #40]	@ (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 80049ac:	5ccb      	ldrb	r3, [r1, r3]
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a09      	ldr	r2, [pc, #36]	@ (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049b6:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fe84 	bl	80036c8 <HAL_InitTick>

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40023c00 	.word	0x40023c00
 80049d0:	40023800 	.word	0x40023800
 80049d4:	080077c8 	.word	0x080077c8
 80049d8:	20000000 	.word	0x20000000
 80049dc:	20000004 	.word	0x20000004

080049e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e4:	4b03      	ldr	r3, [pc, #12]	@ (80049f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000000 	.word	0x20000000

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff0 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0a9b      	lsrs	r3, r3, #10
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	@ (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	080077d8 	.word	0x080077d8

08004a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a24:	f7ff ffdc 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0b5b      	lsrs	r3, r3, #13
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	080077d8 	.word	0x080077d8

08004a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a4c:	b0ae      	sub	sp, #184	@ 0xb8
 8004a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a6e:	4bcb      	ldr	r3, [pc, #812]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	f200 8206 	bhi.w	8004e88 <HAL_RCC_GetSysClockFreq+0x440>
 8004a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004ab9 	.word	0x08004ab9
 8004a88:	08004e89 	.word	0x08004e89
 8004a8c:	08004e89 	.word	0x08004e89
 8004a90:	08004e89 	.word	0x08004e89
 8004a94:	08004ac1 	.word	0x08004ac1
 8004a98:	08004e89 	.word	0x08004e89
 8004a9c:	08004e89 	.word	0x08004e89
 8004aa0:	08004e89 	.word	0x08004e89
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004e89 	.word	0x08004e89
 8004aac:	08004e89 	.word	0x08004e89
 8004ab0:	08004e89 	.word	0x08004e89
 8004ab4:	08004cb9 	.word	0x08004cb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4bb9      	ldr	r3, [pc, #740]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004abe:	e1e7      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac0:	4bb8      	ldr	r3, [pc, #736]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ac6:	e1e3      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac8:	4bb4      	ldr	r3, [pc, #720]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad4:	4bb1      	ldr	r3, [pc, #708]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d071      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae0:	4bae      	ldr	r3, [pc, #696]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b06:	4622      	mov	r2, r4
 8004b08:	462b      	mov	r3, r5
 8004b0a:	f04f 0000 	mov.w	r0, #0
 8004b0e:	f04f 0100 	mov.w	r1, #0
 8004b12:	0159      	lsls	r1, r3, #5
 8004b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b18:	0150      	lsls	r0, r2, #5
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4621      	mov	r1, r4
 8004b20:	1a51      	subs	r1, r2, r1
 8004b22:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b24:	4629      	mov	r1, r5
 8004b26:	eb63 0301 	sbc.w	r3, r3, r1
 8004b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b38:	4649      	mov	r1, r9
 8004b3a:	018b      	lsls	r3, r1, #6
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b42:	4641      	mov	r1, r8
 8004b44:	018a      	lsls	r2, r1, #6
 8004b46:	4641      	mov	r1, r8
 8004b48:	1a51      	subs	r1, r2, r1
 8004b4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b60:	4649      	mov	r1, r9
 8004b62:	00cb      	lsls	r3, r1, #3
 8004b64:	4641      	mov	r1, r8
 8004b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	00ca      	lsls	r2, r1, #3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	4622      	mov	r2, r4
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b7a:	462b      	mov	r3, r5
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	eb42 0303 	adc.w	r3, r2, r3
 8004b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b90:	4629      	mov	r1, r5
 8004b92:	024b      	lsls	r3, r1, #9
 8004b94:	4621      	mov	r1, r4
 8004b96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	024a      	lsls	r2, r1, #9
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004bb4:	f7fb fb2e 	bl	8000214 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bc2:	e067      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc4:	4b75      	ldr	r3, [pc, #468]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	099b      	lsrs	r3, r3, #6
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bd0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bde:	2300      	movs	r3, #0
 8004be0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004be2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004be6:	4622      	mov	r2, r4
 8004be8:	462b      	mov	r3, r5
 8004bea:	f04f 0000 	mov.w	r0, #0
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	0159      	lsls	r1, r3, #5
 8004bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf8:	0150      	lsls	r0, r2, #5
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4621      	mov	r1, r4
 8004c00:	1a51      	subs	r1, r2, r1
 8004c02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c04:	4629      	mov	r1, r5
 8004c06:	eb63 0301 	sbc.w	r3, r3, r1
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004c18:	4649      	mov	r1, r9
 8004c1a:	018b      	lsls	r3, r1, #6
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c22:	4641      	mov	r1, r8
 8004c24:	018a      	lsls	r2, r1, #6
 8004c26:	4641      	mov	r1, r8
 8004c28:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c46:	4692      	mov	sl, r2
 8004c48:	469b      	mov	fp, r3
 8004c4a:	4623      	mov	r3, r4
 8004c4c:	eb1a 0303 	adds.w	r3, sl, r3
 8004c50:	623b      	str	r3, [r7, #32]
 8004c52:	462b      	mov	r3, r5
 8004c54:	eb4b 0303 	adc.w	r3, fp, r3
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c66:	4629      	mov	r1, r5
 8004c68:	028b      	lsls	r3, r1, #10
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c70:	4621      	mov	r1, r4
 8004c72:	028a      	lsls	r2, r1, #10
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c80:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c86:	f7fb fac5 	bl	8000214 <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4613      	mov	r3, r2
 8004c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c94:	4b41      	ldr	r3, [pc, #260]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cb6:	e0eb      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb8:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cc4:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d06b      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd0:	4b32      	ldr	r3, [pc, #200]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	099b      	lsrs	r3, r3, #6
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ce8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cec:	4622      	mov	r2, r4
 8004cee:	462b      	mov	r3, r5
 8004cf0:	f04f 0000 	mov.w	r0, #0
 8004cf4:	f04f 0100 	mov.w	r1, #0
 8004cf8:	0159      	lsls	r1, r3, #5
 8004cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cfe:	0150      	lsls	r0, r2, #5
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4621      	mov	r1, r4
 8004d06:	1a51      	subs	r1, r2, r1
 8004d08:	61b9      	str	r1, [r7, #24]
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d1e:	4659      	mov	r1, fp
 8004d20:	018b      	lsls	r3, r1, #6
 8004d22:	4651      	mov	r1, sl
 8004d24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d28:	4651      	mov	r1, sl
 8004d2a:	018a      	lsls	r2, r1, #6
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ebb2 0801 	subs.w	r8, r2, r1
 8004d32:	4659      	mov	r1, fp
 8004d34:	eb63 0901 	sbc.w	r9, r3, r1
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d4c:	4690      	mov	r8, r2
 8004d4e:	4699      	mov	r9, r3
 8004d50:	4623      	mov	r3, r4
 8004d52:	eb18 0303 	adds.w	r3, r8, r3
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	462b      	mov	r3, r5
 8004d5a:	eb49 0303 	adc.w	r3, r9, r3
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	024b      	lsls	r3, r1, #9
 8004d70:	4621      	mov	r1, r4
 8004d72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d76:	4621      	mov	r1, r4
 8004d78:	024a      	lsls	r2, r1, #9
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d82:	2200      	movs	r2, #0
 8004d84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d8c:	f7fb fa42 	bl	8000214 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4613      	mov	r3, r2
 8004d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d9a:	e065      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x420>
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	099b      	lsrs	r3, r3, #6
 8004dae:	2200      	movs	r2, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	4611      	mov	r1, r2
 8004db4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004db8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dba:	2300      	movs	r3, #0
 8004dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	0159      	lsls	r1, r3, #5
 8004dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd4:	0150      	lsls	r0, r2, #5
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4641      	mov	r1, r8
 8004ddc:	1a51      	subs	r1, r2, r1
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	4649      	mov	r1, r9
 8004de2:	eb63 0301 	sbc.w	r3, r3, r1
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004df4:	4659      	mov	r1, fp
 8004df6:	018b      	lsls	r3, r1, #6
 8004df8:	4651      	mov	r1, sl
 8004dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dfe:	4651      	mov	r1, sl
 8004e00:	018a      	lsls	r2, r1, #6
 8004e02:	4651      	mov	r1, sl
 8004e04:	1a54      	subs	r4, r2, r1
 8004e06:	4659      	mov	r1, fp
 8004e08:	eb63 0501 	sbc.w	r5, r3, r1
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	00eb      	lsls	r3, r5, #3
 8004e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e1a:	00e2      	lsls	r2, r4, #3
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	461d      	mov	r5, r3
 8004e20:	4643      	mov	r3, r8
 8004e22:	18e3      	adds	r3, r4, r3
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	464b      	mov	r3, r9
 8004e28:	eb45 0303 	adc.w	r3, r5, r3
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	028b      	lsls	r3, r1, #10
 8004e3e:	4621      	mov	r1, r4
 8004e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e44:	4621      	mov	r1, r4
 8004e46:	028a      	lsls	r2, r1, #10
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e50:	2200      	movs	r2, #0
 8004e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e5a:	f7fb f9db 	bl	8000214 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4613      	mov	r3, r2
 8004e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	0f1b      	lsrs	r3, r3, #28
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e86:	e003      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	37b8      	adds	r7, #184	@ 0xb8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400

08004ea8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e28d      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 8083 	beq.w	8004fce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ec8:	4b94      	ldr	r3, [pc, #592]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d019      	beq.n	8004f08 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ed4:	4b91      	ldr	r3, [pc, #580]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
        || \
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eec:	d00c      	beq.n	8004f08 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eee:	4b8b      	ldr	r3, [pc, #556]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ef6:	2b0c      	cmp	r3, #12
 8004ef8:	d112      	bne.n	8004f20 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004efa:	4b88      	ldr	r3, [pc, #544]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f06:	d10b      	bne.n	8004f20 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f08:	4b84      	ldr	r3, [pc, #528]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d05b      	beq.n	8004fcc <HAL_RCC_OscConfig+0x124>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d157      	bne.n	8004fcc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e25a      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f28:	d106      	bne.n	8004f38 <HAL_RCC_OscConfig+0x90>
 8004f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e01d      	b.n	8004f74 <HAL_RCC_OscConfig+0xcc>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCC_OscConfig+0xb4>
 8004f42:	4b76      	ldr	r3, [pc, #472]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a75      	ldr	r2, [pc, #468]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4b73      	ldr	r3, [pc, #460]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a72      	ldr	r2, [pc, #456]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCC_OscConfig+0xcc>
 8004f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a6e      	ldr	r2, [pc, #440]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b6c      	ldr	r3, [pc, #432]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d013      	beq.n	8004fa4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fe fbe8 	bl	8003750 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f84:	f7fe fbe4 	bl	8003750 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	@ 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e21f      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f96:	4b61      	ldr	r3, [pc, #388]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0xdc>
 8004fa2:	e014      	b.n	8004fce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fe fbd4 	bl	8003750 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fac:	f7fe fbd0 	bl	8003750 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	@ 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e20b      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbe:	4b57      	ldr	r3, [pc, #348]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x104>
 8004fca:	e000      	b.n	8004fce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d06f      	beq.n	80050ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004fda:	4b50      	ldr	r3, [pc, #320]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d017      	beq.n	8005016 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
        || \
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d105      	bne.n	8004ffe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ffe:	4b47      	ldr	r3, [pc, #284]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d11c      	bne.n	8005044 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500a:	4b44      	ldr	r3, [pc, #272]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d116      	bne.n	8005044 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005016:	4b41      	ldr	r3, [pc, #260]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_RCC_OscConfig+0x186>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e1d3      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502e:	4b3b      	ldr	r3, [pc, #236]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4937      	ldr	r1, [pc, #220]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005042:	e03a      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d020      	beq.n	800508e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800504c:	4b34      	ldr	r3, [pc, #208]	@ (8005120 <HAL_RCC_OscConfig+0x278>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7fe fb7d 	bl	8003750 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505a:	f7fe fb79 	bl	8003750 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e1b4      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506c:	4b2b      	ldr	r3, [pc, #172]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005078:	4b28      	ldr	r3, [pc, #160]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4925      	ldr	r1, [pc, #148]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 8005088:	4313      	orrs	r3, r2
 800508a:	600b      	str	r3, [r1, #0]
 800508c:	e015      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508e:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <HAL_RCC_OscConfig+0x278>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fe fb5c 	bl	8003750 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800509c:	f7fe fb58 	bl	8003750 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e193      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d036      	beq.n	8005134 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ce:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <HAL_RCC_OscConfig+0x27c>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fe fb3c 	bl	8003750 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050dc:	f7fe fb38 	bl	8003750 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e173      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ee:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_RCC_OscConfig+0x274>)
 80050f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x234>
 80050fa:	e01b      	b.n	8005134 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050fc:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <HAL_RCC_OscConfig+0x27c>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fe fb25 	bl	8003750 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005108:	e00e      	b.n	8005128 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510a:	f7fe fb21 	bl	8003750 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d907      	bls.n	8005128 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e15c      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
 800511c:	40023800 	.word	0x40023800
 8005120:	42470000 	.word	0x42470000
 8005124:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005128:	4b8a      	ldr	r3, [pc, #552]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 800512a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1ea      	bne.n	800510a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8097 	beq.w	8005270 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005146:	4b83      	ldr	r3, [pc, #524]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10f      	bne.n	8005172 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	4b7f      	ldr	r3, [pc, #508]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	4a7e      	ldr	r2, [pc, #504]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005160:	6413      	str	r3, [r2, #64]	@ 0x40
 8005162:	4b7c      	ldr	r3, [pc, #496]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005172:	4b79      	ldr	r3, [pc, #484]	@ (8005358 <HAL_RCC_OscConfig+0x4b0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d118      	bne.n	80051b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517e:	4b76      	ldr	r3, [pc, #472]	@ (8005358 <HAL_RCC_OscConfig+0x4b0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a75      	ldr	r2, [pc, #468]	@ (8005358 <HAL_RCC_OscConfig+0x4b0>)
 8005184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518a:	f7fe fae1 	bl	8003750 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005192:	f7fe fadd 	bl	8003750 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e118      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a4:	4b6c      	ldr	r3, [pc, #432]	@ (8005358 <HAL_RCC_OscConfig+0x4b0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d106      	bne.n	80051c6 <HAL_RCC_OscConfig+0x31e>
 80051b8:	4b66      	ldr	r3, [pc, #408]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051bc:	4a65      	ldr	r2, [pc, #404]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c4:	e01c      	b.n	8005200 <HAL_RCC_OscConfig+0x358>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x340>
 80051ce:	4b61      	ldr	r3, [pc, #388]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	4a60      	ldr	r2, [pc, #384]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	f043 0304 	orr.w	r3, r3, #4
 80051d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051da:	4b5e      	ldr	r3, [pc, #376]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	4a5d      	ldr	r2, [pc, #372]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e6:	e00b      	b.n	8005200 <HAL_RCC_OscConfig+0x358>
 80051e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	4a59      	ldr	r2, [pc, #356]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f4:	4b57      	ldr	r3, [pc, #348]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f8:	4a56      	ldr	r2, [pc, #344]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80051fa:	f023 0304 	bic.w	r3, r3, #4
 80051fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d015      	beq.n	8005234 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fe faa2 	bl	8003750 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520e:	e00a      	b.n	8005226 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005210:	f7fe fa9e 	bl	8003750 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e0d7      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005226:	4b4b      	ldr	r3, [pc, #300]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ee      	beq.n	8005210 <HAL_RCC_OscConfig+0x368>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fe fa8c 	bl	8003750 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fe fa88 	bl	8003750 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0c1      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005252:	4b40      	ldr	r3, [pc, #256]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ee      	bne.n	800523c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005264:	4b3b      	ldr	r3, [pc, #236]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	4a3a      	ldr	r2, [pc, #232]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800526e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80ad 	beq.w	80053d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800527a:	4b36      	ldr	r3, [pc, #216]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b08      	cmp	r3, #8
 8005284:	d060      	beq.n	8005348 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d145      	bne.n	800531a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528e:	4b33      	ldr	r3, [pc, #204]	@ (800535c <HAL_RCC_OscConfig+0x4b4>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fe fa5c 	bl	8003750 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529c:	f7fe fa58 	bl	8003750 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e093      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ae:	4b29      	ldr	r3, [pc, #164]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69da      	ldr	r2, [r3, #28]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c8:	019b      	lsls	r3, r3, #6
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	085b      	lsrs	r3, r3, #1
 80052d2:	3b01      	subs	r3, #1
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e4:	071b      	lsls	r3, r3, #28
 80052e6:	491b      	ldr	r1, [pc, #108]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ec:	4b1b      	ldr	r3, [pc, #108]	@ (800535c <HAL_RCC_OscConfig+0x4b4>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fe fa2d 	bl	8003750 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fa:	f7fe fa29 	bl	8003750 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e064      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530c:	4b11      	ldr	r3, [pc, #68]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0f0      	beq.n	80052fa <HAL_RCC_OscConfig+0x452>
 8005318:	e05c      	b.n	80053d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531a:	4b10      	ldr	r3, [pc, #64]	@ (800535c <HAL_RCC_OscConfig+0x4b4>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fe fa16 	bl	8003750 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005328:	f7fe fa12 	bl	8003750 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e04d      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <HAL_RCC_OscConfig+0x4ac>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x480>
 8005346:	e045      	b.n	80053d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e040      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
 8005354:	40023800 	.word	0x40023800
 8005358:	40007000 	.word	0x40007000
 800535c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005360:	4b1f      	ldr	r3, [pc, #124]	@ (80053e0 <HAL_RCC_OscConfig+0x538>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d030      	beq.n	80053d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005378:	429a      	cmp	r2, r3
 800537a:	d129      	bne.n	80053d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d122      	bne.n	80053d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005390:	4013      	ands	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005398:	4293      	cmp	r3, r2
 800539a:	d119      	bne.n	80053d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	3b01      	subs	r3, #1
 80053aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d10f      	bne.n	80053d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800

080053e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e041      	b.n	800547a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fb ff6a 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fba6 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0201 	bic.w	r2, r2, #1
 8005498:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10f      	bne.n	80054ca <HAL_TIM_Base_Stop_IT+0x48>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6a1a      	ldr	r2, [r3, #32]
 80054b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <HAL_TIM_Base_Stop_IT+0x48>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e041      	b.n	8005576 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f839 	bl	800557e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f000 fb28 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b0c      	cmp	r3, #12
 80055a6:	d841      	bhi.n	800562c <HAL_TIM_OC_Stop_IT+0x98>
 80055a8:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <HAL_TIM_OC_Stop_IT+0x1c>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055e5 	.word	0x080055e5
 80055b4:	0800562d 	.word	0x0800562d
 80055b8:	0800562d 	.word	0x0800562d
 80055bc:	0800562d 	.word	0x0800562d
 80055c0:	080055f7 	.word	0x080055f7
 80055c4:	0800562d 	.word	0x0800562d
 80055c8:	0800562d 	.word	0x0800562d
 80055cc:	0800562d 	.word	0x0800562d
 80055d0:	08005609 	.word	0x08005609
 80055d4:	0800562d 	.word	0x0800562d
 80055d8:	0800562d 	.word	0x0800562d
 80055dc:	0800562d 	.word	0x0800562d
 80055e0:	0800561b 	.word	0x0800561b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0202 	bic.w	r2, r2, #2
 80055f2:	60da      	str	r2, [r3, #12]
      break;
 80055f4:	e01d      	b.n	8005632 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0204 	bic.w	r2, r2, #4
 8005604:	60da      	str	r2, [r3, #12]
      break;
 8005606:	e014      	b.n	8005632 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0208 	bic.w	r2, r2, #8
 8005616:	60da      	str	r2, [r3, #12]
      break;
 8005618:	e00b      	b.n	8005632 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0210 	bic.w	r2, r2, #16
 8005628:	60da      	str	r2, [r3, #12]
      break;
 800562a:	e002      	b.n	8005632 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      break;
 8005630:	bf00      	nop
  }

  if (status == HAL_OK)
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d161      	bne.n	80056fc <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2200      	movs	r2, #0
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fd87 	bl	8006154 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2f      	ldr	r2, [pc, #188]	@ (8005708 <HAL_TIM_OC_Stop_IT+0x174>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIM_OC_Stop_IT+0xc6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2d      	ldr	r2, [pc, #180]	@ (800570c <HAL_TIM_OC_Stop_IT+0x178>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d101      	bne.n	800565e <HAL_TIM_OC_Stop_IT+0xca>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <HAL_TIM_OC_Stop_IT+0xcc>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d017      	beq.n	8005694 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6a1a      	ldr	r2, [r3, #32]
 800566a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800566e:	4013      	ands	r3, r2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10f      	bne.n	8005694 <HAL_TIM_OC_Stop_IT+0x100>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6a1a      	ldr	r2, [r3, #32]
 800567a:	f240 4344 	movw	r3, #1092	@ 0x444
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d107      	bne.n	8005694 <HAL_TIM_OC_Stop_IT+0x100>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005692:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6a1a      	ldr	r2, [r3, #32]
 800569a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10f      	bne.n	80056c4 <HAL_TIM_OC_Stop_IT+0x130>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a1a      	ldr	r2, [r3, #32]
 80056aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d107      	bne.n	80056c4 <HAL_TIM_OC_Stop_IT+0x130>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <HAL_TIM_OC_Stop_IT+0x140>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d2:	e013      	b.n	80056fc <HAL_TIM_OC_Stop_IT+0x168>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d104      	bne.n	80056e4 <HAL_TIM_OC_Stop_IT+0x150>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056e2:	e00b      	b.n	80056fc <HAL_TIM_OC_Stop_IT+0x168>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d104      	bne.n	80056f4 <HAL_TIM_OC_Stop_IT+0x160>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056f2:	e003      	b.n	80056fc <HAL_TIM_OC_Stop_IT+0x168>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d020      	beq.n	8005774 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01b      	beq.n	8005774 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0202 	mvn.w	r2, #2
 8005744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f9eb 	bl	8005b36 <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fd f9ee 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f9ee 	bl	8005b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d020      	beq.n	80057c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01b      	beq.n	80057c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0204 	mvn.w	r2, #4
 8005790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2202      	movs	r2, #2
 8005796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f9c5 	bl	8005b36 <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fd f9c8 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f9c8 	bl	8005b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d020      	beq.n	800580c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0208 	mvn.w	r2, #8
 80057dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2204      	movs	r2, #4
 80057e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f99f 	bl	8005b36 <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fd f9a2 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f9a2 	bl	8005b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	d020      	beq.n	8005858 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01b      	beq.n	8005858 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0210 	mvn.w	r2, #16
 8005828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2208      	movs	r2, #8
 800582e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f979 	bl	8005b36 <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fd f97c 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f97c 	bl	8005b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0201 	mvn.w	r2, #1
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd fa34 	bl	8002ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fd58 	bl	8006350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f94d 	bl	8005b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0220 	mvn.w	r2, #32
 80058e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fd2a 	bl	800633c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058e8:	bf00      	nop
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_TIM_OC_ConfigChannel+0x1e>
 800590a:	2302      	movs	r3, #2
 800590c:	e048      	b.n	80059a0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d839      	bhi.n	8005990 <HAL_TIM_OC_ConfigChannel+0xa0>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <HAL_TIM_OC_ConfigChannel+0x34>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005959 	.word	0x08005959
 8005928:	08005991 	.word	0x08005991
 800592c:	08005991 	.word	0x08005991
 8005930:	08005991 	.word	0x08005991
 8005934:	08005967 	.word	0x08005967
 8005938:	08005991 	.word	0x08005991
 800593c:	08005991 	.word	0x08005991
 8005940:	08005991 	.word	0x08005991
 8005944:	08005975 	.word	0x08005975
 8005948:	08005991 	.word	0x08005991
 800594c:	08005991 	.word	0x08005991
 8005950:	08005991 	.word	0x08005991
 8005954:	08005983 	.word	0x08005983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f9ae 	bl	8005cc0 <TIM_OC1_SetConfig>
      break;
 8005964:	e017      	b.n	8005996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fa17 	bl	8005da0 <TIM_OC2_SetConfig>
      break;
 8005972:	e010      	b.n	8005996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fa86 	bl	8005e8c <TIM_OC3_SetConfig>
      break;
 8005980:	e009      	b.n	8005996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 faf3 	bl	8005f74 <TIM_OC4_SetConfig>
      break;
 800598e:	e002      	b.n	8005996 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
      break;
 8005994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_TIM_ConfigClockSource+0x1c>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e0b4      	b.n	8005b2e <HAL_TIM_ConfigClockSource+0x186>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059fc:	d03e      	beq.n	8005a7c <HAL_TIM_ConfigClockSource+0xd4>
 80059fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a02:	f200 8087 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0a:	f000 8086 	beq.w	8005b1a <HAL_TIM_ConfigClockSource+0x172>
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a12:	d87f      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a14:	2b70      	cmp	r3, #112	@ 0x70
 8005a16:	d01a      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0xa6>
 8005a18:	2b70      	cmp	r3, #112	@ 0x70
 8005a1a:	d87b      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a1c:	2b60      	cmp	r3, #96	@ 0x60
 8005a1e:	d050      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x11a>
 8005a20:	2b60      	cmp	r3, #96	@ 0x60
 8005a22:	d877      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b50      	cmp	r3, #80	@ 0x50
 8005a26:	d03c      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0xfa>
 8005a28:	2b50      	cmp	r3, #80	@ 0x50
 8005a2a:	d873      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d058      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x13a>
 8005a30:	2b40      	cmp	r3, #64	@ 0x40
 8005a32:	d86f      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b30      	cmp	r3, #48	@ 0x30
 8005a36:	d064      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x15a>
 8005a38:	2b30      	cmp	r3, #48	@ 0x30
 8005a3a:	d86b      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d060      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x15a>
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d867      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d05c      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x15a>
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d05a      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x15a>
 8005a4c:	e062      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a5e:	f000 fb59 	bl	8006114 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	609a      	str	r2, [r3, #8]
      break;
 8005a7a:	e04f      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a8c:	f000 fb42 	bl	8006114 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a9e:	609a      	str	r2, [r3, #8]
      break;
 8005aa0:	e03c      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 fab6 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2150      	movs	r1, #80	@ 0x50
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fb0f 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e02c      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f000 fad5 	bl	800607e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2160      	movs	r1, #96	@ 0x60
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 faff 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005ae0:	e01c      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aee:	461a      	mov	r2, r3
 8005af0:	f000 fa96 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2140      	movs	r1, #64	@ 0x40
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 faef 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005b00:	e00c      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f000 fae6 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005b12:	e003      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      break;
 8005b18:	e000      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a43      	ldr	r2, [pc, #268]	@ (8005c94 <TIM_Base_SetConfig+0x120>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b92:	d00f      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a40      	ldr	r2, [pc, #256]	@ (8005c98 <TIM_Base_SetConfig+0x124>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c9c <TIM_Base_SetConfig+0x128>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3d      	ldr	r2, [pc, #244]	@ (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d108      	bne.n	8005bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a32      	ldr	r2, [pc, #200]	@ (8005c94 <TIM_Base_SetConfig+0x120>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd4:	d027      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d023      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2e      	ldr	r2, [pc, #184]	@ (8005c9c <TIM_Base_SetConfig+0x128>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2d      	ldr	r2, [pc, #180]	@ (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d017      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca8 <TIM_Base_SetConfig+0x134>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2a      	ldr	r2, [pc, #168]	@ (8005cac <TIM_Base_SetConfig+0x138>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a29      	ldr	r2, [pc, #164]	@ (8005cb0 <TIM_Base_SetConfig+0x13c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a28      	ldr	r2, [pc, #160]	@ (8005cb4 <TIM_Base_SetConfig+0x140>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a27      	ldr	r2, [pc, #156]	@ (8005cb8 <TIM_Base_SetConfig+0x144>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a26      	ldr	r2, [pc, #152]	@ (8005cbc <TIM_Base_SetConfig+0x148>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a0e      	ldr	r2, [pc, #56]	@ (8005c94 <TIM_Base_SetConfig+0x120>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_Base_SetConfig+0xf2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a10      	ldr	r2, [pc, #64]	@ (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d103      	bne.n	8005c6e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f043 0204 	orr.w	r2, r3, #4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	601a      	str	r2, [r3, #0]
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	40010400 	.word	0x40010400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800
 8005cb4:	40001800 	.word	0x40001800
 8005cb8:	40001c00 	.word	0x40001c00
 8005cbc:	40002000 	.word	0x40002000

08005cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f023 0201 	bic.w	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f023 0302 	bic.w	r3, r3, #2
 8005d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a20      	ldr	r2, [pc, #128]	@ (8005d98 <TIM_OC1_SetConfig+0xd8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC1_SetConfig+0x64>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d9c <TIM_OC1_SetConfig+0xdc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0308 	bic.w	r3, r3, #8
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a15      	ldr	r2, [pc, #84]	@ (8005d98 <TIM_OC1_SetConfig+0xd8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC1_SetConfig+0x8e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a14      	ldr	r2, [pc, #80]	@ (8005d9c <TIM_OC1_SetConfig+0xdc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d111      	bne.n	8005d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40010400 	.word	0x40010400

08005da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f023 0210 	bic.w	r2, r3, #16
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0320 	bic.w	r3, r3, #32
 8005dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a22      	ldr	r2, [pc, #136]	@ (8005e84 <TIM_OC2_SetConfig+0xe4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC2_SetConfig+0x68>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a21      	ldr	r2, [pc, #132]	@ (8005e88 <TIM_OC2_SetConfig+0xe8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10d      	bne.n	8005e24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a17      	ldr	r2, [pc, #92]	@ (8005e84 <TIM_OC2_SetConfig+0xe4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_OC2_SetConfig+0x94>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a16      	ldr	r2, [pc, #88]	@ (8005e88 <TIM_OC2_SetConfig+0xe8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d113      	bne.n	8005e5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a21      	ldr	r2, [pc, #132]	@ (8005f6c <TIM_OC3_SetConfig+0xe0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC3_SetConfig+0x66>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a20      	ldr	r2, [pc, #128]	@ (8005f70 <TIM_OC3_SetConfig+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a16      	ldr	r2, [pc, #88]	@ (8005f6c <TIM_OC3_SetConfig+0xe0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_OC3_SetConfig+0x92>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a15      	ldr	r2, [pc, #84]	@ (8005f70 <TIM_OC3_SetConfig+0xe4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d113      	bne.n	8005f46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	621a      	str	r2, [r3, #32]
}
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40010400 	.word	0x40010400

08005f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	031b      	lsls	r3, r3, #12
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a12      	ldr	r2, [pc, #72]	@ (8006018 <TIM_OC4_SetConfig+0xa4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC4_SetConfig+0x68>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a11      	ldr	r2, [pc, #68]	@ (800601c <TIM_OC4_SetConfig+0xa8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d109      	bne.n	8005ff0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	019b      	lsls	r3, r3, #6
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400

08006020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 030a 	bic.w	r3, r3, #10
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f023 0210 	bic.w	r2, r3, #16
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 0307 	orr.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800612e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	431a      	orrs	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	2201      	movs	r2, #1
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	43db      	mvns	r3, r3
 8006176:	401a      	ands	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a1a      	ldr	r2, [r3, #32]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	431a      	orrs	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e05a      	b.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a21      	ldr	r2, [pc, #132]	@ (800627c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d022      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006204:	d01d      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1d      	ldr	r2, [pc, #116]	@ (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d018      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1b      	ldr	r2, [pc, #108]	@ (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d013      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1a      	ldr	r2, [pc, #104]	@ (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00e      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a18      	ldr	r2, [pc, #96]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d009      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a17      	ldr	r2, [pc, #92]	@ (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a15      	ldr	r2, [pc, #84]	@ (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d10c      	bne.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	4313      	orrs	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40010000 	.word	0x40010000
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40000c00 	.word	0x40000c00
 800628c:	40010400 	.word	0x40010400
 8006290:	40014000 	.word	0x40014000
 8006294:	40001800 	.word	0x40001800

08006298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e03d      	b.n	8006330 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e042      	b.n	80063fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fb f8f8 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2224      	movs	r2, #36	@ 0x24
 8006394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fe0b 	bl	8006fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	@ 0x28
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b20      	cmp	r3, #32
 8006422:	d175      	bne.n	8006510 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_UART_Transmit+0x2c>
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e06e      	b.n	8006512 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2221      	movs	r2, #33	@ 0x21
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006442:	f7fd f985 	bl	8003750 <HAL_GetTick>
 8006446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	88fa      	ldrh	r2, [r7, #6]
 800644c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	88fa      	ldrh	r2, [r7, #6]
 8006452:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645c:	d108      	bne.n	8006470 <HAL_UART_Transmit+0x6c>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006466:	2300      	movs	r3, #0
 8006468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	e003      	b.n	8006478 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006478:	e02e      	b.n	80064d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	2180      	movs	r1, #128	@ 0x80
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fba9 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e03a      	b.n	8006512 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	3302      	adds	r3, #2
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	e007      	b.n	80064ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	3301      	adds	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1cb      	bne.n	800647a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2200      	movs	r2, #0
 80064ea:	2140      	movs	r1, #64	@ 0x40
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fb75 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e006      	b.n	8006512 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3720      	adds	r7, #32
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b08a      	sub	sp, #40	@ 0x28
 800651e:	af02      	add	r7, sp, #8
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b20      	cmp	r3, #32
 8006538:	f040 8081 	bne.w	800663e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_UART_Receive+0x2e>
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e079      	b.n	8006640 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2222      	movs	r2, #34	@ 0x22
 8006556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006560:	f7fd f8f6 	bl	8003750 <HAL_GetTick>
 8006564:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	88fa      	ldrh	r2, [r7, #6]
 800656a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657a:	d108      	bne.n	800658e <HAL_UART_Receive+0x74>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	61bb      	str	r3, [r7, #24]
 800658c:	e003      	b.n	8006596 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006596:	e047      	b.n	8006628 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	2120      	movs	r1, #32
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 fb1a 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e042      	b.n	8006640 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10c      	bne.n	80065da <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	3302      	adds	r3, #2
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e01f      	b.n	800661a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e2:	d007      	beq.n	80065f4 <HAL_UART_Receive+0xda>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <HAL_UART_Receive+0xe8>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	701a      	strb	r2, [r3, #0]
 8006600:	e008      	b.n	8006614 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800660e:	b2da      	uxtb	r2, r3
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	3301      	adds	r3, #1
 8006618:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1b2      	bne.n	8006598 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	e000      	b.n	8006640 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800663e:	2302      	movs	r3, #2
  }
}
 8006640:	4618      	mov	r0, r3
 8006642:	3720      	adds	r7, #32
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b0ba      	sub	sp, #232	@ 0xe8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800666e:	2300      	movs	r3, #0
 8006670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006674:	2300      	movs	r3, #0
 8006676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10f      	bne.n	80066ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <HAL_UART_IRQHandler+0x66>
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fbcd 	bl	8006e46 <UART_Receive_IT>
      return;
 80066ac:	e273      	b.n	8006b96 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80de 	beq.w	8006874 <HAL_UART_IRQHandler+0x22c>
 80066b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80d1 	beq.w	8006874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <HAL_UART_IRQHandler+0xae>
 80066de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ee:	f043 0201 	orr.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <HAL_UART_IRQHandler+0xd2>
 8006702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	f043 0202 	orr.w	r2, r3, #2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <HAL_UART_IRQHandler+0xf6>
 8006726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006736:	f043 0204 	orr.w	r2, r3, #4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d011      	beq.n	800676e <HAL_UART_IRQHandler+0x126>
 800674a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d105      	bne.n	8006762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006766:	f043 0208 	orr.w	r2, r3, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 820a 	beq.w	8006b8c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_UART_IRQHandler+0x14e>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fb58 	bl	8006e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a0:	2b40      	cmp	r3, #64	@ 0x40
 80067a2:	bf0c      	ite	eq
 80067a4:	2301      	moveq	r3, #1
 80067a6:	2300      	movne	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <HAL_UART_IRQHandler+0x17a>
 80067ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d04f      	beq.n	8006862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa63 	bl	8006c8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b40      	cmp	r3, #64	@ 0x40
 80067d4:	d141      	bne.n	800685a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3314      	adds	r3, #20
 80067dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800680e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800681a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1d9      	bne.n	80067d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d013      	beq.n	8006852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682e:	4a8a      	ldr	r2, [pc, #552]	@ (8006a58 <HAL_UART_IRQHandler+0x410>)
 8006830:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd f93b 	bl	8003ab2 <HAL_DMA_Abort_IT>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	e00e      	b.n	8006870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9ac 	bl	8006bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	e00a      	b.n	8006870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f9a8 	bl	8006bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	e006      	b.n	8006870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9a4 	bl	8006bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800686e:	e18d      	b.n	8006b8c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	bf00      	nop
    return;
 8006872:	e18b      	b.n	8006b8c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	2b01      	cmp	r3, #1
 800687a:	f040 8167 	bne.w	8006b4c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 8160 	beq.w	8006b4c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800688c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8159 	beq.w	8006b4c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ba:	2b40      	cmp	r3, #64	@ 0x40
 80068bc:	f040 80ce 	bne.w	8006a5c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 80a9 	beq.w	8006a28 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068de:	429a      	cmp	r2, r3
 80068e0:	f080 80a2 	bcs.w	8006a28 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f6:	f000 8088 	beq.w	8006a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006926:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800692a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800693e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1d9      	bne.n	80068fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3314      	adds	r3, #20
 800694c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800696a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800696e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800697c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e1      	bne.n	8006946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3314      	adds	r3, #20
 80069a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e3      	bne.n	8006982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e3      	bne.n	80069c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fc ffe4 	bl	80039d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f8cf 	bl	8006bc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006a26:	e0b3      	b.n	8006b90 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a30:	429a      	cmp	r2, r3
 8006a32:	f040 80ad 	bne.w	8006b90 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a40:	f040 80a6 	bne.w	8006b90 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8b7 	bl	8006bc4 <HAL_UARTEx_RxEventCallback>
      return;
 8006a56:	e09b      	b.n	8006b90 <HAL_UART_IRQHandler+0x548>
 8006a58:	08006d55 	.word	0x08006d55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 808e 	beq.w	8006b94 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8089 	beq.w	8006b94 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	330c      	adds	r3, #12
 8006a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e3      	bne.n	8006a82 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3314      	adds	r3, #20
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f023 0301 	bic.w	r3, r3, #1
 8006ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3314      	adds	r3, #20
 8006ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e3      	bne.n	8006aba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0310 	bic.w	r3, r3, #16
 8006b16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b24:	61fa      	str	r2, [r7, #28]
 8006b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	69b9      	ldr	r1, [r7, #24]
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	617b      	str	r3, [r7, #20]
   return(result);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e3      	bne.n	8006b00 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f83d 	bl	8006bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b4a:	e023      	b.n	8006b94 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <HAL_UART_IRQHandler+0x524>
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f906 	bl	8006d76 <UART_Transmit_IT>
    return;
 8006b6a:	e014      	b.n	8006b96 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00e      	beq.n	8006b96 <HAL_UART_IRQHandler+0x54e>
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f946 	bl	8006e16 <UART_EndTransmit_IT>
    return;
 8006b8a:	e004      	b.n	8006b96 <HAL_UART_IRQHandler+0x54e>
    return;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <HAL_UART_IRQHandler+0x54e>
      return;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <HAL_UART_IRQHandler+0x54e>
      return;
 8006b94:	bf00      	nop
  }
}
 8006b96:	37e8      	adds	r7, #232	@ 0xe8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	4613      	mov	r3, r2
 8006bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bec:	e03b      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d037      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fc fdab 	bl	8003750 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e03a      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d023      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b80      	cmp	r3, #128	@ 0x80
 8006c22:	d020      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d01d      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d116      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f81d 	bl	8006c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2208      	movs	r2, #8
 8006c58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e00f      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	bf0c      	ite	eq
 8006c76:	2301      	moveq	r3, #1
 8006c78:	2300      	movne	r3, #0
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d0b4      	beq.n	8006bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b095      	sub	sp, #84	@ 0x54
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e5      	bne.n	8006c96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3314      	adds	r3, #20
 8006cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d119      	bne.n	8006d3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f023 0310 	bic.w	r3, r3, #16
 8006d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d26:	61ba      	str	r2, [r7, #24]
 8006d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6979      	ldr	r1, [r7, #20]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	613b      	str	r3, [r7, #16]
   return(result);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e5      	bne.n	8006d06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d48:	bf00      	nop
 8006d4a:	3754      	adds	r7, #84	@ 0x54
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff ff21 	bl	8006bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b21      	cmp	r3, #33	@ 0x21
 8006d88:	d13e      	bne.n	8006e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d92:	d114      	bne.n	8006dbe <UART_Transmit_IT+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d110      	bne.n	8006dbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	1c9a      	adds	r2, r3, #2
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	621a      	str	r2, [r3, #32]
 8006dbc:	e008      	b.n	8006dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6211      	str	r1, [r2, #32]
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10f      	bne.n	8006e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e000      	b.n	8006e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff feb0 	bl	8006b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b08c      	sub	sp, #48	@ 0x30
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b22      	cmp	r3, #34	@ 0x22
 8006e60:	f040 80aa 	bne.w	8006fb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6c:	d115      	bne.n	8006e9a <UART_Receive_IT+0x54>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d111      	bne.n	8006e9a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	1c9a      	adds	r2, r3, #2
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e98:	e024      	b.n	8006ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea8:	d007      	beq.n	8006eba <UART_Receive_IT+0x74>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <UART_Receive_IT+0x82>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e008      	b.n	8006eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d15d      	bne.n	8006fb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0220 	bic.w	r2, r2, #32
 8006f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d135      	bne.n	8006faa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	613b      	str	r3, [r7, #16]
   return(result);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f023 0310 	bic.w	r3, r3, #16
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f64:	623a      	str	r2, [r7, #32]
 8006f66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	69f9      	ldr	r1, [r7, #28]
 8006f6a:	6a3a      	ldr	r2, [r7, #32]
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e5      	bne.n	8006f44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	2b10      	cmp	r3, #16
 8006f84:	d10a      	bne.n	8006f9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff fe0e 	bl	8006bc4 <HAL_UARTEx_RxEventCallback>
 8006fa8:	e002      	b.n	8006fb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7f9 fac8 	bl	8000540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e002      	b.n	8006fba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e000      	b.n	8006fba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3730      	adds	r7, #48	@ 0x30
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc8:	b0c0      	sub	sp, #256	@ 0x100
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe0:	68d9      	ldr	r1, [r3, #12]
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	ea40 0301 	orr.w	r3, r0, r1
 8006fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	431a      	orrs	r2, r3
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800701c:	f021 010c 	bic.w	r1, r1, #12
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800702a:	430b      	orrs	r3, r1
 800702c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800702e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800703a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703e:	6999      	ldr	r1, [r3, #24]
 8007040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	ea40 0301 	orr.w	r3, r0, r1
 800704a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800704c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b8f      	ldr	r3, [pc, #572]	@ (8007290 <UART_SetConfig+0x2cc>)
 8007054:	429a      	cmp	r2, r3
 8007056:	d005      	beq.n	8007064 <UART_SetConfig+0xa0>
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4b8d      	ldr	r3, [pc, #564]	@ (8007294 <UART_SetConfig+0x2d0>)
 8007060:	429a      	cmp	r2, r3
 8007062:	d104      	bne.n	800706e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007064:	f7fd fcdc 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 8007068:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800706c:	e003      	b.n	8007076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800706e:	f7fd fcc3 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8007072:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007080:	f040 810c 	bne.w	800729c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007088:	2200      	movs	r2, #0
 800708a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800708e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007096:	4622      	mov	r2, r4
 8007098:	462b      	mov	r3, r5
 800709a:	1891      	adds	r1, r2, r2
 800709c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800709e:	415b      	adcs	r3, r3
 80070a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80070a6:	4621      	mov	r1, r4
 80070a8:	eb12 0801 	adds.w	r8, r2, r1
 80070ac:	4629      	mov	r1, r5
 80070ae:	eb43 0901 	adc.w	r9, r3, r1
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070c6:	4690      	mov	r8, r2
 80070c8:	4699      	mov	r9, r3
 80070ca:	4623      	mov	r3, r4
 80070cc:	eb18 0303 	adds.w	r3, r8, r3
 80070d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070d4:	462b      	mov	r3, r5
 80070d6:	eb49 0303 	adc.w	r3, r9, r3
 80070da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80070ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070f2:	460b      	mov	r3, r1
 80070f4:	18db      	adds	r3, r3, r3
 80070f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80070f8:	4613      	mov	r3, r2
 80070fa:	eb42 0303 	adc.w	r3, r2, r3
 80070fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007108:	f7f9 f884 	bl	8000214 <__aeabi_uldivmod>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4b61      	ldr	r3, [pc, #388]	@ (8007298 <UART_SetConfig+0x2d4>)
 8007112:	fba3 2302 	umull	r2, r3, r3, r2
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	011c      	lsls	r4, r3, #4
 800711a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800711e:	2200      	movs	r2, #0
 8007120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007124:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800712c:	4642      	mov	r2, r8
 800712e:	464b      	mov	r3, r9
 8007130:	1891      	adds	r1, r2, r2
 8007132:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007134:	415b      	adcs	r3, r3
 8007136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800713c:	4641      	mov	r1, r8
 800713e:	eb12 0a01 	adds.w	sl, r2, r1
 8007142:	4649      	mov	r1, r9
 8007144:	eb43 0b01 	adc.w	fp, r3, r1
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800715c:	4692      	mov	sl, r2
 800715e:	469b      	mov	fp, r3
 8007160:	4643      	mov	r3, r8
 8007162:	eb1a 0303 	adds.w	r3, sl, r3
 8007166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800716a:	464b      	mov	r3, r9
 800716c:	eb4b 0303 	adc.w	r3, fp, r3
 8007170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007180:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007188:	460b      	mov	r3, r1
 800718a:	18db      	adds	r3, r3, r3
 800718c:	643b      	str	r3, [r7, #64]	@ 0x40
 800718e:	4613      	mov	r3, r2
 8007190:	eb42 0303 	adc.w	r3, r2, r3
 8007194:	647b      	str	r3, [r7, #68]	@ 0x44
 8007196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800719a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800719e:	f7f9 f839 	bl	8000214 <__aeabi_uldivmod>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007298 <UART_SetConfig+0x2d4>)
 80071aa:	fba3 2301 	umull	r2, r3, r3, r1
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	2264      	movs	r2, #100	@ 0x64
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	1acb      	subs	r3, r1, r3
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80071be:	4b36      	ldr	r3, [pc, #216]	@ (8007298 <UART_SetConfig+0x2d4>)
 80071c0:	fba3 2302 	umull	r2, r3, r3, r2
 80071c4:	095b      	lsrs	r3, r3, #5
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80071cc:	441c      	add	r4, r3
 80071ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80071dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80071e0:	4642      	mov	r2, r8
 80071e2:	464b      	mov	r3, r9
 80071e4:	1891      	adds	r1, r2, r2
 80071e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80071e8:	415b      	adcs	r3, r3
 80071ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071f0:	4641      	mov	r1, r8
 80071f2:	1851      	adds	r1, r2, r1
 80071f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80071f6:	4649      	mov	r1, r9
 80071f8:	414b      	adcs	r3, r1
 80071fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007208:	4659      	mov	r1, fp
 800720a:	00cb      	lsls	r3, r1, #3
 800720c:	4651      	mov	r1, sl
 800720e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007212:	4651      	mov	r1, sl
 8007214:	00ca      	lsls	r2, r1, #3
 8007216:	4610      	mov	r0, r2
 8007218:	4619      	mov	r1, r3
 800721a:	4603      	mov	r3, r0
 800721c:	4642      	mov	r2, r8
 800721e:	189b      	adds	r3, r3, r2
 8007220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007224:	464b      	mov	r3, r9
 8007226:	460a      	mov	r2, r1
 8007228:	eb42 0303 	adc.w	r3, r2, r3
 800722c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800723c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007244:	460b      	mov	r3, r1
 8007246:	18db      	adds	r3, r3, r3
 8007248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800724a:	4613      	mov	r3, r2
 800724c:	eb42 0303 	adc.w	r3, r2, r3
 8007250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800725a:	f7f8 ffdb 	bl	8000214 <__aeabi_uldivmod>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4b0d      	ldr	r3, [pc, #52]	@ (8007298 <UART_SetConfig+0x2d4>)
 8007264:	fba3 1302 	umull	r1, r3, r3, r2
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	2164      	movs	r1, #100	@ 0x64
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	3332      	adds	r3, #50	@ 0x32
 8007276:	4a08      	ldr	r2, [pc, #32]	@ (8007298 <UART_SetConfig+0x2d4>)
 8007278:	fba2 2303 	umull	r2, r3, r2, r3
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	f003 0207 	and.w	r2, r3, #7
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4422      	add	r2, r4
 800728a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800728c:	e106      	b.n	800749c <UART_SetConfig+0x4d8>
 800728e:	bf00      	nop
 8007290:	40011000 	.word	0x40011000
 8007294:	40011400 	.word	0x40011400
 8007298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800729c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80072aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80072ae:	4642      	mov	r2, r8
 80072b0:	464b      	mov	r3, r9
 80072b2:	1891      	adds	r1, r2, r2
 80072b4:	6239      	str	r1, [r7, #32]
 80072b6:	415b      	adcs	r3, r3
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072be:	4641      	mov	r1, r8
 80072c0:	1854      	adds	r4, r2, r1
 80072c2:	4649      	mov	r1, r9
 80072c4:	eb43 0501 	adc.w	r5, r3, r1
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	00eb      	lsls	r3, r5, #3
 80072d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072d6:	00e2      	lsls	r2, r4, #3
 80072d8:	4614      	mov	r4, r2
 80072da:	461d      	mov	r5, r3
 80072dc:	4643      	mov	r3, r8
 80072de:	18e3      	adds	r3, r4, r3
 80072e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072e4:	464b      	mov	r3, r9
 80072e6:	eb45 0303 	adc.w	r3, r5, r3
 80072ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800730a:	4629      	mov	r1, r5
 800730c:	008b      	lsls	r3, r1, #2
 800730e:	4621      	mov	r1, r4
 8007310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007314:	4621      	mov	r1, r4
 8007316:	008a      	lsls	r2, r1, #2
 8007318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800731c:	f7f8 ff7a 	bl	8000214 <__aeabi_uldivmod>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4b60      	ldr	r3, [pc, #384]	@ (80074a8 <UART_SetConfig+0x4e4>)
 8007326:	fba3 2302 	umull	r2, r3, r3, r2
 800732a:	095b      	lsrs	r3, r3, #5
 800732c:	011c      	lsls	r4, r3, #4
 800732e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007332:	2200      	movs	r2, #0
 8007334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007338:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800733c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007340:	4642      	mov	r2, r8
 8007342:	464b      	mov	r3, r9
 8007344:	1891      	adds	r1, r2, r2
 8007346:	61b9      	str	r1, [r7, #24]
 8007348:	415b      	adcs	r3, r3
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007350:	4641      	mov	r1, r8
 8007352:	1851      	adds	r1, r2, r1
 8007354:	6139      	str	r1, [r7, #16]
 8007356:	4649      	mov	r1, r9
 8007358:	414b      	adcs	r3, r1
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	f04f 0300 	mov.w	r3, #0
 8007364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007368:	4659      	mov	r1, fp
 800736a:	00cb      	lsls	r3, r1, #3
 800736c:	4651      	mov	r1, sl
 800736e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007372:	4651      	mov	r1, sl
 8007374:	00ca      	lsls	r2, r1, #3
 8007376:	4610      	mov	r0, r2
 8007378:	4619      	mov	r1, r3
 800737a:	4603      	mov	r3, r0
 800737c:	4642      	mov	r2, r8
 800737e:	189b      	adds	r3, r3, r2
 8007380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007384:	464b      	mov	r3, r9
 8007386:	460a      	mov	r2, r1
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	67bb      	str	r3, [r7, #120]	@ 0x78
 800739a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80073a8:	4649      	mov	r1, r9
 80073aa:	008b      	lsls	r3, r1, #2
 80073ac:	4641      	mov	r1, r8
 80073ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073b2:	4641      	mov	r1, r8
 80073b4:	008a      	lsls	r2, r1, #2
 80073b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073ba:	f7f8 ff2b 	bl	8000214 <__aeabi_uldivmod>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	4b38      	ldr	r3, [pc, #224]	@ (80074a8 <UART_SetConfig+0x4e4>)
 80073c6:	fba3 2301 	umull	r2, r3, r3, r1
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	2264      	movs	r2, #100	@ 0x64
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	1acb      	subs	r3, r1, r3
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	3332      	adds	r3, #50	@ 0x32
 80073d8:	4a33      	ldr	r2, [pc, #204]	@ (80074a8 <UART_SetConfig+0x4e4>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073e4:	441c      	add	r4, r3
 80073e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ea:	2200      	movs	r2, #0
 80073ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80073ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80073f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80073f4:	4642      	mov	r2, r8
 80073f6:	464b      	mov	r3, r9
 80073f8:	1891      	adds	r1, r2, r2
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	415b      	adcs	r3, r3
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007404:	4641      	mov	r1, r8
 8007406:	1851      	adds	r1, r2, r1
 8007408:	6039      	str	r1, [r7, #0]
 800740a:	4649      	mov	r1, r9
 800740c:	414b      	adcs	r3, r1
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800741c:	4659      	mov	r1, fp
 800741e:	00cb      	lsls	r3, r1, #3
 8007420:	4651      	mov	r1, sl
 8007422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007426:	4651      	mov	r1, sl
 8007428:	00ca      	lsls	r2, r1, #3
 800742a:	4610      	mov	r0, r2
 800742c:	4619      	mov	r1, r3
 800742e:	4603      	mov	r3, r0
 8007430:	4642      	mov	r2, r8
 8007432:	189b      	adds	r3, r3, r2
 8007434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007436:	464b      	mov	r3, r9
 8007438:	460a      	mov	r2, r1
 800743a:	eb42 0303 	adc.w	r3, r2, r3
 800743e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	663b      	str	r3, [r7, #96]	@ 0x60
 800744a:	667a      	str	r2, [r7, #100]	@ 0x64
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007458:	4649      	mov	r1, r9
 800745a:	008b      	lsls	r3, r1, #2
 800745c:	4641      	mov	r1, r8
 800745e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007462:	4641      	mov	r1, r8
 8007464:	008a      	lsls	r2, r1, #2
 8007466:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800746a:	f7f8 fed3 	bl	8000214 <__aeabi_uldivmod>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <UART_SetConfig+0x4e4>)
 8007474:	fba3 1302 	umull	r1, r3, r3, r2
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	2164      	movs	r1, #100	@ 0x64
 800747c:	fb01 f303 	mul.w	r3, r1, r3
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	3332      	adds	r3, #50	@ 0x32
 8007486:	4a08      	ldr	r2, [pc, #32]	@ (80074a8 <UART_SetConfig+0x4e4>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	f003 020f 	and.w	r2, r3, #15
 8007492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4422      	add	r2, r4
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	bf00      	nop
 800749e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80074a2:	46bd      	mov	sp, r7
 80074a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074a8:	51eb851f 	.word	0x51eb851f

080074ac <sqrtf>:
 80074ac:	b508      	push	{r3, lr}
 80074ae:	ed2d 8b02 	vpush	{d8}
 80074b2:	eeb0 8a40 	vmov.f32	s16, s0
 80074b6:	f000 f817 	bl	80074e8 <__ieee754_sqrtf>
 80074ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80074be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c2:	d60c      	bvs.n	80074de <sqrtf+0x32>
 80074c4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80074e4 <sqrtf+0x38>
 80074c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80074cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d0:	d505      	bpl.n	80074de <sqrtf+0x32>
 80074d2:	f000 f8e3 	bl	800769c <__errno>
 80074d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80074da:	2321      	movs	r3, #33	@ 0x21
 80074dc:	6003      	str	r3, [r0, #0]
 80074de:	ecbd 8b02 	vpop	{d8}
 80074e2:	bd08      	pop	{r3, pc}
 80074e4:	00000000 	.word	0x00000000

080074e8 <__ieee754_sqrtf>:
 80074e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80074ec:	4770      	bx	lr
	...

080074f0 <malloc>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	@ (80074fc <malloc+0xc>)
 80074f2:	4601      	mov	r1, r0
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f000 b82d 	b.w	8007554 <_malloc_r>
 80074fa:	bf00      	nop
 80074fc:	2000000c 	.word	0x2000000c

08007500 <free>:
 8007500:	4b02      	ldr	r3, [pc, #8]	@ (800750c <free+0xc>)
 8007502:	4601      	mov	r1, r0
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	f000 b903 	b.w	8007710 <_free_r>
 800750a:	bf00      	nop
 800750c:	2000000c 	.word	0x2000000c

08007510 <sbrk_aligned>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4e0f      	ldr	r6, [pc, #60]	@ (8007550 <sbrk_aligned+0x40>)
 8007514:	460c      	mov	r4, r1
 8007516:	6831      	ldr	r1, [r6, #0]
 8007518:	4605      	mov	r5, r0
 800751a:	b911      	cbnz	r1, 8007522 <sbrk_aligned+0x12>
 800751c:	f000 f8ae 	bl	800767c <_sbrk_r>
 8007520:	6030      	str	r0, [r6, #0]
 8007522:	4621      	mov	r1, r4
 8007524:	4628      	mov	r0, r5
 8007526:	f000 f8a9 	bl	800767c <_sbrk_r>
 800752a:	1c43      	adds	r3, r0, #1
 800752c:	d103      	bne.n	8007536 <sbrk_aligned+0x26>
 800752e:	f04f 34ff 	mov.w	r4, #4294967295
 8007532:	4620      	mov	r0, r4
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	1cc4      	adds	r4, r0, #3
 8007538:	f024 0403 	bic.w	r4, r4, #3
 800753c:	42a0      	cmp	r0, r4
 800753e:	d0f8      	beq.n	8007532 <sbrk_aligned+0x22>
 8007540:	1a21      	subs	r1, r4, r0
 8007542:	4628      	mov	r0, r5
 8007544:	f000 f89a 	bl	800767c <_sbrk_r>
 8007548:	3001      	adds	r0, #1
 800754a:	d1f2      	bne.n	8007532 <sbrk_aligned+0x22>
 800754c:	e7ef      	b.n	800752e <sbrk_aligned+0x1e>
 800754e:	bf00      	nop
 8007550:	20000974 	.word	0x20000974

08007554 <_malloc_r>:
 8007554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007558:	1ccd      	adds	r5, r1, #3
 800755a:	f025 0503 	bic.w	r5, r5, #3
 800755e:	3508      	adds	r5, #8
 8007560:	2d0c      	cmp	r5, #12
 8007562:	bf38      	it	cc
 8007564:	250c      	movcc	r5, #12
 8007566:	2d00      	cmp	r5, #0
 8007568:	4606      	mov	r6, r0
 800756a:	db01      	blt.n	8007570 <_malloc_r+0x1c>
 800756c:	42a9      	cmp	r1, r5
 800756e:	d904      	bls.n	800757a <_malloc_r+0x26>
 8007570:	230c      	movs	r3, #12
 8007572:	6033      	str	r3, [r6, #0]
 8007574:	2000      	movs	r0, #0
 8007576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800757a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007650 <_malloc_r+0xfc>
 800757e:	f000 f869 	bl	8007654 <__malloc_lock>
 8007582:	f8d8 3000 	ldr.w	r3, [r8]
 8007586:	461c      	mov	r4, r3
 8007588:	bb44      	cbnz	r4, 80075dc <_malloc_r+0x88>
 800758a:	4629      	mov	r1, r5
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff ffbf 	bl	8007510 <sbrk_aligned>
 8007592:	1c43      	adds	r3, r0, #1
 8007594:	4604      	mov	r4, r0
 8007596:	d158      	bne.n	800764a <_malloc_r+0xf6>
 8007598:	f8d8 4000 	ldr.w	r4, [r8]
 800759c:	4627      	mov	r7, r4
 800759e:	2f00      	cmp	r7, #0
 80075a0:	d143      	bne.n	800762a <_malloc_r+0xd6>
 80075a2:	2c00      	cmp	r4, #0
 80075a4:	d04b      	beq.n	800763e <_malloc_r+0xea>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	4639      	mov	r1, r7
 80075aa:	4630      	mov	r0, r6
 80075ac:	eb04 0903 	add.w	r9, r4, r3
 80075b0:	f000 f864 	bl	800767c <_sbrk_r>
 80075b4:	4581      	cmp	r9, r0
 80075b6:	d142      	bne.n	800763e <_malloc_r+0xea>
 80075b8:	6821      	ldr	r1, [r4, #0]
 80075ba:	1a6d      	subs	r5, r5, r1
 80075bc:	4629      	mov	r1, r5
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff ffa6 	bl	8007510 <sbrk_aligned>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d03a      	beq.n	800763e <_malloc_r+0xea>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	442b      	add	r3, r5
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	f8d8 3000 	ldr.w	r3, [r8]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	bb62      	cbnz	r2, 8007630 <_malloc_r+0xdc>
 80075d6:	f8c8 7000 	str.w	r7, [r8]
 80075da:	e00f      	b.n	80075fc <_malloc_r+0xa8>
 80075dc:	6822      	ldr	r2, [r4, #0]
 80075de:	1b52      	subs	r2, r2, r5
 80075e0:	d420      	bmi.n	8007624 <_malloc_r+0xd0>
 80075e2:	2a0b      	cmp	r2, #11
 80075e4:	d917      	bls.n	8007616 <_malloc_r+0xc2>
 80075e6:	1961      	adds	r1, r4, r5
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	6025      	str	r5, [r4, #0]
 80075ec:	bf18      	it	ne
 80075ee:	6059      	strne	r1, [r3, #4]
 80075f0:	6863      	ldr	r3, [r4, #4]
 80075f2:	bf08      	it	eq
 80075f4:	f8c8 1000 	streq.w	r1, [r8]
 80075f8:	5162      	str	r2, [r4, r5]
 80075fa:	604b      	str	r3, [r1, #4]
 80075fc:	4630      	mov	r0, r6
 80075fe:	f000 f82f 	bl	8007660 <__malloc_unlock>
 8007602:	f104 000b 	add.w	r0, r4, #11
 8007606:	1d23      	adds	r3, r4, #4
 8007608:	f020 0007 	bic.w	r0, r0, #7
 800760c:	1ac2      	subs	r2, r0, r3
 800760e:	bf1c      	itt	ne
 8007610:	1a1b      	subne	r3, r3, r0
 8007612:	50a3      	strne	r3, [r4, r2]
 8007614:	e7af      	b.n	8007576 <_malloc_r+0x22>
 8007616:	6862      	ldr	r2, [r4, #4]
 8007618:	42a3      	cmp	r3, r4
 800761a:	bf0c      	ite	eq
 800761c:	f8c8 2000 	streq.w	r2, [r8]
 8007620:	605a      	strne	r2, [r3, #4]
 8007622:	e7eb      	b.n	80075fc <_malloc_r+0xa8>
 8007624:	4623      	mov	r3, r4
 8007626:	6864      	ldr	r4, [r4, #4]
 8007628:	e7ae      	b.n	8007588 <_malloc_r+0x34>
 800762a:	463c      	mov	r4, r7
 800762c:	687f      	ldr	r7, [r7, #4]
 800762e:	e7b6      	b.n	800759e <_malloc_r+0x4a>
 8007630:	461a      	mov	r2, r3
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	42a3      	cmp	r3, r4
 8007636:	d1fb      	bne.n	8007630 <_malloc_r+0xdc>
 8007638:	2300      	movs	r3, #0
 800763a:	6053      	str	r3, [r2, #4]
 800763c:	e7de      	b.n	80075fc <_malloc_r+0xa8>
 800763e:	230c      	movs	r3, #12
 8007640:	6033      	str	r3, [r6, #0]
 8007642:	4630      	mov	r0, r6
 8007644:	f000 f80c 	bl	8007660 <__malloc_unlock>
 8007648:	e794      	b.n	8007574 <_malloc_r+0x20>
 800764a:	6005      	str	r5, [r0, #0]
 800764c:	e7d6      	b.n	80075fc <_malloc_r+0xa8>
 800764e:	bf00      	nop
 8007650:	20000978 	.word	0x20000978

08007654 <__malloc_lock>:
 8007654:	4801      	ldr	r0, [pc, #4]	@ (800765c <__malloc_lock+0x8>)
 8007656:	f000 b84b 	b.w	80076f0 <__retarget_lock_acquire_recursive>
 800765a:	bf00      	nop
 800765c:	20000ab8 	.word	0x20000ab8

08007660 <__malloc_unlock>:
 8007660:	4801      	ldr	r0, [pc, #4]	@ (8007668 <__malloc_unlock+0x8>)
 8007662:	f000 b846 	b.w	80076f2 <__retarget_lock_release_recursive>
 8007666:	bf00      	nop
 8007668:	20000ab8 	.word	0x20000ab8

0800766c <memset>:
 800766c:	4402      	add	r2, r0
 800766e:	4603      	mov	r3, r0
 8007670:	4293      	cmp	r3, r2
 8007672:	d100      	bne.n	8007676 <memset+0xa>
 8007674:	4770      	bx	lr
 8007676:	f803 1b01 	strb.w	r1, [r3], #1
 800767a:	e7f9      	b.n	8007670 <memset+0x4>

0800767c <_sbrk_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d06      	ldr	r5, [pc, #24]	@ (8007698 <_sbrk_r+0x1c>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7fa f9c4 	bl	8001a14 <_sbrk>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_sbrk_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_sbrk_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	20000ab4 	.word	0x20000ab4

0800769c <__errno>:
 800769c:	4b01      	ldr	r3, [pc, #4]	@ (80076a4 <__errno+0x8>)
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	2000000c 	.word	0x2000000c

080076a8 <__libc_init_array>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4d0d      	ldr	r5, [pc, #52]	@ (80076e0 <__libc_init_array+0x38>)
 80076ac:	4c0d      	ldr	r4, [pc, #52]	@ (80076e4 <__libc_init_array+0x3c>)
 80076ae:	1b64      	subs	r4, r4, r5
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	2600      	movs	r6, #0
 80076b4:	42a6      	cmp	r6, r4
 80076b6:	d109      	bne.n	80076cc <__libc_init_array+0x24>
 80076b8:	4d0b      	ldr	r5, [pc, #44]	@ (80076e8 <__libc_init_array+0x40>)
 80076ba:	4c0c      	ldr	r4, [pc, #48]	@ (80076ec <__libc_init_array+0x44>)
 80076bc:	f000 f872 	bl	80077a4 <_init>
 80076c0:	1b64      	subs	r4, r4, r5
 80076c2:	10a4      	asrs	r4, r4, #2
 80076c4:	2600      	movs	r6, #0
 80076c6:	42a6      	cmp	r6, r4
 80076c8:	d105      	bne.n	80076d6 <__libc_init_array+0x2e>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d0:	4798      	blx	r3
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7ee      	b.n	80076b4 <__libc_init_array+0xc>
 80076d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076da:	4798      	blx	r3
 80076dc:	3601      	adds	r6, #1
 80076de:	e7f2      	b.n	80076c6 <__libc_init_array+0x1e>
 80076e0:	08008550 	.word	0x08008550
 80076e4:	08008550 	.word	0x08008550
 80076e8:	08008550 	.word	0x08008550
 80076ec:	08008554 	.word	0x08008554

080076f0 <__retarget_lock_acquire_recursive>:
 80076f0:	4770      	bx	lr

080076f2 <__retarget_lock_release_recursive>:
 80076f2:	4770      	bx	lr

080076f4 <memcpy>:
 80076f4:	440a      	add	r2, r1
 80076f6:	4291      	cmp	r1, r2
 80076f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076fc:	d100      	bne.n	8007700 <memcpy+0xc>
 80076fe:	4770      	bx	lr
 8007700:	b510      	push	{r4, lr}
 8007702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800770a:	4291      	cmp	r1, r2
 800770c:	d1f9      	bne.n	8007702 <memcpy+0xe>
 800770e:	bd10      	pop	{r4, pc}

08007710 <_free_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4605      	mov	r5, r0
 8007714:	2900      	cmp	r1, #0
 8007716:	d041      	beq.n	800779c <_free_r+0x8c>
 8007718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800771c:	1f0c      	subs	r4, r1, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfb8      	it	lt
 8007722:	18e4      	addlt	r4, r4, r3
 8007724:	f7ff ff96 	bl	8007654 <__malloc_lock>
 8007728:	4a1d      	ldr	r2, [pc, #116]	@ (80077a0 <_free_r+0x90>)
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	b933      	cbnz	r3, 800773c <_free_r+0x2c>
 800772e:	6063      	str	r3, [r4, #4]
 8007730:	6014      	str	r4, [r2, #0]
 8007732:	4628      	mov	r0, r5
 8007734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007738:	f7ff bf92 	b.w	8007660 <__malloc_unlock>
 800773c:	42a3      	cmp	r3, r4
 800773e:	d908      	bls.n	8007752 <_free_r+0x42>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	1821      	adds	r1, r4, r0
 8007744:	428b      	cmp	r3, r1
 8007746:	bf01      	itttt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	1809      	addeq	r1, r1, r0
 800774e:	6021      	streq	r1, [r4, #0]
 8007750:	e7ed      	b.n	800772e <_free_r+0x1e>
 8007752:	461a      	mov	r2, r3
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b10b      	cbz	r3, 800775c <_free_r+0x4c>
 8007758:	42a3      	cmp	r3, r4
 800775a:	d9fa      	bls.n	8007752 <_free_r+0x42>
 800775c:	6811      	ldr	r1, [r2, #0]
 800775e:	1850      	adds	r0, r2, r1
 8007760:	42a0      	cmp	r0, r4
 8007762:	d10b      	bne.n	800777c <_free_r+0x6c>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	4401      	add	r1, r0
 8007768:	1850      	adds	r0, r2, r1
 800776a:	4283      	cmp	r3, r0
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	d1e0      	bne.n	8007732 <_free_r+0x22>
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	6053      	str	r3, [r2, #4]
 8007776:	4408      	add	r0, r1
 8007778:	6010      	str	r0, [r2, #0]
 800777a:	e7da      	b.n	8007732 <_free_r+0x22>
 800777c:	d902      	bls.n	8007784 <_free_r+0x74>
 800777e:	230c      	movs	r3, #12
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	e7d6      	b.n	8007732 <_free_r+0x22>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	1821      	adds	r1, r4, r0
 8007788:	428b      	cmp	r3, r1
 800778a:	bf04      	itt	eq
 800778c:	6819      	ldreq	r1, [r3, #0]
 800778e:	685b      	ldreq	r3, [r3, #4]
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	bf04      	itt	eq
 8007794:	1809      	addeq	r1, r1, r0
 8007796:	6021      	streq	r1, [r4, #0]
 8007798:	6054      	str	r4, [r2, #4]
 800779a:	e7ca      	b.n	8007732 <_free_r+0x22>
 800779c:	bd38      	pop	{r3, r4, r5, pc}
 800779e:	bf00      	nop
 80077a0:	20000978 	.word	0x20000978

080077a4 <_init>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr

080077b0 <_fini>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	bf00      	nop
 80077b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b6:	bc08      	pop	{r3}
 80077b8:	469e      	mov	lr, r3
 80077ba:	4770      	bx	lr
