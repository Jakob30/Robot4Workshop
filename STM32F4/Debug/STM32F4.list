
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b620  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001048  0800b7f0  0800b7f0  0000c7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c838  0800c838  0000e05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c838  0800c838  0000d838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c840  0800c840  0000e05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c840  0800c840  0000d840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c844  0800c844  0000d844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800c848  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a5c  2000005c  0800c8a4  0000e05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  0800c8a4  0000eab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3f1  00000000  00000000  0000e08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ccc  00000000  00000000  0002a47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0002e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010cb  00000000  00000000  0002f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025291  00000000  00000000  000307b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d59b  00000000  00000000  00055a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d776c  00000000  00000000  00072fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a74b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006528  00000000  00000000  0014a790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00150cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b7d8 	.word	0x0800b7d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800b7d8 	.word	0x0800b7d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <HAL_UART_RxCpltCallback>:
    }
    return crc;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x20>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d102      	bne.n	8000fcc <HAL_UART_RxCpltCallback+0x18>
	{
		writeDisplay("Hello World");
 8000fc6:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x24>)
 8000fc8:	f002 f84e 	bl	8003068 <writeDisplay>
//		writeDisplay(feedback_msg);
//		HAL_UART_Receive_IT(huart, datagram, 10);
	}


}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	0800b7f0 	.word	0x0800b7f0

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	f5ad 6d10 	sub.w	sp, sp, #2304	@ 0x900
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f004 f8de 	bl	80051a4 <HAL_Init>
  motor_t motor2;
  motor_t motor3;
  motor_t motor4;
  motor_t motor5;

  motors[0] = &motor1;
 8000fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80010dc <main+0x100>)
 8000fea:	f207 5374 	addw	r3, r7, #1396	@ 0x574
 8000fee:	6013      	str	r3, [r2, #0]
  motors[1] = &motor2;
 8000ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80010dc <main+0x100>)
 8000ff2:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000ff6:	6053      	str	r3, [r2, #4]
  motors[2] = &motor3;
 8000ff8:	4a38      	ldr	r2, [pc, #224]	@ (80010dc <main+0x100>)
 8000ffa:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8000ffe:	6093      	str	r3, [r2, #8]
  motors[3] = &motor4;
 8001000:	4a36      	ldr	r2, [pc, #216]	@ (80010dc <main+0x100>)
 8001002:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001006:	60d3      	str	r3, [r2, #12]
  motors[4] = &motor5;
 8001008:	4a34      	ldr	r2, [pc, #208]	@ (80010dc <main+0x100>)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	6113      	str	r3, [r2, #16]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f871 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 fd51 	bl	8001ab8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001016:	f000 fcd1 	bl	80019bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800101a:	f000 fca5 	bl	8001968 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800101e:	f000 f8d7 	bl	80011d0 <MX_I2C1_Init>
  MX_UART4_Init();
 8001022:	f000 fc4d 	bl	80018c0 <MX_UART4_Init>
  MX_UART5_Init();
 8001026:	f000 fc75 	bl	8001914 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800102a:	f000 fcf1 	bl	8001a10 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800102e:	f000 fd19 	bl	8001a64 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001032:	f000 f94b 	bl	80012cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001036:	f000 f9bd 	bl	80013b4 <MX_TIM4_Init>
  MX_TIM9_Init();
 800103a:	f000 fb39 	bl	80016b0 <MX_TIM9_Init>
  MX_TIM8_Init();
 800103e:	f000 fa99 	bl	8001574 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001042:	f000 fb93 	bl	800176c <MX_TIM12_Init>
  MX_TIM13_Init();
 8001046:	f000 fbf1 	bl	800182c <MX_TIM13_Init>
  MX_TIM1_Init();
 800104a:	f000 f8ef 	bl	800122c <MX_TIM1_Init>
  MX_TIM6_Init();
 800104e:	f000 fa25 	bl	800149c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001052:	f000 fa59 	bl	8001508 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001056:	f000 fb65 	bl	8001724 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_motor_1(&motor1, &driver1);
 800105a:	f507 6209 	add.w	r2, r7, #2192	@ 0x890
 800105e:	f207 5374 	addw	r3, r7, #1396	@ 0x574
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fbb1 	bl	80047cc <init_motor_1>
  init_motor_2(&motor2, &driver2);
 800106a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800106e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fc65 	bl	8004944 <init_motor_2>
  init_motor_3(&motor3, &driver3);
 800107a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 800107e:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fd35 	bl	8004af4 <init_motor_3>
  init_motor_4(&motor4, &driver4);
 800108a:	f507 62e8 	add.w	r2, r7, #1856	@ 0x740
 800108e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fdf1 	bl	8004c7c <init_motor_4>
  init_motor_5(&motor5, &driver5);
 800109a:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fea8 	bl	8004df8 <init_motor_5>
//
//  HAL_Delay(2000);
//  moveDegrees(90, &motor2);
//  moveDegrees(90, &motor4);

  goHome();
 80010a8:	f003 fa9e 	bl	80045e8 <goHome>

  moveToCoordinates(195.0, -50.0, 295.0, 90.0);
 80010ac:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 80010e0 <main+0x104>
 80010b0:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 80010e4 <main+0x108>
 80010b4:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80010e8 <main+0x10c>
 80010b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80010ec <main+0x110>
 80010bc:	f003 f992 	bl	80043e4 <moveToCoordinates>
  moveToCoordinates(195.0, -50.0, 205.0, 90.0);
 80010c0:	eddf 1a07 	vldr	s3, [pc, #28]	@ 80010e0 <main+0x104>
 80010c4:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80010f0 <main+0x114>
 80010c8:	eddf 0a07 	vldr	s1, [pc, #28]	@ 80010e8 <main+0x10c>
 80010cc:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80010ec <main+0x110>
 80010d0:	f003 f988 	bl	80043e4 <moveToCoordinates>

  grip();
 80010d4:	f003 fa04 	bl	80044e0 <grip>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <main+0xfc>
 80010dc:	2000054c 	.word	0x2000054c
 80010e0:	42b40000 	.word	0x42b40000
 80010e4:	43938000 	.word	0x43938000
 80010e8:	c2480000 	.word	0xc2480000
 80010ec:	43430000 	.word	0x43430000
 80010f0:	434d0000 	.word	0x434d0000

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	@ 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2234      	movs	r2, #52	@ 0x34
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f009 ffb2 	bl	800b06c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <SystemClock_Config+0xd4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	4a29      	ldr	r2, [pc, #164]	@ (80011c8 <SystemClock_Config+0xd4>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	@ 0x40
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <SystemClock_Config+0xd4>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <SystemClock_Config+0xd8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001140:	4a22      	ldr	r2, [pc, #136]	@ (80011cc <SystemClock_Config+0xd8>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <SystemClock_Config+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001168:	2310      	movs	r3, #16
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800116c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001170:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001172:	2304      	movs	r3, #4
 8001174:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800117a:	2302      	movs	r3, #2
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4618      	mov	r0, r3
 8001184:	f005 fc38 	bl	80069f8 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800118e:	f000 fd6d 	bl	8001c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 f8d8 	bl	8006364 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ba:	f000 fd57 	bl	8001c6c <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	@ 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_I2C1_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_I2C1_Init+0x58>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_I2C1_Init+0x50>)
 800120e:	f004 fbfb 	bl	8005a08 <HAL_I2C_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 fd28 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000078 	.word	0x20000078
 8001224:	40005400 	.word	0x40005400
 8001228:	000186a0 	.word	0x000186a0

0800122c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <MX_TIM1_Init+0x98>)
 800124a:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 800124c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <MX_TIM1_Init+0x98>)
 8001250:	2253      	movs	r2, #83	@ 0x53
 8001252:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_TIM1_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_TIM1_Init+0x98>)
 800125c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001260:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_TIM1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_TIM1_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <MX_TIM1_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001274:	4813      	ldr	r0, [pc, #76]	@ (80012c4 <MX_TIM1_Init+0x98>)
 8001276:	f005 fe5d 	bl	8006f34 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001280:	f000 fcf4 	bl	8001c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <MX_TIM1_Init+0x98>)
 8001292:	f006 fab7 	bl	8007804 <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800129c:	f000 fce6 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_TIM1_Init+0x98>)
 80012ae:	f006 fea5 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012b8:	f000 fcd8 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200000cc 	.word	0x200000cc
 80012c8:	40010000 	.word	0x40010000

080012cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <MX_TIM3_Init+0xe0>)
 80012fe:	4a2c      	ldr	r2, [pc, #176]	@ (80013b0 <MX_TIM3_Init+0xe4>)
 8001300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001302:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <MX_TIM3_Init+0xe0>)
 8001304:	2229      	movs	r2, #41	@ 0x29
 8001306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <MX_TIM3_Init+0xe0>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800130e:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <MX_TIM3_Init+0xe0>)
 8001310:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001314:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <MX_TIM3_Init+0xe0>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <MX_TIM3_Init+0xe0>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001322:	4822      	ldr	r0, [pc, #136]	@ (80013ac <MX_TIM3_Init+0xe0>)
 8001324:	f005 fe06 	bl	8006f34 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800132e:	f000 fc9d 	bl	8001c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133c:	4619      	mov	r1, r3
 800133e:	481b      	ldr	r0, [pc, #108]	@ (80013ac <MX_TIM3_Init+0xe0>)
 8001340:	f006 fa60 	bl	8007804 <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800134a:	f000 fc8f 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800134e:	4817      	ldr	r0, [pc, #92]	@ (80013ac <MX_TIM3_Init+0xe0>)
 8001350:	f005 fedf 	bl	8007112 <HAL_TIM_OC_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800135a:	f000 fc87 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4619      	mov	r1, r3
 800136c:	480f      	ldr	r0, [pc, #60]	@ (80013ac <MX_TIM3_Init+0xe0>)
 800136e:	f006 fe45 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001378:	f000 fc78 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <MX_TIM3_Init+0xe0>)
 8001394:	f006 f9da 	bl	800774c <HAL_TIM_OC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800139e:	f000 fc65 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	@ 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000114 	.word	0x20000114
 80013b0:	40000400 	.word	0x40000400

080013b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <MX_TIM4_Init+0xe0>)
 80013e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001498 <MX_TIM4_Init+0xe4>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 80013ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <MX_TIM4_Init+0xe0>)
 80013ec:	2229      	movs	r2, #41	@ 0x29
 80013ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <MX_TIM4_Init+0xe0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013f6:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <MX_TIM4_Init+0xe0>)
 80013f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <MX_TIM4_Init+0xe0>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <MX_TIM4_Init+0xe0>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800140a:	4822      	ldr	r0, [pc, #136]	@ (8001494 <MX_TIM4_Init+0xe0>)
 800140c:	f005 fd92 	bl	8006f34 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001416:	f000 fc29 	bl	8001c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001420:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001424:	4619      	mov	r1, r3
 8001426:	481b      	ldr	r0, [pc, #108]	@ (8001494 <MX_TIM4_Init+0xe0>)
 8001428:	f006 f9ec 	bl	8007804 <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001432:	f000 fc1b 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001436:	4817      	ldr	r0, [pc, #92]	@ (8001494 <MX_TIM4_Init+0xe0>)
 8001438:	f005 fe6b 	bl	8007112 <HAL_TIM_OC_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001442:	f000 fc13 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4619      	mov	r1, r3
 8001454:	480f      	ldr	r0, [pc, #60]	@ (8001494 <MX_TIM4_Init+0xe0>)
 8001456:	f006 fdd1 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001460:	f000 fc04 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	@ (8001494 <MX_TIM4_Init+0xe0>)
 800147c:	f006 f966 	bl	800774c <HAL_TIM_OC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001486:	f000 fbf1 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3738      	adds	r7, #56	@ 0x38
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000015c 	.word	0x2000015c
 8001498:	40000800 	.word	0x40000800

0800149c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a2:	463b      	mov	r3, r7
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <MX_TIM6_Init+0x64>)
 80014ac:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <MX_TIM6_Init+0x68>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 839;
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_TIM6_Init+0x64>)
 80014b2:	f240 3247 	movw	r2, #839	@ 0x347
 80014b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_TIM6_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <MX_TIM6_Init+0x64>)
 80014c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <MX_TIM6_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014cc:	480c      	ldr	r0, [pc, #48]	@ (8001500 <MX_TIM6_Init+0x64>)
 80014ce:	f005 fd31 	bl	8006f34 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014d8:	f000 fbc8 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_TIM6_Init+0x64>)
 80014ea:	f006 fd87 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014f4:	f000 fbba 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200001a4 	.word	0x200001a4
 8001504:	40001000 	.word	0x40001000

08001508 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_TIM7_Init+0x64>)
 8001518:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <MX_TIM7_Init+0x68>)
 800151a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 839;
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_TIM7_Init+0x64>)
 800151e:	f240 3247 	movw	r2, #839	@ 0x347
 8001522:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_TIM7_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_TIM7_Init+0x64>)
 800152c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001530:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_TIM7_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <MX_TIM7_Init+0x64>)
 800153a:	f005 fcfb 	bl	8006f34 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001544:	f000 fb92 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_TIM7_Init+0x64>)
 8001556:	f006 fd51 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001560:	f000 fb84 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200001ec 	.word	0x200001ec
 8001570:	40001400 	.word	0x40001400

08001574 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b096      	sub	sp, #88	@ 0x58
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2220      	movs	r2, #32
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f009 fd5d 	bl	800b06c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015b2:	4b3d      	ldr	r3, [pc, #244]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015b4:	4a3d      	ldr	r2, [pc, #244]	@ (80016ac <MX_TIM8_Init+0x138>)
 80015b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 80015b8:	4b3b      	ldr	r3, [pc, #236]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015ba:	2229      	movs	r2, #41	@ 0x29
 80015bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b3a      	ldr	r3, [pc, #232]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015c4:	4b38      	ldr	r3, [pc, #224]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015d2:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b33      	ldr	r3, [pc, #204]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015de:	4832      	ldr	r0, [pc, #200]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015e0:	f005 fca8 	bl	8006f34 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80015ea:	f000 fb3f 	bl	8001c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015f8:	4619      	mov	r1, r3
 80015fa:	482b      	ldr	r0, [pc, #172]	@ (80016a8 <MX_TIM8_Init+0x134>)
 80015fc:	f006 f902 	bl	8007804 <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001606:	f000 fb31 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800160a:	4827      	ldr	r0, [pc, #156]	@ (80016a8 <MX_TIM8_Init+0x134>)
 800160c:	f005 fd81 	bl	8007112 <HAL_TIM_OC_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001616:	f000 fb29 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001622:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001626:	4619      	mov	r1, r3
 8001628:	481f      	ldr	r0, [pc, #124]	@ (80016a8 <MX_TIM8_Init+0x134>)
 800162a:	f006 fce7 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001634:	f000 fb1a 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001644:	2300      	movs	r3, #0
 8001646:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	4812      	ldr	r0, [pc, #72]	@ (80016a8 <MX_TIM8_Init+0x134>)
 800165e:	f006 f875 	bl	800774c <HAL_TIM_OC_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001668:	f000 fb00 	bl	8001c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001684:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	@ (80016a8 <MX_TIM8_Init+0x134>)
 8001690:	f006 fd30 	bl	80080f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800169a:	f000 fae7 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3758      	adds	r7, #88	@ 0x58
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000234 	.word	0x20000234
 80016ac:	40010400 	.word	0x40010400

080016b0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <MX_TIM9_Init+0x6c>)
 80016c4:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <MX_TIM9_Init+0x70>)
 80016c6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_TIM9_Init+0x6c>)
 80016ca:	f240 3247 	movw	r2, #839	@ 0x347
 80016ce:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_TIM9_Init+0x6c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_TIM9_Init+0x6c>)
 80016d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016dc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_TIM9_Init+0x6c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <MX_TIM9_Init+0x6c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80016ea:	480c      	ldr	r0, [pc, #48]	@ (800171c <MX_TIM9_Init+0x6c>)
 80016ec:	f005 fc22 	bl	8006f34 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80016f6:	f000 fab9 	bl	8001c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fe:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_TIM9_Init+0x6c>)
 8001706:	f006 f87d 	bl	8007804 <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001710:	f000 faac 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000027c 	.word	0x2000027c
 8001720:	40014000 	.word	0x40014000

08001724 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_TIM10_Init+0x40>)
 800172a:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <MX_TIM10_Init+0x44>)
 800172c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 800172e:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <MX_TIM10_Init+0x40>)
 8001730:	f240 3247 	movw	r2, #839	@ 0x347
 8001734:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <MX_TIM10_Init+0x40>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_TIM10_Init+0x40>)
 800173e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001742:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <MX_TIM10_Init+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_TIM10_Init+0x40>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <MX_TIM10_Init+0x40>)
 8001752:	f005 fbef 	bl	8006f34 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800175c:	f000 fa86 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200002c4 	.word	0x200002c4
 8001768:	40014400 	.word	0x40014400

0800176c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001792:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <MX_TIM12_Init+0xb8>)
 8001794:	4a24      	ldr	r2, [pc, #144]	@ (8001828 <MX_TIM12_Init+0xbc>)
 8001796:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 8001798:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <MX_TIM12_Init+0xb8>)
 800179a:	2229      	movs	r2, #41	@ 0x29
 800179c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <MX_TIM12_Init+0xb8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <MX_TIM12_Init+0xb8>)
 80017a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017aa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <MX_TIM12_Init+0xb8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <MX_TIM12_Init+0xb8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80017b8:	481a      	ldr	r0, [pc, #104]	@ (8001824 <MX_TIM12_Init+0xb8>)
 80017ba:	f005 fbbb 	bl	8006f34 <HAL_TIM_Base_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80017c4:	f000 fa52 	bl	8001c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	4619      	mov	r1, r3
 80017d4:	4813      	ldr	r0, [pc, #76]	@ (8001824 <MX_TIM12_Init+0xb8>)
 80017d6:	f006 f815 	bl	8007804 <HAL_TIM_ConfigClockSource>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80017e0:	f000 fa44 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 80017e4:	480f      	ldr	r0, [pc, #60]	@ (8001824 <MX_TIM12_Init+0xb8>)
 80017e6:	f005 fc94 	bl	8007112 <HAL_TIM_OC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80017f0:	f000 fa3c 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <MX_TIM12_Init+0xb8>)
 800180c:	f005 ff9e 	bl	800774c <HAL_TIM_OC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001816:	f000 fa29 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3730      	adds	r7, #48	@ 0x30
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000030c 	.word	0x2000030c
 8001828:	40001800 	.word	0x40001800

0800182c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001844:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 8001846:	4a1d      	ldr	r2, [pc, #116]	@ (80018bc <MX_TIM13_Init+0x90>)
 8001848:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 800184a:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 800184c:	2229      	movs	r2, #41	@ 0x29
 800184e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 8001858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800185c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800186a:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 800186c:	f005 fb62 	bl	8006f34 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001876:	f000 f9f9 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 800187a:	480f      	ldr	r0, [pc, #60]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 800187c:	f005 fc49 	bl	8007112 <HAL_TIM_OC_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001886:	f000 f9f1 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2200      	movs	r2, #0
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_TIM13_Init+0x8c>)
 80018a2:	f005 ff53 	bl	800774c <HAL_TIM_OC_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80018ac:	f000 f9de 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000354 	.word	0x20000354
 80018bc:	40001c00 	.word	0x40001c00

080018c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_UART4_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <MX_UART4_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_UART4_Init+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_UART4_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_UART4_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <MX_UART4_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_UART4_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <MX_UART4_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_UART4_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_UART4_Init+0x4c>)
 80018f8:	f006 fc62 	bl	80081c0 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001902:	f000 f9b3 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000039c 	.word	0x2000039c
 8001910:	40004c00 	.word	0x40004c00

08001914 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_UART5_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <MX_UART5_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <MX_UART5_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_UART5_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_UART5_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_UART5_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_UART5_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <MX_UART5_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_UART5_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_UART5_Init+0x4c>)
 800194c:	f006 fc38 	bl	80081c0 <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001956:	f000 f989 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200003e4 	.word	0x200003e4
 8001964:	40005000 	.word	0x40005000

08001968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <MX_USART1_UART_Init+0x50>)
 8001970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_USART1_UART_Init+0x4c>)
 80019a0:	f006 fc0e 	bl	80081c0 <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019aa:	f000 f95f 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000042c 	.word	0x2000042c
 80019b8:	40011000 	.word	0x40011000

080019bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <MX_USART2_UART_Init+0x50>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019f4:	f006 fbe4 	bl	80081c0 <HAL_UART_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019fe:	f000 f935 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000474 	.word	0x20000474
 8001a0c:	40004400 	.word	0x40004400

08001a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <MX_USART3_UART_Init+0x50>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_USART3_UART_Init+0x4c>)
 8001a48:	f006 fbba 	bl	80081c0 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a52:	f000 f90b 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200004bc 	.word	0x200004bc
 8001a60:	40004800 	.word	0x40004800

08001a64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <MX_USART6_UART_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_USART6_UART_Init+0x4c>)
 8001a9c:	f006 fb90 	bl	80081c0 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001aa6:	f000 f8e1 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000504 	.word	0x20000504
 8001ab4:	40011400 	.word	0x40011400

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b62      	ldr	r3, [pc, #392]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a61      	ldr	r2, [pc, #388]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b5f      	ldr	r3, [pc, #380]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b5b      	ldr	r3, [pc, #364]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b58      	ldr	r3, [pc, #352]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b54      	ldr	r3, [pc, #336]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a53      	ldr	r2, [pc, #332]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b51      	ldr	r3, [pc, #324]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b4d      	ldr	r3, [pc, #308]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b4a      	ldr	r3, [pc, #296]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b46      	ldr	r3, [pc, #280]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a45      	ldr	r2, [pc, #276]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <MX_GPIO_Init+0x1a4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f640 311f 	movw	r1, #2847	@ 0xb1f
 8001b60:	483f      	ldr	r0, [pc, #252]	@ (8001c60 <MX_GPIO_Init+0x1a8>)
 8001b62:	f003 ff05 	bl	8005970 <HAL_GPIO_WritePin>
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001b6c:	483d      	ldr	r0, [pc, #244]	@ (8001c64 <MX_GPIO_Init+0x1ac>)
 8001b6e:	f003 feff 	bl	8005970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001b72:	2200      	movs	r2, #0
 8001b74:	f247 0117 	movw	r1, #28695	@ 0x7017
 8001b78:	483b      	ldr	r0, [pc, #236]	@ (8001c68 <MX_GPIO_Init+0x1b0>)
 8001b7a:	f003 fef9 	bl	8005970 <HAL_GPIO_WritePin>
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b84:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4832      	ldr	r0, [pc, #200]	@ (8001c60 <MX_GPIO_Init+0x1a8>)
 8001b96:	f003 fd3f 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_yellow_Pin LED_green_Pin MOT_EN_3_Pin STEP_3_Pin
                           MOT_EN_5_Pin STEP_5_Pin DIR_5_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 8001b9a:	f640 331f 	movw	r3, #2847	@ 0xb1f
 8001b9e:	617b      	str	r3, [r7, #20]
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482b      	ldr	r0, [pc, #172]	@ (8001c60 <MX_GPIO_Init+0x1a8>)
 8001bb4:	f003 fd30 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8001bb8:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4825      	ldr	r0, [pc, #148]	@ (8001c64 <MX_GPIO_Init+0x1ac>)
 8001bce:	f003 fd23 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_EN_2_Pin STEP_2_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin;
 8001bd2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	481e      	ldr	r0, [pc, #120]	@ (8001c64 <MX_GPIO_Init+0x1ac>)
 8001bec:	f003 fd14 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin MOT_EN_4_Pin STEP_4_Pin MOT_EN_1_Pin
                           STEP_1_Pin DIR_1_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001bf0:	f247 0317 	movw	r3, #28695	@ 0x7017
 8001bf4:	617b      	str	r3, [r7, #20]
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4817      	ldr	r0, [pc, #92]	@ (8001c68 <MX_GPIO_Init+0x1b0>)
 8001c0a:	f003 fd05 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB5 DIAG_3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|DIAG_3_Pin;
 8001c0e:	f248 2320 	movw	r3, #33312	@ 0x8220
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4811      	ldr	r0, [pc, #68]	@ (8001c68 <MX_GPIO_Init+0x1b0>)
 8001c24:	f003 fcf8 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4808      	ldr	r0, [pc, #32]	@ (8001c60 <MX_GPIO_Init+0x1a8>)
 8001c3e:	f003 fceb 	bl	8005618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2028      	movs	r0, #40	@ 0x28
 8001c48:	f003 fc1d 	bl	8005486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c4c:	2028      	movs	r0, #40	@ 0x28
 8001c4e:	f003 fc36 	bl	80054be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	@ 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400

08001c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <Error_Handler+0x8>

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a08      	ldr	r2, [pc, #32]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cb6:	2007      	movs	r0, #7
 8001cb8:	f003 fbda 	bl	8005470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	@ (8001d4c <HAL_I2C_MspInit+0x84>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12b      	bne.n	8001d42 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d06:	23c0      	movs	r3, #192	@ 0xc0
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0a:	2312      	movs	r3, #18
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d16:	2304      	movs	r3, #4
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <HAL_I2C_MspInit+0x8c>)
 8001d22:	f003 fc79 	bl	8005618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001d30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	@ 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40005400 	.word	0x40005400
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020400 	.word	0x40020400

08001d58 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	@ 0x30
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a98      	ldr	r2, [pc, #608]	@ (8001fc8 <HAL_TIM_Base_MspInit+0x270>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d11e      	bne.n	8001da8 <HAL_TIM_Base_MspInit+0x50>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d6e:	4b97      	ldr	r3, [pc, #604]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	4a96      	ldr	r2, [pc, #600]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7a:	4b94      	ldr	r3, [pc, #592]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2018      	movs	r0, #24
 8001d8c:	f003 fb7b 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d90:	2018      	movs	r0, #24
 8001d92:	f003 fb94 	bl	80054be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2019      	movs	r0, #25
 8001d9c:	f003 fb73 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001da0:	2019      	movs	r0, #25
 8001da2:	f003 fb8c 	bl	80054be <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001da6:	e10a      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a88      	ldr	r2, [pc, #544]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x278>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d116      	bne.n	8001de0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db6:	4b85      	ldr	r3, [pc, #532]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	4a84      	ldr	r2, [pc, #528]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc2:	4b82      	ldr	r3, [pc, #520]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	201d      	movs	r0, #29
 8001dd4:	f003 fb57 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dd8:	201d      	movs	r0, #29
 8001dda:	f003 fb70 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001dde:	e0ee      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM4)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a7b      	ldr	r2, [pc, #492]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x27c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d116      	bne.n	8001e18 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dee:	4b77      	ldr	r3, [pc, #476]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	4a76      	ldr	r2, [pc, #472]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfa:	4b74      	ldr	r3, [pc, #464]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	201e      	movs	r0, #30
 8001e0c:	f003 fb3b 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e10:	201e      	movs	r0, #30
 8001e12:	f003 fb54 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001e16:	e0d2      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM6)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x280>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d116      	bne.n	8001e50 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	4b69      	ldr	r3, [pc, #420]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4a68      	ldr	r2, [pc, #416]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4b66      	ldr	r3, [pc, #408]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2036      	movs	r0, #54	@ 0x36
 8001e44:	f003 fb1f 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e48:	2036      	movs	r0, #54	@ 0x36
 8001e4a:	f003 fb38 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001e4e:	e0b6      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM7)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a61      	ldr	r2, [pc, #388]	@ (8001fdc <HAL_TIM_Base_MspInit+0x284>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d116      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a5a      	ldr	r2, [pc, #360]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001e64:	f043 0320 	orr.w	r3, r3, #32
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b58      	ldr	r3, [pc, #352]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2037      	movs	r0, #55	@ 0x37
 8001e7c:	f003 fb03 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e80:	2037      	movs	r0, #55	@ 0x37
 8001e82:	f003 fb1c 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001e86:	e09a      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM8)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a54      	ldr	r2, [pc, #336]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x288>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d126      	bne.n	8001ee0 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	4b4d      	ldr	r3, [pc, #308]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	202b      	movs	r0, #43	@ 0x2b
 8001eb4:	f003 fae7 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001eb8:	202b      	movs	r0, #43	@ 0x2b
 8001eba:	f003 fb00 	bl	80054be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	202c      	movs	r0, #44	@ 0x2c
 8001ec4:	f003 fadf 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ec8:	202c      	movs	r0, #44	@ 0x2c
 8001eca:	f003 faf8 	bl	80054be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	202e      	movs	r0, #46	@ 0x2e
 8001ed4:	f003 fad7 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001ed8:	202e      	movs	r0, #46	@ 0x2e
 8001eda:	f003 faf0 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001ede:	e06e      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM9)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x28c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d116      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	4b37      	ldr	r3, [pc, #220]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a36      	ldr	r2, [pc, #216]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2018      	movs	r0, #24
 8001f0c:	f003 fabb 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f10:	2018      	movs	r0, #24
 8001f12:	f003 fad4 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001f16:	e052      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM10)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a32      	ldr	r2, [pc, #200]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x290>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d116      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b29      	ldr	r3, [pc, #164]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	4a28      	ldr	r2, [pc, #160]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2019      	movs	r0, #25
 8001f44:	f003 fa9f 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f48:	2019      	movs	r0, #25
 8001f4a:	f003 fab8 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001f4e:	e036      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM12)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a25      	ldr	r2, [pc, #148]	@ (8001fec <HAL_TIM_Base_MspInit+0x294>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d116      	bne.n	8001f88 <HAL_TIM_Base_MspInit+0x230>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a1a      	ldr	r2, [pc, #104]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	202b      	movs	r0, #43	@ 0x2b
 8001f7c:	f003 fa83 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001f80:	202b      	movs	r0, #43	@ 0x2b
 8001f82:	f003 fa9c 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001f86:	e01a      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM13)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x298>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d115      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0x266>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_TIM_Base_MspInit+0x274>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	202c      	movs	r0, #44	@ 0x2c
 8001fb4:	f003 fa67 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001fb8:	202c      	movs	r0, #44	@ 0x2c
 8001fba:	f003 fa80 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3730      	adds	r7, #48	@ 0x30
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	40001000 	.word	0x40001000
 8001fdc:	40001400 	.word	0x40001400
 8001fe0:	40010400 	.word	0x40010400
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40001800 	.word	0x40001800
 8001ff0:	40001c00 	.word	0x40001c00

08001ff4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b096      	sub	sp, #88	@ 0x58
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a9f      	ldr	r2, [pc, #636]	@ (8002290 <HAL_UART_MspInit+0x29c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d12c      	bne.n	8002070 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	643b      	str	r3, [r7, #64]	@ 0x40
 800201a:	4b9e      	ldr	r3, [pc, #632]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4a9d      	ldr	r2, [pc, #628]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002020:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002024:	6413      	str	r3, [r2, #64]	@ 0x40
 8002026:	4b9b      	ldr	r3, [pc, #620]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800202e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002036:	4b97      	ldr	r3, [pc, #604]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a96      	ldr	r2, [pc, #600]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b94      	ldr	r3, [pc, #592]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800204c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800204e:	2303      	movs	r3, #3
 8002050:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800205e:	2308      	movs	r3, #8
 8002060:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002066:	4619      	mov	r1, r3
 8002068:	488b      	ldr	r0, [pc, #556]	@ (8002298 <HAL_UART_MspInit+0x2a4>)
 800206a:	f003 fad5 	bl	8005618 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800206e:	e154      	b.n	800231a <HAL_UART_MspInit+0x326>
  else if(huart->Instance==UART5)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a89      	ldr	r2, [pc, #548]	@ (800229c <HAL_UART_MspInit+0x2a8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d14b      	bne.n	8002112 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800207e:	4b85      	ldr	r3, [pc, #532]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a84      	ldr	r2, [pc, #528]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002084:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b82      	ldr	r3, [pc, #520]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002092:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	@ 0x34
 800209a:	4b7e      	ldr	r3, [pc, #504]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4a7d      	ldr	r2, [pc, #500]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80020b6:	4b77      	ldr	r3, [pc, #476]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a76      	ldr	r2, [pc, #472]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b74      	ldr	r3, [pc, #464]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80020cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020e0:	2308      	movs	r3, #8
 80020e2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020e8:	4619      	mov	r1, r3
 80020ea:	486d      	ldr	r0, [pc, #436]	@ (80022a0 <HAL_UART_MspInit+0x2ac>)
 80020ec:	f003 fa94 	bl	8005618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f0:	2304      	movs	r3, #4
 80020f2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002100:	2308      	movs	r3, #8
 8002102:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002104:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002108:	4619      	mov	r1, r3
 800210a:	4866      	ldr	r0, [pc, #408]	@ (80022a4 <HAL_UART_MspInit+0x2b0>)
 800210c:	f003 fa84 	bl	8005618 <HAL_GPIO_Init>
}
 8002110:	e103      	b.n	800231a <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a64      	ldr	r2, [pc, #400]	@ (80022a8 <HAL_UART_MspInit+0x2b4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d12d      	bne.n	8002178 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002120:	4b5c      	ldr	r3, [pc, #368]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	4a5b      	ldr	r2, [pc, #364]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	6453      	str	r3, [r2, #68]	@ 0x44
 800212c:	4b59      	ldr	r3, [pc, #356]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800212e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800213c:	4b55      	ldr	r3, [pc, #340]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	4a54      	ldr	r2, [pc, #336]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6313      	str	r3, [r2, #48]	@ 0x30
 8002148:	4b52      	ldr	r3, [pc, #328]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002154:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002158:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002166:	2307      	movs	r3, #7
 8002168:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800216e:	4619      	mov	r1, r3
 8002170:	4849      	ldr	r0, [pc, #292]	@ (8002298 <HAL_UART_MspInit+0x2a4>)
 8002172:	f003 fa51 	bl	8005618 <HAL_GPIO_Init>
}
 8002176:	e0d0      	b.n	800231a <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4b      	ldr	r2, [pc, #300]	@ (80022ac <HAL_UART_MspInit+0x2b8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d134      	bne.n	80021ec <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
 8002186:	4b43      	ldr	r3, [pc, #268]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a42      	ldr	r2, [pc, #264]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800218c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b40      	ldr	r3, [pc, #256]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	623b      	str	r3, [r7, #32]
 80021b8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021ba:	230c      	movs	r3, #12
 80021bc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ca:	2307      	movs	r3, #7
 80021cc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80021d2:	4619      	mov	r1, r3
 80021d4:	4830      	ldr	r0, [pc, #192]	@ (8002298 <HAL_UART_MspInit+0x2a4>)
 80021d6:	f003 fa1f 	bl	8005618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2026      	movs	r0, #38	@ 0x26
 80021e0:	f003 f951 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021e4:	2026      	movs	r0, #38	@ 0x26
 80021e6:	f003 f96a 	bl	80054be <HAL_NVIC_EnableIRQ>
}
 80021ea:	e096      	b.n	800231a <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART3)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2f      	ldr	r2, [pc, #188]	@ (80022b0 <HAL_UART_MspInit+0x2bc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d160      	bne.n	80022b8 <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	4a25      	ldr	r2, [pc, #148]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	6413      	str	r3, [r2, #64]	@ 0x40
 8002206:	4b23      	ldr	r3, [pc, #140]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a1e      	ldr	r2, [pc, #120]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a17      	ldr	r2, [pc, #92]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <HAL_UART_MspInit+0x2a0>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800224a:	2320      	movs	r3, #32
 800224c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800225a:	2307      	movs	r3, #7
 800225c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002262:	4619      	mov	r1, r3
 8002264:	480e      	ldr	r0, [pc, #56]	@ (80022a0 <HAL_UART_MspInit+0x2ac>)
 8002266:	f003 f9d7 	bl	8005618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800226a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800226e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800227c:	2307      	movs	r3, #7
 800227e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002284:	4619      	mov	r1, r3
 8002286:	480b      	ldr	r0, [pc, #44]	@ (80022b4 <HAL_UART_MspInit+0x2c0>)
 8002288:	f003 f9c6 	bl	8005618 <HAL_GPIO_Init>
}
 800228c:	e045      	b.n	800231a <HAL_UART_MspInit+0x326>
 800228e:	bf00      	nop
 8002290:	40004c00 	.word	0x40004c00
 8002294:	40023800 	.word	0x40023800
 8002298:	40020000 	.word	0x40020000
 800229c:	40005000 	.word	0x40005000
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40011000 	.word	0x40011000
 80022ac:	40004400 	.word	0x40004400
 80022b0:	40004800 	.word	0x40004800
 80022b4:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_UART_MspInit+0x330>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12b      	bne.n	800231a <HAL_UART_MspInit+0x326>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <HAL_UART_MspInit+0x334>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <HAL_UART_MspInit+0x334>)
 80022cc:	f043 0320 	orr.w	r3, r3, #32
 80022d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <HAL_UART_MspInit+0x334>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_UART_MspInit+0x334>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <HAL_UART_MspInit+0x334>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_UART_MspInit+0x334>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022fa:	23c0      	movs	r3, #192	@ 0xc0
 80022fc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800230a:	2308      	movs	r3, #8
 800230c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	@ (800232c <HAL_UART_MspInit+0x338>)
 8002316:	f003 f97f 	bl	8005618 <HAL_GPIO_Init>
}
 800231a:	bf00      	nop
 800231c:	3758      	adds	r7, #88	@ 0x58
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40011400 	.word	0x40011400
 8002328:	40023800 	.word	0x40023800
 800232c:	40020800 	.word	0x40020800

08002330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <NMI_Handler+0x4>

08002338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <MemManage_Handler+0x4>

08002348 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <BusFault_Handler+0x4>

08002350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <UsageFault_Handler+0x4>

08002358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002386:	f002 ff5f 	bl	8005248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002394:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002396:	f005 f8e9 	bl	800756c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800239a:	4803      	ldr	r0, [pc, #12]	@ (80023a8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800239c:	f005 f8e6 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200000cc 	.word	0x200000cc
 80023a8:	2000027c 	.word	0x2000027c

080023ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023b0:	4803      	ldr	r0, [pc, #12]	@ (80023c0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80023b2:	f005 f8db 	bl	800756c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80023b6:	4803      	ldr	r0, [pc, #12]	@ (80023c4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80023b8:	f005 f8d8 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200000cc 	.word	0x200000cc
 80023c4:	200002c4 	.word	0x200002c4

080023c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023cc:	4802      	ldr	r0, [pc, #8]	@ (80023d8 <TIM3_IRQHandler+0x10>)
 80023ce:	f005 f8cd 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000114 	.word	0x20000114

080023dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023e0:	4802      	ldr	r0, [pc, #8]	@ (80023ec <TIM4_IRQHandler+0x10>)
 80023e2:	f005 f8c3 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000015c 	.word	0x2000015c

080023f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023f4:	4802      	ldr	r0, [pc, #8]	@ (8002400 <USART2_IRQHandler+0x10>)
 80023f6:	f006 f855 	bl	80084a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000474 	.word	0x20000474

08002404 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002408:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800240c:	f003 fae4 	bl	80059d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002418:	4803      	ldr	r0, [pc, #12]	@ (8002428 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800241a:	f005 f8a7 	bl	800756c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800241e:	4803      	ldr	r0, [pc, #12]	@ (800242c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002420:	f005 f8a4 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000234 	.word	0x20000234
 800242c:	2000030c 	.word	0x2000030c

08002430 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002434:	4803      	ldr	r0, [pc, #12]	@ (8002444 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002436:	f005 f899 	bl	800756c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800243a:	4803      	ldr	r0, [pc, #12]	@ (8002448 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800243c:	f005 f896 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000234 	.word	0x20000234
 8002448:	20000354 	.word	0x20000354

0800244c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002450:	4802      	ldr	r0, [pc, #8]	@ (800245c <TIM8_CC_IRQHandler+0x10>)
 8002452:	f005 f88b 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000234 	.word	0x20000234

08002460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <TIM6_DAC_IRQHandler+0x10>)
 8002466:	f005 f881 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200001a4 	.word	0x200001a4

08002474 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <TIM7_IRQHandler+0x10>)
 800247a:	f005 f877 	bl	800756c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200001ec 	.word	0x200001ec

08002488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002490:	4a14      	ldr	r2, [pc, #80]	@ (80024e4 <_sbrk+0x5c>)
 8002492:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <_sbrk+0x60>)
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <_sbrk+0x64>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	@ (80024f0 <_sbrk+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024aa:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b8:	f008 fdf0 	bl	800b09c <__errno>
 80024bc:	4603      	mov	r3, r0
 80024be:	220c      	movs	r2, #12
 80024c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	e009      	b.n	80024dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <_sbrk+0x64>)
 80024d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20020000 	.word	0x20020000
 80024e8:	00000400 	.word	0x00000400
 80024ec:	20000560 	.word	0x20000560
 80024f0:	20000ab8 	.word	0x20000ab8

080024f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <SystemInit+0x20>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <SystemInit+0x20>)
 8002500:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002504:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <tmc2209_setup>:
#include "tmc2209.h"


void tmc2209_setup(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	4613      	mov	r3, r2
 8002524:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_  = serial_baud_rate;
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]
  stepper_driver->serial_address_    = serial_address;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	711a      	strb	r2, [r3, #4]
  stepper_driver->cool_step_enabled_ = false;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

  tmc2209_initialize(stepper_driver, serial_baud_rate, serial_address);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	461a      	mov	r2, r3
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f9b2 	bl	80028aa <tmc2209_initialize>
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <map>:

// unidirectional methods

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	1a8a      	subs	r2, r1, r2
 8002568:	fb03 f202 	mul.w	r2, r3, r2
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1acb      	subs	r3, r1, r3
 8002572:	fb92 f2f3 	sdiv	r2, r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	4413      	add	r3, r2
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <constrain>:

long constrain(long x, long a, long b)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  if (x < a)
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	da01      	bge.n	800259e <constrain+0x18>
  {
    return a;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	e006      	b.n	80025ac <constrain+0x26>
  }
  else if (b < x)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	da01      	bge.n	80025aa <constrain+0x24>
  {
    return b;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	e000      	b.n	80025ac <constrain+0x26>
  }
  else
  {
    return x;
 80025aa:	68fb      	ldr	r3, [r7, #12]
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <set_micro_steps_per_step>:

void set_micro_steps_per_step(tmc2209_stepper_driver_t *stepper_driver, uint16_t microsteps_per_step)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  uint16_t microsteps_per_step_shifted = constrain(microsteps_per_step, MICROSTEPS_PER_STEP_MIN, MICROSTEPS_PER_STEP_MAX);
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ffda 	bl	8002586 <constrain>
 80025d2:	4603      	mov	r3, r0
 80025d4:	81fb      	strh	r3, [r7, #14]
  microsteps_per_step_shifted          = microsteps_per_step >> 1;
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	81fb      	strh	r3, [r7, #14]
  uint16_t exponent                    = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 80025e0:	e005      	b.n	80025ee <set_micro_steps_per_step+0x36>
  {
    microsteps_per_step_shifted = microsteps_per_step_shifted >> 1;
 80025e2:	89fb      	ldrh	r3, [r7, #14]
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	81fb      	strh	r3, [r7, #14]
    ++exponent;
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	3301      	adds	r3, #1
 80025ec:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f6      	bne.n	80025e2 <set_micro_steps_per_step+0x2a>
  }
  set_micro_steps_per_step_power_of_two(stepper_driver, exponent);
 80025f4:	89bb      	ldrh	r3, [r7, #12]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f804 	bl	8002608 <set_micro_steps_per_step_power_of_two>
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <set_micro_steps_per_step_power_of_two>:

void set_micro_steps_per_step_power_of_two(tmc2209_stepper_driver_t *stepper_driver, uint8_t exponent)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  switch (exponent)
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	2b07      	cmp	r3, #7
 8002618:	d85a      	bhi.n	80026d0 <set_micro_steps_per_step_power_of_two+0xc8>
 800261a:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <set_micro_steps_per_step_power_of_two+0x18>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002641 	.word	0x08002641
 8002624:	08002653 	.word	0x08002653
 8002628:	08002665 	.word	0x08002665
 800262c:	08002677 	.word	0x08002677
 8002630:	08002689 	.word	0x08002689
 8002634:	0800269b 	.word	0x0800269b
 8002638:	080026ad 	.word	0x080026ad
 800263c:	080026bf 	.word	0x080026bf
  {
    case 0: {
      stepper_driver->chopper_config_.mres = MRES_001;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002646:	2108      	movs	r1, #8
 8002648:	f361 0303 	bfi	r3, r1, #0, #4
 800264c:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002650:	e046      	b.n	80026e0 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 1: {
      stepper_driver->chopper_config_.mres = MRES_002;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002658:	2107      	movs	r1, #7
 800265a:	f361 0303 	bfi	r3, r1, #0, #4
 800265e:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002662:	e03d      	b.n	80026e0 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 2: {
      stepper_driver->chopper_config_.mres = MRES_004;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800266a:	2106      	movs	r1, #6
 800266c:	f361 0303 	bfi	r3, r1, #0, #4
 8002670:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002674:	e034      	b.n	80026e0 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 3: {
      stepper_driver->chopper_config_.mres = MRES_008;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800267c:	2105      	movs	r1, #5
 800267e:	f361 0303 	bfi	r3, r1, #0, #4
 8002682:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002686:	e02b      	b.n	80026e0 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 4: {
      stepper_driver->chopper_config_.mres = MRES_016;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800268e:	2104      	movs	r1, #4
 8002690:	f361 0303 	bfi	r3, r1, #0, #4
 8002694:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002698:	e022      	b.n	80026e0 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 5: {
      stepper_driver->chopper_config_.mres = MRES_032;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80026a0:	2103      	movs	r1, #3
 80026a2:	f361 0303 	bfi	r3, r1, #0, #4
 80026a6:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80026aa:	e019      	b.n	80026e0 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 6: {
      stepper_driver->chopper_config_.mres = MRES_064;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80026b2:	2102      	movs	r1, #2
 80026b4:	f361 0303 	bfi	r3, r1, #0, #4
 80026b8:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80026bc:	e010      	b.n	80026e0 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 7: {
      stepper_driver->chopper_config_.mres = MRES_128;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80026c4:	2101      	movs	r1, #1
 80026c6:	f361 0303 	bfi	r3, r1, #0, #4
 80026ca:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80026ce:	e007      	b.n	80026e0 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 8:
    default: {
      stepper_driver->chopper_config_.mres = MRES_256;
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80026d6:	f023 030f 	bic.w	r3, r3, #15
 80026da:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80026de:	bf00      	nop
    }
  }
  write_stored_chopper_config(stepper_driver);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fb34 	bl	8002d4e <write_stored_chopper_config>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop

080026f0 <set_all_current_percent_values>:

void set_all_current_percent_values(tmc2209_stepper_driver_t *stepper_driver,
                                    uint8_t                   run_current_percent,
                                    uint8_t                   hold_current_percent,
                                    uint8_t                   hold_delay_percent)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	70fb      	strb	r3, [r7, #3]
 8002702:	460b      	mov	r3, r1
 8002704:	70bb      	strb	r3, [r7, #2]
 8002706:	4613      	mov	r3, r2
 8002708:	707b      	strb	r3, [r7, #1]
  uint8_t run_current  = percent_to_current_settings(stepper_driver, run_current_percent);
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 faa2 	bl	8002c58 <percent_to_current_settings>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_current = percent_to_current_settings(stepper_driver, hold_current_percent);
 8002718:	78bb      	ldrb	r3, [r7, #2]
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fa9b 	bl	8002c58 <percent_to_current_settings>
 8002722:	4603      	mov	r3, r0
 8002724:	73bb      	strb	r3, [r7, #14]
  uint8_t hold_delay   = percent_to_hold_delay_setting(stepper_driver, hold_delay_percent);
 8002726:	787b      	ldrb	r3, [r7, #1]
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fab1 	bl	8002c92 <percent_to_hold_delay_setting>
 8002730:	4603      	mov	r3, r0
 8002732:	737b      	strb	r3, [r7, #13]

  stepper_driver->driver_current_.irun       = run_current;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	b2d9      	uxtb	r1, r3
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002742:	f361 0304 	bfi	r3, r1, #0, #5
 8002746:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold      = hold_current;
 800274a:	7bbb      	ldrb	r3, [r7, #14]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	b2d9      	uxtb	r1, r3
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002758:	f361 0304 	bfi	r3, r1, #0, #5
 800275c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.iholddelay = hold_delay;
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	b2d9      	uxtb	r1, r3
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800276e:	f361 0303 	bfi	r3, r1, #0, #4
 8002772:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  write_stored_driver_current(stepper_driver);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fab7 	bl	8002cea <write_stored_driver_current>
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <enable_inverse_motor_direction>:

void enable_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 1;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002792:	f043 0308 	orr.w	r3, r3, #8
 8002796:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa96 	bl	8002ccc <write_stored_global_config>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <disable_inverse_motor_direction>:

void disable_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 0;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 80027b6:	f023 0308 	bic.w	r3, r3, #8
 80027ba:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa84 	bl	8002ccc <write_stored_global_config>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <enable_automatic_current_scaling>:
  stepper_driver->pwm_config_.freewheel = mode;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_current_scaling(tmc2209_stepper_driver_t *stepper_driver)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fac2 	bl	8002d6c <write_stored_pwm_config>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <enable_automatic_gradient_adaptation>:
  stepper_driver->pwm_config_.pwm_freq = pwm_freq;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_gradient_adaptation(tmc2209_stepper_driver_t *stepper_driver)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fab0 	bl	8002d6c <write_stored_pwm_config>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <enable_cool_step>:
{
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, stall_guard_threshold);
}

void enable_cool_step(tmc2209_stepper_driver_t *stepper_driver, uint8_t lower_threshold, uint8_t upper_threshold)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
 8002820:	4613      	mov	r3, r2
 8002822:	70bb      	strb	r3, [r7, #2]
  lower_threshold                    = constrain(lower_threshold, SEMIN_MIN, SEMIN_MAX);
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	220f      	movs	r2, #15
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff feab 	bl	8002586 <constrain>
 8002830:	4603      	mov	r3, r0
 8002832:	70fb      	strb	r3, [r7, #3]
  stepper_driver->cool_config_.semin = lower_threshold;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	b2d9      	uxtb	r1, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 8002842:	f361 0303 	bfi	r3, r1, #0, #4
 8002846:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
  upper_threshold                    = constrain(upper_threshold, SEMAX_MIN, SEMAX_MAX);
 800284a:	78bb      	ldrb	r3, [r7, #2]
 800284c:	220f      	movs	r2, #15
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fe98 	bl	8002586 <constrain>
 8002856:	4603      	mov	r3, r0
 8002858:	70bb      	strb	r3, [r7, #2]
  stepper_driver->cool_config_.semax = upper_threshold;
 800285a:	78bb      	ldrb	r3, [r7, #2]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	b2d9      	uxtb	r1, r3
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002868:	f361 0303 	bfi	r3, r1, #0, #4
 800286c:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002874:	461a      	mov	r2, r3
 8002876:	2142      	movs	r1, #66	@ 0x42
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 faee 	bl	8002e5a <tmc2209_write>
  stepper_driver->cool_step_enabled_ = true;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <get_stall_guard_result>:
{
  return tmc2209_read(stepper_driver, ADDRESS_TSTEP);
}

uint16_t get_stall_guard_result(tmc2209_stepper_driver_t *stepper_driver)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return tmc2209_read(stepper_driver, ADDRESS_SG_RESULT);
 8002896:	2141      	movs	r1, #65	@ 0x41
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fb3c 	bl	8002f16 <tmc2209_read>
 800289e:	4603      	mov	r3, r0
 80028a0:	b29b      	uxth	r3, r3
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <tmc2209_initialize>:
{
  return tmc2209_read(stepper_driver, ADDRESS_MSCNT);
}

void tmc2209_initialize(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_ = serial_baud_rate;
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]

  set_operation_mode_to_serial(stepper_driver, serial_address);
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	4619      	mov	r1, r3
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f813 	bl	80028ee <set_operation_mode_to_serial>
  set_registers_to_default(stepper_driver);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f83f 	bl	800294c <set_registers_to_default>

  minimize_motor_current(stepper_driver);
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f8c2 	bl	8002a58 <minimize_motor_current>
  tmc2209_disable(stepper_driver);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 faa6 	bl	8002e26 <tmc2209_disable>
  enable_automatic_current_scaling(stepper_driver);
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff ff76 	bl	80027cc <enable_automatic_current_scaling>
  enable_automatic_gradient_adaptation(stepper_driver);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff ff85 	bl	80027f0 <enable_automatic_gradient_adaptation>
//  disable_automatic_current_scaling(stepper_driver);
//  disable_automatic_gradient_adaptation(stepper_driver);
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <set_operation_mode_to_serial>:

void set_operation_mode_to_serial(tmc2209_stepper_driver_t *stepper_driver, tmc2209_serial_address_t serial_address)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	70fb      	strb	r3, [r7, #3]
  stepper_driver->serial_address_ = serial_address;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	711a      	strb	r2, [r3, #4]

  stepper_driver->global_config_.bytes            = 0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	66da      	str	r2, [r3, #108]	@ 0x6c
  stepper_driver->global_config_.i_scale_analog   = 1;
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.pdn_disable      = 1;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800291a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800291e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.mstep_reg_select = 1;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800292c:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.multistep_filt   = 1;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

  write_stored_global_config(stepper_driver);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f9c4 	bl	8002ccc <write_stored_global_config>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <set_registers_to_default>:

void set_registers_to_default(tmc2209_stepper_driver_t *stepper_driver)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.bytes      = 0;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	669a      	str	r2, [r3, #104]	@ 0x68
  stepper_driver->driver_current_.ihold      = IHOLD_DEFAULT;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002960:	2110      	movs	r1, #16
 8002962:	f361 0304 	bfi	r3, r1, #0, #5
 8002966:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.irun       = IRUN_DEFAULT;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002970:	f043 031f 	orr.w	r3, r3, #31
 8002974:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800297e:	2101      	movs	r1, #1
 8002980:	f361 0303 	bfi	r3, r1, #0, #4
 8002984:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800298c:	461a      	mov	r2, r3
 800298e:	2110      	movs	r1, #16
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fa62 	bl	8002e5a <tmc2209_write>

  stepper_driver->chopper_config_.bytes  = CHOPPER_CONFIG_DEFAULT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2d      	ldr	r2, [pc, #180]	@ (8002a50 <set_registers_to_default+0x104>)
 800299a:	659a      	str	r2, [r3, #88]	@ 0x58
  stepper_driver->chopper_config_.tbl    = TBL_DEFAULT;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80029a0:	2102      	movs	r1, #2
 80029a2:	f361 33d0 	bfi	r3, r1, #15, #2
 80029a6:	6593      	str	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hend   = HEND_DEFAULT;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 80029ae:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 80029b2:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hstart = HSTART_DEFAULT;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80029bc:	2105      	movs	r1, #5
 80029be:	f361 1306 	bfi	r3, r1, #4, #3
 80029c2:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.toff   = TOFF_DEFAULT;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80029cc:	2103      	movs	r1, #3
 80029ce:	f361 0303 	bfi	r3, r1, #0, #4
 80029d2:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	461a      	mov	r2, r3
 80029dc:	216c      	movs	r1, #108	@ 0x6c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa3b 	bl	8002e5a <tmc2209_write>

  stepper_driver->pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a54 <set_registers_to_default+0x108>)
 80029e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	461a      	mov	r2, r3
 80029f0:	2170      	movs	r1, #112	@ 0x70
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa31 	bl	8002e5a <tmc2209_write>

  stepper_driver->cool_config_.bytes = COOLCONF_DEFAULT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	661a      	str	r2, [r3, #96]	@ 0x60
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a02:	461a      	mov	r2, r3
 8002a04:	2142      	movs	r1, #66	@ 0x42
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa27 	bl	8002e5a <tmc2209_write>

  tmc2209_write(stepper_driver, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002a0c:	2214      	movs	r2, #20
 8002a0e:	2111      	movs	r1, #17
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa22 	bl	8002e5a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2113      	movs	r1, #19
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa1d 	bl	8002e5a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2122      	movs	r1, #34	@ 0x22
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fa18 	bl	8002e5a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2114      	movs	r1, #20
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa13 	bl	8002e5a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2140      	movs	r1, #64	@ 0x40
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fa0e 	bl	8002e5a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2142      	movs	r1, #66	@ 0x42
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa09 	bl	8002e5a <tmc2209_write>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	10000053 	.word	0x10000053
 8002a54:	c10d0024 	.word	0xc10d0024

08002a58 <minimize_motor_current>:

  return global_config.pdn_disable;
}

void minimize_motor_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.irun  = CURRENT_SETTING_MIN;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002a66:	f023 031f 	bic.w	r3, r3, #31
 8002a6a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold = CURRENT_SETTING_MIN;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002a74:	f023 031f 	bic.w	r3, r3, #31
 8002a78:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  write_stored_driver_current(stepper_driver);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f934 	bl	8002cea <write_stored_driver_current>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <reverse_data>:

uint32_t reverse_data(uint32_t data)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
  uint8_t  right_shift;
  uint8_t  left_shift;
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002a96:	2300      	movs	r3, #0
 8002a98:	72fb      	strb	r3, [r7, #11]
 8002a9a:	e016      	b.n	8002aca <reverse_data+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	f1c3 0303 	rsb	r3, r3, #3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	72bb      	strb	r3, [r7, #10]
    left_shift  = i * BITS_PER_BYTE;
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8002aae:	7abb      	ldrb	r3, [r7, #10]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	7a7b      	ldrb	r3, [r7, #9]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	72fb      	strb	r3, [r7, #11]
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d9e5      	bls.n	8002a9c <reverse_data+0x12>
  }
  return reversed_data;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <calculate_crc_write>:

uint8_t calculate_crc_write(write_read_reply_datagram_t *datagram, uint8_t datagram_size)
{
 8002ade:	b4f0      	push	{r4, r5, r6, r7}
 8002ae0:	b088      	sub	sp, #32
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	70f9      	strb	r1, [r7, #3]
  uint8_t crc = 0;
 8002ae8:	2100      	movs	r1, #0
 8002aea:	77f9      	strb	r1, [r7, #31]
  uint8_t byte;
  uint8_t datagram_bytes[7];
  for (int i = 0; i < datagram_size - 1; i++)
 8002aec:	2100      	movs	r1, #0
 8002aee:	61b9      	str	r1, [r7, #24]
 8002af0:	e01c      	b.n	8002b2c <calculate_crc_write+0x4e>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002af8:	69bc      	ldr	r4, [r7, #24]
 8002afa:	00e4      	lsls	r4, r4, #3
 8002afc:	f1c4 0620 	rsb	r6, r4, #32
 8002b00:	f1a4 0520 	sub.w	r5, r4, #32
 8002b04:	fa20 f204 	lsr.w	r2, r0, r4
 8002b08:	fa01 f606 	lsl.w	r6, r1, r6
 8002b0c:	4332      	orrs	r2, r6
 8002b0e:	fa21 f505 	lsr.w	r5, r1, r5
 8002b12:	432a      	orrs	r2, r5
 8002b14:	fa21 f304 	lsr.w	r3, r1, r4
 8002b18:	b2d4      	uxtb	r4, r2
 8002b1a:	f107 000c 	add.w	r0, r7, #12
 8002b1e:	69b9      	ldr	r1, [r7, #24]
 8002b20:	4401      	add	r1, r0
 8002b22:	4620      	mov	r0, r4
 8002b24:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < datagram_size - 1; i++)
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	3101      	adds	r1, #1
 8002b2a:	61b9      	str	r1, [r7, #24]
 8002b2c:	78f9      	ldrb	r1, [r7, #3]
 8002b2e:	3901      	subs	r1, #1
 8002b30:	69b8      	ldr	r0, [r7, #24]
 8002b32:	4288      	cmp	r0, r1
 8002b34:	dbdd      	blt.n	8002af2 <calculate_crc_write+0x14>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002b36:	2300      	movs	r3, #0
 8002b38:	75fb      	strb	r3, [r7, #23]
 8002b3a:	e029      	b.n	8002b90 <calculate_crc_write+0xb2>
  {
    byte = datagram_bytes[i];
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	3320      	adds	r3, #32
 8002b40:	443b      	add	r3, r7
 8002b42:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002b46:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	75bb      	strb	r3, [r7, #22]
 8002b4c:	e01a      	b.n	8002b84 <calculate_crc_write+0xa6>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
 8002b50:	09db      	lsrs	r3, r3, #7
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	7fbb      	ldrb	r3, [r7, #30]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d008      	beq.n	8002b72 <calculate_crc_write+0x94>
      {
        crc = (crc << 1) ^ 0x07;
 8002b60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	f083 0307 	eor.w	r3, r3, #7
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e002      	b.n	8002b78 <calculate_crc_write+0x9a>
      }
      else
      {
        crc = crc << 1;
 8002b72:	7ffb      	ldrb	r3, [r7, #31]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	77fb      	strb	r3, [r7, #31]
      }
      byte = byte >> 1;
 8002b78:	7fbb      	ldrb	r3, [r7, #30]
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002b7e:	7dbb      	ldrb	r3, [r7, #22]
 8002b80:	3301      	adds	r3, #1
 8002b82:	75bb      	strb	r3, [r7, #22]
 8002b84:	7dbb      	ldrb	r3, [r7, #22]
 8002b86:	2b07      	cmp	r3, #7
 8002b88:	d9e1      	bls.n	8002b4e <calculate_crc_write+0x70>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	75fb      	strb	r3, [r7, #23]
 8002b90:	7dfa      	ldrb	r2, [r7, #23]
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbd0      	blt.n	8002b3c <calculate_crc_write+0x5e>
    }
  }
  return crc;
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ba4:	4770      	bx	lr

08002ba6 <calculate_crc_read>:

uint8_t calculate_crc_read(read_request_datagram_t *datagram, uint8_t datagram_size)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b087      	sub	sp, #28
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  uint8_t datagram_bytes[4];
  for (int i = 0; i < (datagram_size - 1); i++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e00f      	b.n	8002bdc <calculate_crc_read+0x36>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc8:	b2d9      	uxtb	r1, r3
 8002bca:	f107 0208 	add.w	r2, r7, #8
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	460a      	mov	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < (datagram_size - 1); i++)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dbea      	blt.n	8002bbc <calculate_crc_read+0x16>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e029      	b.n	8002c40 <calculate_crc_read+0x9a>
  {
    byte = datagram_bytes[i];
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	3318      	adds	r3, #24
 8002bf0:	443b      	add	r3, r7
 8002bf2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002bf6:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73bb      	strb	r3, [r7, #14]
 8002bfc:	e01a      	b.n	8002c34 <calculate_crc_read+0x8e>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	09db      	lsrs	r3, r3, #7
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	7dbb      	ldrb	r3, [r7, #22]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d008      	beq.n	8002c22 <calculate_crc_read+0x7c>
      {
        crc = (crc << 1) ^ 0x07;
 8002c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	f083 0307 	eor.w	r3, r3, #7
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	75fb      	strb	r3, [r7, #23]
 8002c20:	e002      	b.n	8002c28 <calculate_crc_read+0x82>
      }
      else
      {
        crc = crc << 1;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 8002c28:	7dbb      	ldrb	r3, [r7, #22]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002c2e:	7bbb      	ldrb	r3, [r7, #14]
 8002c30:	3301      	adds	r3, #1
 8002c32:	73bb      	strb	r3, [r7, #14]
 8002c34:	7bbb      	ldrb	r3, [r7, #14]
 8002c36:	2b07      	cmp	r3, #7
 8002c38:	d9e1      	bls.n	8002bfe <calculate_crc_read+0x58>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	429a      	cmp	r2, r3
 8002c48:	dbd0      	blt.n	8002bec <calculate_crc_read+0x46>
    }
  }
  return crc;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <percent_to_current_settings>:

uint8_t percent_to_current_settings(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	2264      	movs	r2, #100	@ 0x64
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fc8b 	bl	8002586 <constrain>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint8_t current_setting     = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
 8002c74:	7bf8      	ldrb	r0, [r7, #15]
 8002c76:	231f      	movs	r3, #31
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2264      	movs	r2, #100	@ 0x64
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f7ff fc65 	bl	800254e <map>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73bb      	strb	r3, [r7, #14]
  return current_setting;
 8002c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <percent_to_hold_delay_setting>:
  uint8_t percent = map(current_setting, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

uint8_t percent_to_hold_delay_setting(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af02      	add	r7, sp, #8
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	2264      	movs	r2, #100	@ 0x64
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fc6e 	bl	8002586 <constrain>
 8002caa:	4603      	mov	r3, r0
 8002cac:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_delay_setting  = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
 8002cae:	7bf8      	ldrb	r0, [r7, #15]
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2264      	movs	r2, #100	@ 0x64
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f7ff fc48 	bl	800254e <map>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	73bb      	strb	r3, [r7, #14]
  return hold_delay_setting;
 8002cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <write_stored_global_config>:
  uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

void write_stored_global_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_GCONF, stepper_driver->global_config_.bytes);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2100      	movs	r1, #0
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f8bc 	bl	8002e5a <tmc2209_write>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <write_stored_driver_current>:
{
  return tmc2209_read(stepper_driver, ADDRESS_GCONF);
}

void write_stored_driver_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8ad 	bl	8002e5a <tmc2209_write>

  if (stepper_driver->driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8002d06:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b13      	cmp	r3, #19
 8002d0e:	d907      	bls.n	8002d20 <write_stored_driver_current+0x36>
  {
    stepper_driver->cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d1a:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
 8002d1e:	e006      	b.n	8002d2e <write_stored_driver_current+0x44>
  }
  else
  {
    stepper_driver->cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d2a:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  }
  if (stepper_driver->cool_step_enabled_)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <write_stored_driver_current+0x5c>
  {
    tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2142      	movs	r1, #66	@ 0x42
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f88a 	bl	8002e5a <tmc2209_write>
  }
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <write_stored_chopper_config>:

void write_stored_chopper_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	216c      	movs	r1, #108	@ 0x6c
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f87b 	bl	8002e5a <tmc2209_write>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <write_stored_pwm_config>:
{
  return tmc2209_read(stepper_driver, ADDRESS_CHOPCONF);
}

void write_stored_pwm_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2170      	movs	r1, #112	@ 0x70
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f86c 	bl	8002e5a <tmc2209_write>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <tmc2209_set_uart>:

// /* Private function code -----------------------------------------------------*/

extern UART_HandleTypeDef huart1;
void tmc2209_set_uart(tmc2209_stepper_driver_t *stepper_driver, UART_HandleTypeDef uart)
{
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	f107 0014 	add.w	r0, r7, #20
 8002d98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	stepper_driver->uart_ = uart;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3308      	adds	r3, #8
 8002da0:	f107 0114 	add.w	r1, r7, #20
 8002da4:	2248      	movs	r2, #72	@ 0x48
 8002da6:	4618      	mov	r0, r3
 8002da8:	f008 f9a4 	bl	800b0f4 <memcpy>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002db6:	b004      	add	sp, #16
 8002db8:	4770      	bx	lr

08002dba <tmc2209_set_hardware_enable_pin>:

void tmc2209_set_hardware_enable_pin(tmc2209_stepper_driver_t *stepper_driver, uint16_t hardware_enable_pin, GPIO_TypeDef* hardware_enable_gpio_port)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	817b      	strh	r3, [r7, #10]
   stepper_driver->hardware_enable_pin_ = hardware_enable_pin;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	897a      	ldrh	r2, [r7, #10]
 8002dcc:	80da      	strh	r2, [r3, #6]
   stepper_driver->hardware_enable_gpio_port_ = hardware_enable_gpio_port;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	651a      	str	r2, [r3, #80]	@ 0x50

   HAL_GPIO_WritePin(hardware_enable_gpio_port, hardware_enable_pin, GPIO_PIN_SET);
 8002dd4:	897b      	ldrh	r3, [r7, #10]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f002 fdc8 	bl	8005970 <HAL_GPIO_WritePin>
 }
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <tmc2209_enable>:

 void tmc2209_enable(tmc2209_stepper_driver_t *stepper_driver)
 {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
     HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_RESET);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	88db      	ldrh	r3, [r3, #6]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f002 fdb8 	bl	8005970 <HAL_GPIO_WritePin>
   }
   stepper_driver->toff_                = TOFF_DEFAULT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2203      	movs	r2, #3
 8002e04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
   stepper_driver->chopper_config_.toff = TOFF_DEFAULT;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002e0e:	2103      	movs	r1, #3
 8002e10:	f361 0303 	bfi	r3, r1, #0, #4
 8002e14:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff98 	bl	8002d4e <write_stored_chopper_config>
 }
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <tmc2209_disable>:

 void tmc2209_disable(tmc2209_stepper_driver_t* stepper_driver)
 {
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
   HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_SET);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	88db      	ldrh	r3, [r3, #6]
 8002e36:	2201      	movs	r2, #1
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f002 fd99 	bl	8005970 <HAL_GPIO_WritePin>
   }
   stepper_driver->chopper_config_.toff = TOFF_DISABLE;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002e44:	f023 030f 	bic.w	r3, r3, #15
 8002e48:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff7e 	bl	8002d4e <write_stored_chopper_config>
 }
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <tmc2209_write>:

 void tmc2209_write(tmc2209_stepper_driver_t *stepper_driver, uint8_t register_address, uint32_t data)
 {
 8002e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5c:	b08b      	sub	sp, #44	@ 0x2c
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	460b      	mov	r3, r1
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	72fb      	strb	r3, [r7, #11]
   write_read_reply_datagram_t write_datagram;
   write_datagram.bytes            = 0;
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9c7 2306 	strd	r2, r3, [r7, #24]
   write_datagram.sync             = SYNC;
 8002e74:	7e3b      	ldrb	r3, [r7, #24]
 8002e76:	2205      	movs	r2, #5
 8002e78:	f362 0303 	bfi	r3, r2, #0, #4
 8002e7c:	763b      	strb	r3, [r7, #24]
   write_datagram.serial_address   = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	767b      	strb	r3, [r7, #25]
   write_datagram.register_address = register_address;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	7ebb      	ldrb	r3, [r7, #26]
 8002e8c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e90:	76bb      	strb	r3, [r7, #26]
   write_datagram.rw               = RW_WRITE;
 8002e92:	7ebb      	ldrb	r3, [r7, #26]
 8002e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e98:	76bb      	strb	r3, [r7, #26]
   write_datagram.data             = reverse_data(data);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fdf5 	bl	8002a8a <reverse_data>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f8c7 301b 	str.w	r3, [r7, #27]
   write_datagram.crc              = calculate_crc_write(&write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002ea6:	f107 0318 	add.w	r3, r7, #24
 8002eaa:	2108      	movs	r1, #8
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fe16 	bl	8002ade <calculate_crc_write>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	77fb      	strb	r3, [r7, #31]

   uint8_t datagram_bytes[8];
   for (int i = 0; i < 8; i++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eba:	e01b      	b.n	8002ef4 <tmc2209_write+0x9a>
   {
     datagram_bytes[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec2:	00c9      	lsls	r1, r1, #3
 8002ec4:	f1c1 0620 	rsb	r6, r1, #32
 8002ec8:	f1a1 0020 	sub.w	r0, r1, #32
 8002ecc:	fa22 f401 	lsr.w	r4, r2, r1
 8002ed0:	fa03 f606 	lsl.w	r6, r3, r6
 8002ed4:	4334      	orrs	r4, r6
 8002ed6:	fa23 f000 	lsr.w	r0, r3, r0
 8002eda:	4304      	orrs	r4, r0
 8002edc:	fa23 f501 	lsr.w	r5, r3, r1
 8002ee0:	b2e1      	uxtb	r1, r4
 8002ee2:	f107 0210 	add.w	r2, r7, #16
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	4413      	add	r3, r2
 8002eea:	460a      	mov	r2, r1
 8002eec:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	dde0      	ble.n	8002ebc <tmc2209_write+0x62>
   }
   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, WRITE_READ_REPLY_DATAGRAM_SIZE, 0XFFFF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f103 0008 	add.w	r0, r3, #8
 8002f00:	f107 0110 	add.w	r1, r7, #16
 8002f04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f08:	2208      	movs	r2, #8
 8002f0a:	f005 f9a9 	bl	8008260 <HAL_UART_Transmit>
   //   printf("Write Data Request: %s", datagram_bytes);
 }
 8002f0e:	bf00      	nop
 8002f10:	372c      	adds	r7, #44	@ 0x2c
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f16 <tmc2209_read>:

 uint32_t tmc2209_read(tmc2209_stepper_driver_t * stepper_driver, uint8_t register_address)
 {
 8002f16:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1a:	b090      	sub	sp, #64	@ 0x40
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	70fb      	strb	r3, [r7, #3]
   read_request_datagram_t read_request_datagram;
   read_request_datagram.bytes            = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   read_request_datagram.sync             = SYNC;
 8002f28:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	f362 0303 	bfi	r3, r2, #0, #4
 8002f32:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
   read_request_datagram.serial_address   = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
   read_request_datagram.register_address = register_address;
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f48:	f362 0306 	bfi	r3, r2, #0, #7
 8002f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.rw               = RW_READ;
 8002f50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.crc              = calculate_crc_read(&read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 8002f5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f60:	2104      	movs	r1, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fe1f 	bl	8002ba6 <calculate_crc_read>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

   uint8_t datagram_bytes[WRITE_READ_REPLY_DATAGRAM_SIZE];
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f72:	e00e      	b.n	8002f92 <tmc2209_read+0x7c>
   {
     datagram_bytes[i] = (read_request_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7e:	b2d9      	uxtb	r1, r3
 8002f80:	f107 0220 	add.w	r2, r7, #32
 8002f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f86:	4413      	add	r3, r2
 8002f88:	460a      	mov	r2, r1
 8002f8a:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8002f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8e:	3301      	adds	r3, #1
 8002f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	dded      	ble.n	8002f74 <tmc2209_read+0x5e>
   }

   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, READ_REQUEST_DATAGRAM_SIZE, 0XFFFF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f103 0008 	add.w	r0, r3, #8
 8002f9e:	f107 0120 	add.w	r1, r7, #32
 8002fa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	f005 f95a 	bl	8008260 <HAL_UART_Transmit>
//   printf("Write Data Request: %s", datagram_bytes);


   uint8_t                     byte_count = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
   write_read_reply_datagram_t read_reply_datagram;
   read_reply_datagram.bytes = 0;
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	e9c7 2306 	strd	r2, r3, [r7, #24]
//   {
//     HAL_UART_Receive(&huart1, (uint8_t *)&byte, 1, 100);
//     datagram_bytes[i] = byte;
//   }
   uint8_t uart_reply[WRITE_READ_REPLY_DATAGRAM_SIZE + 1];
   HAL_UART_Receive(&stepper_driver->uart_, uart_reply, 9, 100);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f103 0008 	add.w	r0, r3, #8
 8002fc4:	f107 010c 	add.w	r1, r7, #12
 8002fc8:	2364      	movs	r3, #100	@ 0x64
 8002fca:	2209      	movs	r2, #9
 8002fcc:	f005 f9d3 	bl	8008376 <HAL_UART_Receive>
   uint8_t* datagram = uart_reply + sizeof(uint8_t);
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	637b      	str	r3, [r7, #52]	@ 0x34

   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002fde:	e029      	b.n	8003034 <tmc2209_read+0x11e>
   {
     read_reply_datagram.bytes |= ((uint64_t)datagram[i] << (byte_count++ * BITS_PER_BYTE));
 8002fe0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002fe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2200      	movs	r2, #0
 8002fee:	4698      	mov	r8, r3
 8002ff0:	4691      	mov	r9, r2
 8002ff2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	f1a3 0120 	sub.w	r1, r3, #32
 8003002:	f1c3 0220 	rsb	r2, r3, #32
 8003006:	fa09 f503 	lsl.w	r5, r9, r3
 800300a:	fa08 f101 	lsl.w	r1, r8, r1
 800300e:	430d      	orrs	r5, r1
 8003010:	fa28 f202 	lsr.w	r2, r8, r2
 8003014:	4315      	orrs	r5, r2
 8003016:	fa08 f403 	lsl.w	r4, r8, r3
 800301a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301e:	ea44 0a02 	orr.w	sl, r4, r2
 8003022:	ea45 0b03 	orr.w	fp, r5, r3
 8003026:	e9c7 ab06 	strd	sl, fp, [r7, #24]
   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 800302a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800302e:	3301      	adds	r3, #1
 8003030:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8003034:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003038:	2b07      	cmp	r3, #7
 800303a:	d9d1      	bls.n	8002fe0 <tmc2209_read+0xca>
   }
   uint32_t reversed_data = reverse_data(read_reply_datagram.data);
 800303c:	f8d7 301b 	ldr.w	r3, [r7, #27]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fd22 	bl	8002a8a <reverse_data>
 8003046:	6338      	str	r0, [r7, #48]	@ 0x30
   uint8_t  crc           = calculate_crc_write(&read_reply_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8003048:	f107 0318 	add.w	r3, r7, #24
 800304c:	2108      	movs	r1, #8
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fd45 	bl	8002ade <calculate_crc_write>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   if (crc != read_reply_datagram.crc)
   {
   }
   return reversed_data;
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 }
 800305c:	4618      	mov	r0, r3
 800305e:	3740      	adds	r7, #64	@ 0x40
 8003060:	46bd      	mov	sp, r7
 8003062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003068 <writeDisplay>:
 * To write to external display with only one parameter, the string.
 * Also wraps the text around the edges if string size is bigger than the width of the monitor
 */

void writeDisplay(char* str)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08c      	sub	sp, #48	@ 0x30
 800306c:	af02      	add	r7, sp, #8
 800306e:	6078      	str	r0, [r7, #4]
	ssd1306_Init();
 8003070:	f000 f8b8 	bl	80031e4 <ssd1306_Init>
	SSD1306_Font_t font = Font_11x18; //Set font size
 8003074:	4a3d      	ldr	r2, [pc, #244]	@ (800316c <writeDisplay+0x104>)
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	ca07      	ldmia	r2, {r0, r1, r2}
 800307c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t y = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int8_t str_length = strlen(str);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd f8c2 	bl	8000210 <strlen>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t display_length = 128;
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	77fb      	strb	r3, [r7, #31]
	uint8_t display_height = 64;
 8003096:	2340      	movs	r3, #64	@ 0x40
 8003098:	77bb      	strb	r3, [r7, #30]
	uint8_t max_char = (display_length-2)/font.width; //Calculate maximum number of characters that fit in one line
 800309a:	7ffb      	ldrb	r3, [r7, #31]
 800309c:	3b02      	subs	r3, #2
 800309e:	7b3a      	ldrb	r2, [r7, #12]
 80030a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80030a4:	777b      	strb	r3, [r7, #29]
	uint8_t max_lines = display_height/font.height;
 80030a6:	7b7b      	ldrb	r3, [r7, #13]
 80030a8:	7fba      	ldrb	r2, [r7, #30]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	773b      	strb	r3, [r7, #28]
	uint8_t line = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	ssd1306_Fill(Black);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f000 f8fe 	bl	80032b8 <ssd1306_Fill>

	while(str_length > 0 && line < max_lines)
 80030bc:	e047      	b.n	800314e <writeDisplay+0xe6>
	{
		ssd1306_SetCursor(2, y); //Set cursor to start of the line
 80030be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030c2:	4619      	mov	r1, r3
 80030c4:	2002      	movs	r0, #2
 80030c6:	f000 fa43 	bl	8003550 <ssd1306_SetCursor>

		char* sub_str = malloc(max_char + 1); //Variable needed to store the string of the current line
 80030ca:	7f7b      	ldrb	r3, [r7, #29]
 80030cc:	3301      	adds	r3, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f007 febe 	bl	800ae50 <malloc>
 80030d4:	4603      	mov	r3, r0
 80030d6:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < max_char; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	e011      	b.n	8003102 <writeDisplay+0x9a>
		{
			sub_str[i] = str[i + max_char * line];
 80030de:	7f7b      	ldrb	r3, [r7, #29]
 80030e0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80030e4:	fb03 f202 	mul.w	r2, r3, r2
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	4413      	add	r3, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	441a      	add	r2, r3
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	69b9      	ldr	r1, [r7, #24]
 80030f6:	440b      	add	r3, r1
 80030f8:	7812      	ldrb	r2, [r2, #0]
 80030fa:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < max_char; i++)
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	3301      	adds	r3, #1
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	7f7b      	ldrb	r3, [r7, #29]
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	429a      	cmp	r2, r3
 8003108:	dbe9      	blt.n	80030de <writeDisplay+0x76>
		}
		sub_str[max_char] = '\0';	//At the end of the string, add a null terminator
 800310a:	7f7b      	ldrb	r3, [r7, #29]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4413      	add	r3, r2
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(sub_str, font, White); //Write the current line to the buffer
 8003114:	2301      	movs	r3, #1
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800311e:	69b8      	ldr	r0, [r7, #24]
 8003120:	f000 f9f0 	bl	8003504 <ssd1306_WriteString>
		str_length = str_length - max_char;
 8003124:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003128:	7f7b      	ldrb	r3, [r7, #29]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		y += font.height;
 8003132:	7b7a      	ldrb	r2, [r7, #13]
 8003134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003138:	4413      	add	r3, r2
 800313a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		line++;
 800313e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003142:	3301      	adds	r3, #1
 8003144:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		free(sub_str);
 8003148:	69b8      	ldr	r0, [r7, #24]
 800314a:	f007 fe89 	bl	800ae60 <free>
	while(str_length > 0 && line < max_lines)
 800314e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8003152:	2b00      	cmp	r3, #0
 8003154:	dd04      	ble.n	8003160 <writeDisplay+0xf8>
 8003156:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800315a:	7f3b      	ldrb	r3, [r7, #28]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3ae      	bcc.n	80030be <writeDisplay+0x56>
	}
	ssd1306_UpdateScreen();
 8003160:	f000 f8c2 	bl	80032e8 <ssd1306_UpdateScreen>
}
 8003164:	bf00      	nop
 8003166:	3728      	adds	r7, #40	@ 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	0800c5d0 	.word	0x0800c5d0

08003170 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af04      	add	r7, sp, #16
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	9302      	str	r3, [sp, #8]
 8003190:	2301      	movs	r3, #1
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	1dfb      	adds	r3, r7, #7
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2301      	movs	r3, #1
 800319a:	2200      	movs	r2, #0
 800319c:	2178      	movs	r1, #120	@ 0x78
 800319e:	4803      	ldr	r0, [pc, #12]	@ (80031ac <ssd1306_WriteCommand+0x2c>)
 80031a0:	f002 fd76 	bl	8005c90 <HAL_I2C_Mem_Write>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000078 	.word	0x20000078

080031b0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af04      	add	r7, sp, #16
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f04f 32ff 	mov.w	r2, #4294967295
 80031c2:	9202      	str	r2, [sp, #8]
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2301      	movs	r3, #1
 80031cc:	2240      	movs	r2, #64	@ 0x40
 80031ce:	2178      	movs	r1, #120	@ 0x78
 80031d0:	4803      	ldr	r0, [pc, #12]	@ (80031e0 <ssd1306_WriteData+0x30>)
 80031d2:	f002 fd5d 	bl	8005c90 <HAL_I2C_Mem_Write>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000078 	.word	0x20000078

080031e4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80031e8:	f7ff ffc2 	bl	8003170 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80031ec:	2064      	movs	r0, #100	@ 0x64
 80031ee:	f002 f84b 	bl	8005288 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80031f2:	2000      	movs	r0, #0
 80031f4:	f000 f9d8 	bl	80035a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80031f8:	2020      	movs	r0, #32
 80031fa:	f7ff ffc1 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80031fe:	2000      	movs	r0, #0
 8003200:	f7ff ffbe 	bl	8003180 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003204:	20b0      	movs	r0, #176	@ 0xb0
 8003206:	f7ff ffbb 	bl	8003180 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800320a:	20c8      	movs	r0, #200	@ 0xc8
 800320c:	f7ff ffb8 	bl	8003180 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff ffb5 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003216:	2010      	movs	r0, #16
 8003218:	f7ff ffb2 	bl	8003180 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800321c:	2040      	movs	r0, #64	@ 0x40
 800321e:	f7ff ffaf 	bl	8003180 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003222:	20ff      	movs	r0, #255	@ 0xff
 8003224:	f000 f9ac 	bl	8003580 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003228:	20a1      	movs	r0, #161	@ 0xa1
 800322a:	f7ff ffa9 	bl	8003180 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800322e:	20a6      	movs	r0, #166	@ 0xa6
 8003230:	f7ff ffa6 	bl	8003180 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003234:	20a8      	movs	r0, #168	@ 0xa8
 8003236:	f7ff ffa3 	bl	8003180 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800323a:	203f      	movs	r0, #63	@ 0x3f
 800323c:	f7ff ffa0 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003240:	20a4      	movs	r0, #164	@ 0xa4
 8003242:	f7ff ff9d 	bl	8003180 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003246:	20d3      	movs	r0, #211	@ 0xd3
 8003248:	f7ff ff9a 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800324c:	2000      	movs	r0, #0
 800324e:	f7ff ff97 	bl	8003180 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003252:	20d5      	movs	r0, #213	@ 0xd5
 8003254:	f7ff ff94 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003258:	20f0      	movs	r0, #240	@ 0xf0
 800325a:	f7ff ff91 	bl	8003180 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800325e:	20d9      	movs	r0, #217	@ 0xd9
 8003260:	f7ff ff8e 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003264:	2022      	movs	r0, #34	@ 0x22
 8003266:	f7ff ff8b 	bl	8003180 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800326a:	20da      	movs	r0, #218	@ 0xda
 800326c:	f7ff ff88 	bl	8003180 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003270:	2012      	movs	r0, #18
 8003272:	f7ff ff85 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003276:	20db      	movs	r0, #219	@ 0xdb
 8003278:	f7ff ff82 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800327c:	2020      	movs	r0, #32
 800327e:	f7ff ff7f 	bl	8003180 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003282:	208d      	movs	r0, #141	@ 0x8d
 8003284:	f7ff ff7c 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003288:	2014      	movs	r0, #20
 800328a:	f7ff ff79 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800328e:	2001      	movs	r0, #1
 8003290:	f000 f98a 	bl	80035a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003294:	2000      	movs	r0, #0
 8003296:	f000 f80f 	bl	80032b8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800329a:	f000 f825 	bl	80032e8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800329e:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <ssd1306_Init+0xd0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80032a4:	4b03      	ldr	r3, [pc, #12]	@ (80032b4 <ssd1306_Init+0xd0>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80032aa:	4b02      	ldr	r3, [pc, #8]	@ (80032b4 <ssd1306_Init+0xd0>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	711a      	strb	r2, [r3, #4]
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000964 	.word	0x20000964

080032b8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <ssd1306_Fill+0x14>
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <ssd1306_Fill+0x16>
 80032cc:	23ff      	movs	r3, #255	@ 0xff
 80032ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032d2:	4619      	mov	r1, r3
 80032d4:	4803      	ldr	r0, [pc, #12]	@ (80032e4 <ssd1306_Fill+0x2c>)
 80032d6:	f007 fec9 	bl	800b06c <memset>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000564 	.word	0x20000564

080032e8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80032ee:	2300      	movs	r3, #0
 80032f0:	71fb      	strb	r3, [r7, #7]
 80032f2:	e016      	b.n	8003322 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	3b50      	subs	r3, #80	@ 0x50
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff40 	bl	8003180 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003300:	2000      	movs	r0, #0
 8003302:	f7ff ff3d 	bl	8003180 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003306:	2010      	movs	r0, #16
 8003308:	f7ff ff3a 	bl	8003180 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	01db      	lsls	r3, r3, #7
 8003310:	4a08      	ldr	r2, [pc, #32]	@ (8003334 <ssd1306_UpdateScreen+0x4c>)
 8003312:	4413      	add	r3, r2
 8003314:	2180      	movs	r1, #128	@ 0x80
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff4a 	bl	80031b0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	3301      	adds	r3, #1
 8003320:	71fb      	strb	r3, [r7, #7]
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b07      	cmp	r3, #7
 8003326:	d9e5      	bls.n	80032f4 <ssd1306_UpdateScreen+0xc>
    }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000564 	.word	0x20000564

08003338 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
 8003342:	460b      	mov	r3, r1
 8003344:	71bb      	strb	r3, [r7, #6]
 8003346:	4613      	mov	r3, r2
 8003348:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db3d      	blt.n	80033ce <ssd1306_DrawPixel+0x96>
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	2b3f      	cmp	r3, #63	@ 0x3f
 8003356:	d83a      	bhi.n	80033ce <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003358:	797b      	ldrb	r3, [r7, #5]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d11a      	bne.n	8003394 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800335e:	79fa      	ldrb	r2, [r7, #7]
 8003360:	79bb      	ldrb	r3, [r7, #6]
 8003362:	08db      	lsrs	r3, r3, #3
 8003364:	b2d8      	uxtb	r0, r3
 8003366:	4603      	mov	r3, r0
 8003368:	01db      	lsls	r3, r3, #7
 800336a:	4413      	add	r3, r2
 800336c:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <ssd1306_DrawPixel+0xa4>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	b25a      	sxtb	r2, r3
 8003372:	79bb      	ldrb	r3, [r7, #6]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	b25b      	sxtb	r3, r3
 8003380:	4313      	orrs	r3, r2
 8003382:	b259      	sxtb	r1, r3
 8003384:	79fa      	ldrb	r2, [r7, #7]
 8003386:	4603      	mov	r3, r0
 8003388:	01db      	lsls	r3, r3, #7
 800338a:	4413      	add	r3, r2
 800338c:	b2c9      	uxtb	r1, r1
 800338e:	4a13      	ldr	r2, [pc, #76]	@ (80033dc <ssd1306_DrawPixel+0xa4>)
 8003390:	54d1      	strb	r1, [r2, r3]
 8003392:	e01d      	b.n	80033d0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003394:	79fa      	ldrb	r2, [r7, #7]
 8003396:	79bb      	ldrb	r3, [r7, #6]
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	b2d8      	uxtb	r0, r3
 800339c:	4603      	mov	r3, r0
 800339e:	01db      	lsls	r3, r3, #7
 80033a0:	4413      	add	r3, r2
 80033a2:	4a0e      	ldr	r2, [pc, #56]	@ (80033dc <ssd1306_DrawPixel+0xa4>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	b25a      	sxtb	r2, r3
 80033a8:	79bb      	ldrb	r3, [r7, #6]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	2101      	movs	r1, #1
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	b25b      	sxtb	r3, r3
 80033ba:	4013      	ands	r3, r2
 80033bc:	b259      	sxtb	r1, r3
 80033be:	79fa      	ldrb	r2, [r7, #7]
 80033c0:	4603      	mov	r3, r0
 80033c2:	01db      	lsls	r3, r3, #7
 80033c4:	4413      	add	r3, r2
 80033c6:	b2c9      	uxtb	r1, r1
 80033c8:	4a04      	ldr	r2, [pc, #16]	@ (80033dc <ssd1306_DrawPixel+0xa4>)
 80033ca:	54d1      	strb	r1, [r2, r3]
 80033cc:	e000      	b.n	80033d0 <ssd1306_DrawPixel+0x98>
        return;
 80033ce:	bf00      	nop
    }
}
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000564 	.word	0x20000564

080033e0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4604      	mov	r4, r0
 80033e8:	4638      	mov	r0, r7
 80033ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80033ee:	4623      	mov	r3, r4
 80033f0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b1f      	cmp	r3, #31
 80033f6:	d902      	bls.n	80033fe <ssd1306_WriteChar+0x1e>
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b7e      	cmp	r3, #126	@ 0x7e
 80033fc:	d901      	bls.n	8003402 <ssd1306_WriteChar+0x22>
        return 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	e079      	b.n	80034f6 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <ssd1306_WriteChar+0x34>
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	3b20      	subs	r3, #32
 800340e:	4413      	add	r3, r2
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	e000      	b.n	8003416 <ssd1306_WriteChar+0x36>
 8003414:	783b      	ldrb	r3, [r7, #0]
 8003416:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003418:	4b39      	ldr	r3, [pc, #228]	@ (8003500 <ssd1306_WriteChar+0x120>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	4413      	add	r3, r2
 8003422:	2b80      	cmp	r3, #128	@ 0x80
 8003424:	dc06      	bgt.n	8003434 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003426:	4b36      	ldr	r3, [pc, #216]	@ (8003500 <ssd1306_WriteChar+0x120>)
 8003428:	885b      	ldrh	r3, [r3, #2]
 800342a:	461a      	mov	r2, r3
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003430:	2b40      	cmp	r3, #64	@ 0x40
 8003432:	dd01      	ble.n	8003438 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8003434:	2300      	movs	r3, #0
 8003436:	e05e      	b.n	80034f6 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e04d      	b.n	80034da <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	3b20      	subs	r3, #32
 8003444:	7879      	ldrb	r1, [r7, #1]
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4619      	mov	r1, r3
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	440b      	add	r3, r1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	e036      	b.n	80034cc <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d013      	beq.n	8003496 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800346e:	4b24      	ldr	r3, [pc, #144]	@ (8003500 <ssd1306_WriteChar+0x120>)
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	4413      	add	r3, r2
 800347a:	b2d8      	uxtb	r0, r3
 800347c:	4b20      	ldr	r3, [pc, #128]	@ (8003500 <ssd1306_WriteChar+0x120>)
 800347e:	885b      	ldrh	r3, [r3, #2]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	4413      	add	r3, r2
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800348e:	4619      	mov	r1, r3
 8003490:	f7ff ff52 	bl	8003338 <ssd1306_DrawPixel>
 8003494:	e017      	b.n	80034c6 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003496:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <ssd1306_WriteChar+0x120>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	b2d8      	uxtb	r0, r3
 80034a4:	4b16      	ldr	r3, [pc, #88]	@ (8003500 <ssd1306_WriteChar+0x120>)
 80034a6:	885b      	ldrh	r3, [r3, #2]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	b2d9      	uxtb	r1, r3
 80034b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf0c      	ite	eq
 80034ba:	2301      	moveq	r3, #1
 80034bc:	2300      	movne	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7ff ff39 	bl	8003338 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3301      	adds	r3, #1
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d3c4      	bcc.n	800345e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	3301      	adds	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	787b      	ldrb	r3, [r7, #1]
 80034dc:	461a      	mov	r2, r3
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d3ac      	bcc.n	800343e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80034e4:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <ssd1306_WriteChar+0x120>)
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <ssd1306_WriteChar+0x120>)
 80034f2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	@ 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000964 	.word	0x20000964

08003504 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	4638      	mov	r0, r7
 800350e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003512:	e013      	b.n	800353c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	7818      	ldrb	r0, [r3, #0]
 8003518:	7e3b      	ldrb	r3, [r7, #24]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	463b      	mov	r3, r7
 800351e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003520:	f7ff ff5e 	bl	80033e0 <ssd1306_WriteChar>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d002      	beq.n	8003536 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	e008      	b.n	8003548 <ssd1306_WriteString+0x44>
        }
        str++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3301      	adds	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e7      	bne.n	8003514 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	781b      	ldrb	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	460a      	mov	r2, r1
 800355a:	71fb      	strb	r3, [r7, #7]
 800355c:	4613      	mov	r3, r2
 800355e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	b29a      	uxth	r2, r3
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <ssd1306_SetCursor+0x2c>)
 8003566:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003568:	79bb      	ldrb	r3, [r7, #6]
 800356a:	b29a      	uxth	r2, r3
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <ssd1306_SetCursor+0x2c>)
 800356e:	805a      	strh	r2, [r3, #2]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	20000964 	.word	0x20000964

08003580 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800358a:	2381      	movs	r3, #129	@ 0x81
 800358c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fdf5 	bl	8003180 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fdf1 	bl	8003180 <ssd1306_WriteCommand>
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80035b8:	23af      	movs	r3, #175	@ 0xaf
 80035ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80035bc:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <ssd1306_SetDisplayOn+0x38>)
 80035be:	2201      	movs	r2, #1
 80035c0:	715a      	strb	r2, [r3, #5]
 80035c2:	e004      	b.n	80035ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80035c4:	23ae      	movs	r3, #174	@ 0xae
 80035c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80035c8:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <ssd1306_SetDisplayOn+0x38>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fdd5 	bl	8003180 <ssd1306_WriteCommand>
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000964 	.word	0x20000964
 80035e4:	00000000 	.word	0x00000000

080035e8 <toGrad>:
 */
#include "motor/helper.h"
#include "math.h"

float toGrad(float degrees_rad)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	ed87 0a01 	vstr	s0, [r7, #4]
	return degrees_rad * 180/M_PI;
 80035f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003638 <toGrad+0x50>
 80035fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035fe:	ee17 0a90 	vmov	r0, s15
 8003602:	f7fc ffc1 	bl	8000588 <__aeabi_f2d>
 8003606:	a30a      	add	r3, pc, #40	@ (adr r3, 8003630 <toGrad+0x48>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f7fd f93e 	bl	800088c <__aeabi_ddiv>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	f7fd fae6 	bl	8000be8 <__aeabi_d2f>
 800361c:	4603      	mov	r3, r0
 800361e:	ee07 3a90 	vmov	s15, r3
}
 8003622:	eeb0 0a67 	vmov.f32	s0, s15
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	f3af 8000 	nop.w
 8003630:	54442d18 	.word	0x54442d18
 8003634:	400921fb 	.word	0x400921fb
 8003638:	43340000 	.word	0x43340000
 800363c:	00000000 	.word	0x00000000

08003640 <toRad>:

float toRad(float degrees_grad)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	ed87 0a01 	vstr	s0, [r7, #4]
	return degrees_grad * M_PI/180;
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fc ff9c 	bl	8000588 <__aeabi_f2d>
 8003650:	a30e      	add	r3, pc, #56	@ (adr r3, 800368c <toRad+0x4c>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f7fc ffef 	bl	8000638 <__aeabi_dmul>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <toRad+0x48>)
 8003668:	f7fd f910 	bl	800088c <__aeabi_ddiv>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	f7fd fab8 	bl	8000be8 <__aeabi_d2f>
 8003678:	4603      	mov	r3, r0
 800367a:	ee07 3a90 	vmov	s15, r3
}
 800367e:	eeb0 0a67 	vmov.f32	s0, s15
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40668000 	.word	0x40668000
 800368c:	54442d18 	.word	0x54442d18
 8003690:	400921fb 	.word	0x400921fb

08003694 <toSteps>:

/*
 * Calculates the steps needed to rotate the amount stated in the variable degrees.
 */
int32_t toSteps(float degrees, motor_t* motor)
{
 8003694:	b5b0      	push	{r4, r5, r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	ed87 0a01 	vstr	s0, [r7, #4]
 800369e:	6038      	str	r0, [r7, #0]
	int32_t steps;
	steps = ((200.0 * (float)(motor->microsteps)/360.0)*degrees) * motor->gear_ratio;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ac:	ee17 0a90 	vmov	r0, s15
 80036b0:	f7fc ff6a 	bl	8000588 <__aeabi_f2d>
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003724 <toSteps+0x90>)
 80036ba:	f7fc ffbd 	bl	8000638 <__aeabi_dmul>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	4b17      	ldr	r3, [pc, #92]	@ (8003728 <toSteps+0x94>)
 80036cc:	f7fd f8de 	bl	800088c <__aeabi_ddiv>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4614      	mov	r4, r2
 80036d6:	461d      	mov	r5, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fc ff55 	bl	8000588 <__aeabi_f2d>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4620      	mov	r0, r4
 80036e4:	4629      	mov	r1, r5
 80036e6:	f7fc ffa7 	bl	8000638 <__aeabi_dmul>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	461d      	mov	r5, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc ff46 	bl	8000588 <__aeabi_f2d>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4620      	mov	r0, r4
 8003702:	4629      	mov	r1, r5
 8003704:	f7fc ff98 	bl	8000638 <__aeabi_dmul>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	f7fd fa42 	bl	8000b98 <__aeabi_d2iz>
 8003714:	4603      	mov	r3, r0
 8003716:	60fb      	str	r3, [r7, #12]
	return steps;
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bdb0      	pop	{r4, r5, r7, pc}
 8003722:	bf00      	nop
 8003724:	40690000 	.word	0x40690000
 8003728:	40768000 	.word	0x40768000
 800372c:	00000000 	.word	0x00000000

08003730 <toPolar>:
#define NUMBER_JOINTS 4

extern motor_t * motors[];

void toPolar(float x, float y, float * theta_p, float * r_p)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	ed87 0a03 	vstr	s0, [r7, #12]
 800373a:	edc7 0a02 	vstr	s1, [r7, #8]
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	if (x < 0 && y >= 0)
 8003742:	edd7 7a03 	vldr	s15, [r7, #12]
 8003746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d525      	bpl.n	800379c <toPolar+0x6c>
 8003750:	edd7 7a02 	vldr	s15, [r7, #8]
 8003754:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375c:	db1e      	blt.n	800379c <toPolar+0x6c>
		*theta_p = -atan(y/x);
 800375e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003762:	edd7 7a03 	vldr	s15, [r7, #12]
 8003766:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800376a:	ee16 0a90 	vmov	r0, s13
 800376e:	f7fc ff0b 	bl	8000588 <__aeabi_f2d>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	ec43 2b10 	vmov	d0, r2, r3
 800377a:	f005 fdf9 	bl	8009370 <atan>
 800377e:	ec53 2b10 	vmov	r2, r3, d0
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f7fd fa2f 	bl	8000be8 <__aeabi_d2f>
 800378a:	4603      	mov	r3, r0
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	eef1 7a67 	vneg.f32	s15, s15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	edc3 7a00 	vstr	s15, [r3]
 800379a:	e08b      	b.n	80038b4 <toPolar+0x184>
	else if (x >= 0 && y > 0)
 800379c:	edd7 7a03 	vldr	s15, [r7, #12]
 80037a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a8:	db27      	blt.n	80037fa <toPolar+0xca>
 80037aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	dd20      	ble.n	80037fa <toPolar+0xca>
		*theta_p = atan (x/y) + M_PI/2;
 80037b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80037bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037c4:	ee16 0a90 	vmov	r0, s13
 80037c8:	f7fc fede 	bl	8000588 <__aeabi_f2d>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	ec43 2b10 	vmov	d0, r2, r3
 80037d4:	f005 fdcc 	bl	8009370 <atan>
 80037d8:	ec51 0b10 	vmov	r0, r1, d0
 80037dc:	a342      	add	r3, pc, #264	@ (adr r3, 80038e8 <toPolar+0x1b8>)
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f7fc fd73 	bl	80002cc <__adddf3>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7fd f9fb 	bl	8000be8 <__aeabi_d2f>
 80037f2:	4602      	mov	r2, r0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e05c      	b.n	80038b4 <toPolar+0x184>
	else if (x > 0 && y <= 0)
 80037fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80037fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003806:	dd27      	ble.n	8003858 <toPolar+0x128>
 8003808:	edd7 7a02 	vldr	s15, [r7, #8]
 800380c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003814:	d820      	bhi.n	8003858 <toPolar+0x128>
		*theta_p = -atan (y/x) + M_PI;
 8003816:	ed97 7a02 	vldr	s14, [r7, #8]
 800381a:	edd7 7a03 	vldr	s15, [r7, #12]
 800381e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003822:	ee16 0a90 	vmov	r0, s13
 8003826:	f7fc feaf 	bl	8000588 <__aeabi_f2d>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	ec43 2b10 	vmov	d0, r2, r3
 8003832:	f005 fd9d 	bl	8009370 <atan>
 8003836:	ec53 2b10 	vmov	r2, r3, d0
 800383a:	a12d      	add	r1, pc, #180	@ (adr r1, 80038f0 <toPolar+0x1c0>)
 800383c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003840:	f7fc fd42 	bl	80002c8 <__aeabi_dsub>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	f7fd f9cc 	bl	8000be8 <__aeabi_d2f>
 8003850:	4602      	mov	r2, r0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e02d      	b.n	80038b4 <toPolar+0x184>
	else if (x <= 0 && y < 0)
 8003858:	edd7 7a03 	vldr	s15, [r7, #12]
 800385c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	d826      	bhi.n	80038b4 <toPolar+0x184>
 8003866:	edd7 7a02 	vldr	s15, [r7, #8]
 800386a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800386e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003872:	d51f      	bpl.n	80038b4 <toPolar+0x184>
		*theta_p = atan (x/y) + 3*M_PI/2;
 8003874:	ed97 7a03 	vldr	s14, [r7, #12]
 8003878:	edd7 7a02 	vldr	s15, [r7, #8]
 800387c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003880:	ee16 0a90 	vmov	r0, s13
 8003884:	f7fc fe80 	bl	8000588 <__aeabi_f2d>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	ec43 2b10 	vmov	d0, r2, r3
 8003890:	f005 fd6e 	bl	8009370 <atan>
 8003894:	ec51 0b10 	vmov	r0, r1, d0
 8003898:	a317      	add	r3, pc, #92	@ (adr r3, 80038f8 <toPolar+0x1c8>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f7fc fd15 	bl	80002cc <__adddf3>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	f7fd f99d 	bl	8000be8 <__aeabi_d2f>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	601a      	str	r2, [r3, #0]

	*r_p = sqrtf(x*x + y*y);
 80038b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80038c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c8:	eeb0 0a67 	vmov.f32	s0, s15
 80038cc:	f005 ff98 	bl	8009800 <sqrtf>
 80038d0:	eef0 7a40 	vmov.f32	s15, s0
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	edc3 7a00 	vstr	s15, [r3]
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	f3af 8000 	nop.w
 80038e8:	54442d18 	.word	0x54442d18
 80038ec:	3ff921fb 	.word	0x3ff921fb
 80038f0:	54442d18 	.word	0x54442d18
 80038f4:	400921fb 	.word	0x400921fb
 80038f8:	7f3321d2 	.word	0x7f3321d2
 80038fc:	4012d97c 	.word	0x4012d97c

08003900 <checkPositionLimits>:

motor_error_t checkPositionLimits(float phi, float LOW_LIMIT, float HIGH_LIMIT, uint8_t id)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b096      	sub	sp, #88	@ 0x58
 8003904:	af00      	add	r7, sp, #0
 8003906:	ed87 0a03 	vstr	s0, [r7, #12]
 800390a:	edc7 0a02 	vstr	s1, [r7, #8]
 800390e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003912:	4603      	mov	r3, r0
 8003914:	70fb      	strb	r3, [r7, #3]
	motor_error_t error = NO_ERROR;
 8003916:	2302      	movs	r3, #2
 8003918:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (phi < LOW_LIMIT)
 800391c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003920:	edd7 7a02 	vldr	s15, [r7, #8]
 8003924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	d514      	bpl.n	8003958 <checkPositionLimits+0x58>
	{
		HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET);
 800392e:	2201      	movs	r2, #1
 8003930:	2101      	movs	r1, #1
 8003932:	481b      	ldr	r0, [pc, #108]	@ (80039a0 <checkPositionLimits+0xa0>)
 8003934:	f002 f81c 	bl	8005970 <HAL_GPIO_WritePin>
		char asdf[64];
		snprintf(asdf, sizeof(asdf), "phi %d is too low", id);
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	f107 0014 	add.w	r0, r7, #20
 800393e:	4a19      	ldr	r2, [pc, #100]	@ (80039a4 <checkPositionLimits+0xa4>)
 8003940:	2140      	movs	r1, #64	@ 0x40
 8003942:	f007 fb43 	bl	800afcc <sniprintf>
		writeDisplay(asdf);
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fb8c 	bl	8003068 <writeDisplay>
		error = MOTOR_ERROR;
 8003950:	2300      	movs	r3, #0
 8003952:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8003956:	e01c      	b.n	8003992 <checkPositionLimits+0x92>
	}
	else if (phi > HIGH_LIMIT)
 8003958:	ed97 7a03 	vldr	s14, [r7, #12]
 800395c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	dd13      	ble.n	8003992 <checkPositionLimits+0x92>
	{
		HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET);
 800396a:	2201      	movs	r2, #1
 800396c:	2101      	movs	r1, #1
 800396e:	480c      	ldr	r0, [pc, #48]	@ (80039a0 <checkPositionLimits+0xa0>)
 8003970:	f001 fffe 	bl	8005970 <HAL_GPIO_WritePin>
		char asdf[64];
		snprintf(asdf, sizeof(asdf), "phi %d is too high", id);
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f107 0014 	add.w	r0, r7, #20
 800397a:	4a0b      	ldr	r2, [pc, #44]	@ (80039a8 <checkPositionLimits+0xa8>)
 800397c:	2140      	movs	r1, #64	@ 0x40
 800397e:	f007 fb25 	bl	800afcc <sniprintf>
		writeDisplay(asdf);
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fb6e 	bl	8003068 <writeDisplay>
		error = MOTOR_ERROR;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	}
	return error;
 8003992:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8003996:	4618      	mov	r0, r3
 8003998:	3758      	adds	r7, #88	@ 0x58
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40020400 	.word	0x40020400
 80039a4:	0800b7fc 	.word	0x0800b7fc
 80039a8:	0800b810 	.word	0x0800b810
 80039ac:	00000000 	.word	0x00000000

080039b0 <calculateAngles>:

motor_error_t calculateAngles(float phi[], float theta, float r, float z, float gripper_direction)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b08c      	sub	sp, #48	@ 0x30
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6178      	str	r0, [r7, #20]
 80039b8:	ed87 0a04 	vstr	s0, [r7, #16]
 80039bc:	edc7 0a03 	vstr	s1, [r7, #12]
 80039c0:	ed87 1a02 	vstr	s2, [r7, #8]
 80039c4:	edc7 1a01 	vstr	s3, [r7, #4]
	motor_error_t error = NO_ERROR;
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	gripper_direction = toRad(gripper_direction);
 80039ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80039d2:	f7ff fe35 	bl	8003640 <toRad>
 80039d6:	ed87 0a01 	vstr	s0, [r7, #4]

	z += LENGTH_SEGMENT_4 * sin(gripper_direction);
 80039da:	68b8      	ldr	r0, [r7, #8]
 80039dc:	f7fc fdd4 	bl	8000588 <__aeabi_f2d>
 80039e0:	4604      	mov	r4, r0
 80039e2:	460d      	mov	r5, r1
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7fc fdcf 	bl	8000588 <__aeabi_f2d>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	ec43 2b10 	vmov	d0, r2, r3
 80039f2:	f005 feb1 	bl	8009758 <sin>
 80039f6:	ec51 0b10 	vmov	r0, r1, d0
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	4b98      	ldr	r3, [pc, #608]	@ (8003c60 <calculateAngles+0x2b0>)
 8003a00:	f7fc fe1a 	bl	8000638 <__aeabi_dmul>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fc fc5e 	bl	80002cc <__adddf3>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f7fd f8e6 	bl	8000be8 <__aeabi_d2f>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60bb      	str	r3, [r7, #8]
	r -= LENGTH_SEGMENT_4 * cos(gripper_direction);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7fc fdb1 	bl	8000588 <__aeabi_f2d>
 8003a26:	4604      	mov	r4, r0
 8003a28:	460d      	mov	r5, r1
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fc fdac 	bl	8000588 <__aeabi_f2d>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	ec43 2b10 	vmov	d0, r2, r3
 8003a38:	f005 fe32 	bl	80096a0 <cos>
 8003a3c:	ec51 0b10 	vmov	r0, r1, d0
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	4b86      	ldr	r3, [pc, #536]	@ (8003c60 <calculateAngles+0x2b0>)
 8003a46:	f7fc fdf7 	bl	8000638 <__aeabi_dmul>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4620      	mov	r0, r4
 8003a50:	4629      	mov	r1, r5
 8003a52:	f7fc fc39 	bl	80002c8 <__aeabi_dsub>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f7fd f8c3 	bl	8000be8 <__aeabi_d2f>
 8003a62:	4603      	mov	r3, r0
 8003a64:	60fb      	str	r3, [r7, #12]

	if (motors[0]->active_movement_flag ||
 8003a66:	4b7f      	ldr	r3, [pc, #508]	@ (8003c64 <calculateAngles+0x2b4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	7b1b      	ldrb	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10e      	bne.n	8003a8e <calculateAngles+0xde>
			motors[1]->active_movement_flag ||
 8003a70:	4b7c      	ldr	r3, [pc, #496]	@ (8003c64 <calculateAngles+0x2b4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	7b1b      	ldrb	r3, [r3, #12]
	if (motors[0]->active_movement_flag ||
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <calculateAngles+0xde>
			motors[2]->active_movement_flag ||
 8003a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c64 <calculateAngles+0x2b4>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	7b1b      	ldrb	r3, [r3, #12]
			motors[1]->active_movement_flag ||
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <calculateAngles+0xde>
			motors[3]->active_movement_flag)
 8003a84:	4b77      	ldr	r3, [pc, #476]	@ (8003c64 <calculateAngles+0x2b4>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	7b1b      	ldrb	r3, [r3, #12]
			motors[2]->active_movement_flag ||
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <calculateAngles+0xea>
	{
		error = MOTOR_MOVING_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		return error;
 8003a94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a98:	e1b1      	b.n	8003dfe <calculateAngles+0x44e>
	}

	float h = abs(z-LENGTH_SEGMENT_1);
 8003a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a9e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003c68 <calculateAngles+0x2b8>
 8003aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aaa:	ee17 3a90 	vmov	r3, s15
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bfb8      	it	lt
 8003ab2:	425b      	neglt	r3, r3
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003abc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float d = sqrtf(r*r + h*h);
 8003ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ac4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003ac8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad8:	f005 fe92 	bl	8009800 <sqrtf>
 8003adc:	ed87 0a08 	vstr	s0, [r7, #32]
	phi[0] = theta;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	601a      	str	r2, [r3, #0]

	phi[2] = acos(((r*r) + (h*h) - LENGTH_SEGMENT_3 * LENGTH_SEGMENT_3 - LENGTH_SEGMENT_2 * LENGTH_SEGMENT_2) / (2 * LENGTH_SEGMENT_3 * LENGTH_SEGMENT_2));
 8003ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003aee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003af2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afa:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8003c6c <calculateAngles+0x2bc>
 8003afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b02:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003c6c <calculateAngles+0x2bc>
 8003b06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b0a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003c70 <calculateAngles+0x2c0>
 8003b0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b12:	ee16 0a90 	vmov	r0, s13
 8003b16:	f7fc fd37 	bl	8000588 <__aeabi_f2d>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	ec43 2b10 	vmov	d0, r2, r3
 8003b22:	f005 fbf1 	bl	8009308 <acos>
 8003b26:	ec51 0b10 	vmov	r0, r1, d0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f103 0408 	add.w	r4, r3, #8
 8003b30:	f7fd f85a 	bl	8000be8 <__aeabi_d2f>
 8003b34:	4603      	mov	r3, r0
 8003b36:	6023      	str	r3, [r4, #0]

	float gamma = acos(r/d);
 8003b38:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b44:	ee16 0a90 	vmov	r0, s13
 8003b48:	f7fc fd1e 	bl	8000588 <__aeabi_f2d>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	ec43 2b10 	vmov	d0, r2, r3
 8003b54:	f005 fbd8 	bl	8009308 <acos>
 8003b58:	ec53 2b10 	vmov	r2, r3, d0
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f7fd f842 	bl	8000be8 <__aeabi_d2f>
 8003b64:	4603      	mov	r3, r0
 8003b66:	61fb      	str	r3, [r7, #28]
	float beta = atan(LENGTH_SEGMENT_3 * sin(phi[2]) / (LENGTH_SEGMENT_2 + cos(phi[2])*LENGTH_SEGMENT_3));
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fd0a 	bl	8000588 <__aeabi_f2d>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	ec43 2b10 	vmov	d0, r2, r3
 8003b7c:	f005 fdec 	bl	8009758 <sin>
 8003b80:	ec51 0b10 	vmov	r0, r1, d0
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	4b3a      	ldr	r3, [pc, #232]	@ (8003c74 <calculateAngles+0x2c4>)
 8003b8a:	f7fc fd55 	bl	8000638 <__aeabi_dmul>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4614      	mov	r4, r2
 8003b94:	461d      	mov	r5, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc fcf3 	bl	8000588 <__aeabi_f2d>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	ec43 2b10 	vmov	d0, r2, r3
 8003baa:	f005 fd79 	bl	80096a0 <cos>
 8003bae:	ec51 0b10 	vmov	r0, r1, d0
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <calculateAngles+0x2c4>)
 8003bb8:	f7fc fd3e 	bl	8000638 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c74 <calculateAngles+0x2c4>)
 8003bca:	f7fc fb7f 	bl	80002cc <__adddf3>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f7fc fe59 	bl	800088c <__aeabi_ddiv>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	ec43 2b17 	vmov	d7, r2, r3
 8003be2:	eeb0 0a47 	vmov.f32	s0, s14
 8003be6:	eef0 0a67 	vmov.f32	s1, s15
 8003bea:	f005 fbc1 	bl	8009370 <atan>
 8003bee:	ec53 2b10 	vmov	r2, r3, d0
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fc fff7 	bl	8000be8 <__aeabi_d2f>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	61bb      	str	r3, [r7, #24]

	if (z >= LENGTH_SEGMENT_1)
 8003bfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c02:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003c68 <calculateAngles+0x2b8>
 8003c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0e:	db33      	blt.n	8003c78 <calculateAngles+0x2c8>
		phi[1] = M_PI/2 - gamma - beta;
 8003c10:	69f8      	ldr	r0, [r7, #28]
 8003c12:	f7fc fcb9 	bl	8000588 <__aeabi_f2d>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	a10f      	add	r1, pc, #60	@ (adr r1, 8003c58 <calculateAngles+0x2a8>)
 8003c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c20:	f7fc fb52 	bl	80002c8 <__aeabi_dsub>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	69b8      	ldr	r0, [r7, #24]
 8003c2e:	f7fc fcab 	bl	8000588 <__aeabi_f2d>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4620      	mov	r0, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	f7fc fb45 	bl	80002c8 <__aeabi_dsub>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	1d1c      	adds	r4, r3, #4
 8003c4a:	f7fc ffcd 	bl	8000be8 <__aeabi_d2f>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	e030      	b.n	8003cb6 <calculateAngles+0x306>
 8003c54:	f3af 8000 	nop.w
 8003c58:	54442d18 	.word	0x54442d18
 8003c5c:	3ff921fb 	.word	0x3ff921fb
 8003c60:	405c0000 	.word	0x405c0000
 8003c64:	2000054c 	.word	0x2000054c
 8003c68:	43520000 	.word	0x43520000
 8003c6c:	46c80000 	.word	0x46c80000
 8003c70:	47480000 	.word	0x47480000
 8003c74:	40640000 	.word	0x40640000
	else
		phi[1] = M_PI/2 + gamma -beta;
 8003c78:	69f8      	ldr	r0, [r7, #28]
 8003c7a:	f7fc fc85 	bl	8000588 <__aeabi_f2d>
 8003c7e:	a363      	add	r3, pc, #396	@ (adr r3, 8003e0c <calculateAngles+0x45c>)
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc fb22 	bl	80002cc <__adddf3>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	461d      	mov	r5, r3
 8003c90:	69b8      	ldr	r0, [r7, #24]
 8003c92:	f7fc fc79 	bl	8000588 <__aeabi_f2d>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f7fc fb13 	bl	80002c8 <__aeabi_dsub>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	1d1c      	adds	r4, r3, #4
 8003cae:	f7fc ff9b 	bl	8000be8 <__aeabi_d2f>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	6023      	str	r3, [r4, #0]

	phi[3] = M_PI/2 - phi[2] + (beta - gamma) + gripper_direction;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fc63 	bl	8000588 <__aeabi_f2d>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	a151      	add	r1, pc, #324	@ (adr r1, 8003e0c <calculateAngles+0x45c>)
 8003cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ccc:	f7fc fafc 	bl	80002c8 <__aeabi_dsub>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	ed97 7a06 	vldr	s14, [r7, #24]
 8003cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce4:	ee17 0a90 	vmov	r0, s15
 8003ce8:	f7fc fc4e 	bl	8000588 <__aeabi_f2d>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	f7fc faea 	bl	80002cc <__adddf3>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	461d      	mov	r5, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fc fc41 	bl	8000588 <__aeabi_f2d>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f7fc fadd 	bl	80002cc <__adddf3>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f103 040c 	add.w	r4, r3, #12
 8003d20:	f7fc ff62 	bl	8000be8 <__aeabi_d2f>
 8003d24:	4603      	mov	r3, r0
 8003d26:	6023      	str	r3, [r4, #0]

	phi[0] = toGrad(phi[0]);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	edd3 7a00 	vldr	s15, [r3]
 8003d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d32:	f7ff fc59 	bl	80035e8 <toGrad>
 8003d36:	eef0 7a40 	vmov.f32	s15, s0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	edc3 7a00 	vstr	s15, [r3]
	phi[1] = toGrad(phi[1]);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	3304      	adds	r3, #4
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	1d1c      	adds	r4, r3, #4
 8003d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d50:	f7ff fc4a 	bl	80035e8 <toGrad>
 8003d54:	eef0 7a40 	vmov.f32	s15, s0
 8003d58:	edc4 7a00 	vstr	s15, [r4]
	phi[2] = toGrad(phi[2]);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	3308      	adds	r3, #8
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f103 0408 	add.w	r4, r3, #8
 8003d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6e:	f7ff fc3b 	bl	80035e8 <toGrad>
 8003d72:	eef0 7a40 	vmov.f32	s15, s0
 8003d76:	edc4 7a00 	vstr	s15, [r4]
	phi[3] = toGrad(phi[3]);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f103 040c 	add.w	r4, r3, #12
 8003d88:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8c:	f7ff fc2c 	bl	80035e8 <toGrad>
 8003d90:	eef0 7a40 	vmov.f32	s15, s0
 8003d94:	edc4 7a00 	vstr	s15, [r4]

	for (int i= 0; i < NUMBER_JOINTS; i++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d9c:	e02a      	b.n	8003df4 <calculateAngles+0x444>
	{
		if (checkPositionLimits(phi[i], motors[i]->motion.LOW_LIMIT, motors[i]->motion.HIGH_LIMIT, i+1) == MOTOR_ERROR)
 8003d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4413      	add	r3, r2
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	4a17      	ldr	r2, [pc, #92]	@ (8003e08 <calculateAngles+0x458>)
 8003dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003db6:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <calculateAngles+0x458>)
 8003db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbe:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	eeb0 1a66 	vmov.f32	s2, s13
 8003dd0:	eef0 0a47 	vmov.f32	s1, s14
 8003dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd8:	f7ff fd92 	bl	8003900 <checkPositionLimits>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d105      	bne.n	8003dee <calculateAngles+0x43e>
		{
			error = MOTOR_ERROR;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			return error;
 8003de8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dec:	e007      	b.n	8003dfe <calculateAngles+0x44e>
	for (int i= 0; i < NUMBER_JOINTS; i++)
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	3301      	adds	r3, #1
 8003df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	ddd1      	ble.n	8003d9e <calculateAngles+0x3ee>
		}
	}

	return error;
 8003dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3730      	adds	r7, #48	@ 0x30
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bdb0      	pop	{r4, r5, r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2000054c 	.word	0x2000054c
 8003e0c:	54442d18 	.word	0x54442d18
 8003e10:	3ff921fb 	.word	0x3ff921fb

08003e14 <initMovementVars>:
motor_error_t moveGripper(gripper_close_open_t direction);

void toggle_inverse_motor_direction(tmc2209_stepper_driver_t* stepper_driver);

void initMovementVars(motor_t * motor, motion_mode_t motion_mode)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
	motor->motion.v = 0;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	61da      	str	r2, [r3, #28]
	motor->motion.step = 0;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->motion.motion_mode = motion_mode;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <startMovement>:

motor_error_t startMovement(motor_t * motor)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	motor_error_t error = NO_ERROR;
 8003e50:	2302      	movs	r3, #2
 8003e52:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(motor->gpio_ports.step, motor->gpio_pins.step, GPIO_PIN_RESET);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 0100 	ldr.w	r0, [r3, #256]	@ 0x100
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8003e60:	2200      	movs	r2, #0
 8003e62:	4619      	mov	r1, r3
 8003e64:	f001 fd84 	bl	8005970 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&motor->motion.motor_control_timer, TIM_CHANNEL_1, 1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	635a      	str	r2, [r3, #52]	@ 0x34
	status = HAL_TIM_OC_Start_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3348      	adds	r3, #72	@ 0x48
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f003 f9a4 	bl	80071c4 <HAL_TIM_OC_Start_IT>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	73bb      	strb	r3, [r7, #14]

	if (status != HAL_OK)
 8003e80:	7bbb      	ldrb	r3, [r7, #14]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <startMovement+0x42>
		error = MOTOR_ERROR;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]

	motor->active_movement_flag = 1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	731a      	strb	r2, [r3, #12]

	return error;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <stopMotorMovement>:

void stopMotorMovement(motor_t * motor)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3348      	adds	r3, #72	@ 0x48
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f003 faa1 	bl	80073f0 <HAL_TIM_OC_Stop_IT>
	motor->active_movement_flag = 0;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	731a      	strb	r2, [r3, #12]
	initializeDefaults(motor);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f001 f851 	bl	8004f5c <initializeDefaults>
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <trapezMove>:
 *       Accel: v = sqrt(2 * a_acc * s)
 *       Const: v = v_max
 *       Decel: v = sqrt(2 * a_dec * s_remaining)
 */
static inline void trapezMove(motion_t* mt)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
	if (mt->step >= 0 && mt->step < mt->acc_steps)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db1b      	blt.n	8003f0a <trapezMove+0x48>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	da15      	bge.n	8003f0a <trapezMove+0x48>
	{
		mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6a12      	ldr	r2, [r2, #32]
 8003ee6:	3201      	adds	r2, #1
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8003efa:	f005 fc81 	bl	8009800 <sqrtf>
 8003efe:	eef0 7a40 	vmov.f32	s15, s0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	edc3 7a03 	vstr	s15, [r3, #12]
 8003f08:	e043      	b.n	8003f92 <trapezMove+0xd0>
		// motion.v = acc_ramp[motion.step]
	}
	else if (mt->const_steps != 0 && mt->step >= mt->acc_steps && mt->step < (mt->total_steps - mt->dec_steps))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d018      	beq.n	8003f44 <trapezMove+0x82>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1a      	ldr	r2, [r3, #32]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	db12      	blt.n	8003f44 <trapezMove+0x82>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1a      	ldr	r2, [r3, #32]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6919      	ldr	r1, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	1acb      	subs	r3, r1, r3
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	da09      	bge.n	8003f44 <trapezMove+0x82>
		mt->v = mt->V_MAX;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	edc3 7a03 	vstr	s15, [r3, #12]
 8003f42:	e026      	b.n	8003f92 <trapezMove+0xd0>
	else if (mt->step >= (mt->total_steps - mt->dec_steps) && mt->step < mt->total_steps)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6919      	ldr	r1, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	1acb      	subs	r3, r1, r3
 8003f52:	429a      	cmp	r2, r3
 8003f54:	db1d      	blt.n	8003f92 <trapezMove+0xd0>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1a      	ldr	r2, [r3, #32]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	da17      	bge.n	8003f92 <trapezMove+0xd0>
	{
		mt->v = sqrtf(2 * mt->DEC_MAX * (mt->total_steps - mt->step));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6911      	ldr	r1, [r2, #16]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6a12      	ldr	r2, [r2, #32]
 8003f6e:	1a8a      	subs	r2, r1, r2
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f82:	f005 fc3d 	bl	8009800 <sqrtf>
 8003f86:	eef0 7a40 	vmov.f32	s15, s0
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	edc3 7a03 	vstr	s15, [r3, #12]
		// motion.v = acc_ramp[motion.total_steps - motion.step]
	}
}
 8003f90:	e7ff      	b.n	8003f92 <trapezMove+0xd0>
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_TIM_OC_DelayElapsedCallback>:
 * Every other motion.cycle, as motion.step only triggers on rising edge,
 * the velocity and the compare value is changed depending on current state of velocity ramp.
 *
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	int8_t index;
	motor_t* motor;

	//To know which timer and thus which motor caused the interrupt
	if (htim->Instance == motors[0]->motion.motor_control_timer.Instance){ index = 0; }
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b62      	ldr	r3, [pc, #392]	@ (8004134 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d102      	bne.n	8003fb8 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e026      	b.n	8004006 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[1]->motion.motor_control_timer.Instance){ index = 1; }
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b5d      	ldr	r3, [pc, #372]	@ (8004134 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d102      	bne.n	8003fcc <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e01c      	b.n	8004006 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[2]->motion.motor_control_timer.Instance){ index = 2; }
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b58      	ldr	r3, [pc, #352]	@ (8004134 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d102      	bne.n	8003fe0 <HAL_TIM_OC_DelayElapsedCallback+0x44>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e012      	b.n	8004006 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[3]->motion.motor_control_timer.Instance){ index = 3; }
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b53      	ldr	r3, [pc, #332]	@ (8004134 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d102      	bne.n	8003ff4 <HAL_TIM_OC_DelayElapsedCallback+0x58>
 8003fee:	2303      	movs	r3, #3
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e008      	b.n	8004006 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[4]->motion.motor_control_timer.Instance){ index = 4; }
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8004134 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d101      	bne.n	8004006 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 8004002:	2304      	movs	r3, #4
 8004004:	77fb      	strb	r3, [r7, #31]

	motor = motors[index];
 8004006:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800400a:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	61bb      	str	r3, [r7, #24]
	motion_t* mt = &motor->motion;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3310      	adds	r3, #16
 8004016:	617b      	str	r3, [r7, #20]

	//Stop timer and movement if the robot reaches its destination
	if (mt->motion_mode == MOTION_TRAPEZ && mt->step >= mt->total_steps)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_TIM_OC_DelayElapsedCallback+0x9a>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6a1a      	ldr	r2, [r3, #32]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	db03      	blt.n	8004036 <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	{
		stopMotorMovement(motor);
 800402e:	69b8      	ldr	r0, [r7, #24]
 8004030:	f7ff ff33 	bl	8003e9a <stopMotorMovement>
		return;
 8004034:	e07a      	b.n	800412c <HAL_TIM_OC_DelayElapsedCallback+0x190>
	}

	if (mt->cycle % 2 == 0) //Change velocity only every other cycle because step only triggers on rising edge
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d14d      	bne.n	80040de <HAL_TIM_OC_DelayElapsedCallback+0x142>
	{
		switch(mt->motion_mode)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_TIM_OC_DelayElapsedCallback+0xbc>
 800404c:	2b00      	cmp	r3, #0
 800404e:	db31      	blt.n	80040b4 <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8004050:	3b01      	subs	r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d82e      	bhi.n	80040b4 <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8004056:	e003      	b.n	8004060 <HAL_TIM_OC_DelayElapsedCallback+0xc4>
		{
		case MOTION_TRAPEZ:
			trapezMove(mt);
 8004058:	6978      	ldr	r0, [r7, #20]
 800405a:	f7ff ff32 	bl	8003ec2 <trapezMove>
			break;
 800405e:	e029      	b.n	80040b4 <HAL_TIM_OC_DelayElapsedCallback+0x118>
		case MOTION_HOME:	//Since we don't know the exact distance to move in these 2 following cases, there's no deceleration
		case MOTION_GRIP:
			if (mt->step >= 0 && mt->step < mt->acc_steps)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	2b00      	cmp	r3, #0
 8004066:	db1b      	blt.n	80040a0 <HAL_TIM_OC_DelayElapsedCallback+0x104>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6a1a      	ldr	r2, [r3, #32]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	429a      	cmp	r2, r3
 8004072:	da15      	bge.n	80040a0 <HAL_TIM_OC_DelayElapsedCallback+0x104>
				mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	6a12      	ldr	r2, [r2, #32]
 800407c:	3201      	adds	r2, #1
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	ee07 3a90 	vmov	s15, r3
 8004088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408c:	eeb0 0a67 	vmov.f32	s0, s15
 8004090:	f005 fbb6 	bl	8009800 <sqrtf>
 8004094:	eef0 7a40 	vmov.f32	s15, s0
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	edc3 7a03 	vstr	s15, [r3, #12]
			else
				mt->v = mt->V_MAX;

			break;
 800409e:	e008      	b.n	80040b2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
				mt->v = mt->V_MAX;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	ee07 3a90 	vmov	s15, r3
 80040a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 80040b2:	bf00      	nop
		}
		mt->step++;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
		if (mt->inverse_motor_direction)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_TIM_OC_DelayElapsedCallback+0x138>
			mt->position--;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040d2:	e004      	b.n	80040de <HAL_TIM_OC_DelayElapsedCallback+0x142>
		else
			mt->position++;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	629a      	str	r2, [r3, #40]	@ 0x28

	}

	mt->cycle++;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_GPIO_TogglePin(motor->gpio_ports.step, motor->gpio_pins.step);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f001 fc53 	bl	80059a2 <HAL_GPIO_TogglePin>
	 *	But this is not the answer since the time has to be converted into timer ticks.
	 *	The timer runs at 2 MHz so we need to divide our current period duration by 1 / 2000000 s or 0.5 µs.
	 *	-> delay in ticks = 1/(2*v)/0.0000005 = 2000000/(2*v)
	 */

	int32_t delay = 2000000 / (2 * mt->v);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8004102:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004106:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8004138 <HAL_TIM_OC_DelayElapsedCallback+0x19c>
 800410a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004112:	ee17 3a90 	vmov	r3, s15
 8004116:	613b      	str	r3, [r7, #16]
	//Add delay to current compare value in register
	int32_t total_delay = __HAL_TIM_GET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1) + delay;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1, total_delay);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	2000054c 	.word	0x2000054c
 8004138:	49f42400 	.word	0x49f42400

0800413c <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupt service routine for timer 9, which periodically invokes status checks.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e024      	b.n	8004194 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if (htim->Instance == motors[i]->status_check_timer.Instance)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4915      	ldr	r1, [pc, #84]	@ (80041a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800415a:	429a      	cmp	r2, r3
 800415c:	d117      	bne.n	800418e <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if (motors[i]->active_movement_flag)
 800415e:	4a11      	ldr	r2, [pc, #68]	@ (80041a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004166:	7b1b      	ldrb	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_TIM_PeriodElapsedCallback+0x40>
				motors[i]->status_flag = 1;
 800416c:	4a0d      	ldr	r2, [pc, #52]	@ (80041a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
			else
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);

			break;
 800417a:	e00f      	b.n	800419c <HAL_TIM_PeriodElapsedCallback+0x60>
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);
 800417c:	4a09      	ldr	r2, [pc, #36]	@ (80041a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004184:	3394      	adds	r3, #148	@ 0x94
 8004186:	4618      	mov	r0, r3
 8004188:	f002 ff94 	bl	80070b4 <HAL_TIM_Base_Stop_IT>
			break;
 800418c:	e006      	b.n	800419c <HAL_TIM_PeriodElapsedCallback+0x60>
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b04      	cmp	r3, #4
 8004198:	ddd7      	ble.n	800414a <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
//	writeDisplay("HAHA");
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	2000054c 	.word	0x2000054c

080041a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)  // Check if User Button
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b8:	d106      	bne.n	80041c8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		toggle_inverse_motor_direction(motors[4]->driver);
 80041ba:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_GPIO_EXTI_Callback+0x28>)
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fae4 	bl	8004790 <toggle_inverse_motor_direction>
	}
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	2000054c 	.word	0x2000054c

080041d4 <moveAbsolute>:

motor_error_t moveAbsolute(float degrees, motor_t* motor)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	ed87 0a01 	vstr	s0, [r7, #4]
 80041de:	6038      	str	r0, [r7, #0]
	motor_error_t error = NO_ERROR;
 80041e0:	2302      	movs	r3, #2
 80041e2:	75fb      	strb	r3, [r7, #23]
	if (motor->active_movement_flag)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	7b1b      	ldrb	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <moveAbsolute+0x20>
	{
		error = MOTOR_MOVING_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75fb      	strb	r3, [r7, #23]
		return error;
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	e098      	b.n	8004326 <moveAbsolute+0x152>
	}
	if (degrees <= 0)
 80041f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80041f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004200:	d803      	bhi.n	800420a <moveAbsolute+0x36>
	{
		error = MOTOR_ERROR;
 8004202:	2300      	movs	r3, #0
 8004204:	75fb      	strb	r3, [r7, #23]
		return error;
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	e08d      	b.n	8004326 <moveAbsolute+0x152>
	}

	if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f001 fb91 	bl	8005940 <HAL_GPIO_ReadPin>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <moveAbsolute+0x5c>
		tmc2209_enable(motor->driver);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fddc 	bl	8002de8 <tmc2209_enable>

	int actualSteps = toSteps(degrees, motor); //Convert degrees to steps
 8004230:	6838      	ldr	r0, [r7, #0]
 8004232:	ed97 0a01 	vldr	s0, [r7, #4]
 8004236:	f7ff fa2d 	bl	8003694 <toSteps>
 800423a:	6138      	str	r0, [r7, #16]

	if (actualSteps > motor->motion.position)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	429a      	cmp	r2, r3
 8004244:	dd10      	ble.n	8004268 <moveAbsolute+0x94>
	{
		motor->motion.inverse_motor_direction = 0;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		enable_inverse_motor_direction(motor->driver);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe fa95 	bl	8002784 <enable_inverse_motor_direction>
		motor->motion.total_steps = actualSteps - motor->motion.position;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	1ad2      	subs	r2, r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	621a      	str	r2, [r3, #32]
 8004266:	e00f      	b.n	8004288 <moveAbsolute+0xb4>
	}
	else
	{
		motor->motion.inverse_motor_direction = 1;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		disable_inverse_motor_direction(motor->driver);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fa96 	bl	80027a8 <disable_inverse_motor_direction>
		motor->motion.total_steps = motor->motion.position - actualSteps;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad2      	subs	r2, r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	621a      	str	r2, [r3, #32]
	}

	motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration and deceleration steps
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	6912      	ldr	r2, [r2, #16]
 8004290:	fb03 f202 	mul.w	r2, r3, r2
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.DEC_MAX);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	6912      	ldr	r2, [r2, #16]
 80042ac:	fb03 f202 	mul.w	r2, r3, r2
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.const_steps = motor->motion.total_steps - (motor->motion.acc_steps + motor->motion.dec_steps);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	440b      	add	r3, r1
 80042ce:	1ad2      	subs	r2, r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	625a      	str	r2, [r3, #36]	@ 0x24

	motion_mode_t motion_mode = MOTION_TRAPEZ;
 80042d4:	2300      	movs	r3, #0
 80042d6:	73fb      	strb	r3, [r7, #15]

	initMovementVars(motor, motion_mode);
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	4619      	mov	r1, r3
 80042dc:	6838      	ldr	r0, [r7, #0]
 80042de:	f7ff fd99 	bl	8003e14 <initMovementVars>

	if (motor->motion.const_steps < 0)	//If acceleration steps + deceleration steps are bigger than total steps
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	da12      	bge.n	8004310 <moveAbsolute+0x13c>
	{
		motor->motion.acc_steps = motor->motion.total_steps / 2;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	0fda      	lsrs	r2, r3, #31
 80042f0:	4413      	add	r3, r2
 80042f2:	105b      	asrs	r3, r3, #1
 80042f4:	461a      	mov	r2, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	629a      	str	r2, [r3, #40]	@ 0x28
		motor->motion.dec_steps = motor->motion.total_steps / 2;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	0fda      	lsrs	r2, r3, #31
 8004300:	4413      	add	r3, r2
 8004302:	105b      	asrs	r3, r3, #1
 8004304:	461a      	mov	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	62da      	str	r2, [r3, #44]	@ 0x2c
		motor->motion.const_steps = 0;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2200      	movs	r2, #0
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	//Start timer in output compare with interrupt
	error = startMovement(motor);
 8004310:	6838      	ldr	r0, [r7, #0]
 8004312:	f7ff fd99 	bl	8003e48 <startMovement>
 8004316:	4603      	mov	r3, r0
 8004318:	75fb      	strb	r3, [r7, #23]

	error = startStatusChecks(motor);
 800431a:	6838      	ldr	r0, [r7, #0]
 800431c:	f000 fe5b 	bl	8004fd6 <startStatusChecks>
 8004320:	4603      	mov	r3, r0
 8004322:	75fb      	strb	r3, [r7, #23]

	return error;
 8004324:	7dfb      	ldrb	r3, [r7, #23]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <movePolar>:

	return error;
}

motor_error_t movePolar(float theta, float r, float z, float gripper_direction)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	@ 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	ed87 0a03 	vstr	s0, [r7, #12]
 800433a:	edc7 0a02 	vstr	s1, [r7, #8]
 800433e:	ed87 1a01 	vstr	s2, [r7, #4]
 8004342:	edc7 1a00 	vstr	s3, [r7]
	float phi[4] = {0, 0, 0, 0};
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	60da      	str	r2, [r3, #12]
	motor_error_t error;

	error = calculateAngles(phi, theta, r, z, gripper_direction);
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	edd7 1a00 	vldr	s3, [r7]
 800435c:	ed97 1a01 	vldr	s2, [r7, #4]
 8004360:	edd7 0a02 	vldr	s1, [r7, #8]
 8004364:	ed97 0a03 	vldr	s0, [r7, #12]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fb21 	bl	80039b0 <calculateAngles>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	error = moveAbsolute(phi[0], motors[0]);
 8004374:	edd7 7a05 	vldr	s15, [r7, #20]
 8004378:	4b19      	ldr	r3, [pc, #100]	@ (80043e0 <movePolar+0xb0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	eeb0 0a67 	vmov.f32	s0, s15
 8004382:	f7ff ff27 	bl	80041d4 <moveAbsolute>
 8004386:	4603      	mov	r3, r0
 8004388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	error = moveAbsolute(phi[1], motors[1]);
 800438c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004390:	4b13      	ldr	r3, [pc, #76]	@ (80043e0 <movePolar+0xb0>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	eeb0 0a67 	vmov.f32	s0, s15
 800439a:	f7ff ff1b 	bl	80041d4 <moveAbsolute>
 800439e:	4603      	mov	r3, r0
 80043a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	error = moveAbsolute(phi[2], motors[2]);
 80043a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80043a8:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <movePolar+0xb0>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4618      	mov	r0, r3
 80043ae:	eeb0 0a67 	vmov.f32	s0, s15
 80043b2:	f7ff ff0f 	bl	80041d4 <moveAbsolute>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	error = moveAbsolute(phi[3], motors[3]);
 80043bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80043c0:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <movePolar+0xb0>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4618      	mov	r0, r3
 80043c6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ca:	f7ff ff03 	bl	80041d4 <moveAbsolute>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	return error;
 80043d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3728      	adds	r7, #40	@ 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	2000054c 	.word	0x2000054c

080043e4 <moveToCoordinates>:


motor_error_t moveToCoordinates(float x, float y, float z, float gripper_direction)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b09a      	sub	sp, #104	@ 0x68
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80043ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80043f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80043f6:	edc7 1a00 	vstr	s3, [r7]
	float theta;
	float r;

	motor_error_t error;
	toPolar(x, y, &theta, &r);
 80043fa:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80043fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	edd7 0a02 	vldr	s1, [r7, #8]
 800440a:	ed97 0a03 	vldr	s0, [r7, #12]
 800440e:	f7ff f98f 	bl	8003730 <toPolar>
	error = movePolar(theta, r, z, gripper_direction);
 8004412:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004416:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800441a:	edd7 1a00 	vldr	s3, [r7]
 800441e:	ed97 1a01 	vldr	s2, [r7, #4]
 8004422:	eef0 0a47 	vmov.f32	s1, s14
 8004426:	eeb0 0a67 	vmov.f32	s0, s15
 800442a:	f7ff ff81 	bl	8004330 <movePolar>
 800442e:	4603      	mov	r3, r0
 8004430:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (error == NO_ERROR)
 8004434:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004438:	2b02      	cmp	r3, #2
 800443a:	d133      	bne.n	80044a4 <moveToCoordinates+0xc0>
	{
		char movingMsg[64];
		snprintf(movingMsg, sizeof(movingMsg), "moving to %d x  %d y %d z", (int)x, (int)y, (int)z);
 800443c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004440:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004444:	edd7 7a02 	vldr	s15, [r7, #8]
 8004448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800444c:	ee17 3a90 	vmov	r3, s15
 8004450:	edd7 7a01 	vldr	s15, [r7, #4]
 8004454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004458:	ee17 2a90 	vmov	r2, s15
 800445c:	f107 0014 	add.w	r0, r7, #20
 8004460:	9201      	str	r2, [sp, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	ee17 3a10 	vmov	r3, s14
 8004468:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <moveToCoordinates+0xf4>)
 800446a:	2140      	movs	r1, #64	@ 0x40
 800446c:	f006 fdae 	bl	800afcc <sniprintf>
		writeDisplay(movingMsg);
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe fdf7 	bl	8003068 <writeDisplay>
	}
 	while(motors[0] -> active_movement_flag ||
 800447a:	e013      	b.n	80044a4 <moveToCoordinates+0xc0>
						motors[1] -> active_movement_flag ||
						motors[2] -> active_movement_flag ||
						motors[3] -> active_movement_flag )
  	{
  		checkDriverStatus(motors[0]);
 800447c:	4b17      	ldr	r3, [pc, #92]	@ (80044dc <moveToCoordinates+0xf8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fe47 	bl	8005114 <checkDriverStatus>
  		checkDriverStatus(motors[1]);
 8004486:	4b15      	ldr	r3, [pc, #84]	@ (80044dc <moveToCoordinates+0xf8>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fe42 	bl	8005114 <checkDriverStatus>
  		checkDriverStatus(motors[2]);
 8004490:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <moveToCoordinates+0xf8>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fe3d 	bl	8005114 <checkDriverStatus>
  		checkDriverStatus(motors[3]);
 800449a:	4b10      	ldr	r3, [pc, #64]	@ (80044dc <moveToCoordinates+0xf8>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fe38 	bl	8005114 <checkDriverStatus>
 	while(motors[0] -> active_movement_flag ||
 80044a4:	4b0d      	ldr	r3, [pc, #52]	@ (80044dc <moveToCoordinates+0xf8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	7b1b      	ldrb	r3, [r3, #12]
						motors[2] -> active_movement_flag ||
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e6      	bne.n	800447c <moveToCoordinates+0x98>
						motors[1] -> active_movement_flag ||
 80044ae:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <moveToCoordinates+0xf8>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	7b1b      	ldrb	r3, [r3, #12]
 	while(motors[0] -> active_movement_flag ||
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e1      	bne.n	800447c <moveToCoordinates+0x98>
						motors[2] -> active_movement_flag ||
 80044b8:	4b08      	ldr	r3, [pc, #32]	@ (80044dc <moveToCoordinates+0xf8>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	7b1b      	ldrb	r3, [r3, #12]
						motors[1] -> active_movement_flag ||
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1dc      	bne.n	800447c <moveToCoordinates+0x98>
						motors[3] -> active_movement_flag )
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <moveToCoordinates+0xf8>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	7b1b      	ldrb	r3, [r3, #12]
						motors[2] -> active_movement_flag ||
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1d7      	bne.n	800447c <moveToCoordinates+0x98>
  	}
	return error;
 80044cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3760      	adds	r7, #96	@ 0x60
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	0800b824 	.word	0x0800b824
 80044dc:	2000054c 	.word	0x2000054c

080044e0 <grip>:
	error = moveGripper(OPEN);
	return error;
}

motor_error_t grip()
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
	motor_error_t error = NO_ERROR;
 80044e6:	2302      	movs	r3, #2
 80044e8:	71fb      	strb	r3, [r7, #7]
	error = moveGripper(CLOSE);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f000 f808 	bl	8004500 <moveGripper>
 80044f0:	4603      	mov	r3, r0
 80044f2:	71fb      	strb	r3, [r7, #7]
	return error;
 80044f4:	79fb      	ldrb	r3, [r7, #7]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <moveGripper>:

motor_error_t moveGripper(gripper_close_open_t direction)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
	motor_error_t error = NO_ERROR;
 800450a:	2302      	movs	r3, #2
 800450c:	75fb      	strb	r3, [r7, #23]
	motor_t * motor5 = motors[4];
 800450e:	4b35      	ldr	r3, [pc, #212]	@ (80045e4 <moveGripper+0xe4>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	613b      	str	r3, [r7, #16]
	if (motor5->active_movement_flag)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	7b1b      	ldrb	r3, [r3, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <moveGripper+0x24>
	{
		error = MOTOR_MOVING_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
		return error;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	e05b      	b.n	80045dc <moveGripper+0xdc>
	}

	if (direction == CLOSE)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d10a      	bne.n	8004540 <moveGripper+0x40>
	{
		enable_inverse_motor_direction(motor5->driver);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe f927 	bl	8002784 <enable_inverse_motor_direction>
		motor5->motion.inverse_motor_direction = 0;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800453e:	e011      	b.n	8004564 <moveGripper+0x64>
	}
	else if (direction == OPEN)
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <moveGripper+0x5c>
	{
		disable_inverse_motor_direction(motor5->driver);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe f92b 	bl	80027a8 <disable_inverse_motor_direction>
		motor5->motion.inverse_motor_direction = 1;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800455a:	e003      	b.n	8004564 <moveGripper+0x64>
	}
	else
	{
		error = MOTOR_ERROR;
 800455c:	2300      	movs	r3, #0
 800455e:	75fb      	strb	r3, [r7, #23]
		return error;
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	e03b      	b.n	80045dc <moveGripper+0xdc>
	}

	if (HAL_GPIO_ReadPin(motor5->gpio_ports.mot_en, motor5->gpio_pins.mot_en) == GPIO_PIN_SET)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f001 f9e4 	bl	8005940 <HAL_GPIO_ReadPin>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d105      	bne.n	800458a <moveGripper+0x8a>
		tmc2209_enable(motor5->driver);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fc2f 	bl	8002de8 <tmc2209_enable>

	motor5->motion.acc_steps = (motor5->motion.V_MAX * motor5->motion.V_MAX) / (2 * motor5->motion.ACC_MAX); //Calculate total acceleration steps
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	6912      	ldr	r2, [r2, #16]
 8004592:	fb03 f202 	mul.w	r2, r3, r2
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28

	motion_mode_t motion_mode = MOTION_GRIP;
 80045a6:	2302      	movs	r3, #2
 80045a8:	73fb      	strb	r3, [r7, #15]
	initMovementVars(motor5, motion_mode);
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	4619      	mov	r1, r3
 80045ae:	6938      	ldr	r0, [r7, #16]
 80045b0:	f7ff fc30 	bl	8003e14 <initMovementVars>

	error = startMovement(motor5);
 80045b4:	6938      	ldr	r0, [r7, #16]
 80045b6:	f7ff fc47 	bl	8003e48 <startMovement>
 80045ba:	4603      	mov	r3, r0
 80045bc:	75fb      	strb	r3, [r7, #23]
	error = startStatusChecks(motor5);
 80045be:	6938      	ldr	r0, [r7, #16]
 80045c0:	f000 fd09 	bl	8004fd6 <startStatusChecks>
 80045c4:	4603      	mov	r3, r0
 80045c6:	75fb      	strb	r3, [r7, #23]
	while (motor5->stallguard.stall_flag == 0)
 80045c8:	e002      	b.n	80045d0 <moveGripper+0xd0>
	{
		checkDriverStatus(motor5);
 80045ca:	6938      	ldr	r0, [r7, #16]
 80045cc:	f000 fda2 	bl	8005114 <checkDriverStatus>
	while (motor5->stallguard.stall_flag == 0)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f7      	beq.n	80045ca <moveGripper+0xca>
	}
	return error;
 80045da:	7dfb      	ldrb	r3, [r7, #23]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	2000054c 	.word	0x2000054c

080045e8 <goHome>:

motor_error_t goHome()
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
	motor_error_t error = NO_ERROR;
 80045ee:	2302      	movs	r3, #2
 80045f0:	73fb      	strb	r3, [r7, #15]

	if (motors[0]->active_movement_flag ||
 80045f2:	4b64      	ldr	r3, [pc, #400]	@ (8004784 <goHome+0x19c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	7b1b      	ldrb	r3, [r3, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10e      	bne.n	800461a <goHome+0x32>
			motors[1]->active_movement_flag ||
 80045fc:	4b61      	ldr	r3, [pc, #388]	@ (8004784 <goHome+0x19c>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	7b1b      	ldrb	r3, [r3, #12]
	if (motors[0]->active_movement_flag ||
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <goHome+0x32>
			motors[2]->active_movement_flag ||
 8004606:	4b5f      	ldr	r3, [pc, #380]	@ (8004784 <goHome+0x19c>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	7b1b      	ldrb	r3, [r3, #12]
			motors[1]->active_movement_flag ||
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <goHome+0x32>
			motors[3]->active_movement_flag)
 8004610:	4b5c      	ldr	r3, [pc, #368]	@ (8004784 <goHome+0x19c>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	7b1b      	ldrb	r3, [r3, #12]
			motors[2]->active_movement_flag ||
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <goHome+0x3a>
	{
		error = MOTOR_MOVING_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
		return error;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	e0ac      	b.n	800477c <goHome+0x194>
	};

	writeDisplay("Homing...");
 8004622:	4859      	ldr	r0, [pc, #356]	@ (8004788 <goHome+0x1a0>)
 8004624:	f7fe fd20 	bl	8003068 <writeDisplay>

	for (int i = 0; i < NUMBER_OF_MOTOR; i++)
 8004628:	2300      	movs	r3, #0
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	e039      	b.n	80046a2 <goHome+0xba>
	{
		motor_t * motor = motors[i];
 800462e:	4a55      	ldr	r2, [pc, #340]	@ (8004784 <goHome+0x19c>)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004636:	607b      	str	r3, [r7, #4]
//		if (i == 3)
//			continue;

		motion_mode_t motion_mode = MOTION_HOME;
 8004638:	2301      	movs	r3, #1
 800463a:	70fb      	strb	r3, [r7, #3]

		if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f001 f978 	bl	8005940 <HAL_GPIO_ReadPin>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <goHome+0x7a>
			tmc2209_enable(motor->driver);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe fbc3 	bl	8002de8 <tmc2209_enable>

		motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration steps
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6912      	ldr	r2, [r2, #16]
 800466a:	fb03 f202 	mul.w	r2, r3, r2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28

		initMovementVars(motor, motion_mode);
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fbc6 	bl	8003e14 <initMovementVars>

		error = startMovement(motor);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fbdd 	bl	8003e48 <startMovement>
 800468e:	4603      	mov	r3, r0
 8004690:	73fb      	strb	r3, [r7, #15]
		error = startStatusChecks(motor);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fc9f 	bl	8004fd6 <startStatusChecks>
 8004698:	4603      	mov	r3, r0
 800469a:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < NUMBER_OF_MOTOR; i++)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	3301      	adds	r3, #1
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	ddc2      	ble.n	800462e <goHome+0x46>
	}

	while(motors[0]->stallguard.stall_flag == 0
 80046a8:	e018      	b.n	80046dc <goHome+0xf4>
			|| motors[2]->stallguard.stall_flag == 0
			|| motors[3]->stallguard.stall_flag == 0
			|| motors[4]->stallguard.stall_flag == 0)
	{

		checkDriverStatus(motors[0]);
 80046aa:	4b36      	ldr	r3, [pc, #216]	@ (8004784 <goHome+0x19c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fd30 	bl	8005114 <checkDriverStatus>
		checkDriverStatus(motors[1]);
 80046b4:	4b33      	ldr	r3, [pc, #204]	@ (8004784 <goHome+0x19c>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fd2b 	bl	8005114 <checkDriverStatus>
		checkDriverStatus(motors[2]);
 80046be:	4b31      	ldr	r3, [pc, #196]	@ (8004784 <goHome+0x19c>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fd26 	bl	8005114 <checkDriverStatus>
		checkDriverStatus(motors[3]);
 80046c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004784 <goHome+0x19c>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fd21 	bl	8005114 <checkDriverStatus>
		checkDriverStatus(motors[4]);
 80046d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <goHome+0x19c>)
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fd1c 	bl	8005114 <checkDriverStatus>
	while(motors[0]->stallguard.stall_flag == 0
 80046dc:	4b29      	ldr	r3, [pc, #164]	@ (8004784 <goHome+0x19c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
			|| motors[4]->stallguard.stall_flag == 0)
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0e0      	beq.n	80046aa <goHome+0xc2>
			|| motors[1]->stallguard.stall_flag == 0
 80046e8:	4b26      	ldr	r3, [pc, #152]	@ (8004784 <goHome+0x19c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0da      	beq.n	80046aa <goHome+0xc2>
			|| motors[2]->stallguard.stall_flag == 0
 80046f4:	4b23      	ldr	r3, [pc, #140]	@ (8004784 <goHome+0x19c>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0d4      	beq.n	80046aa <goHome+0xc2>
			|| motors[3]->stallguard.stall_flag == 0
 8004700:	4b20      	ldr	r3, [pc, #128]	@ (8004784 <goHome+0x19c>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ce      	beq.n	80046aa <goHome+0xc2>
			|| motors[4]->stallguard.stall_flag == 0)
 800470c:	4b1d      	ldr	r3, [pc, #116]	@ (8004784 <goHome+0x19c>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0c8      	beq.n	80046aa <goHome+0xc2>
	}

	motors[0]->stallguard.stall_flag = 0;
 8004718:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <goHome+0x19c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	motors[1]->stallguard.stall_flag = 0;
 8004722:	4b18      	ldr	r3, [pc, #96]	@ (8004784 <goHome+0x19c>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	motors[2]->stallguard.stall_flag = 0;
 800472c:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <goHome+0x19c>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	motors[3]->stallguard.stall_flag = 0;
 8004736:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <goHome+0x19c>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	motors[4]->stallguard.stall_flag = 0;
 8004740:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <goHome+0x19c>)
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea

	motors[0]->motion.position = 1245;
 800474a:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <goHome+0x19c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f240 42dd 	movw	r2, #1245	@ 0x4dd
 8004752:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[1]->motion.position = 0;
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <goHome+0x19c>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[2]->motion.position = 0;
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <goHome+0x19c>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2200      	movs	r2, #0
 8004762:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[3]->motion.position = 0;
 8004764:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <goHome+0x19c>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[4]->motion.position = 0;
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <goHome+0x19c>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2200      	movs	r2, #0
 8004772:	639a      	str	r2, [r3, #56]	@ 0x38

	writeDisplay("Homing finished");
 8004774:	4805      	ldr	r0, [pc, #20]	@ (800478c <goHome+0x1a4>)
 8004776:	f7fe fc77 	bl	8003068 <writeDisplay>

	return error;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	2000054c 	.word	0x2000054c
 8004788:	0800b840 	.word	0x0800b840
 800478c:	0800b84c 	.word	0x0800b84c

08004790 <toggle_inverse_motor_direction>:

void toggle_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 1 - stepper_driver->global_config_.shaft;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800479e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f1c3 0301 	rsb	r3, r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	b2d9      	uxtb	r1, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 80047b6:	f361 03c3 	bfi	r3, r1, #3, #1
 80047ba:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fe fa84 	bl	8002ccc <write_stored_global_config>
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <init_motor_1>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart5;

void init_motor_1(motor_t *motor1, tmc2209_stepper_driver_t *driver1)
{
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ce:	b093      	sub	sp, #76	@ 0x4c
 80047d0:	af10      	add	r7, sp, #64	@ 0x40
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor1);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fbc0 	bl	8004f5c <initializeDefaults>
	motor1->ID = '1';
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2231      	movs	r2, #49	@ 0x31
 80047e0:	701a      	strb	r2, [r3, #0]

	motor1->gear_ratio = GEAR_RATIO_M_1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a4f      	ldr	r2, [pc, #316]	@ (8004924 <init_motor_1+0x158>)
 80047e6:	605a      	str	r2, [r3, #4]
	motor1->microsteps = MICROSTEPS_M_1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	609a      	str	r2, [r3, #8]
	motor1->motion.V_MAX 	= V_MAX_M_1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80047f4:	611a      	str	r2, [r3, #16]
	motor1->motion.ACC_MAX = ACC_MAX_M_1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80047fc:	615a      	str	r2, [r3, #20]
	motor1->motion.DEC_MAX = DEC_MAX_M_1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8004804:	619a      	str	r2, [r3, #24]

	motor1->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	221e      	movs	r2, #30
 800480a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor1->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2246      	movs	r2, #70	@ 0x46
 8004812:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor1->gpio_pins.step 		= STEP_1_Pin;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800481c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor1->gpio_pins.dir 		= DIR_1_Pin;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004826:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor1->gpio_pins.mot_en 	= MOT_EN_1_Pin;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004830:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
//	motor1->gpio_pins.diag 		= DIAG_1_Pin;
	motor1->gpio_ports.step 	= STEP_1_GPIO_Port;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a3c      	ldr	r2, [pc, #240]	@ (8004928 <init_motor_1+0x15c>)
 8004838:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor1->gpio_ports.dir 		= DIR_1_GPIO_Port;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a3a      	ldr	r2, [pc, #232]	@ (8004928 <init_motor_1+0x15c>)
 8004840:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	motor1->gpio_ports.mot_en 	= MOT_EN_1_GPIO_Port;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a38      	ldr	r2, [pc, #224]	@ (8004928 <init_motor_1+0x15c>)
 8004848:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
//	motor1->gpio_ports.diag		= DIAG_1_GPIO_Port;

	motor1->motion.motor_control_timer = htim12;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a37      	ldr	r2, [pc, #220]	@ (800492c <init_motor_1+0x160>)
 8004850:	3348      	adds	r3, #72	@ 0x48
 8004852:	4611      	mov	r1, r2
 8004854:	2248      	movs	r2, #72	@ 0x48
 8004856:	4618      	mov	r0, r3
 8004858:	f006 fc4c 	bl	800b0f4 <memcpy>
	motor1->status_check_timer = htim1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a34      	ldr	r2, [pc, #208]	@ (8004930 <init_motor_1+0x164>)
 8004860:	3394      	adds	r3, #148	@ 0x94
 8004862:	4611      	mov	r1, r2
 8004864:	2248      	movs	r2, #72	@ 0x48
 8004866:	4618      	mov	r0, r3
 8004868:	f006 fc44 	bl	800b0f4 <memcpy>
	motor1->uart = huart1;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a31      	ldr	r2, [pc, #196]	@ (8004934 <init_motor_1+0x168>)
 8004870:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004874:	4611      	mov	r1, r2
 8004876:	2248      	movs	r2, #72	@ 0x48
 8004878:	4618      	mov	r0, r3
 800487a:	f006 fc3b 	bl	800b0f4 <memcpy>

	motor1->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f64e 7295 	movw	r2, #61333	@ 0xef95
 8004884:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor1->motion.HIGH_LIMIT = HIGH_LIMIT_M_1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a2b      	ldr	r2, [pc, #172]	@ (8004938 <init_motor_1+0x16c>)
 800488c:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor1->motion.LOW_LIMIT = LOW_LIMIT_M_1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2a      	ldr	r2, [pc, #168]	@ (800493c <init_motor_1+0x170>)
 8004892:	641a      	str	r2, [r3, #64]	@ 0x40

	motor1->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor1->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_1;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a28      	ldr	r2, [pc, #160]	@ (8004940 <init_motor_1+0x174>)
 80048a0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor1->stallguard.STALL_BUFFER = STALL_BUFFER_M_1;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2219      	movs	r2, #25
 80048a8:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	tmc2209_set_uart(driver1, huart1);
 80048ac:	4e21      	ldr	r6, [pc, #132]	@ (8004934 <init_motor_1+0x168>)
 80048ae:	466d      	mov	r5, sp
 80048b0:	f106 040c 	add.w	r4, r6, #12
 80048b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80048c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80048c8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80048cc:	6838      	ldr	r0, [r7, #0]
 80048ce:	f7fe fa5c 	bl	8002d8a <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver1, motor1->gpio_pins.mot_en, motor1->gpio_ports.mot_en);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80048de:	461a      	mov	r2, r3
 80048e0:	6838      	ldr	r0, [r7, #0]
 80048e2:	f7fe fa6a 	bl	8002dba <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80048ec:	6838      	ldr	r0, [r7, #0]
 80048ee:	f7fd fe13 	bl	8002518 <tmc2209_setup>
	set_micro_steps_per_step(driver1, motor1->microsteps);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4619      	mov	r1, r3
 80048fa:	6838      	ldr	r0, [r7, #0]
 80048fc:	f7fd fe5c 	bl	80025b8 <set_micro_steps_per_step>
	set_all_current_percent_values(driver1, motor1->current_settings.RUN_CURRENT_PERCENT, motor1->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800490c:	2300      	movs	r3, #0
 800490e:	6838      	ldr	r0, [r7, #0]
 8004910:	f7fd feee 	bl	80026f0 <set_all_current_percent_values>

	motor1->driver = driver1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004924:	41200000 	.word	0x41200000
 8004928:	40020400 	.word	0x40020400
 800492c:	2000030c 	.word	0x2000030c
 8004930:	200000cc 	.word	0x200000cc
 8004934:	2000042c 	.word	0x2000042c
 8004938:	43b0c8f6 	.word	0x43b0c8f6
 800493c:	40cdc28f 	.word	0x40cdc28f
 8004940:	43280000 	.word	0x43280000

08004944 <init_motor_2>:

void init_motor_2(motor_t *motor2, tmc2209_stepper_driver_t *driver2)
{
 8004944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004946:	b093      	sub	sp, #76	@ 0x4c
 8004948:	af10      	add	r7, sp, #64	@ 0x40
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor2);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fb04 	bl	8004f5c <initializeDefaults>
	motor2->ID = '2';
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2232      	movs	r2, #50	@ 0x32
 8004958:	701a      	strb	r2, [r3, #0]

	motor2->gear_ratio = GEAR_RATIO_M_2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ad8 <init_motor_2+0x194>)
 800495e:	605a      	str	r2, [r3, #4]
	motor2->microsteps = MICROSTEPS_M_2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	609a      	str	r2, [r3, #8]
	motor2->motion.V_MAX 	= V_MAX_M_2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800496c:	611a      	str	r2, [r3, #16]
	motor2->motion.ACC_MAX = ACC_MAX_M_2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8004974:	615a      	str	r2, [r3, #20]
	motor2->motion.DEC_MAX = DEC_MAX_M_2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800497c:	619a      	str	r2, [r3, #24]

	motor2->motion.v = 0;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
	motor2->motion.total_steps = 0;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	621a      	str	r2, [r3, #32]
	motor2->motion.const_steps = 0;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	625a      	str	r2, [r3, #36]	@ 0x24
	motor2->motion.acc_steps = 0;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	629a      	str	r2, [r3, #40]	@ 0x28
	motor2->motion.dec_steps = 0;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor2->motion.step = 0;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30
	motor2->motion.cycle = 0;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	635a      	str	r2, [r3, #52]	@ 0x34

	motor2->active_movement_flag = 0;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	731a      	strb	r2, [r3, #12]

	motor2->status_flag = 0;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92

	motor2->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	225a      	movs	r2, #90	@ 0x5a
 80049bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor2->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2264      	movs	r2, #100	@ 0x64
 80049c4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor2->gpio_pins.step 		= STEP_2_Pin;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2280      	movs	r2, #128	@ 0x80
 80049cc:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor2->gpio_pins.dir 		= DIR_2_Pin;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049d6:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor2->gpio_pins.mot_en 	= MOT_EN_2_Pin;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2240      	movs	r2, #64	@ 0x40
 80049de:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
//	motor2->gpio_pins.diag 		= DIAG_2_Pin;
	motor2->gpio_ports.step 	= STEP_2_GPIO_Port;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a3d      	ldr	r2, [pc, #244]	@ (8004adc <init_motor_2+0x198>)
 80049e6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor2->gpio_ports.dir 		= DIR_2_GPIO_Port;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a3b      	ldr	r2, [pc, #236]	@ (8004adc <init_motor_2+0x198>)
 80049ee:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	motor2->gpio_ports.mot_en 	= MOT_EN_2_GPIO_Port;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a39      	ldr	r2, [pc, #228]	@ (8004adc <init_motor_2+0x198>)
 80049f6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
//	motor2->gpio_ports.diag 	= DIAG_2_GPIO_Port;

	motor2->motion.motor_control_timer = htim13;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a38      	ldr	r2, [pc, #224]	@ (8004ae0 <init_motor_2+0x19c>)
 80049fe:	3348      	adds	r3, #72	@ 0x48
 8004a00:	4611      	mov	r1, r2
 8004a02:	2248      	movs	r2, #72	@ 0x48
 8004a04:	4618      	mov	r0, r3
 8004a06:	f006 fb75 	bl	800b0f4 <memcpy>
	motor2->status_check_timer = htim6;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a35      	ldr	r2, [pc, #212]	@ (8004ae4 <init_motor_2+0x1a0>)
 8004a0e:	3394      	adds	r3, #148	@ 0x94
 8004a10:	4611      	mov	r1, r2
 8004a12:	2248      	movs	r2, #72	@ 0x48
 8004a14:	4618      	mov	r0, r3
 8004a16:	f006 fb6d 	bl	800b0f4 <memcpy>

	motor2->uart = huart6;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a32      	ldr	r2, [pc, #200]	@ (8004ae8 <init_motor_2+0x1a4>)
 8004a1e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004a22:	4611      	mov	r1, r2
 8004a24:	2248      	movs	r2, #72	@ 0x48
 8004a26:	4618      	mov	r0, r3
 8004a28:	f006 fb64 	bl	800b0f4 <memcpy>

	motor2->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8004a32:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor2->motion.HIGH_LIMIT = HIGH_LIMIT_M_2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2c      	ldr	r2, [pc, #176]	@ (8004aec <init_motor_2+0x1a8>)
 8004a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor2->motion.LOW_LIMIT = LOW_LIMIT_M_2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40

	motor2->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor2->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a28      	ldr	r2, [pc, #160]	@ (8004af0 <init_motor_2+0x1ac>)
 8004a50:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor2->stallguard.STALL_BUFFER = STALL_BUFFER_M_2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2228      	movs	r2, #40	@ 0x28
 8004a58:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	tmc2209_set_uart(driver2, motor2->uart);
 8004a5c:	687e      	ldr	r6, [r7, #4]
 8004a5e:	466d      	mov	r5, sp
 8004a60:	f506 748e 	add.w	r4, r6, #284	@ 0x11c
 8004a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004a78:	f506 7388 	add.w	r3, r6, #272	@ 0x110
 8004a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a7e:	6838      	ldr	r0, [r7, #0]
 8004a80:	f7fe f983 	bl	8002d8a <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver2, motor2->gpio_pins.mot_en, motor2->gpio_ports.mot_en);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004a90:	461a      	mov	r2, r3
 8004a92:	6838      	ldr	r0, [r7, #0]
 8004a94:	f7fe f991 	bl	8002dba <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_0);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004a9e:	6838      	ldr	r0, [r7, #0]
 8004aa0:	f7fd fd3a 	bl	8002518 <tmc2209_setup>
//	disable_stealth_chop(motor2->driver);
	set_micro_steps_per_step(driver2, motor2->microsteps);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6838      	ldr	r0, [r7, #0]
 8004aae:	f7fd fd83 	bl	80025b8 <set_micro_steps_per_step>
	set_all_current_percent_values(driver2, motor2->current_settings.RUN_CURRENT_PERCENT, motor2->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6838      	ldr	r0, [r7, #0]
 8004ac2:	f7fd fe15 	bl	80026f0 <set_all_current_percent_values>

	motor2->driver = driver2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40f00000 	.word	0x40f00000
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	20000354 	.word	0x20000354
 8004ae4:	200001a4 	.word	0x200001a4
 8004ae8:	20000504 	.word	0x20000504
 8004aec:	42e9d70a 	.word	0x42e9d70a
 8004af0:	42a4cccd 	.word	0x42a4cccd

08004af4 <init_motor_3>:

void init_motor_3(motor_t *motor3, tmc2209_stepper_driver_t *driver3)
{
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	b093      	sub	sp, #76	@ 0x4c
 8004af8:	af10      	add	r7, sp, #64	@ 0x40
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor3);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa2c 	bl	8004f5c <initializeDefaults>

	motor3->ID = '3';
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2233      	movs	r2, #51	@ 0x33
 8004b08:	701a      	strb	r2, [r3, #0]

	motor3->gear_ratio = GEAR_RATIO_M_3;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a53      	ldr	r2, [pc, #332]	@ (8004c5c <init_motor_3+0x168>)
 8004b0e:	605a      	str	r2, [r3, #4]
	motor3->microsteps = MICROSTEPS_M_3;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	609a      	str	r2, [r3, #8]
	motor3->motion.V_MAX 	= V_MAX_M_3;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8004b1c:	611a      	str	r2, [r3, #16]
	motor3->motion.ACC_MAX = ACC_MAX_M_3;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8004b24:	615a      	str	r2, [r3, #20]
	motor3->motion.DEC_MAX = DEC_MAX_M_3;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8004b2c:	619a      	str	r2, [r3, #24]

	motor3->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_3;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2228      	movs	r2, #40	@ 0x28
 8004b32:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor3->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_3;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	223c      	movs	r2, #60	@ 0x3c
 8004b3a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor3->gpio_pins.step 		= STEP_3_Pin;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2208      	movs	r2, #8
 8004b42:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor3->gpio_pins.dir 		= DIR_3_Pin;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b4c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor3->gpio_pins.mot_en 	= MOT_EN_3_Pin;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2204      	movs	r2, #4
 8004b54:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor3->gpio_pins.diag 		= DIAG_3_Pin;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b5e:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
	motor3->gpio_ports.step 	= STEP_3_GPIO_Port;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a3e      	ldr	r2, [pc, #248]	@ (8004c60 <init_motor_3+0x16c>)
 8004b66:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor3->gpio_ports.dir 		= DIR_3_GPIO_Port;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c60 <init_motor_3+0x16c>)
 8004b6e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	motor3->gpio_ports.mot_en 	= MOT_EN_3_GPIO_Port;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a3a      	ldr	r2, [pc, #232]	@ (8004c60 <init_motor_3+0x16c>)
 8004b76:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	motor3->gpio_ports.diag 	= DIAG_3_GPIO_Port;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a39      	ldr	r2, [pc, #228]	@ (8004c64 <init_motor_3+0x170>)
 8004b7e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	motor3->motion.motor_control_timer = htim3;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a38      	ldr	r2, [pc, #224]	@ (8004c68 <init_motor_3+0x174>)
 8004b86:	3348      	adds	r3, #72	@ 0x48
 8004b88:	4611      	mov	r1, r2
 8004b8a:	2248      	movs	r2, #72	@ 0x48
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f006 fab1 	bl	800b0f4 <memcpy>
	motor3->status_check_timer = htim7;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a35      	ldr	r2, [pc, #212]	@ (8004c6c <init_motor_3+0x178>)
 8004b96:	3394      	adds	r3, #148	@ 0x94
 8004b98:	4611      	mov	r1, r2
 8004b9a:	2248      	movs	r2, #72	@ 0x48
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f006 faa9 	bl	800b0f4 <memcpy>

	motor3->uart = huart3;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a32      	ldr	r2, [pc, #200]	@ (8004c70 <init_motor_3+0x17c>)
 8004ba6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004baa:	4611      	mov	r1, r2
 8004bac:	2248      	movs	r2, #72	@ 0x48
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f006 faa0 	bl	800b0f4 <memcpy>

	motor3->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_3;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8004bba:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor3->motion.HIGH_LIMIT = HIGH_LIMIT_M_3;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c74 <init_motor_3+0x180>)
 8004bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor3->motion.LOW_LIMIT = LOW_LIMIT_M_3;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40

	motor3->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_3;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor3->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_3;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a28      	ldr	r2, [pc, #160]	@ (8004c78 <init_motor_3+0x184>)
 8004bd8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor3->stallguard.STALL_BUFFER = STALL_BUFFER_M_3;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2219      	movs	r2, #25
 8004be0:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	tmc2209_set_uart(driver3, huart3);
 8004be4:	4e22      	ldr	r6, [pc, #136]	@ (8004c70 <init_motor_3+0x17c>)
 8004be6:	466d      	mov	r5, sp
 8004be8:	f106 040c 	add.w	r4, r6, #12
 8004bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bf8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004bfc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004c00:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004c04:	6838      	ldr	r0, [r7, #0]
 8004c06:	f7fe f8c0 	bl	8002d8a <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver3, motor3->gpio_pins.mot_en, motor3->gpio_ports.mot_en);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c16:	461a      	mov	r2, r3
 8004c18:	6838      	ldr	r0, [r7, #0]
 8004c1a:	f7fe f8ce 	bl	8002dba <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_0);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004c24:	6838      	ldr	r0, [r7, #0]
 8004c26:	f7fd fc77 	bl	8002518 <tmc2209_setup>
	set_micro_steps_per_step(driver3, motor3->microsteps);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	4619      	mov	r1, r3
 8004c32:	6838      	ldr	r0, [r7, #0]
 8004c34:	f7fd fcc0 	bl	80025b8 <set_micro_steps_per_step>
	set_all_current_percent_values(driver3, motor3->current_settings.RUN_CURRENT_PERCENT, motor3->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004c44:	2300      	movs	r3, #0
 8004c46:	6838      	ldr	r0, [r7, #0]
 8004c48:	f7fd fd52 	bl	80026f0 <set_all_current_percent_values>

	motor3->driver = driver3;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5c:	40f00000 	.word	0x40f00000
 8004c60:	40020800 	.word	0x40020800
 8004c64:	40020400 	.word	0x40020400
 8004c68:	20000114 	.word	0x20000114
 8004c6c:	200001ec 	.word	0x200001ec
 8004c70:	200004bc 	.word	0x200004bc
 8004c74:	430ac51f 	.word	0x430ac51f
 8004c78:	430c0000 	.word	0x430c0000

08004c7c <init_motor_4>:

void init_motor_4(motor_t *motor4, tmc2209_stepper_driver_t *driver4)
{
 8004c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7e:	b093      	sub	sp, #76	@ 0x4c
 8004c80:	af10      	add	r7, sp, #64	@ 0x40
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor4);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f968 	bl	8004f5c <initializeDefaults>

	motor4->ID = '4';
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2234      	movs	r2, #52	@ 0x34
 8004c90:	701a      	strb	r2, [r3, #0]

	motor4->gear_ratio = GEAR_RATIO_M_4;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a51      	ldr	r2, [pc, #324]	@ (8004ddc <init_motor_4+0x160>)
 8004c96:	605a      	str	r2, [r3, #4]
	motor4->microsteps = MICROSTEPS_M_4;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	609a      	str	r2, [r3, #8]
	motor4->motion.V_MAX 	= V_MAX_M_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004ca4:	611a      	str	r2, [r3, #16]
	motor4->motion.ACC_MAX = ACC_MAX_M_4;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8004cac:	615a      	str	r2, [r3, #20]
	motor4->motion.DEC_MAX = DEC_MAX_M_4;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8004cb4:	619a      	str	r2, [r3, #24]

	motor4->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_4;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2232      	movs	r2, #50	@ 0x32
 8004cba:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor4->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_4;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2246      	movs	r2, #70	@ 0x46
 8004cc2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor4->gpio_pins.step 		= STEP_4_Pin;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor4->gpio_pins.dir 		= DIR_4_Pin;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor4->gpio_pins.mot_en 	= MOT_EN_4_Pin;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
//	motor4->gpio_pins.diag 		= DIAG_4_Pin;
	motor4->gpio_ports.step 	= STEP_4_GPIO_Port;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a3f      	ldr	r2, [pc, #252]	@ (8004de0 <init_motor_4+0x164>)
 8004ce2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor4->gpio_ports.dir 		= DIR_4_GPIO_Port;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a3d      	ldr	r2, [pc, #244]	@ (8004de0 <init_motor_4+0x164>)
 8004cea:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	motor4->gpio_ports.mot_en 	= MOT_EN_4_GPIO_Port;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a3b      	ldr	r2, [pc, #236]	@ (8004de0 <init_motor_4+0x164>)
 8004cf2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
//	motor4->gpio_ports.diag 		= DIAG_4_GPIO_Port;

	motor4->motion.motor_control_timer = htim4;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8004de4 <init_motor_4+0x168>)
 8004cfa:	3348      	adds	r3, #72	@ 0x48
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	2248      	movs	r2, #72	@ 0x48
 8004d00:	4618      	mov	r0, r3
 8004d02:	f006 f9f7 	bl	800b0f4 <memcpy>
	motor4->status_check_timer = htim9;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a37      	ldr	r2, [pc, #220]	@ (8004de8 <init_motor_4+0x16c>)
 8004d0a:	3394      	adds	r3, #148	@ 0x94
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	2248      	movs	r2, #72	@ 0x48
 8004d10:	4618      	mov	r0, r3
 8004d12:	f006 f9ef 	bl	800b0f4 <memcpy>

	motor4->uart = huart4;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a34      	ldr	r2, [pc, #208]	@ (8004dec <init_motor_4+0x170>)
 8004d1a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004d1e:	4611      	mov	r1, r2
 8004d20:	2248      	movs	r2, #72	@ 0x48
 8004d22:	4618      	mov	r0, r3
 8004d24:	f006 f9e6 	bl	800b0f4 <memcpy>

	motor4->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_4;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f241 7270 	movw	r2, #6000	@ 0x1770
 8004d2e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor4->motion.HIGH_LIMIT = HIGH_LIMIT_M_4;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2e      	ldr	r2, [pc, #184]	@ (8004df0 <init_motor_4+0x174>)
 8004d36:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor4->motion.LOW_LIMIT = LOW_LIMIT_M_4;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	641a      	str	r2, [r3, #64]	@ 0x40

	motor4->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_4;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor4->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_4;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004df4 <init_motor_4+0x178>)
 8004d4c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor4->stallguard.STALL_BUFFER = STALL_BUFFER_M_4;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	220c      	movs	r2, #12
 8004d54:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	tmc2209_set_uart(driver4, huart4);
 8004d58:	4e24      	ldr	r6, [pc, #144]	@ (8004dec <init_motor_4+0x170>)
 8004d5a:	466d      	mov	r5, sp
 8004d5c:	f106 040c 	add.w	r4, r6, #12
 8004d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d6c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004d70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004d74:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004d78:	6838      	ldr	r0, [r7, #0]
 8004d7a:	f7fe f806 	bl	8002d8a <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver4, motor4->gpio_pins.mot_en, motor4->gpio_ports.mot_en);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	6838      	ldr	r0, [r7, #0]
 8004d8e:	f7fe f814 	bl	8002dba <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8004d92:	2200      	movs	r2, #0
 8004d94:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004d98:	6838      	ldr	r0, [r7, #0]
 8004d9a:	f7fd fbbd 	bl	8002518 <tmc2209_setup>
	enable_cool_step(driver4, 0, 1);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2100      	movs	r1, #0
 8004da2:	6838      	ldr	r0, [r7, #0]
 8004da4:	f7fd fd36 	bl	8002814 <enable_cool_step>
	set_micro_steps_per_step(driver4, motor4->microsteps);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	6838      	ldr	r0, [r7, #0]
 8004db2:	f7fd fc01 	bl	80025b8 <set_micro_steps_per_step>
	set_all_current_percent_values(driver4, motor4->current_settings.RUN_CURRENT_PERCENT, motor4->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6838      	ldr	r0, [r7, #0]
 8004dc6:	f7fd fc93 	bl	80026f0 <set_all_current_percent_values>

	motor4->driver = driver4;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40f00000 	.word	0x40f00000
 8004de0:	40020400 	.word	0x40020400
 8004de4:	2000015c 	.word	0x2000015c
 8004de8:	2000027c 	.word	0x2000027c
 8004dec:	2000039c 	.word	0x2000039c
 8004df0:	43340000 	.word	0x43340000
 8004df4:	421c0000 	.word	0x421c0000

08004df8 <init_motor_5>:

void init_motor_5(motor_t *motor5, tmc2209_stepper_driver_t *driver5)
{
 8004df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfa:	b093      	sub	sp, #76	@ 0x4c
 8004dfc:	af10      	add	r7, sp, #64	@ 0x40
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor5);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8aa 	bl	8004f5c <initializeDefaults>

	motor5->ID = '5';
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2235      	movs	r2, #53	@ 0x35
 8004e0c:	701a      	strb	r2, [r3, #0]

	motor5->gear_ratio = GEAR_RATIO_M_5;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004e14:	605a      	str	r2, [r3, #4]
	motor5->microsteps = MICROSTEPS_M_5;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	609a      	str	r2, [r3, #8]
	motor5->motion.V_MAX 	= V_MAX_M_5;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e22:	611a      	str	r2, [r3, #16]
	motor5->motion.ACC_MAX = ACC_MAX_M_5;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004e2a:	615a      	str	r2, [r3, #20]
	motor5->motion.DEC_MAX = DEC_MAX_M_5;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004e32:	619a      	str	r2, [r3, #24]

	motor5->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_5;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2214      	movs	r2, #20
 8004e38:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor5->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_5;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2214      	movs	r2, #20
 8004e40:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor5->gpio_pins.step 		= STEP_5_Pin;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e4a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor5->gpio_pins.dir 		= DIR_5_Pin;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e54:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor5->gpio_pins.mot_en 	= MOT_EN_5_Pin;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor5->gpio_ports.step 	= STEP_5_GPIO_Port;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a38      	ldr	r2, [pc, #224]	@ (8004f44 <init_motor_5+0x14c>)
 8004e64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor5->gpio_pins.diag 		= DIAG_5_Pin;
	motor5->gpio_ports.dir 		= DIR_5_GPIO_Port;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a36      	ldr	r2, [pc, #216]	@ (8004f44 <init_motor_5+0x14c>)
 8004e6c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	motor5->gpio_ports.mot_en 	= MOT_EN_5_GPIO_Port;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a34      	ldr	r2, [pc, #208]	@ (8004f44 <init_motor_5+0x14c>)
 8004e74:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
//	motor5->gpio_ports.diag 		= DIAG_5_GPIO_Port;

	motor5->motion.motor_control_timer = htim8;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a33      	ldr	r2, [pc, #204]	@ (8004f48 <init_motor_5+0x150>)
 8004e7c:	3348      	adds	r3, #72	@ 0x48
 8004e7e:	4611      	mov	r1, r2
 8004e80:	2248      	movs	r2, #72	@ 0x48
 8004e82:	4618      	mov	r0, r3
 8004e84:	f006 f936 	bl	800b0f4 <memcpy>
	motor5->status_check_timer = htim10;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a30      	ldr	r2, [pc, #192]	@ (8004f4c <init_motor_5+0x154>)
 8004e8c:	3394      	adds	r3, #148	@ 0x94
 8004e8e:	4611      	mov	r1, r2
 8004e90:	2248      	movs	r2, #72	@ 0x48
 8004e92:	4618      	mov	r0, r3
 8004e94:	f006 f92e 	bl	800b0f4 <memcpy>

	motor5->uart = huart5;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f50 <init_motor_5+0x158>)
 8004e9c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	2248      	movs	r2, #72	@ 0x48
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f006 f925 	bl	800b0f4 <memcpy>

	motor5->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_5;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a29      	ldr	r2, [pc, #164]	@ (8004f54 <init_motor_5+0x15c>)
 8004eae:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor5->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_5;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor5->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_5;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a26      	ldr	r2, [pc, #152]	@ (8004f58 <init_motor_5+0x160>)
 8004ebe:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor5->stallguard.STALL_BUFFER = STALL_BUFFER_M_5;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2228      	movs	r2, #40	@ 0x28
 8004ec6:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	tmc2209_set_uart(driver5, huart5);
 8004eca:	4e21      	ldr	r6, [pc, #132]	@ (8004f50 <init_motor_5+0x158>)
 8004ecc:	466d      	mov	r5, sp
 8004ece:	f106 040c 	add.w	r4, r6, #12
 8004ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ede:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004ee2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004ee6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004eea:	6838      	ldr	r0, [r7, #0]
 8004eec:	f7fd ff4d 	bl	8002d8a <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver5, motor5->gpio_pins.mot_en, motor5->gpio_ports.mot_en);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004efc:	461a      	mov	r2, r3
 8004efe:	6838      	ldr	r0, [r7, #0]
 8004f00:	f7fd ff5b 	bl	8002dba <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_0);
 8004f04:	2200      	movs	r2, #0
 8004f06:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004f0a:	6838      	ldr	r0, [r7, #0]
 8004f0c:	f7fd fb04 	bl	8002518 <tmc2209_setup>
	set_micro_steps_per_step(driver5, motor5->microsteps);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4619      	mov	r1, r3
 8004f18:	6838      	ldr	r0, [r7, #0]
 8004f1a:	f7fd fb4d 	bl	80025b8 <set_micro_steps_per_step>
	set_all_current_percent_values(driver5, motor5->current_settings.RUN_CURRENT_PERCENT, motor5->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f7fd fbdf 	bl	80026f0 <set_all_current_percent_values>

	motor5->driver = driver5;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40020800 	.word	0x40020800
 8004f48:	20000234 	.word	0x20000234
 8004f4c:	200002c4 	.word	0x200002c4
 8004f50:	200003e4 	.word	0x200003e4
 8004f54:	00027100 	.word	0x00027100
 8004f58:	433e0000 	.word	0x433e0000

08004f5c <initializeDefaults>:

void initializeDefaults(motor_t * motor)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
	motor->motion.v = 0;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	61da      	str	r2, [r3, #28]
	motor->motion.total_steps = 0;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	621a      	str	r2, [r3, #32]
	motor->motion.const_steps = 0;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->motion.acc_steps = 0;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = 0;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.step = 0;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->motion.inverse_motor_direction = 0;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

	motor->active_movement_flag = 0;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	731a      	strb	r2, [r3, #12]

	motor->status_flag = 0;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92

	motor->stallguard.smoothed_result = 0;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	motor->stallguard.previous_smoothed_result = 0;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	motor->stallguard.consecutive_low_counter = 0;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	motor->stallguard.stall_flag = 0;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <startStatusChecks>:

#define ALPHA 0.25f
extern motor_t * motors[];

motor_error_t startStatusChecks(motor_t * motor)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	motor_error_t error = NO_ERROR;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	73fb      	strb	r3, [r7, #15]

	status = HAL_TIM_Base_Start_IT(&motor->status_check_timer);  //Timer for periodical status checks
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3394      	adds	r3, #148	@ 0x94
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f001 fff4 	bl	8006fd4 <HAL_TIM_Base_Start_IT>
 8004fec:	4603      	mov	r3, r0
 8004fee:	73bb      	strb	r3, [r7, #14]

	if (status != HAL_OK)
 8004ff0:	7bbb      	ldrb	r3, [r7, #14]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <startStatusChecks+0x24>
		error = MOTOR_ERROR;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]

	motor->status_flag = 0;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	motor->stallguard.previous_smoothed_result = 0;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	return error;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <checkStall>:

/*
 * Also work in progress, now simply outputs stallguard result to monitor.
 */
void checkStall(uint16_t stallguard_result, motor_t* motor)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	4603      	mov	r3, r0
 800501e:	6039      	str	r1, [r7, #0]
 8005020:	80fb      	strh	r3, [r7, #6]
	stallguard_t* sg = &motor->stallguard;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	33dc      	adds	r3, #220	@ 0xdc
 8005026:	613b      	str	r3, [r7, #16]
	uint16_t result = stallguard_result;
 8005028:	88fb      	ldrh	r3, [r7, #6]
 800502a:	82fb      	strh	r3, [r7, #22]

	float k = sg->MAX_STALLGUARD_VALUE / (float) motor->motion.V_MAX;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800503e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005042:	edc7 7a03 	vstr	s15, [r7, #12]

	if (motor->ID == '5')
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b35      	cmp	r3, #53	@ 0x35
 800504c:	d124      	bne.n	8005098 <checkStall+0x82>
	{
		sg->smoothed_result = ALPHA * stallguard_result + (1-ALPHA) * sg->previous_smoothed_result; //Exponential smoothing/exponential moving average (EMA) filter
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	ee07 3a90 	vmov	s15, r3
 8005054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005058:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800505c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	edd3 7a05 	vldr	s15, [r3, #20]
 8005066:	eef6 6a08 	vmov.f32	s13, #104	@ 0x3f400000  0.750
 800506a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800506e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	edc3 7a04 	vstr	s15, [r3, #16]
		result = sg->smoothed_result;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	edd3 7a04 	vldr	s15, [r3, #16]
 800507e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005082:	ee17 3a90 	vmov	r3, s15
 8005086:	82fb      	strh	r3, [r7, #22]
		if (motor->motion.motion_mode == MOTION_GRIP)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800508e:	2b02      	cmp	r3, #2
 8005090:	d102      	bne.n	8005098 <checkStall+0x82>
		{
			sg->STALL_BUFFER = STALL_GRIP_BUFFER_M_5;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	223c      	movs	r2, #60	@ 0x3c
 8005096:	819a      	strh	r2, [r3, #12]
		}
	}

	float dynamic_stall_threshold = k * motor->motion.v - sg->STALL_BUFFER;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	ed93 7a07 	vldr	s14, [r3, #28]
 800509e:	edd7 7a03 	vldr	s15, [r7, #12]
 80050a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	899b      	ldrh	r3, [r3, #12]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050b6:	edc7 7a02 	vstr	s15, [r7, #8]


	if (result < dynamic_stall_threshold)
 80050ba:	8afb      	ldrh	r3, [r7, #22]
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80050c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d0:	dd15      	ble.n	80050fe <checkStall+0xe8>
	{
		sg->consecutive_low_counter++;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	8b1b      	ldrh	r3, [r3, #24]
 80050d6:	3301      	adds	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	831a      	strh	r2, [r3, #24]
		if (sg->consecutive_low_counter >= sg->MAX_CONSECUTIVE_LOW)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	8b1a      	ldrh	r2, [r3, #24]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	889b      	ldrh	r3, [r3, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d30c      	bcc.n	8005104 <checkStall+0xee>
		{
			stopMotorMovement(motor);
 80050ea:	6838      	ldr	r0, [r7, #0]
 80050ec:	f7fe fed5 	bl	8003e9a <stopMotorMovement>
			sg->stall_flag = 1;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2201      	movs	r2, #1
 80050f4:	739a      	strb	r2, [r3, #14]
			sg->consecutive_low_counter = 0;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2200      	movs	r2, #0
 80050fa:	831a      	strh	r2, [r3, #24]
 80050fc:	e002      	b.n	8005104 <checkStall+0xee>
		}
	}
	else
	{
		sg->consecutive_low_counter = 0;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2200      	movs	r2, #0
 8005102:	831a      	strh	r2, [r3, #24]
	}

	sg->previous_smoothed_result = sg->smoothed_result;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	615a      	str	r2, [r3, #20]

}
 800510c:	bf00      	nop
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <checkDriverStatus>:
 * This function is continuously called while a motor is active.
 * It only does something when status_flag has been set to 1.
 * Then it calls the checkOverheat and Load functions.
 */
void checkDriverStatus(motor_t* motor)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	if (motor->status_flag)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8005122:	2b00      	cmp	r3, #0
 8005124:	d010      	beq.n	8005148 <checkDriverStatus+0x34>
	{
//		tmc2209_status_t status;
		uint16_t stallguard_result;

		motor->status_flag = 0;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
//		status = get_status(motor->driver);
//
//		checkOverheating(status);

		stallguard_result = get_stall_guard_result(motor->driver);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8005134:	4618      	mov	r0, r3
 8005136:	f7fd fbaa 	bl	800288e <get_stall_guard_result>
 800513a:	4603      	mov	r3, r0
 800513c:	81fb      	strh	r3, [r7, #14]
		checkStall(stallguard_result, motor);
 800513e:	89fb      	ldrh	r3, [r7, #14]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ff67 	bl	8005016 <checkStall>
	}
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005188 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005154:	f7fd f9ce 	bl	80024f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005158:	480c      	ldr	r0, [pc, #48]	@ (800518c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800515a:	490d      	ldr	r1, [pc, #52]	@ (8005190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800515c:	4a0d      	ldr	r2, [pc, #52]	@ (8005194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800515e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005160:	e002      	b.n	8005168 <LoopCopyDataInit>

08005162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005166:	3304      	adds	r3, #4

08005168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800516a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800516c:	d3f9      	bcc.n	8005162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800516e:	4a0a      	ldr	r2, [pc, #40]	@ (8005198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005170:	4c0a      	ldr	r4, [pc, #40]	@ (800519c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005174:	e001      	b.n	800517a <LoopFillZerobss>

08005176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005178:	3204      	adds	r2, #4

0800517a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800517a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800517c:	d3fb      	bcc.n	8005176 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800517e:	f005 ff93 	bl	800b0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005182:	f7fb ff2b 	bl	8000fdc <main>
  bx  lr    
 8005186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800518c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005190:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8005194:	0800c848 	.word	0x0800c848
  ldr r2, =_sbss
 8005198:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800519c:	20000ab8 	.word	0x20000ab8

080051a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051a0:	e7fe      	b.n	80051a0 <ADC_IRQHandler>
	...

080051a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051a8:	4b0e      	ldr	r3, [pc, #56]	@ (80051e4 <HAL_Init+0x40>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0d      	ldr	r2, [pc, #52]	@ (80051e4 <HAL_Init+0x40>)
 80051ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051b4:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <HAL_Init+0x40>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a0a      	ldr	r2, [pc, #40]	@ (80051e4 <HAL_Init+0x40>)
 80051ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051c0:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <HAL_Init+0x40>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a07      	ldr	r2, [pc, #28]	@ (80051e4 <HAL_Init+0x40>)
 80051c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051cc:	2003      	movs	r0, #3
 80051ce:	f000 f94f 	bl	8005470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051d2:	2000      	movs	r0, #0
 80051d4:	f000 f808 	bl	80051e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051d8:	f7fc fd4e 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40023c00 	.word	0x40023c00

080051e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051f0:	4b12      	ldr	r3, [pc, #72]	@ (800523c <HAL_InitTick+0x54>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <HAL_InitTick+0x58>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	4619      	mov	r1, r3
 80051fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f967 	bl	80054da <HAL_SYSTICK_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e00e      	b.n	8005234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b0f      	cmp	r3, #15
 800521a:	d80a      	bhi.n	8005232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800521c:	2200      	movs	r2, #0
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	f000 f92f 	bl	8005486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005228:	4a06      	ldr	r2, [pc, #24]	@ (8005244 <HAL_InitTick+0x5c>)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	e000      	b.n	8005234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20000000 	.word	0x20000000
 8005240:	20000008 	.word	0x20000008
 8005244:	20000004 	.word	0x20000004

08005248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_IncTick+0x20>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	4b06      	ldr	r3, [pc, #24]	@ (800526c <HAL_IncTick+0x24>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4413      	add	r3, r2
 8005258:	4a04      	ldr	r2, [pc, #16]	@ (800526c <HAL_IncTick+0x24>)
 800525a:	6013      	str	r3, [r2, #0]
}
 800525c:	bf00      	nop
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000008 	.word	0x20000008
 800526c:	2000096c 	.word	0x2000096c

08005270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return uwTick;
 8005274:	4b03      	ldr	r3, [pc, #12]	@ (8005284 <HAL_GetTick+0x14>)
 8005276:	681b      	ldr	r3, [r3, #0]
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	2000096c 	.word	0x2000096c

08005288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005290:	f7ff ffee 	bl	8005270 <HAL_GetTick>
 8005294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d005      	beq.n	80052ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052a2:	4b0a      	ldr	r3, [pc, #40]	@ (80052cc <HAL_Delay+0x44>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052ae:	bf00      	nop
 80052b0:	f7ff ffde 	bl	8005270 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d8f7      	bhi.n	80052b0 <HAL_Delay+0x28>
  {
  }
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000008 	.word	0x20000008

080052d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <__NVIC_SetPriorityGrouping+0x44>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052ec:	4013      	ands	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005302:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <__NVIC_SetPriorityGrouping+0x44>)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	60d3      	str	r3, [r2, #12]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800531c:	4b04      	ldr	r3, [pc, #16]	@ (8005330 <__NVIC_GetPriorityGrouping+0x18>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	0a1b      	lsrs	r3, r3, #8
 8005322:	f003 0307 	and.w	r3, r3, #7
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	e000ed00 	.word	0xe000ed00

08005334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005342:	2b00      	cmp	r3, #0
 8005344:	db0b      	blt.n	800535e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	f003 021f 	and.w	r2, r3, #31
 800534c:	4907      	ldr	r1, [pc, #28]	@ (800536c <__NVIC_EnableIRQ+0x38>)
 800534e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	2001      	movs	r0, #1
 8005356:	fa00 f202 	lsl.w	r2, r0, r2
 800535a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	e000e100 	.word	0xe000e100

08005370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	6039      	str	r1, [r7, #0]
 800537a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800537c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005380:	2b00      	cmp	r3, #0
 8005382:	db0a      	blt.n	800539a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	490c      	ldr	r1, [pc, #48]	@ (80053bc <__NVIC_SetPriority+0x4c>)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	0112      	lsls	r2, r2, #4
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	440b      	add	r3, r1
 8005394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005398:	e00a      	b.n	80053b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	b2da      	uxtb	r2, r3
 800539e:	4908      	ldr	r1, [pc, #32]	@ (80053c0 <__NVIC_SetPriority+0x50>)
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	3b04      	subs	r3, #4
 80053a8:	0112      	lsls	r2, r2, #4
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	440b      	add	r3, r1
 80053ae:	761a      	strb	r2, [r3, #24]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000e100 	.word	0xe000e100
 80053c0:	e000ed00 	.word	0xe000ed00

080053c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	@ 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f1c3 0307 	rsb	r3, r3, #7
 80053de:	2b04      	cmp	r3, #4
 80053e0:	bf28      	it	cs
 80053e2:	2304      	movcs	r3, #4
 80053e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2b06      	cmp	r3, #6
 80053ec:	d902      	bls.n	80053f4 <NVIC_EncodePriority+0x30>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	3b03      	subs	r3, #3
 80053f2:	e000      	b.n	80053f6 <NVIC_EncodePriority+0x32>
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	401a      	ands	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800540c:	f04f 31ff 	mov.w	r1, #4294967295
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	43d9      	mvns	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800541c:	4313      	orrs	r3, r2
         );
}
 800541e:	4618      	mov	r0, r3
 8005420:	3724      	adds	r7, #36	@ 0x24
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3b01      	subs	r3, #1
 8005438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800543c:	d301      	bcc.n	8005442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800543e:	2301      	movs	r3, #1
 8005440:	e00f      	b.n	8005462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005442:	4a0a      	ldr	r2, [pc, #40]	@ (800546c <SysTick_Config+0x40>)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3b01      	subs	r3, #1
 8005448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800544a:	210f      	movs	r1, #15
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	f7ff ff8e 	bl	8005370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005454:	4b05      	ldr	r3, [pc, #20]	@ (800546c <SysTick_Config+0x40>)
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800545a:	4b04      	ldr	r3, [pc, #16]	@ (800546c <SysTick_Config+0x40>)
 800545c:	2207      	movs	r2, #7
 800545e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	e000e010 	.word	0xe000e010

08005470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff29 	bl	80052d0 <__NVIC_SetPriorityGrouping>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	4603      	mov	r3, r0
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005498:	f7ff ff3e 	bl	8005318 <__NVIC_GetPriorityGrouping>
 800549c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	6978      	ldr	r0, [r7, #20]
 80054a4:	f7ff ff8e 	bl	80053c4 <NVIC_EncodePriority>
 80054a8:	4602      	mov	r2, r0
 80054aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ff5d 	bl	8005370 <__NVIC_SetPriority>
}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	4603      	mov	r3, r0
 80054c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ff31 	bl	8005334 <__NVIC_EnableIRQ>
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff ffa2 	bl	800542c <SysTick_Config>
 80054e8:	4603      	mov	r3, r0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005500:	f7ff feb6 	bl	8005270 <HAL_GetTick>
 8005504:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d008      	beq.n	8005524 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2280      	movs	r2, #128	@ 0x80
 8005516:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e052      	b.n	80055ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0216 	bic.w	r2, r2, #22
 8005532:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005542:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d103      	bne.n	8005554 <HAL_DMA_Abort+0x62>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0208 	bic.w	r2, r2, #8
 8005562:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005574:	e013      	b.n	800559e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005576:	f7ff fe7b 	bl	8005270 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b05      	cmp	r3, #5
 8005582:	d90c      	bls.n	800559e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2203      	movs	r2, #3
 800558e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e015      	b.n	80055ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e4      	bne.n	8005576 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b0:	223f      	movs	r2, #63	@ 0x3f
 80055b2:	409a      	lsls	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d004      	beq.n	80055f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2280      	movs	r2, #128	@ 0x80
 80055ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e00c      	b.n	800560a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2205      	movs	r2, #5
 80055f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
	...

08005618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005618:	b480      	push	{r7}
 800561a:	b089      	sub	sp, #36	@ 0x24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	e165      	b.n	8005900 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005634:	2201      	movs	r2, #1
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	429a      	cmp	r2, r3
 800564e:	f040 8154 	bne.w	80058fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d005      	beq.n	800566a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005666:	2b02      	cmp	r3, #2
 8005668:	d130      	bne.n	80056cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	2203      	movs	r2, #3
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4313      	orrs	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056a0:	2201      	movs	r2, #1
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4013      	ands	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 0201 	and.w	r2, r3, #1
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d017      	beq.n	8005708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	2203      	movs	r2, #3
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d123      	bne.n	800575c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	08da      	lsrs	r2, r3, #3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3208      	adds	r2, #8
 800571c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	220f      	movs	r2, #15
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	08da      	lsrs	r2, r3, #3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3208      	adds	r2, #8
 8005756:	69b9      	ldr	r1, [r7, #24]
 8005758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	2203      	movs	r2, #3
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 0203 	and.w	r2, r3, #3
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80ae 	beq.w	80058fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005918 <HAL_GPIO_Init+0x300>)
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	4a5c      	ldr	r2, [pc, #368]	@ (8005918 <HAL_GPIO_Init+0x300>)
 80057a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80057ae:	4b5a      	ldr	r3, [pc, #360]	@ (8005918 <HAL_GPIO_Init+0x300>)
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057ba:	4a58      	ldr	r2, [pc, #352]	@ (800591c <HAL_GPIO_Init+0x304>)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	3302      	adds	r3, #2
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	220f      	movs	r2, #15
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005920 <HAL_GPIO_Init+0x308>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d025      	beq.n	8005832 <HAL_GPIO_Init+0x21a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a4e      	ldr	r2, [pc, #312]	@ (8005924 <HAL_GPIO_Init+0x30c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01f      	beq.n	800582e <HAL_GPIO_Init+0x216>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005928 <HAL_GPIO_Init+0x310>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d019      	beq.n	800582a <HAL_GPIO_Init+0x212>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a4c      	ldr	r2, [pc, #304]	@ (800592c <HAL_GPIO_Init+0x314>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <HAL_GPIO_Init+0x20e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a4b      	ldr	r2, [pc, #300]	@ (8005930 <HAL_GPIO_Init+0x318>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00d      	beq.n	8005822 <HAL_GPIO_Init+0x20a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a4a      	ldr	r2, [pc, #296]	@ (8005934 <HAL_GPIO_Init+0x31c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <HAL_GPIO_Init+0x206>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a49      	ldr	r2, [pc, #292]	@ (8005938 <HAL_GPIO_Init+0x320>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d101      	bne.n	800581a <HAL_GPIO_Init+0x202>
 8005816:	2306      	movs	r3, #6
 8005818:	e00c      	b.n	8005834 <HAL_GPIO_Init+0x21c>
 800581a:	2307      	movs	r3, #7
 800581c:	e00a      	b.n	8005834 <HAL_GPIO_Init+0x21c>
 800581e:	2305      	movs	r3, #5
 8005820:	e008      	b.n	8005834 <HAL_GPIO_Init+0x21c>
 8005822:	2304      	movs	r3, #4
 8005824:	e006      	b.n	8005834 <HAL_GPIO_Init+0x21c>
 8005826:	2303      	movs	r3, #3
 8005828:	e004      	b.n	8005834 <HAL_GPIO_Init+0x21c>
 800582a:	2302      	movs	r3, #2
 800582c:	e002      	b.n	8005834 <HAL_GPIO_Init+0x21c>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <HAL_GPIO_Init+0x21c>
 8005832:	2300      	movs	r3, #0
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	f002 0203 	and.w	r2, r2, #3
 800583a:	0092      	lsls	r2, r2, #2
 800583c:	4093      	lsls	r3, r2
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005844:	4935      	ldr	r1, [pc, #212]	@ (800591c <HAL_GPIO_Init+0x304>)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	3302      	adds	r3, #2
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005852:	4b3a      	ldr	r3, [pc, #232]	@ (800593c <HAL_GPIO_Init+0x324>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005876:	4a31      	ldr	r2, [pc, #196]	@ (800593c <HAL_GPIO_Init+0x324>)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800587c:	4b2f      	ldr	r3, [pc, #188]	@ (800593c <HAL_GPIO_Init+0x324>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	43db      	mvns	r3, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058a0:	4a26      	ldr	r2, [pc, #152]	@ (800593c <HAL_GPIO_Init+0x324>)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058a6:	4b25      	ldr	r3, [pc, #148]	@ (800593c <HAL_GPIO_Init+0x324>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ca:	4a1c      	ldr	r2, [pc, #112]	@ (800593c <HAL_GPIO_Init+0x324>)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058d0:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <HAL_GPIO_Init+0x324>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058f4:	4a11      	ldr	r2, [pc, #68]	@ (800593c <HAL_GPIO_Init+0x324>)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3301      	adds	r3, #1
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	f67f ae96 	bls.w	8005634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	3724      	adds	r7, #36	@ 0x24
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40023800 	.word	0x40023800
 800591c:	40013800 	.word	0x40013800
 8005920:	40020000 	.word	0x40020000
 8005924:	40020400 	.word	0x40020400
 8005928:	40020800 	.word	0x40020800
 800592c:	40020c00 	.word	0x40020c00
 8005930:	40021000 	.word	0x40021000
 8005934:	40021400 	.word	0x40021400
 8005938:	40021800 	.word	0x40021800
 800593c:	40013c00 	.word	0x40013c00

08005940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	887b      	ldrh	r3, [r7, #2]
 8005952:	4013      	ands	r3, r2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
 800595c:	e001      	b.n	8005962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	807b      	strh	r3, [r7, #2]
 800597c:	4613      	mov	r3, r2
 800597e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005980:	787b      	ldrb	r3, [r7, #1]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005986:	887a      	ldrh	r2, [r7, #2]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800598c:	e003      	b.n	8005996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	041a      	lsls	r2, r3, #16
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	619a      	str	r2, [r3, #24]
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059b4:	887a      	ldrh	r2, [r7, #2]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4013      	ands	r3, r2
 80059ba:	041a      	lsls	r2, r3, #16
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	43d9      	mvns	r1, r3
 80059c0:	887b      	ldrh	r3, [r7, #2]
 80059c2:	400b      	ands	r3, r1
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	619a      	str	r2, [r3, #24]
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059e2:	4b08      	ldr	r3, [pc, #32]	@ (8005a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	4013      	ands	r3, r2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d006      	beq.n	80059fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ee:	4a05      	ldr	r2, [pc, #20]	@ (8005a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fbd6 	bl	80041a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40013c00 	.word	0x40013c00

08005a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e12b      	b.n	8005c72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fc f94a 	bl	8001cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2224      	movs	r2, #36	@ 0x24
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a6c:	f000 fd6c 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 8005a70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4a81      	ldr	r2, [pc, #516]	@ (8005c7c <HAL_I2C_Init+0x274>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d807      	bhi.n	8005a8c <HAL_I2C_Init+0x84>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a80      	ldr	r2, [pc, #512]	@ (8005c80 <HAL_I2C_Init+0x278>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	bf94      	ite	ls
 8005a84:	2301      	movls	r3, #1
 8005a86:	2300      	movhi	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e006      	b.n	8005a9a <HAL_I2C_Init+0x92>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a7d      	ldr	r2, [pc, #500]	@ (8005c84 <HAL_I2C_Init+0x27c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	bf94      	ite	ls
 8005a94:	2301      	movls	r3, #1
 8005a96:	2300      	movhi	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e0e7      	b.n	8005c72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a78      	ldr	r2, [pc, #480]	@ (8005c88 <HAL_I2C_Init+0x280>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	0c9b      	lsrs	r3, r3, #18
 8005aac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8005c7c <HAL_I2C_Init+0x274>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d802      	bhi.n	8005adc <HAL_I2C_Init+0xd4>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	e009      	b.n	8005af0 <HAL_I2C_Init+0xe8>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	4a69      	ldr	r2, [pc, #420]	@ (8005c8c <HAL_I2C_Init+0x284>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	099b      	lsrs	r3, r3, #6
 8005aee:	3301      	adds	r3, #1
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	495c      	ldr	r1, [pc, #368]	@ (8005c7c <HAL_I2C_Init+0x274>)
 8005b0c:	428b      	cmp	r3, r1
 8005b0e:	d819      	bhi.n	8005b44 <HAL_I2C_Init+0x13c>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1e59      	subs	r1, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b1e:	1c59      	adds	r1, r3, #1
 8005b20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b24:	400b      	ands	r3, r1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_I2C_Init+0x138>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1e59      	subs	r1, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3e:	e051      	b.n	8005be4 <HAL_I2C_Init+0x1dc>
 8005b40:	2304      	movs	r3, #4
 8005b42:	e04f      	b.n	8005be4 <HAL_I2C_Init+0x1dc>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d111      	bne.n	8005b70 <HAL_I2C_Init+0x168>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1e58      	subs	r0, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	440b      	add	r3, r1
 8005b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	e012      	b.n	8005b96 <HAL_I2C_Init+0x18e>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1e58      	subs	r0, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6859      	ldr	r1, [r3, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	0099      	lsls	r1, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b86:	3301      	adds	r3, #1
 8005b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf0c      	ite	eq
 8005b90:	2301      	moveq	r3, #1
 8005b92:	2300      	movne	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_Init+0x196>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e022      	b.n	8005be4 <HAL_I2C_Init+0x1dc>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_I2C_Init+0x1bc>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1e58      	subs	r0, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6859      	ldr	r1, [r3, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	440b      	add	r3, r1
 8005bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb8:	3301      	adds	r3, #1
 8005bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc2:	e00f      	b.n	8005be4 <HAL_I2C_Init+0x1dc>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1e58      	subs	r0, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6859      	ldr	r1, [r3, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	0099      	lsls	r1, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bda:	3301      	adds	r3, #1
 8005bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	6809      	ldr	r1, [r1, #0]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69da      	ldr	r2, [r3, #28]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6911      	ldr	r1, [r2, #16]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	68d2      	ldr	r2, [r2, #12]
 8005c1e:	4311      	orrs	r1, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	430b      	orrs	r3, r1
 8005c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	000186a0 	.word	0x000186a0
 8005c80:	001e847f 	.word	0x001e847f
 8005c84:	003d08ff 	.word	0x003d08ff
 8005c88:	431bde83 	.word	0x431bde83
 8005c8c:	10624dd3 	.word	0x10624dd3

08005c90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	4608      	mov	r0, r1
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	817b      	strh	r3, [r7, #10]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	813b      	strh	r3, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005caa:	f7ff fae1 	bl	8005270 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	f040 80d9 	bne.w	8005e70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	2319      	movs	r3, #25
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	496d      	ldr	r1, [pc, #436]	@ (8005e7c <HAL_I2C_Mem_Write+0x1ec>)
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f971 	bl	8005fb0 <I2C_WaitOnFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e0cc      	b.n	8005e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_I2C_Mem_Write+0x56>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e0c5      	b.n	8005e72 <HAL_I2C_Mem_Write+0x1e2>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d007      	beq.n	8005d0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2221      	movs	r2, #33	@ 0x21
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2240      	movs	r2, #64	@ 0x40
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8005e80 <HAL_I2C_Mem_Write+0x1f0>)
 8005d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d4e:	88f8      	ldrh	r0, [r7, #6]
 8005d50:	893a      	ldrh	r2, [r7, #8]
 8005d52:	8979      	ldrh	r1, [r7, #10]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f890 	bl	8005e84 <I2C_RequestMemoryWrite>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d052      	beq.n	8005e10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e081      	b.n	8005e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fa36 	bl	80061e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00d      	beq.n	8005d9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d107      	bne.n	8005d96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e06b      	b.n	8005e72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d11b      	bne.n	8005e10 <HAL_I2C_Mem_Write+0x180>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d017      	beq.n	8005e10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1aa      	bne.n	8005d6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fa29 	bl	8006274 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00d      	beq.n	8005e44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d107      	bne.n	8005e40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e016      	b.n	8005e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e000      	b.n	8005e72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e70:	2302      	movs	r3, #2
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	00100002 	.word	0x00100002
 8005e80:	ffff0000 	.word	0xffff0000

08005e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	817b      	strh	r3, [r7, #10]
 8005e96:	460b      	mov	r3, r1
 8005e98:	813b      	strh	r3, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f878 	bl	8005fb0 <I2C_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00d      	beq.n	8005ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed4:	d103      	bne.n	8005ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e05f      	b.n	8005fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	492d      	ldr	r1, [pc, #180]	@ (8005fac <I2C_RequestMemoryWrite+0x128>)
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f8d3 	bl	80060a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e04c      	b.n	8005fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f20:	6a39      	ldr	r1, [r7, #32]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f95e 	bl	80061e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d107      	bne.n	8005f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e02b      	b.n	8005fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d105      	bne.n	8005f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f50:	893b      	ldrh	r3, [r7, #8]
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	611a      	str	r2, [r3, #16]
 8005f5a:	e021      	b.n	8005fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f5c:	893b      	ldrh	r3, [r7, #8]
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f6c:	6a39      	ldr	r1, [r7, #32]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f938 	bl	80061e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d107      	bne.n	8005f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e005      	b.n	8005fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f96:	893b      	ldrh	r3, [r7, #8]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	00010002 	.word	0x00010002

08005fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc0:	e048      	b.n	8006054 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d044      	beq.n	8006054 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fca:	f7ff f951 	bl	8005270 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d302      	bcc.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d139      	bne.n	8006054 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d10d      	bne.n	8006006 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	43da      	mvns	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	e00c      	b.n	8006020 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	43da      	mvns	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4013      	ands	r3, r2
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	429a      	cmp	r2, r3
 8006024:	d116      	bne.n	8006054 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	f043 0220 	orr.w	r2, r3, #32
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e023      	b.n	800609c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10d      	bne.n	800607a <I2C_WaitOnFlagUntilTimeout+0xca>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	43da      	mvns	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4013      	ands	r3, r2
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	bf0c      	ite	eq
 8006070:	2301      	moveq	r3, #1
 8006072:	2300      	movne	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	e00c      	b.n	8006094 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	43da      	mvns	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	429a      	cmp	r2, r3
 8006098:	d093      	beq.n	8005fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060b2:	e071      	b.n	8006198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c2:	d123      	bne.n	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f8:	f043 0204 	orr.w	r2, r3, #4
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e067      	b.n	80061dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d041      	beq.n	8006198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006114:	f7ff f8ac 	bl	8005270 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d302      	bcc.n	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d136      	bne.n	8006198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d10c      	bne.n	800614e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	43da      	mvns	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4013      	ands	r3, r2
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	bf14      	ite	ne
 8006146:	2301      	movne	r3, #1
 8006148:	2300      	moveq	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	e00b      	b.n	8006166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	43da      	mvns	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4013      	ands	r3, r2
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	bf14      	ite	ne
 8006160:	2301      	movne	r3, #1
 8006162:	2300      	moveq	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d016      	beq.n	8006198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	f043 0220 	orr.w	r2, r3, #32
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e021      	b.n	80061dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10c      	bne.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	43da      	mvns	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e00b      	b.n	80061d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	43da      	mvns	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4013      	ands	r3, r2
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bf14      	ite	ne
 80061ce:	2301      	movne	r3, #1
 80061d0:	2300      	moveq	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f47f af6d 	bne.w	80060b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f0:	e034      	b.n	800625c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f886 	bl	8006304 <I2C_IsAcknowledgeFailed>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e034      	b.n	800626c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006208:	d028      	beq.n	800625c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620a:	f7ff f831 	bl	8005270 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	429a      	cmp	r2, r3
 8006218:	d302      	bcc.n	8006220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11d      	bne.n	800625c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622a:	2b80      	cmp	r3, #128	@ 0x80
 800622c:	d016      	beq.n	800625c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006248:	f043 0220 	orr.w	r2, r3, #32
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e007      	b.n	800626c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006266:	2b80      	cmp	r3, #128	@ 0x80
 8006268:	d1c3      	bne.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006280:	e034      	b.n	80062ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f83e 	bl	8006304 <I2C_IsAcknowledgeFailed>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e034      	b.n	80062fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d028      	beq.n	80062ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800629a:	f7fe ffe9 	bl	8005270 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d302      	bcc.n	80062b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d11d      	bne.n	80062ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d016      	beq.n	80062ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d8:	f043 0220 	orr.w	r2, r3, #32
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e007      	b.n	80062fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d1c3      	bne.n	8006282 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800631a:	d11b      	bne.n	8006354 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006324:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006340:	f043 0204 	orr.w	r2, r3, #4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0cc      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006378:	4b68      	ldr	r3, [pc, #416]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d90c      	bls.n	80063a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b65      	ldr	r3, [pc, #404]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b63      	ldr	r3, [pc, #396]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0b8      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d020      	beq.n	80063ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063b8:	4b59      	ldr	r3, [pc, #356]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4a58      	ldr	r2, [pc, #352]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063d0:	4b53      	ldr	r3, [pc, #332]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	4a52      	ldr	r2, [pc, #328]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80063da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063dc:	4b50      	ldr	r3, [pc, #320]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	494d      	ldr	r1, [pc, #308]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d044      	beq.n	8006484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d107      	bne.n	8006412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006402:	4b47      	ldr	r3, [pc, #284]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d119      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e07f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d003      	beq.n	8006422 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800641e:	2b03      	cmp	r3, #3
 8006420:	d107      	bne.n	8006432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006422:	4b3f      	ldr	r3, [pc, #252]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e06f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006432:	4b3b      	ldr	r3, [pc, #236]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e067      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006442:	4b37      	ldr	r3, [pc, #220]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f023 0203 	bic.w	r2, r3, #3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4934      	ldr	r1, [pc, #208]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	4313      	orrs	r3, r2
 8006452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006454:	f7fe ff0c 	bl	8005270 <HAL_GetTick>
 8006458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645a:	e00a      	b.n	8006472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800645c:	f7fe ff08 	bl	8005270 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e04f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006472:	4b2b      	ldr	r3, [pc, #172]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 020c 	and.w	r2, r3, #12
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	429a      	cmp	r2, r3
 8006482:	d1eb      	bne.n	800645c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006484:	4b25      	ldr	r3, [pc, #148]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d20c      	bcs.n	80064ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006492:	4b22      	ldr	r3, [pc, #136]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800649a:	4b20      	ldr	r3, [pc, #128]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e032      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064b8:	4b19      	ldr	r3, [pc, #100]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	4916      	ldr	r1, [pc, #88]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064d6:	4b12      	ldr	r3, [pc, #72]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	490e      	ldr	r1, [pc, #56]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064ea:	f000 f855 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 80064ee:	4602      	mov	r2, r0
 80064f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	091b      	lsrs	r3, r3, #4
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	490a      	ldr	r1, [pc, #40]	@ (8006524 <HAL_RCC_ClockConfig+0x1c0>)
 80064fc:	5ccb      	ldrb	r3, [r1, r3]
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	4a09      	ldr	r2, [pc, #36]	@ (8006528 <HAL_RCC_ClockConfig+0x1c4>)
 8006504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006506:	4b09      	ldr	r3, [pc, #36]	@ (800652c <HAL_RCC_ClockConfig+0x1c8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe fe6c 	bl	80051e8 <HAL_InitTick>

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40023c00 	.word	0x40023c00
 8006520:	40023800 	.word	0x40023800
 8006524:	0800b85c 	.word	0x0800b85c
 8006528:	20000000 	.word	0x20000000
 800652c:	20000004 	.word	0x20000004

08006530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006534:	4b03      	ldr	r3, [pc, #12]	@ (8006544 <HAL_RCC_GetHCLKFreq+0x14>)
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20000000 	.word	0x20000000

08006548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800654c:	f7ff fff0 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006550:	4602      	mov	r2, r0
 8006552:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	0a9b      	lsrs	r3, r3, #10
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	4903      	ldr	r1, [pc, #12]	@ (800656c <HAL_RCC_GetPCLK1Freq+0x24>)
 800655e:	5ccb      	ldrb	r3, [r1, r3]
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006564:	4618      	mov	r0, r3
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40023800 	.word	0x40023800
 800656c:	0800b86c 	.word	0x0800b86c

08006570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006574:	f7ff ffdc 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	0b5b      	lsrs	r3, r3, #13
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4903      	ldr	r1, [pc, #12]	@ (8006594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800
 8006594:	0800b86c 	.word	0x0800b86c

08006598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800659c:	b0ae      	sub	sp, #184	@ 0xb8
 800659e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065be:	4bcb      	ldr	r3, [pc, #812]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b0c      	cmp	r3, #12
 80065c8:	f200 8206 	bhi.w	80069d8 <HAL_RCC_GetSysClockFreq+0x440>
 80065cc:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	08006609 	.word	0x08006609
 80065d8:	080069d9 	.word	0x080069d9
 80065dc:	080069d9 	.word	0x080069d9
 80065e0:	080069d9 	.word	0x080069d9
 80065e4:	08006611 	.word	0x08006611
 80065e8:	080069d9 	.word	0x080069d9
 80065ec:	080069d9 	.word	0x080069d9
 80065f0:	080069d9 	.word	0x080069d9
 80065f4:	08006619 	.word	0x08006619
 80065f8:	080069d9 	.word	0x080069d9
 80065fc:	080069d9 	.word	0x080069d9
 8006600:	080069d9 	.word	0x080069d9
 8006604:	08006809 	.word	0x08006809
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006608:	4bb9      	ldr	r3, [pc, #740]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800660a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800660e:	e1e7      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006610:	4bb8      	ldr	r3, [pc, #736]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006612:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006616:	e1e3      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006618:	4bb4      	ldr	r3, [pc, #720]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006620:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006624:	4bb1      	ldr	r3, [pc, #708]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d071      	beq.n	8006714 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006630:	4bae      	ldr	r3, [pc, #696]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	099b      	lsrs	r3, r3, #6
 8006636:	2200      	movs	r2, #0
 8006638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800663c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800664c:	2300      	movs	r3, #0
 800664e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006656:	4622      	mov	r2, r4
 8006658:	462b      	mov	r3, r5
 800665a:	f04f 0000 	mov.w	r0, #0
 800665e:	f04f 0100 	mov.w	r1, #0
 8006662:	0159      	lsls	r1, r3, #5
 8006664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006668:	0150      	lsls	r0, r2, #5
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4621      	mov	r1, r4
 8006670:	1a51      	subs	r1, r2, r1
 8006672:	6439      	str	r1, [r7, #64]	@ 0x40
 8006674:	4629      	mov	r1, r5
 8006676:	eb63 0301 	sbc.w	r3, r3, r1
 800667a:	647b      	str	r3, [r7, #68]	@ 0x44
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006688:	4649      	mov	r1, r9
 800668a:	018b      	lsls	r3, r1, #6
 800668c:	4641      	mov	r1, r8
 800668e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006692:	4641      	mov	r1, r8
 8006694:	018a      	lsls	r2, r1, #6
 8006696:	4641      	mov	r1, r8
 8006698:	1a51      	subs	r1, r2, r1
 800669a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800669c:	4649      	mov	r1, r9
 800669e:	eb63 0301 	sbc.w	r3, r3, r1
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80066b0:	4649      	mov	r1, r9
 80066b2:	00cb      	lsls	r3, r1, #3
 80066b4:	4641      	mov	r1, r8
 80066b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ba:	4641      	mov	r1, r8
 80066bc:	00ca      	lsls	r2, r1, #3
 80066be:	4610      	mov	r0, r2
 80066c0:	4619      	mov	r1, r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	4622      	mov	r2, r4
 80066c6:	189b      	adds	r3, r3, r2
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ca:	462b      	mov	r3, r5
 80066cc:	460a      	mov	r2, r1
 80066ce:	eb42 0303 	adc.w	r3, r2, r3
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066e0:	4629      	mov	r1, r5
 80066e2:	024b      	lsls	r3, r1, #9
 80066e4:	4621      	mov	r1, r4
 80066e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066ea:	4621      	mov	r1, r4
 80066ec:	024a      	lsls	r2, r1, #9
 80066ee:	4610      	mov	r0, r2
 80066f0:	4619      	mov	r1, r3
 80066f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006700:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006704:	f7fa fac0 	bl	8000c88 <__aeabi_uldivmod>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4613      	mov	r3, r2
 800670e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006712:	e067      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006714:	4b75      	ldr	r3, [pc, #468]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	099b      	lsrs	r3, r3, #6
 800671a:	2200      	movs	r2, #0
 800671c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006720:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006724:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800672e:	2300      	movs	r3, #0
 8006730:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006732:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006736:	4622      	mov	r2, r4
 8006738:	462b      	mov	r3, r5
 800673a:	f04f 0000 	mov.w	r0, #0
 800673e:	f04f 0100 	mov.w	r1, #0
 8006742:	0159      	lsls	r1, r3, #5
 8006744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006748:	0150      	lsls	r0, r2, #5
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4621      	mov	r1, r4
 8006750:	1a51      	subs	r1, r2, r1
 8006752:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006754:	4629      	mov	r1, r5
 8006756:	eb63 0301 	sbc.w	r3, r3, r1
 800675a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006768:	4649      	mov	r1, r9
 800676a:	018b      	lsls	r3, r1, #6
 800676c:	4641      	mov	r1, r8
 800676e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006772:	4641      	mov	r1, r8
 8006774:	018a      	lsls	r2, r1, #6
 8006776:	4641      	mov	r1, r8
 8006778:	ebb2 0a01 	subs.w	sl, r2, r1
 800677c:	4649      	mov	r1, r9
 800677e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800678e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006796:	4692      	mov	sl, r2
 8006798:	469b      	mov	fp, r3
 800679a:	4623      	mov	r3, r4
 800679c:	eb1a 0303 	adds.w	r3, sl, r3
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	462b      	mov	r3, r5
 80067a4:	eb4b 0303 	adc.w	r3, fp, r3
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80067b6:	4629      	mov	r1, r5
 80067b8:	028b      	lsls	r3, r1, #10
 80067ba:	4621      	mov	r1, r4
 80067bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067c0:	4621      	mov	r1, r4
 80067c2:	028a      	lsls	r2, r1, #10
 80067c4:	4610      	mov	r0, r2
 80067c6:	4619      	mov	r1, r3
 80067c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067cc:	2200      	movs	r2, #0
 80067ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80067d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80067d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80067d6:	f7fa fa57 	bl	8000c88 <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4613      	mov	r3, r2
 80067e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80067e4:	4b41      	ldr	r3, [pc, #260]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	3301      	adds	r3, #1
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80067f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006802:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006806:	e0eb      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006808:	4b38      	ldr	r3, [pc, #224]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006814:	4b35      	ldr	r3, [pc, #212]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d06b      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006820:	4b32      	ldr	r3, [pc, #200]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	2200      	movs	r2, #0
 8006828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800682a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800682c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800682e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006832:	663b      	str	r3, [r7, #96]	@ 0x60
 8006834:	2300      	movs	r3, #0
 8006836:	667b      	str	r3, [r7, #100]	@ 0x64
 8006838:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800683c:	4622      	mov	r2, r4
 800683e:	462b      	mov	r3, r5
 8006840:	f04f 0000 	mov.w	r0, #0
 8006844:	f04f 0100 	mov.w	r1, #0
 8006848:	0159      	lsls	r1, r3, #5
 800684a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800684e:	0150      	lsls	r0, r2, #5
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4621      	mov	r1, r4
 8006856:	1a51      	subs	r1, r2, r1
 8006858:	61b9      	str	r1, [r7, #24]
 800685a:	4629      	mov	r1, r5
 800685c:	eb63 0301 	sbc.w	r3, r3, r1
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800686e:	4659      	mov	r1, fp
 8006870:	018b      	lsls	r3, r1, #6
 8006872:	4651      	mov	r1, sl
 8006874:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006878:	4651      	mov	r1, sl
 800687a:	018a      	lsls	r2, r1, #6
 800687c:	4651      	mov	r1, sl
 800687e:	ebb2 0801 	subs.w	r8, r2, r1
 8006882:	4659      	mov	r1, fp
 8006884:	eb63 0901 	sbc.w	r9, r3, r1
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006894:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006898:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800689c:	4690      	mov	r8, r2
 800689e:	4699      	mov	r9, r3
 80068a0:	4623      	mov	r3, r4
 80068a2:	eb18 0303 	adds.w	r3, r8, r3
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	462b      	mov	r3, r5
 80068aa:	eb49 0303 	adc.w	r3, r9, r3
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80068bc:	4629      	mov	r1, r5
 80068be:	024b      	lsls	r3, r1, #9
 80068c0:	4621      	mov	r1, r4
 80068c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068c6:	4621      	mov	r1, r4
 80068c8:	024a      	lsls	r2, r1, #9
 80068ca:	4610      	mov	r0, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068d2:	2200      	movs	r2, #0
 80068d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80068d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068dc:	f7fa f9d4 	bl	8000c88 <__aeabi_uldivmod>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4613      	mov	r3, r2
 80068e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068ea:	e065      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0x420>
 80068ec:	40023800 	.word	0x40023800
 80068f0:	00f42400 	.word	0x00f42400
 80068f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068f8:	4b3d      	ldr	r3, [pc, #244]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	099b      	lsrs	r3, r3, #6
 80068fe:	2200      	movs	r2, #0
 8006900:	4618      	mov	r0, r3
 8006902:	4611      	mov	r1, r2
 8006904:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006908:	653b      	str	r3, [r7, #80]	@ 0x50
 800690a:	2300      	movs	r3, #0
 800690c:	657b      	str	r3, [r7, #84]	@ 0x54
 800690e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006912:	4642      	mov	r2, r8
 8006914:	464b      	mov	r3, r9
 8006916:	f04f 0000 	mov.w	r0, #0
 800691a:	f04f 0100 	mov.w	r1, #0
 800691e:	0159      	lsls	r1, r3, #5
 8006920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006924:	0150      	lsls	r0, r2, #5
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4641      	mov	r1, r8
 800692c:	1a51      	subs	r1, r2, r1
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	4649      	mov	r1, r9
 8006932:	eb63 0301 	sbc.w	r3, r3, r1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006944:	4659      	mov	r1, fp
 8006946:	018b      	lsls	r3, r1, #6
 8006948:	4651      	mov	r1, sl
 800694a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800694e:	4651      	mov	r1, sl
 8006950:	018a      	lsls	r2, r1, #6
 8006952:	4651      	mov	r1, sl
 8006954:	1a54      	subs	r4, r2, r1
 8006956:	4659      	mov	r1, fp
 8006958:	eb63 0501 	sbc.w	r5, r3, r1
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	00eb      	lsls	r3, r5, #3
 8006966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800696a:	00e2      	lsls	r2, r4, #3
 800696c:	4614      	mov	r4, r2
 800696e:	461d      	mov	r5, r3
 8006970:	4643      	mov	r3, r8
 8006972:	18e3      	adds	r3, r4, r3
 8006974:	603b      	str	r3, [r7, #0]
 8006976:	464b      	mov	r3, r9
 8006978:	eb45 0303 	adc.w	r3, r5, r3
 800697c:	607b      	str	r3, [r7, #4]
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800698a:	4629      	mov	r1, r5
 800698c:	028b      	lsls	r3, r1, #10
 800698e:	4621      	mov	r1, r4
 8006990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006994:	4621      	mov	r1, r4
 8006996:	028a      	lsls	r2, r1, #10
 8006998:	4610      	mov	r0, r2
 800699a:	4619      	mov	r1, r3
 800699c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069a0:	2200      	movs	r2, #0
 80069a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80069a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069aa:	f7fa f96d 	bl	8000c88 <__aeabi_uldivmod>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4613      	mov	r3, r2
 80069b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80069b8:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	0f1b      	lsrs	r3, r3, #28
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80069c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069d8:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80069da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80069de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	37b8      	adds	r7, #184	@ 0xb8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ee:	bf00      	nop
 80069f0:	40023800 	.word	0x40023800
 80069f4:	00f42400 	.word	0x00f42400

080069f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e28d      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8083 	beq.w	8006b1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006a18:	4b94      	ldr	r3, [pc, #592]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 030c 	and.w	r3, r3, #12
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d019      	beq.n	8006a58 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006a24:	4b91      	ldr	r3, [pc, #580]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 030c 	and.w	r3, r3, #12
        || \
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d106      	bne.n	8006a3e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006a30:	4b8e      	ldr	r3, [pc, #568]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a3c:	d00c      	beq.n	8006a58 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006a46:	2b0c      	cmp	r3, #12
 8006a48:	d112      	bne.n	8006a70 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a4a:	4b88      	ldr	r3, [pc, #544]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a56:	d10b      	bne.n	8006a70 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a58:	4b84      	ldr	r3, [pc, #528]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d05b      	beq.n	8006b1c <HAL_RCC_OscConfig+0x124>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d157      	bne.n	8006b1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e25a      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a78:	d106      	bne.n	8006a88 <HAL_RCC_OscConfig+0x90>
 8006a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a7b      	ldr	r2, [pc, #492]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e01d      	b.n	8006ac4 <HAL_RCC_OscConfig+0xcc>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a90:	d10c      	bne.n	8006aac <HAL_RCC_OscConfig+0xb4>
 8006a92:	4b76      	ldr	r3, [pc, #472]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a75      	ldr	r2, [pc, #468]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	4b73      	ldr	r3, [pc, #460]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a72      	ldr	r2, [pc, #456]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	e00b      	b.n	8006ac4 <HAL_RCC_OscConfig+0xcc>
 8006aac:	4b6f      	ldr	r3, [pc, #444]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a6b      	ldr	r2, [pc, #428]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d013      	beq.n	8006af4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fe fbd0 	bl	8005270 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ad4:	f7fe fbcc 	bl	8005270 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b64      	cmp	r3, #100	@ 0x64
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e21f      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae6:	4b61      	ldr	r3, [pc, #388]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f0      	beq.n	8006ad4 <HAL_RCC_OscConfig+0xdc>
 8006af2:	e014      	b.n	8006b1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fe fbbc 	bl	8005270 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006afc:	f7fe fbb8 	bl	8005270 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b64      	cmp	r3, #100	@ 0x64
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e20b      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b0e:	4b57      	ldr	r3, [pc, #348]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f0      	bne.n	8006afc <HAL_RCC_OscConfig+0x104>
 8006b1a:	e000      	b.n	8006b1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d06f      	beq.n	8006c0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b2a:	4b50      	ldr	r3, [pc, #320]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d017      	beq.n	8006b66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006b36:	4b4d      	ldr	r3, [pc, #308]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d105      	bne.n	8006b4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006b42:	4b4a      	ldr	r3, [pc, #296]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b4e:	4b47      	ldr	r3, [pc, #284]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006b56:	2b0c      	cmp	r3, #12
 8006b58:	d11c      	bne.n	8006b94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b5a:	4b44      	ldr	r3, [pc, #272]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d116      	bne.n	8006b94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b66:	4b41      	ldr	r3, [pc, #260]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <HAL_RCC_OscConfig+0x186>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d001      	beq.n	8006b7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e1d3      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	4937      	ldr	r1, [pc, #220]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b92:	e03a      	b.n	8006c0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d020      	beq.n	8006bde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b9c:	4b34      	ldr	r3, [pc, #208]	@ (8006c70 <HAL_RCC_OscConfig+0x278>)
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba2:	f7fe fb65 	bl	8005270 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba8:	e008      	b.n	8006bbc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006baa:	f7fe fb61 	bl	8005270 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e1b4      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc8:	4b28      	ldr	r3, [pc, #160]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	4925      	ldr	r1, [pc, #148]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	600b      	str	r3, [r1, #0]
 8006bdc:	e015      	b.n	8006c0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bde:	4b24      	ldr	r3, [pc, #144]	@ (8006c70 <HAL_RCC_OscConfig+0x278>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fe fb44 	bl	8005270 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bec:	f7fe fb40 	bl	8005270 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e193      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d036      	beq.n	8006c84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d016      	beq.n	8006c4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c1e:	4b15      	ldr	r3, [pc, #84]	@ (8006c74 <HAL_RCC_OscConfig+0x27c>)
 8006c20:	2201      	movs	r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c24:	f7fe fb24 	bl	8005270 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c2c:	f7fe fb20 	bl	8005270 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e173      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x234>
 8006c4a:	e01b      	b.n	8006c84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c4c:	4b09      	ldr	r3, [pc, #36]	@ (8006c74 <HAL_RCC_OscConfig+0x27c>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c52:	f7fe fb0d 	bl	8005270 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c58:	e00e      	b.n	8006c78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c5a:	f7fe fb09 	bl	8005270 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d907      	bls.n	8006c78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e15c      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	42470000 	.word	0x42470000
 8006c74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c78:	4b8a      	ldr	r3, [pc, #552]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1ea      	bne.n	8006c5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8097 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c96:	4b83      	ldr	r3, [pc, #524]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10f      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006caa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc2:	4b79      	ldr	r3, [pc, #484]	@ (8006ea8 <HAL_RCC_OscConfig+0x4b0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d118      	bne.n	8006d00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cce:	4b76      	ldr	r3, [pc, #472]	@ (8006ea8 <HAL_RCC_OscConfig+0x4b0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a75      	ldr	r2, [pc, #468]	@ (8006ea8 <HAL_RCC_OscConfig+0x4b0>)
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cda:	f7fe fac9 	bl	8005270 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce2:	f7fe fac5 	bl	8005270 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e118      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8006ea8 <HAL_RCC_OscConfig+0x4b0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0f0      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d106      	bne.n	8006d16 <HAL_RCC_OscConfig+0x31e>
 8006d08:	4b66      	ldr	r3, [pc, #408]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0c:	4a65      	ldr	r2, [pc, #404]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d14:	e01c      	b.n	8006d50 <HAL_RCC_OscConfig+0x358>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	d10c      	bne.n	8006d38 <HAL_RCC_OscConfig+0x340>
 8006d1e:	4b61      	ldr	r3, [pc, #388]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d22:	4a60      	ldr	r2, [pc, #384]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d24:	f043 0304 	orr.w	r3, r3, #4
 8006d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d30:	f043 0301 	orr.w	r3, r3, #1
 8006d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d36:	e00b      	b.n	8006d50 <HAL_RCC_OscConfig+0x358>
 8006d38:	4b5a      	ldr	r3, [pc, #360]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3c:	4a59      	ldr	r2, [pc, #356]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d3e:	f023 0301 	bic.w	r3, r3, #1
 8006d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d44:	4b57      	ldr	r3, [pc, #348]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d48:	4a56      	ldr	r2, [pc, #344]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d4a:	f023 0304 	bic.w	r3, r3, #4
 8006d4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d015      	beq.n	8006d84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d58:	f7fe fa8a 	bl	8005270 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5e:	e00a      	b.n	8006d76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d60:	f7fe fa86 	bl	8005270 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e0d7      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d76:	4b4b      	ldr	r3, [pc, #300]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0ee      	beq.n	8006d60 <HAL_RCC_OscConfig+0x368>
 8006d82:	e014      	b.n	8006dae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fe fa74 	bl	8005270 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8c:	f7fe fa70 	bl	8005270 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e0c1      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da2:	4b40      	ldr	r3, [pc, #256]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1ee      	bne.n	8006d8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db8:	4a3a      	ldr	r2, [pc, #232]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 80ad 	beq.w	8006f24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dca:	4b36      	ldr	r3, [pc, #216]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 030c 	and.w	r3, r3, #12
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d060      	beq.n	8006e98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d145      	bne.n	8006e6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dde:	4b33      	ldr	r3, [pc, #204]	@ (8006eac <HAL_RCC_OscConfig+0x4b4>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de4:	f7fe fa44 	bl	8005270 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dec:	f7fe fa40 	bl	8005270 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e093      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfe:	4b29      	ldr	r3, [pc, #164]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f0      	bne.n	8006dec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69da      	ldr	r2, [r3, #28]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e18:	019b      	lsls	r3, r3, #6
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	085b      	lsrs	r3, r3, #1
 8006e22:	3b01      	subs	r3, #1
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	061b      	lsls	r3, r3, #24
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e34:	071b      	lsls	r3, r3, #28
 8006e36:	491b      	ldr	r1, [pc, #108]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006eac <HAL_RCC_OscConfig+0x4b4>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e42:	f7fe fa15 	bl	8005270 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e4a:	f7fe fa11 	bl	8005270 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e064      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x452>
 8006e68:	e05c      	b.n	8006f24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e6a:	4b10      	ldr	r3, [pc, #64]	@ (8006eac <HAL_RCC_OscConfig+0x4b4>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fe f9fe 	bl	8005270 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e78:	f7fe f9fa 	bl	8005270 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e04d      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x480>
 8006e96:	e045      	b.n	8006f24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e040      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	40007000 	.word	0x40007000
 8006eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006f30 <HAL_RCC_OscConfig+0x538>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d030      	beq.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d129      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d122      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d119      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d10f      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023800 	.word	0x40023800

08006f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e041      	b.n	8006fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fa fefc 	bl	8001d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f000 fd2c 	bl	80079d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d001      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e04e      	b.n	800708a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a23      	ldr	r2, [pc, #140]	@ (8007098 <HAL_TIM_Base_Start_IT+0xc4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d022      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007016:	d01d      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1f      	ldr	r2, [pc, #124]	@ (800709c <HAL_TIM_Base_Start_IT+0xc8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d018      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1e      	ldr	r2, [pc, #120]	@ (80070a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1c      	ldr	r2, [pc, #112]	@ (80070a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1b      	ldr	r2, [pc, #108]	@ (80070a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a19      	ldr	r2, [pc, #100]	@ (80070ac <HAL_TIM_Base_Start_IT+0xd8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a18      	ldr	r2, [pc, #96]	@ (80070b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d111      	bne.n	8007078 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b06      	cmp	r3, #6
 8007064:	d010      	beq.n	8007088 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007076:	e007      	b.n	8007088 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	40010000 	.word	0x40010000
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800
 80070a4:	40000c00 	.word	0x40000c00
 80070a8:	40010400 	.word	0x40010400
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40001800 	.word	0x40001800

080070b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0201 	bic.w	r2, r2, #1
 80070ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10f      	bne.n	80070fc <HAL_TIM_Base_Stop_IT+0x48>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80070e6:	4013      	ands	r3, r2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d107      	bne.n	80070fc <HAL_TIM_Base_Stop_IT+0x48>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e041      	b.n	80071a8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f839 	bl	80071b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2202      	movs	r2, #2
 8007142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3304      	adds	r3, #4
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f000 fc3d 	bl	80079d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d109      	bne.n	80071ec <HAL_TIM_OC_Start_IT+0x28>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	bf14      	ite	ne
 80071e4:	2301      	movne	r3, #1
 80071e6:	2300      	moveq	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	e022      	b.n	8007232 <HAL_TIM_OC_Start_IT+0x6e>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d109      	bne.n	8007206 <HAL_TIM_OC_Start_IT+0x42>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	bf14      	ite	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	2300      	moveq	r3, #0
 8007202:	b2db      	uxtb	r3, r3
 8007204:	e015      	b.n	8007232 <HAL_TIM_OC_Start_IT+0x6e>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d109      	bne.n	8007220 <HAL_TIM_OC_Start_IT+0x5c>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	bf14      	ite	ne
 8007218:	2301      	movne	r3, #1
 800721a:	2300      	moveq	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	e008      	b.n	8007232 <HAL_TIM_OC_Start_IT+0x6e>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b01      	cmp	r3, #1
 800722a:	bf14      	ite	ne
 800722c:	2301      	movne	r3, #1
 800722e:	2300      	moveq	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e0c7      	b.n	80073ca <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <HAL_TIM_OC_Start_IT+0x86>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007248:	e013      	b.n	8007272 <HAL_TIM_OC_Start_IT+0xae>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b04      	cmp	r3, #4
 800724e:	d104      	bne.n	800725a <HAL_TIM_OC_Start_IT+0x96>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007258:	e00b      	b.n	8007272 <HAL_TIM_OC_Start_IT+0xae>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b08      	cmp	r3, #8
 800725e:	d104      	bne.n	800726a <HAL_TIM_OC_Start_IT+0xa6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007268:	e003      	b.n	8007272 <HAL_TIM_OC_Start_IT+0xae>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2202      	movs	r2, #2
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b0c      	cmp	r3, #12
 8007276:	d841      	bhi.n	80072fc <HAL_TIM_OC_Start_IT+0x138>
 8007278:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <HAL_TIM_OC_Start_IT+0xbc>)
 800727a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727e:	bf00      	nop
 8007280:	080072b5 	.word	0x080072b5
 8007284:	080072fd 	.word	0x080072fd
 8007288:	080072fd 	.word	0x080072fd
 800728c:	080072fd 	.word	0x080072fd
 8007290:	080072c7 	.word	0x080072c7
 8007294:	080072fd 	.word	0x080072fd
 8007298:	080072fd 	.word	0x080072fd
 800729c:	080072fd 	.word	0x080072fd
 80072a0:	080072d9 	.word	0x080072d9
 80072a4:	080072fd 	.word	0x080072fd
 80072a8:	080072fd 	.word	0x080072fd
 80072ac:	080072fd 	.word	0x080072fd
 80072b0:	080072eb 	.word	0x080072eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0202 	orr.w	r2, r2, #2
 80072c2:	60da      	str	r2, [r3, #12]
      break;
 80072c4:	e01d      	b.n	8007302 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f042 0204 	orr.w	r2, r2, #4
 80072d4:	60da      	str	r2, [r3, #12]
      break;
 80072d6:	e014      	b.n	8007302 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0208 	orr.w	r2, r2, #8
 80072e6:	60da      	str	r2, [r3, #12]
      break;
 80072e8:	e00b      	b.n	8007302 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0210 	orr.w	r2, r2, #16
 80072f8:	60da      	str	r2, [r3, #12]
      break;
 80072fa:	e002      	b.n	8007302 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007300:	bf00      	nop
  }

  if (status == HAL_OK)
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d15f      	bne.n	80073c8 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fe4d 	bl	8007fb0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2e      	ldr	r2, [pc, #184]	@ (80073d4 <HAL_TIM_OC_Start_IT+0x210>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_TIM_OC_Start_IT+0x166>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a2c      	ldr	r2, [pc, #176]	@ (80073d8 <HAL_TIM_OC_Start_IT+0x214>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d101      	bne.n	800732e <HAL_TIM_OC_Start_IT+0x16a>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <HAL_TIM_OC_Start_IT+0x16c>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d007      	beq.n	8007344 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007342:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a22      	ldr	r2, [pc, #136]	@ (80073d4 <HAL_TIM_OC_Start_IT+0x210>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d022      	beq.n	8007394 <HAL_TIM_OC_Start_IT+0x1d0>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007356:	d01d      	beq.n	8007394 <HAL_TIM_OC_Start_IT+0x1d0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1f      	ldr	r2, [pc, #124]	@ (80073dc <HAL_TIM_OC_Start_IT+0x218>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d018      	beq.n	8007394 <HAL_TIM_OC_Start_IT+0x1d0>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1e      	ldr	r2, [pc, #120]	@ (80073e0 <HAL_TIM_OC_Start_IT+0x21c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d013      	beq.n	8007394 <HAL_TIM_OC_Start_IT+0x1d0>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1c      	ldr	r2, [pc, #112]	@ (80073e4 <HAL_TIM_OC_Start_IT+0x220>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00e      	beq.n	8007394 <HAL_TIM_OC_Start_IT+0x1d0>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a17      	ldr	r2, [pc, #92]	@ (80073d8 <HAL_TIM_OC_Start_IT+0x214>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d009      	beq.n	8007394 <HAL_TIM_OC_Start_IT+0x1d0>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a18      	ldr	r2, [pc, #96]	@ (80073e8 <HAL_TIM_OC_Start_IT+0x224>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d004      	beq.n	8007394 <HAL_TIM_OC_Start_IT+0x1d0>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a17      	ldr	r2, [pc, #92]	@ (80073ec <HAL_TIM_OC_Start_IT+0x228>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d111      	bne.n	80073b8 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b06      	cmp	r3, #6
 80073a4:	d010      	beq.n	80073c8 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	e007      	b.n	80073c8 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40010400 	.word	0x40010400
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40001800 	.word	0x40001800

080073f0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b0c      	cmp	r3, #12
 8007402:	d841      	bhi.n	8007488 <HAL_TIM_OC_Stop_IT+0x98>
 8007404:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <HAL_TIM_OC_Stop_IT+0x1c>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	08007441 	.word	0x08007441
 8007410:	08007489 	.word	0x08007489
 8007414:	08007489 	.word	0x08007489
 8007418:	08007489 	.word	0x08007489
 800741c:	08007453 	.word	0x08007453
 8007420:	08007489 	.word	0x08007489
 8007424:	08007489 	.word	0x08007489
 8007428:	08007489 	.word	0x08007489
 800742c:	08007465 	.word	0x08007465
 8007430:	08007489 	.word	0x08007489
 8007434:	08007489 	.word	0x08007489
 8007438:	08007489 	.word	0x08007489
 800743c:	08007477 	.word	0x08007477
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0202 	bic.w	r2, r2, #2
 800744e:	60da      	str	r2, [r3, #12]
      break;
 8007450:	e01d      	b.n	800748e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0204 	bic.w	r2, r2, #4
 8007460:	60da      	str	r2, [r3, #12]
      break;
 8007462:	e014      	b.n	800748e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0208 	bic.w	r2, r2, #8
 8007472:	60da      	str	r2, [r3, #12]
      break;
 8007474:	e00b      	b.n	800748e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0210 	bic.w	r2, r2, #16
 8007484:	60da      	str	r2, [r3, #12]
      break;
 8007486:	e002      	b.n	800748e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
      break;
 800748c:	bf00      	nop
  }

  if (status == HAL_OK)
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d161      	bne.n	8007558 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2200      	movs	r2, #0
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fd87 	bl	8007fb0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a2f      	ldr	r2, [pc, #188]	@ (8007564 <HAL_TIM_OC_Stop_IT+0x174>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIM_OC_Stop_IT+0xc6>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007568 <HAL_TIM_OC_Stop_IT+0x178>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d101      	bne.n	80074ba <HAL_TIM_OC_Stop_IT+0xca>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <HAL_TIM_OC_Stop_IT+0xcc>
 80074ba:	2300      	movs	r3, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6a1a      	ldr	r2, [r3, #32]
 80074c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10f      	bne.n	80074f0 <HAL_TIM_OC_Stop_IT+0x100>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6a1a      	ldr	r2, [r3, #32]
 80074d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d107      	bne.n	80074f0 <HAL_TIM_OC_Stop_IT+0x100>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a1a      	ldr	r2, [r3, #32]
 80074f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10f      	bne.n	8007520 <HAL_TIM_OC_Stop_IT+0x130>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6a1a      	ldr	r2, [r3, #32]
 8007506:	f240 4344 	movw	r3, #1092	@ 0x444
 800750a:	4013      	ands	r3, r2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d107      	bne.n	8007520 <HAL_TIM_OC_Stop_IT+0x130>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0201 	bic.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <HAL_TIM_OC_Stop_IT+0x140>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800752e:	e013      	b.n	8007558 <HAL_TIM_OC_Stop_IT+0x168>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b04      	cmp	r3, #4
 8007534:	d104      	bne.n	8007540 <HAL_TIM_OC_Stop_IT+0x150>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800753e:	e00b      	b.n	8007558 <HAL_TIM_OC_Stop_IT+0x168>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b08      	cmp	r3, #8
 8007544:	d104      	bne.n	8007550 <HAL_TIM_OC_Stop_IT+0x160>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800754e:	e003      	b.n	8007558 <HAL_TIM_OC_Stop_IT+0x168>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40010000 	.word	0x40010000
 8007568:	40010400 	.word	0x40010400

0800756c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d020      	beq.n	80075d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01b      	beq.n	80075d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0202 	mvn.w	r2, #2
 80075a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f9eb 	bl	8007992 <HAL_TIM_IC_CaptureCallback>
 80075bc:	e005      	b.n	80075ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fc fcec 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f9ee 	bl	80079a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d020      	beq.n	800761c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01b      	beq.n	800761c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f06f 0204 	mvn.w	r2, #4
 80075ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2202      	movs	r2, #2
 80075f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f9c5 	bl	8007992 <HAL_TIM_IC_CaptureCallback>
 8007608:	e005      	b.n	8007616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7fc fcc6 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f9c8 	bl	80079a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 0308 	and.w	r3, r3, #8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d020      	beq.n	8007668 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01b      	beq.n	8007668 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0208 	mvn.w	r2, #8
 8007638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f99f 	bl	8007992 <HAL_TIM_IC_CaptureCallback>
 8007654:	e005      	b.n	8007662 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fc fca0 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f9a2 	bl	80079a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 0310 	and.w	r3, r3, #16
 800766e:	2b00      	cmp	r3, #0
 8007670:	d020      	beq.n	80076b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01b      	beq.n	80076b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0210 	mvn.w	r2, #16
 8007684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2208      	movs	r2, #8
 800768a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f979 	bl	8007992 <HAL_TIM_IC_CaptureCallback>
 80076a0:	e005      	b.n	80076ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fc fc7a 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f97c 	bl	80079a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00c      	beq.n	80076d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0201 	mvn.w	r2, #1
 80076d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fc fd32 	bl	800413c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00c      	beq.n	80076fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80076f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fd58 	bl	80081ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00c      	beq.n	8007720 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f94d 	bl	80079ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0220 	mvn.w	r2, #32
 800773c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fd2a 	bl	8008198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007744:	bf00      	nop
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007766:	2302      	movs	r3, #2
 8007768:	e048      	b.n	80077fc <HAL_TIM_OC_ConfigChannel+0xb0>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b0c      	cmp	r3, #12
 8007776:	d839      	bhi.n	80077ec <HAL_TIM_OC_ConfigChannel+0xa0>
 8007778:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <HAL_TIM_OC_ConfigChannel+0x34>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	080077b5 	.word	0x080077b5
 8007784:	080077ed 	.word	0x080077ed
 8007788:	080077ed 	.word	0x080077ed
 800778c:	080077ed 	.word	0x080077ed
 8007790:	080077c3 	.word	0x080077c3
 8007794:	080077ed 	.word	0x080077ed
 8007798:	080077ed 	.word	0x080077ed
 800779c:	080077ed 	.word	0x080077ed
 80077a0:	080077d1 	.word	0x080077d1
 80077a4:	080077ed 	.word	0x080077ed
 80077a8:	080077ed 	.word	0x080077ed
 80077ac:	080077ed 	.word	0x080077ed
 80077b0:	080077df 	.word	0x080077df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 f9ae 	bl	8007b1c <TIM_OC1_SetConfig>
      break;
 80077c0:	e017      	b.n	80077f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fa17 	bl	8007bfc <TIM_OC2_SetConfig>
      break;
 80077ce:	e010      	b.n	80077f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fa86 	bl	8007ce8 <TIM_OC3_SetConfig>
      break;
 80077dc:	e009      	b.n	80077f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 faf3 	bl	8007dd0 <TIM_OC4_SetConfig>
      break;
 80077ea:	e002      	b.n	80077f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	75fb      	strb	r3, [r7, #23]
      break;
 80077f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_TIM_ConfigClockSource+0x1c>
 800781c:	2302      	movs	r3, #2
 800781e:	e0b4      	b.n	800798a <HAL_TIM_ConfigClockSource+0x186>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800783e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007858:	d03e      	beq.n	80078d8 <HAL_TIM_ConfigClockSource+0xd4>
 800785a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800785e:	f200 8087 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x16c>
 8007862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007866:	f000 8086 	beq.w	8007976 <HAL_TIM_ConfigClockSource+0x172>
 800786a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800786e:	d87f      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x16c>
 8007870:	2b70      	cmp	r3, #112	@ 0x70
 8007872:	d01a      	beq.n	80078aa <HAL_TIM_ConfigClockSource+0xa6>
 8007874:	2b70      	cmp	r3, #112	@ 0x70
 8007876:	d87b      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x16c>
 8007878:	2b60      	cmp	r3, #96	@ 0x60
 800787a:	d050      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x11a>
 800787c:	2b60      	cmp	r3, #96	@ 0x60
 800787e:	d877      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x16c>
 8007880:	2b50      	cmp	r3, #80	@ 0x50
 8007882:	d03c      	beq.n	80078fe <HAL_TIM_ConfigClockSource+0xfa>
 8007884:	2b50      	cmp	r3, #80	@ 0x50
 8007886:	d873      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x16c>
 8007888:	2b40      	cmp	r3, #64	@ 0x40
 800788a:	d058      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x13a>
 800788c:	2b40      	cmp	r3, #64	@ 0x40
 800788e:	d86f      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x16c>
 8007890:	2b30      	cmp	r3, #48	@ 0x30
 8007892:	d064      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x15a>
 8007894:	2b30      	cmp	r3, #48	@ 0x30
 8007896:	d86b      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x16c>
 8007898:	2b20      	cmp	r3, #32
 800789a:	d060      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x15a>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d867      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x16c>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05c      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x15a>
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d05a      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x15a>
 80078a8:	e062      	b.n	8007970 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078ba:	f000 fb59 	bl	8007f70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	609a      	str	r2, [r3, #8]
      break;
 80078d6:	e04f      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078e8:	f000 fb42 	bl	8007f70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078fa:	609a      	str	r2, [r3, #8]
      break;
 80078fc:	e03c      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800790a:	461a      	mov	r2, r3
 800790c:	f000 fab6 	bl	8007e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2150      	movs	r1, #80	@ 0x50
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fb0f 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 800791c:	e02c      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800792a:	461a      	mov	r2, r3
 800792c:	f000 fad5 	bl	8007eda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2160      	movs	r1, #96	@ 0x60
 8007936:	4618      	mov	r0, r3
 8007938:	f000 faff 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 800793c:	e01c      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794a:	461a      	mov	r2, r3
 800794c:	f000 fa96 	bl	8007e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2140      	movs	r1, #64	@ 0x40
 8007956:	4618      	mov	r0, r3
 8007958:	f000 faef 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 800795c:	e00c      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f000 fae6 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 800796e:	e003      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
      break;
 8007974:	e000      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
	...

080079d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a43      	ldr	r2, [pc, #268]	@ (8007af0 <TIM_Base_SetConfig+0x120>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d013      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ee:	d00f      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a40      	ldr	r2, [pc, #256]	@ (8007af4 <TIM_Base_SetConfig+0x124>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00b      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a3f      	ldr	r2, [pc, #252]	@ (8007af8 <TIM_Base_SetConfig+0x128>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d007      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a3e      	ldr	r2, [pc, #248]	@ (8007afc <TIM_Base_SetConfig+0x12c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d003      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a3d      	ldr	r2, [pc, #244]	@ (8007b00 <TIM_Base_SetConfig+0x130>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d108      	bne.n	8007a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a32      	ldr	r2, [pc, #200]	@ (8007af0 <TIM_Base_SetConfig+0x120>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d02b      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a30:	d027      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a2f      	ldr	r2, [pc, #188]	@ (8007af4 <TIM_Base_SetConfig+0x124>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d023      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8007af8 <TIM_Base_SetConfig+0x128>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01f      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a2d      	ldr	r2, [pc, #180]	@ (8007afc <TIM_Base_SetConfig+0x12c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d01b      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8007b00 <TIM_Base_SetConfig+0x130>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d017      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a2b      	ldr	r2, [pc, #172]	@ (8007b04 <TIM_Base_SetConfig+0x134>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d013      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8007b08 <TIM_Base_SetConfig+0x138>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00f      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a29      	ldr	r2, [pc, #164]	@ (8007b0c <TIM_Base_SetConfig+0x13c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00b      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a28      	ldr	r2, [pc, #160]	@ (8007b10 <TIM_Base_SetConfig+0x140>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d007      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a27      	ldr	r2, [pc, #156]	@ (8007b14 <TIM_Base_SetConfig+0x144>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d003      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a26      	ldr	r2, [pc, #152]	@ (8007b18 <TIM_Base_SetConfig+0x148>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d108      	bne.n	8007a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8007af0 <TIM_Base_SetConfig+0x120>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d003      	beq.n	8007ac2 <TIM_Base_SetConfig+0xf2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a10      	ldr	r2, [pc, #64]	@ (8007b00 <TIM_Base_SetConfig+0x130>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d103      	bne.n	8007aca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f043 0204 	orr.w	r2, r3, #4
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	601a      	str	r2, [r3, #0]
}
 8007ae2:	bf00      	nop
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40010000 	.word	0x40010000
 8007af4:	40000400 	.word	0x40000400
 8007af8:	40000800 	.word	0x40000800
 8007afc:	40000c00 	.word	0x40000c00
 8007b00:	40010400 	.word	0x40010400
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40014400 	.word	0x40014400
 8007b0c:	40014800 	.word	0x40014800
 8007b10:	40001800 	.word	0x40001800
 8007b14:	40001c00 	.word	0x40001c00
 8007b18:	40002000 	.word	0x40002000

08007b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	f023 0201 	bic.w	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0303 	bic.w	r3, r3, #3
 8007b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f023 0302 	bic.w	r3, r3, #2
 8007b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a20      	ldr	r2, [pc, #128]	@ (8007bf4 <TIM_OC1_SetConfig+0xd8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_OC1_SetConfig+0x64>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8007bf8 <TIM_OC1_SetConfig+0xdc>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d10c      	bne.n	8007b9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f023 0308 	bic.w	r3, r3, #8
 8007b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 0304 	bic.w	r3, r3, #4
 8007b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a15      	ldr	r2, [pc, #84]	@ (8007bf4 <TIM_OC1_SetConfig+0xd8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d003      	beq.n	8007baa <TIM_OC1_SetConfig+0x8e>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a14      	ldr	r2, [pc, #80]	@ (8007bf8 <TIM_OC1_SetConfig+0xdc>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d111      	bne.n	8007bce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	621a      	str	r2, [r3, #32]
}
 8007be8:	bf00      	nop
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	40010400 	.word	0x40010400

08007bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	f023 0210 	bic.w	r2, r3, #16
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f023 0320 	bic.w	r3, r3, #32
 8007c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a22      	ldr	r2, [pc, #136]	@ (8007ce0 <TIM_OC2_SetConfig+0xe4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d003      	beq.n	8007c64 <TIM_OC2_SetConfig+0x68>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a21      	ldr	r2, [pc, #132]	@ (8007ce4 <TIM_OC2_SetConfig+0xe8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d10d      	bne.n	8007c80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a17      	ldr	r2, [pc, #92]	@ (8007ce0 <TIM_OC2_SetConfig+0xe4>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <TIM_OC2_SetConfig+0x94>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a16      	ldr	r2, [pc, #88]	@ (8007ce4 <TIM_OC2_SetConfig+0xe8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d113      	bne.n	8007cb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40010000 	.word	0x40010000
 8007ce4:	40010400 	.word	0x40010400

08007ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0303 	bic.w	r3, r3, #3
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a21      	ldr	r2, [pc, #132]	@ (8007dc8 <TIM_OC3_SetConfig+0xe0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <TIM_OC3_SetConfig+0x66>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a20      	ldr	r2, [pc, #128]	@ (8007dcc <TIM_OC3_SetConfig+0xe4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d10d      	bne.n	8007d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a16      	ldr	r2, [pc, #88]	@ (8007dc8 <TIM_OC3_SetConfig+0xe0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_OC3_SetConfig+0x92>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a15      	ldr	r2, [pc, #84]	@ (8007dcc <TIM_OC3_SetConfig+0xe4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d113      	bne.n	8007da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400

08007dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	031b      	lsls	r3, r3, #12
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a12      	ldr	r2, [pc, #72]	@ (8007e74 <TIM_OC4_SetConfig+0xa4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_OC4_SetConfig+0x68>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a11      	ldr	r2, [pc, #68]	@ (8007e78 <TIM_OC4_SetConfig+0xa8>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d109      	bne.n	8007e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	019b      	lsls	r3, r3, #6
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40010000 	.word	0x40010000
 8007e78:	40010400 	.word	0x40010400

08007e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f023 030a 	bic.w	r3, r3, #10
 8007eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b087      	sub	sp, #28
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	f023 0210 	bic.w	r2, r3, #16
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	031b      	lsls	r3, r3, #12
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	621a      	str	r2, [r3, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f043 0307 	orr.w	r3, r3, #7
 8007f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	609a      	str	r2, [r3, #8]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	021a      	lsls	r2, r3, #8
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	609a      	str	r2, [r3, #8]
}
 8007fa4:	bf00      	nop
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a1a      	ldr	r2, [r3, #32]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	401a      	ands	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6a1a      	ldr	r2, [r3, #32]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 031f 	and.w	r3, r3, #31
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008010:	2302      	movs	r3, #2
 8008012:	e05a      	b.n	80080ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800803a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a21      	ldr	r2, [pc, #132]	@ (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d022      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008060:	d01d      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1d      	ldr	r2, [pc, #116]	@ (80080dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d018      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1b      	ldr	r2, [pc, #108]	@ (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d013      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a1a      	ldr	r2, [pc, #104]	@ (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00e      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a18      	ldr	r2, [pc, #96]	@ (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d009      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a17      	ldr	r2, [pc, #92]	@ (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a15      	ldr	r2, [pc, #84]	@ (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d10c      	bne.n	80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40000400 	.word	0x40000400
 80080e0:	40000800 	.word	0x40000800
 80080e4:	40000c00 	.word	0x40000c00
 80080e8:	40010400 	.word	0x40010400
 80080ec:	40014000 	.word	0x40014000
 80080f0:	40001800 	.word	0x40001800

080080f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800810c:	2302      	movs	r3, #2
 800810e:	e03d      	b.n	800818c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	4313      	orrs	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e042      	b.n	8008258 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7f9 ff04 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2224      	movs	r2, #36	@ 0x24
 80081f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fe0b 	bl	8008e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695a      	ldr	r2, [r3, #20]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08a      	sub	sp, #40	@ 0x28
 8008264:	af02      	add	r7, sp, #8
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	4613      	mov	r3, r2
 800826e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b20      	cmp	r3, #32
 800827e:	d175      	bne.n	800836c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <HAL_UART_Transmit+0x2c>
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e06e      	b.n	800836e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2221      	movs	r2, #33	@ 0x21
 800829a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800829e:	f7fc ffe7 	bl	8005270 <HAL_GetTick>
 80082a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	88fa      	ldrh	r2, [r7, #6]
 80082a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b8:	d108      	bne.n	80082cc <HAL_UART_Transmit+0x6c>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d104      	bne.n	80082cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	e003      	b.n	80082d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082d4:	e02e      	b.n	8008334 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2200      	movs	r2, #0
 80082de:	2180      	movs	r1, #128	@ 0x80
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fba9 	bl	8008a38 <UART_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e03a      	b.n	800836e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800830c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	3302      	adds	r3, #2
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	e007      	b.n	8008326 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	3301      	adds	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1cb      	bne.n	80082d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2200      	movs	r2, #0
 8008346:	2140      	movs	r1, #64	@ 0x40
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fb75 	bl	8008a38 <UART_WaitOnFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2220      	movs	r2, #32
 8008358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e006      	b.n	800836e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	e000      	b.n	800836e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800836c:	2302      	movs	r3, #2
  }
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b08a      	sub	sp, #40	@ 0x28
 800837a:	af02      	add	r7, sp, #8
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	603b      	str	r3, [r7, #0]
 8008382:	4613      	mov	r3, r2
 8008384:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b20      	cmp	r3, #32
 8008394:	f040 8081 	bne.w	800849a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <HAL_UART_Receive+0x2e>
 800839e:	88fb      	ldrh	r3, [r7, #6]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e079      	b.n	800849c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2222      	movs	r2, #34	@ 0x22
 80083b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083bc:	f7fc ff58 	bl	8005270 <HAL_GetTick>
 80083c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	88fa      	ldrh	r2, [r7, #6]
 80083c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	88fa      	ldrh	r2, [r7, #6]
 80083cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083d6:	d108      	bne.n	80083ea <HAL_UART_Receive+0x74>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	61bb      	str	r3, [r7, #24]
 80083e8:	e003      	b.n	80083f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80083f2:	e047      	b.n	8008484 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2200      	movs	r2, #0
 80083fc:	2120      	movs	r1, #32
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fb1a 	bl	8008a38 <UART_WaitOnFlagUntilTimeout>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2220      	movs	r2, #32
 800840e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e042      	b.n	800849c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10c      	bne.n	8008436 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	b29b      	uxth	r3, r3
 8008424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008428:	b29a      	uxth	r2, r3
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	3302      	adds	r3, #2
 8008432:	61bb      	str	r3, [r7, #24]
 8008434:	e01f      	b.n	8008476 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843e:	d007      	beq.n	8008450 <HAL_UART_Receive+0xda>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <HAL_UART_Receive+0xe8>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d106      	bne.n	800845e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	b2da      	uxtb	r2, r3
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	e008      	b.n	8008470 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800846a:	b2da      	uxtb	r2, r3
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	3301      	adds	r3, #1
 8008474:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800847a:	b29b      	uxth	r3, r3
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1b2      	bne.n	80083f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2220      	movs	r2, #32
 8008492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	e000      	b.n	800849c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800849a:	2302      	movs	r3, #2
  }
}
 800849c:	4618      	mov	r0, r3
 800849e:	3720      	adds	r7, #32
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b0ba      	sub	sp, #232	@ 0xe8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084da:	f003 030f 	and.w	r3, r3, #15
 80084de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80084e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10f      	bne.n	800850a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ee:	f003 0320 	and.w	r3, r3, #32
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <HAL_UART_IRQHandler+0x66>
 80084f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fbcd 	bl	8008ca2 <UART_Receive_IT>
      return;
 8008508:	e273      	b.n	80089f2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800850a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 80de 	beq.w	80086d0 <HAL_UART_IRQHandler+0x22c>
 8008514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d106      	bne.n	800852e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008524:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 80d1 	beq.w	80086d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800852e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00b      	beq.n	8008552 <HAL_UART_IRQHandler+0xae>
 800853a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800853e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854a:	f043 0201 	orr.w	r2, r3, #1
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <HAL_UART_IRQHandler+0xd2>
 800855e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856e:	f043 0202 	orr.w	r2, r3, #2
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <HAL_UART_IRQHandler+0xf6>
 8008582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008592:	f043 0204 	orr.w	r2, r3, #4
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800859a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d011      	beq.n	80085ca <HAL_UART_IRQHandler+0x126>
 80085a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085aa:	f003 0320 	and.w	r3, r3, #32
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d105      	bne.n	80085be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c2:	f043 0208 	orr.w	r2, r3, #8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 820a 	beq.w	80089e8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d8:	f003 0320 	and.w	r3, r3, #32
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d008      	beq.n	80085f2 <HAL_UART_IRQHandler+0x14e>
 80085e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fb58 	bl	8008ca2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fc:	2b40      	cmp	r3, #64	@ 0x40
 80085fe:	bf0c      	ite	eq
 8008600:	2301      	moveq	r3, #1
 8008602:	2300      	movne	r3, #0
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d103      	bne.n	800861e <HAL_UART_IRQHandler+0x17a>
 8008616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800861a:	2b00      	cmp	r3, #0
 800861c:	d04f      	beq.n	80086be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa63 	bl	8008aea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862e:	2b40      	cmp	r3, #64	@ 0x40
 8008630:	d141      	bne.n	80086b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3314      	adds	r3, #20
 8008638:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008648:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800864c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3314      	adds	r3, #20
 800865a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800865e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800866a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1d9      	bne.n	8008632 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d013      	beq.n	80086ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868a:	4a8a      	ldr	r2, [pc, #552]	@ (80088b4 <HAL_UART_IRQHandler+0x410>)
 800868c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008692:	4618      	mov	r0, r3
 8008694:	f7fc ff9d 	bl	80055d2 <HAL_DMA_Abort_IT>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d016      	beq.n	80086cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ac:	e00e      	b.n	80086cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9ac 	bl	8008a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b4:	e00a      	b.n	80086cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f9a8 	bl	8008a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086bc:	e006      	b.n	80086cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f9a4 	bl	8008a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80086ca:	e18d      	b.n	80089e8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086cc:	bf00      	nop
    return;
 80086ce:	e18b      	b.n	80089e8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	f040 8167 	bne.w	80089a8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086de:	f003 0310 	and.w	r3, r3, #16
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 8160 	beq.w	80089a8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80086e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 8159 	beq.w	80089a8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086f6:	2300      	movs	r3, #0
 80086f8:	60bb      	str	r3, [r7, #8]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60bb      	str	r3, [r7, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	60bb      	str	r3, [r7, #8]
 800870a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008716:	2b40      	cmp	r3, #64	@ 0x40
 8008718:	f040 80ce 	bne.w	80088b8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008728:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 80a9 	beq.w	8008884 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800873a:	429a      	cmp	r2, r3
 800873c:	f080 80a2 	bcs.w	8008884 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008746:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008752:	f000 8088 	beq.w	8008866 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	330c      	adds	r3, #12
 800875c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800876c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	330c      	adds	r3, #12
 800877e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008782:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800878e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800879a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1d9      	bne.n	8008756 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3314      	adds	r3, #20
 80087a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3314      	adds	r3, #20
 80087c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e1      	bne.n	80087a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3314      	adds	r3, #20
 80087e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3314      	adds	r3, #20
 80087fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008802:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008804:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008808:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e3      	bne.n	80087de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	330c      	adds	r3, #12
 800882a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800882e:	e853 3f00 	ldrex	r3, [r3]
 8008832:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008836:	f023 0310 	bic.w	r3, r3, #16
 800883a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	330c      	adds	r3, #12
 8008844:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008848:	65ba      	str	r2, [r7, #88]	@ 0x58
 800884a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800884e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008850:	e841 2300 	strex	r3, r2, [r1]
 8008854:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e3      	bne.n	8008824 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008860:	4618      	mov	r0, r3
 8008862:	f7fc fe46 	bl	80054f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008874:	b29b      	uxth	r3, r3
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	b29b      	uxth	r3, r3
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f8cf 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008882:	e0b3      	b.n	80089ec <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008888:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800888c:	429a      	cmp	r2, r3
 800888e:	f040 80ad 	bne.w	80089ec <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800889c:	f040 80a6 	bne.w	80089ec <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f8b7 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
      return;
 80088b2:	e09b      	b.n	80089ec <HAL_UART_IRQHandler+0x548>
 80088b4:	08008bb1 	.word	0x08008bb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 808e 	beq.w	80089f0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80088d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8089 	beq.w	80089f0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	330c      	adds	r3, #12
 80088e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	330c      	adds	r3, #12
 80088fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008902:	647a      	str	r2, [r7, #68]	@ 0x44
 8008904:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e3      	bne.n	80088de <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3314      	adds	r3, #20
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	623b      	str	r3, [r7, #32]
   return(result);
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3314      	adds	r3, #20
 8008936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800893a:	633a      	str	r2, [r7, #48]	@ 0x30
 800893c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e3      	bne.n	8008916 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	330c      	adds	r3, #12
 8008962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	60fb      	str	r3, [r7, #12]
   return(result);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0310 	bic.w	r3, r3, #16
 8008972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	330c      	adds	r3, #12
 800897c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008980:	61fa      	str	r2, [r7, #28]
 8008982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	69b9      	ldr	r1, [r7, #24]
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	617b      	str	r3, [r7, #20]
   return(result);
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e3      	bne.n	800895c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800899a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f83d 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089a6:	e023      	b.n	80089f0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <HAL_UART_IRQHandler+0x524>
 80089b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f906 	bl	8008bd2 <UART_Transmit_IT>
    return;
 80089c6:	e014      	b.n	80089f2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00e      	beq.n	80089f2 <HAL_UART_IRQHandler+0x54e>
 80089d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d008      	beq.n	80089f2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f946 	bl	8008c72 <UART_EndTransmit_IT>
    return;
 80089e6:	e004      	b.n	80089f2 <HAL_UART_IRQHandler+0x54e>
    return;
 80089e8:	bf00      	nop
 80089ea:	e002      	b.n	80089f2 <HAL_UART_IRQHandler+0x54e>
      return;
 80089ec:	bf00      	nop
 80089ee:	e000      	b.n	80089f2 <HAL_UART_IRQHandler+0x54e>
      return;
 80089f0:	bf00      	nop
  }
}
 80089f2:	37e8      	adds	r7, #232	@ 0xe8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	4613      	mov	r3, r2
 8008a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a48:	e03b      	b.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d037      	beq.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a52:	f7fc fc0d 	bl	8005270 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	6a3a      	ldr	r2, [r7, #32]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d302      	bcc.n	8008a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e03a      	b.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d023      	beq.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b80      	cmp	r3, #128	@ 0x80
 8008a7e:	d020      	beq.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2b40      	cmp	r3, #64	@ 0x40
 8008a84:	d01d      	beq.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0308 	and.w	r3, r3, #8
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d116      	bne.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 f81d 	bl	8008aea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e00f      	b.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4013      	ands	r3, r2
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	bf0c      	ite	eq
 8008ad2:	2301      	moveq	r3, #1
 8008ad4:	2300      	movne	r3, #0
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	461a      	mov	r2, r3
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d0b4      	beq.n	8008a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b095      	sub	sp, #84	@ 0x54
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	330c      	adds	r3, #12
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b12:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e5      	bne.n	8008af2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3314      	adds	r3, #20
 8008b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	f023 0301 	bic.w	r3, r3, #1
 8008b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3314      	adds	r3, #20
 8008b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e5      	bne.n	8008b26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d119      	bne.n	8008b96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	330c      	adds	r3, #12
 8008b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f023 0310 	bic.w	r3, r3, #16
 8008b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	330c      	adds	r3, #12
 8008b80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b82:	61ba      	str	r2, [r7, #24]
 8008b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6979      	ldr	r1, [r7, #20]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e5      	bne.n	8008b62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008ba4:	bf00      	nop
 8008ba6:	3754      	adds	r7, #84	@ 0x54
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff ff21 	bl	8008a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b21      	cmp	r3, #33	@ 0x21
 8008be4:	d13e      	bne.n	8008c64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bee:	d114      	bne.n	8008c1a <UART_Transmit_IT+0x48>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d110      	bne.n	8008c1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	1c9a      	adds	r2, r3, #2
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	621a      	str	r2, [r3, #32]
 8008c18:	e008      	b.n	8008c2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	1c59      	adds	r1, r3, #1
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6211      	str	r1, [r2, #32]
 8008c24:	781a      	ldrb	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10f      	bne.n	8008c60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	e000      	b.n	8008c66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c64:	2302      	movs	r3, #2
  }
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff feb0 	bl	80089f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b08c      	sub	sp, #48	@ 0x30
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b22      	cmp	r3, #34	@ 0x22
 8008cbc:	f040 80aa 	bne.w	8008e14 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc8:	d115      	bne.n	8008cf6 <UART_Receive_IT+0x54>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d111      	bne.n	8008cf6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cee:	1c9a      	adds	r2, r3, #2
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8008cf4:	e024      	b.n	8008d40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d04:	d007      	beq.n	8008d16 <UART_Receive_IT+0x74>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10a      	bne.n	8008d24 <UART_Receive_IT+0x82>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d106      	bne.n	8008d24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	e008      	b.n	8008d36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d15d      	bne.n	8008e10 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0220 	bic.w	r2, r2, #32
 8008d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	695a      	ldr	r2, [r3, #20]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 0201 	bic.w	r2, r2, #1
 8008d82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d135      	bne.n	8008e06 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	330c      	adds	r3, #12
 8008da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	613b      	str	r3, [r7, #16]
   return(result);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f023 0310 	bic.w	r3, r3, #16
 8008db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	330c      	adds	r3, #12
 8008dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc0:	623a      	str	r2, [r7, #32]
 8008dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	69f9      	ldr	r1, [r7, #28]
 8008dc6:	6a3a      	ldr	r2, [r7, #32]
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0310 	and.w	r3, r3, #16
 8008dde:	2b10      	cmp	r3, #16
 8008de0:	d10a      	bne.n	8008df8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff fe0e 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
 8008e04:	e002      	b.n	8008e0c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7f8 f8d4 	bl	8000fb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e002      	b.n	8008e16 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	e000      	b.n	8008e16 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e14:	2302      	movs	r3, #2
  }
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3730      	adds	r7, #48	@ 0x30
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e24:	b0c0      	sub	sp, #256	@ 0x100
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e3c:	68d9      	ldr	r1, [r3, #12]
 8008e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	ea40 0301 	orr.w	r3, r0, r1
 8008e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	431a      	orrs	r2, r3
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e78:	f021 010c 	bic.w	r1, r1, #12
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e86:	430b      	orrs	r3, r1
 8008e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e9a:	6999      	ldr	r1, [r3, #24]
 8008e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	ea40 0301 	orr.w	r3, r0, r1
 8008ea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4b8f      	ldr	r3, [pc, #572]	@ (80090ec <UART_SetConfig+0x2cc>)
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d005      	beq.n	8008ec0 <UART_SetConfig+0xa0>
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b8d      	ldr	r3, [pc, #564]	@ (80090f0 <UART_SetConfig+0x2d0>)
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d104      	bne.n	8008eca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ec0:	f7fd fb56 	bl	8006570 <HAL_RCC_GetPCLK2Freq>
 8008ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ec8:	e003      	b.n	8008ed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008eca:	f7fd fb3d 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 8008ece:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008edc:	f040 810c 	bne.w	80090f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008eea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	1891      	adds	r1, r2, r2
 8008ef8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008efa:	415b      	adcs	r3, r3
 8008efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008efe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f02:	4621      	mov	r1, r4
 8008f04:	eb12 0801 	adds.w	r8, r2, r1
 8008f08:	4629      	mov	r1, r5
 8008f0a:	eb43 0901 	adc.w	r9, r3, r1
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	f04f 0300 	mov.w	r3, #0
 8008f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f22:	4690      	mov	r8, r2
 8008f24:	4699      	mov	r9, r3
 8008f26:	4623      	mov	r3, r4
 8008f28:	eb18 0303 	adds.w	r3, r8, r3
 8008f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f30:	462b      	mov	r3, r5
 8008f32:	eb49 0303 	adc.w	r3, r9, r3
 8008f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f4e:	460b      	mov	r3, r1
 8008f50:	18db      	adds	r3, r3, r3
 8008f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f54:	4613      	mov	r3, r2
 8008f56:	eb42 0303 	adc.w	r3, r2, r3
 8008f5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f64:	f7f7 fe90 	bl	8000c88 <__aeabi_uldivmod>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4b61      	ldr	r3, [pc, #388]	@ (80090f4 <UART_SetConfig+0x2d4>)
 8008f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f72:	095b      	lsrs	r3, r3, #5
 8008f74:	011c      	lsls	r4, r3, #4
 8008f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f88:	4642      	mov	r2, r8
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	1891      	adds	r1, r2, r2
 8008f8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f90:	415b      	adcs	r3, r3
 8008f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f98:	4641      	mov	r1, r8
 8008f9a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	eb43 0b01 	adc.w	fp, r3, r1
 8008fa4:	f04f 0200 	mov.w	r2, #0
 8008fa8:	f04f 0300 	mov.w	r3, #0
 8008fac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fb8:	4692      	mov	sl, r2
 8008fba:	469b      	mov	fp, r3
 8008fbc:	4643      	mov	r3, r8
 8008fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8008fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fc6:	464b      	mov	r3, r9
 8008fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8008fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008fe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	18db      	adds	r3, r3, r3
 8008fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fea:	4613      	mov	r3, r2
 8008fec:	eb42 0303 	adc.w	r3, r2, r3
 8008ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008ffa:	f7f7 fe45 	bl	8000c88 <__aeabi_uldivmod>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4611      	mov	r1, r2
 8009004:	4b3b      	ldr	r3, [pc, #236]	@ (80090f4 <UART_SetConfig+0x2d4>)
 8009006:	fba3 2301 	umull	r2, r3, r3, r1
 800900a:	095b      	lsrs	r3, r3, #5
 800900c:	2264      	movs	r2, #100	@ 0x64
 800900e:	fb02 f303 	mul.w	r3, r2, r3
 8009012:	1acb      	subs	r3, r1, r3
 8009014:	00db      	lsls	r3, r3, #3
 8009016:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800901a:	4b36      	ldr	r3, [pc, #216]	@ (80090f4 <UART_SetConfig+0x2d4>)
 800901c:	fba3 2302 	umull	r2, r3, r3, r2
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009028:	441c      	add	r4, r3
 800902a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800902e:	2200      	movs	r2, #0
 8009030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009034:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800903c:	4642      	mov	r2, r8
 800903e:	464b      	mov	r3, r9
 8009040:	1891      	adds	r1, r2, r2
 8009042:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009044:	415b      	adcs	r3, r3
 8009046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800904c:	4641      	mov	r1, r8
 800904e:	1851      	adds	r1, r2, r1
 8009050:	6339      	str	r1, [r7, #48]	@ 0x30
 8009052:	4649      	mov	r1, r9
 8009054:	414b      	adcs	r3, r1
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009064:	4659      	mov	r1, fp
 8009066:	00cb      	lsls	r3, r1, #3
 8009068:	4651      	mov	r1, sl
 800906a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800906e:	4651      	mov	r1, sl
 8009070:	00ca      	lsls	r2, r1, #3
 8009072:	4610      	mov	r0, r2
 8009074:	4619      	mov	r1, r3
 8009076:	4603      	mov	r3, r0
 8009078:	4642      	mov	r2, r8
 800907a:	189b      	adds	r3, r3, r2
 800907c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009080:	464b      	mov	r3, r9
 8009082:	460a      	mov	r2, r1
 8009084:	eb42 0303 	adc.w	r3, r2, r3
 8009088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800908c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009098:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800909c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090a0:	460b      	mov	r3, r1
 80090a2:	18db      	adds	r3, r3, r3
 80090a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090a6:	4613      	mov	r3, r2
 80090a8:	eb42 0303 	adc.w	r3, r2, r3
 80090ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80090b6:	f7f7 fde7 	bl	8000c88 <__aeabi_uldivmod>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4b0d      	ldr	r3, [pc, #52]	@ (80090f4 <UART_SetConfig+0x2d4>)
 80090c0:	fba3 1302 	umull	r1, r3, r3, r2
 80090c4:	095b      	lsrs	r3, r3, #5
 80090c6:	2164      	movs	r1, #100	@ 0x64
 80090c8:	fb01 f303 	mul.w	r3, r1, r3
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	3332      	adds	r3, #50	@ 0x32
 80090d2:	4a08      	ldr	r2, [pc, #32]	@ (80090f4 <UART_SetConfig+0x2d4>)
 80090d4:	fba2 2303 	umull	r2, r3, r2, r3
 80090d8:	095b      	lsrs	r3, r3, #5
 80090da:	f003 0207 	and.w	r2, r3, #7
 80090de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4422      	add	r2, r4
 80090e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090e8:	e106      	b.n	80092f8 <UART_SetConfig+0x4d8>
 80090ea:	bf00      	nop
 80090ec:	40011000 	.word	0x40011000
 80090f0:	40011400 	.word	0x40011400
 80090f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090fc:	2200      	movs	r2, #0
 80090fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009102:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800910a:	4642      	mov	r2, r8
 800910c:	464b      	mov	r3, r9
 800910e:	1891      	adds	r1, r2, r2
 8009110:	6239      	str	r1, [r7, #32]
 8009112:	415b      	adcs	r3, r3
 8009114:	627b      	str	r3, [r7, #36]	@ 0x24
 8009116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800911a:	4641      	mov	r1, r8
 800911c:	1854      	adds	r4, r2, r1
 800911e:	4649      	mov	r1, r9
 8009120:	eb43 0501 	adc.w	r5, r3, r1
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	f04f 0300 	mov.w	r3, #0
 800912c:	00eb      	lsls	r3, r5, #3
 800912e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009132:	00e2      	lsls	r2, r4, #3
 8009134:	4614      	mov	r4, r2
 8009136:	461d      	mov	r5, r3
 8009138:	4643      	mov	r3, r8
 800913a:	18e3      	adds	r3, r4, r3
 800913c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009140:	464b      	mov	r3, r9
 8009142:	eb45 0303 	adc.w	r3, r5, r3
 8009146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800914a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800915a:	f04f 0200 	mov.w	r2, #0
 800915e:	f04f 0300 	mov.w	r3, #0
 8009162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009166:	4629      	mov	r1, r5
 8009168:	008b      	lsls	r3, r1, #2
 800916a:	4621      	mov	r1, r4
 800916c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009170:	4621      	mov	r1, r4
 8009172:	008a      	lsls	r2, r1, #2
 8009174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009178:	f7f7 fd86 	bl	8000c88 <__aeabi_uldivmod>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4b60      	ldr	r3, [pc, #384]	@ (8009304 <UART_SetConfig+0x4e4>)
 8009182:	fba3 2302 	umull	r2, r3, r3, r2
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	011c      	lsls	r4, r3, #4
 800918a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800918e:	2200      	movs	r2, #0
 8009190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009194:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800919c:	4642      	mov	r2, r8
 800919e:	464b      	mov	r3, r9
 80091a0:	1891      	adds	r1, r2, r2
 80091a2:	61b9      	str	r1, [r7, #24]
 80091a4:	415b      	adcs	r3, r3
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091ac:	4641      	mov	r1, r8
 80091ae:	1851      	adds	r1, r2, r1
 80091b0:	6139      	str	r1, [r7, #16]
 80091b2:	4649      	mov	r1, r9
 80091b4:	414b      	adcs	r3, r1
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	f04f 0200 	mov.w	r2, #0
 80091bc:	f04f 0300 	mov.w	r3, #0
 80091c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091c4:	4659      	mov	r1, fp
 80091c6:	00cb      	lsls	r3, r1, #3
 80091c8:	4651      	mov	r1, sl
 80091ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ce:	4651      	mov	r1, sl
 80091d0:	00ca      	lsls	r2, r1, #3
 80091d2:	4610      	mov	r0, r2
 80091d4:	4619      	mov	r1, r3
 80091d6:	4603      	mov	r3, r0
 80091d8:	4642      	mov	r2, r8
 80091da:	189b      	adds	r3, r3, r2
 80091dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091e0:	464b      	mov	r3, r9
 80091e2:	460a      	mov	r2, r1
 80091e4:	eb42 0303 	adc.w	r3, r2, r3
 80091e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80091f8:	f04f 0200 	mov.w	r2, #0
 80091fc:	f04f 0300 	mov.w	r3, #0
 8009200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009204:	4649      	mov	r1, r9
 8009206:	008b      	lsls	r3, r1, #2
 8009208:	4641      	mov	r1, r8
 800920a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800920e:	4641      	mov	r1, r8
 8009210:	008a      	lsls	r2, r1, #2
 8009212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009216:	f7f7 fd37 	bl	8000c88 <__aeabi_uldivmod>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4611      	mov	r1, r2
 8009220:	4b38      	ldr	r3, [pc, #224]	@ (8009304 <UART_SetConfig+0x4e4>)
 8009222:	fba3 2301 	umull	r2, r3, r3, r1
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	2264      	movs	r2, #100	@ 0x64
 800922a:	fb02 f303 	mul.w	r3, r2, r3
 800922e:	1acb      	subs	r3, r1, r3
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	3332      	adds	r3, #50	@ 0x32
 8009234:	4a33      	ldr	r2, [pc, #204]	@ (8009304 <UART_SetConfig+0x4e4>)
 8009236:	fba2 2303 	umull	r2, r3, r2, r3
 800923a:	095b      	lsrs	r3, r3, #5
 800923c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009240:	441c      	add	r4, r3
 8009242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009246:	2200      	movs	r2, #0
 8009248:	673b      	str	r3, [r7, #112]	@ 0x70
 800924a:	677a      	str	r2, [r7, #116]	@ 0x74
 800924c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	1891      	adds	r1, r2, r2
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	415b      	adcs	r3, r3
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009260:	4641      	mov	r1, r8
 8009262:	1851      	adds	r1, r2, r1
 8009264:	6039      	str	r1, [r7, #0]
 8009266:	4649      	mov	r1, r9
 8009268:	414b      	adcs	r3, r1
 800926a:	607b      	str	r3, [r7, #4]
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009278:	4659      	mov	r1, fp
 800927a:	00cb      	lsls	r3, r1, #3
 800927c:	4651      	mov	r1, sl
 800927e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009282:	4651      	mov	r1, sl
 8009284:	00ca      	lsls	r2, r1, #3
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	4603      	mov	r3, r0
 800928c:	4642      	mov	r2, r8
 800928e:	189b      	adds	r3, r3, r2
 8009290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009292:	464b      	mov	r3, r9
 8009294:	460a      	mov	r2, r1
 8009296:	eb42 0303 	adc.w	r3, r2, r3
 800929a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800929c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80092a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80092b4:	4649      	mov	r1, r9
 80092b6:	008b      	lsls	r3, r1, #2
 80092b8:	4641      	mov	r1, r8
 80092ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092be:	4641      	mov	r1, r8
 80092c0:	008a      	lsls	r2, r1, #2
 80092c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80092c6:	f7f7 fcdf 	bl	8000c88 <__aeabi_uldivmod>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009304 <UART_SetConfig+0x4e4>)
 80092d0:	fba3 1302 	umull	r1, r3, r3, r2
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	2164      	movs	r1, #100	@ 0x64
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	3332      	adds	r3, #50	@ 0x32
 80092e2:	4a08      	ldr	r2, [pc, #32]	@ (8009304 <UART_SetConfig+0x4e4>)
 80092e4:	fba2 2303 	umull	r2, r3, r2, r3
 80092e8:	095b      	lsrs	r3, r3, #5
 80092ea:	f003 020f 	and.w	r2, r3, #15
 80092ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4422      	add	r2, r4
 80092f6:	609a      	str	r2, [r3, #8]
}
 80092f8:	bf00      	nop
 80092fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80092fe:	46bd      	mov	sp, r7
 8009300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009304:	51eb851f 	.word	0x51eb851f

08009308 <acos>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	ed2d 8b02 	vpush	{d8}
 800930e:	ec55 4b10 	vmov	r4, r5, d0
 8009312:	f000 fc25 	bl	8009b60 <__ieee754_acos>
 8009316:	4622      	mov	r2, r4
 8009318:	462b      	mov	r3, r5
 800931a:	4620      	mov	r0, r4
 800931c:	4629      	mov	r1, r5
 800931e:	eeb0 8a40 	vmov.f32	s16, s0
 8009322:	eef0 8a60 	vmov.f32	s17, s1
 8009326:	f7f7 fc21 	bl	8000b6c <__aeabi_dcmpun>
 800932a:	b9a8      	cbnz	r0, 8009358 <acos+0x50>
 800932c:	ec45 4b10 	vmov	d0, r4, r5
 8009330:	f000 fa0a 	bl	8009748 <fabs>
 8009334:	4b0c      	ldr	r3, [pc, #48]	@ (8009368 <acos+0x60>)
 8009336:	ec51 0b10 	vmov	r0, r1, d0
 800933a:	2200      	movs	r2, #0
 800933c:	f7f7 fc0c 	bl	8000b58 <__aeabi_dcmpgt>
 8009340:	b150      	cbz	r0, 8009358 <acos+0x50>
 8009342:	f001 feab 	bl	800b09c <__errno>
 8009346:	ecbd 8b02 	vpop	{d8}
 800934a:	2321      	movs	r3, #33	@ 0x21
 800934c:	6003      	str	r3, [r0, #0]
 800934e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009352:	4806      	ldr	r0, [pc, #24]	@ (800936c <acos+0x64>)
 8009354:	f000 ba74 	b.w	8009840 <nan>
 8009358:	eeb0 0a48 	vmov.f32	s0, s16
 800935c:	eef0 0a68 	vmov.f32	s1, s17
 8009360:	ecbd 8b02 	vpop	{d8}
 8009364:	bd38      	pop	{r3, r4, r5, pc}
 8009366:	bf00      	nop
 8009368:	3ff00000 	.word	0x3ff00000
 800936c:	0800c5e1 	.word	0x0800c5e1

08009370 <atan>:
 8009370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	ec55 4b10 	vmov	r4, r5, d0
 8009378:	4bbf      	ldr	r3, [pc, #764]	@ (8009678 <atan+0x308>)
 800937a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800937e:	429e      	cmp	r6, r3
 8009380:	46ab      	mov	fp, r5
 8009382:	d918      	bls.n	80093b6 <atan+0x46>
 8009384:	4bbd      	ldr	r3, [pc, #756]	@ (800967c <atan+0x30c>)
 8009386:	429e      	cmp	r6, r3
 8009388:	d801      	bhi.n	800938e <atan+0x1e>
 800938a:	d109      	bne.n	80093a0 <atan+0x30>
 800938c:	b144      	cbz	r4, 80093a0 <atan+0x30>
 800938e:	4622      	mov	r2, r4
 8009390:	462b      	mov	r3, r5
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	f7f6 ff99 	bl	80002cc <__adddf3>
 800939a:	4604      	mov	r4, r0
 800939c:	460d      	mov	r5, r1
 800939e:	e006      	b.n	80093ae <atan+0x3e>
 80093a0:	f1bb 0f00 	cmp.w	fp, #0
 80093a4:	f340 812b 	ble.w	80095fe <atan+0x28e>
 80093a8:	a597      	add	r5, pc, #604	@ (adr r5, 8009608 <atan+0x298>)
 80093aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093ae:	ec45 4b10 	vmov	d0, r4, r5
 80093b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b6:	4bb2      	ldr	r3, [pc, #712]	@ (8009680 <atan+0x310>)
 80093b8:	429e      	cmp	r6, r3
 80093ba:	d813      	bhi.n	80093e4 <atan+0x74>
 80093bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80093c0:	429e      	cmp	r6, r3
 80093c2:	d80c      	bhi.n	80093de <atan+0x6e>
 80093c4:	a392      	add	r3, pc, #584	@ (adr r3, 8009610 <atan+0x2a0>)
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	f7f6 ff7d 	bl	80002cc <__adddf3>
 80093d2:	4bac      	ldr	r3, [pc, #688]	@ (8009684 <atan+0x314>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	f7f7 fbbf 	bl	8000b58 <__aeabi_dcmpgt>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d1e7      	bne.n	80093ae <atan+0x3e>
 80093de:	f04f 3aff 	mov.w	sl, #4294967295
 80093e2:	e029      	b.n	8009438 <atan+0xc8>
 80093e4:	f000 f9b0 	bl	8009748 <fabs>
 80093e8:	4ba7      	ldr	r3, [pc, #668]	@ (8009688 <atan+0x318>)
 80093ea:	429e      	cmp	r6, r3
 80093ec:	ec55 4b10 	vmov	r4, r5, d0
 80093f0:	f200 80bc 	bhi.w	800956c <atan+0x1fc>
 80093f4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80093f8:	429e      	cmp	r6, r3
 80093fa:	f200 809e 	bhi.w	800953a <atan+0x1ca>
 80093fe:	4622      	mov	r2, r4
 8009400:	462b      	mov	r3, r5
 8009402:	4620      	mov	r0, r4
 8009404:	4629      	mov	r1, r5
 8009406:	f7f6 ff61 	bl	80002cc <__adddf3>
 800940a:	4b9e      	ldr	r3, [pc, #632]	@ (8009684 <atan+0x314>)
 800940c:	2200      	movs	r2, #0
 800940e:	f7f6 ff5b 	bl	80002c8 <__aeabi_dsub>
 8009412:	2200      	movs	r2, #0
 8009414:	4606      	mov	r6, r0
 8009416:	460f      	mov	r7, r1
 8009418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f6 ff54 	bl	80002cc <__adddf3>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	f7f7 fa2e 	bl	800088c <__aeabi_ddiv>
 8009430:	f04f 0a00 	mov.w	sl, #0
 8009434:	4604      	mov	r4, r0
 8009436:	460d      	mov	r5, r1
 8009438:	4622      	mov	r2, r4
 800943a:	462b      	mov	r3, r5
 800943c:	4620      	mov	r0, r4
 800943e:	4629      	mov	r1, r5
 8009440:	f7f7 f8fa 	bl	8000638 <__aeabi_dmul>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4680      	mov	r8, r0
 800944a:	4689      	mov	r9, r1
 800944c:	f7f7 f8f4 	bl	8000638 <__aeabi_dmul>
 8009450:	a371      	add	r3, pc, #452	@ (adr r3, 8009618 <atan+0x2a8>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	f7f7 f8ed 	bl	8000638 <__aeabi_dmul>
 800945e:	a370      	add	r3, pc, #448	@ (adr r3, 8009620 <atan+0x2b0>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f6 ff32 	bl	80002cc <__adddf3>
 8009468:	4632      	mov	r2, r6
 800946a:	463b      	mov	r3, r7
 800946c:	f7f7 f8e4 	bl	8000638 <__aeabi_dmul>
 8009470:	a36d      	add	r3, pc, #436	@ (adr r3, 8009628 <atan+0x2b8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f6 ff29 	bl	80002cc <__adddf3>
 800947a:	4632      	mov	r2, r6
 800947c:	463b      	mov	r3, r7
 800947e:	f7f7 f8db 	bl	8000638 <__aeabi_dmul>
 8009482:	a36b      	add	r3, pc, #428	@ (adr r3, 8009630 <atan+0x2c0>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f7f6 ff20 	bl	80002cc <__adddf3>
 800948c:	4632      	mov	r2, r6
 800948e:	463b      	mov	r3, r7
 8009490:	f7f7 f8d2 	bl	8000638 <__aeabi_dmul>
 8009494:	a368      	add	r3, pc, #416	@ (adr r3, 8009638 <atan+0x2c8>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f6 ff17 	bl	80002cc <__adddf3>
 800949e:	4632      	mov	r2, r6
 80094a0:	463b      	mov	r3, r7
 80094a2:	f7f7 f8c9 	bl	8000638 <__aeabi_dmul>
 80094a6:	a366      	add	r3, pc, #408	@ (adr r3, 8009640 <atan+0x2d0>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f6 ff0e 	bl	80002cc <__adddf3>
 80094b0:	4642      	mov	r2, r8
 80094b2:	464b      	mov	r3, r9
 80094b4:	f7f7 f8c0 	bl	8000638 <__aeabi_dmul>
 80094b8:	a363      	add	r3, pc, #396	@ (adr r3, 8009648 <atan+0x2d8>)
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	4680      	mov	r8, r0
 80094c0:	4689      	mov	r9, r1
 80094c2:	4630      	mov	r0, r6
 80094c4:	4639      	mov	r1, r7
 80094c6:	f7f7 f8b7 	bl	8000638 <__aeabi_dmul>
 80094ca:	a361      	add	r3, pc, #388	@ (adr r3, 8009650 <atan+0x2e0>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f7f6 fefa 	bl	80002c8 <__aeabi_dsub>
 80094d4:	4632      	mov	r2, r6
 80094d6:	463b      	mov	r3, r7
 80094d8:	f7f7 f8ae 	bl	8000638 <__aeabi_dmul>
 80094dc:	a35e      	add	r3, pc, #376	@ (adr r3, 8009658 <atan+0x2e8>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f6 fef1 	bl	80002c8 <__aeabi_dsub>
 80094e6:	4632      	mov	r2, r6
 80094e8:	463b      	mov	r3, r7
 80094ea:	f7f7 f8a5 	bl	8000638 <__aeabi_dmul>
 80094ee:	a35c      	add	r3, pc, #368	@ (adr r3, 8009660 <atan+0x2f0>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f7f6 fee8 	bl	80002c8 <__aeabi_dsub>
 80094f8:	4632      	mov	r2, r6
 80094fa:	463b      	mov	r3, r7
 80094fc:	f7f7 f89c 	bl	8000638 <__aeabi_dmul>
 8009500:	a359      	add	r3, pc, #356	@ (adr r3, 8009668 <atan+0x2f8>)
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	f7f6 fedf 	bl	80002c8 <__aeabi_dsub>
 800950a:	4632      	mov	r2, r6
 800950c:	463b      	mov	r3, r7
 800950e:	f7f7 f893 	bl	8000638 <__aeabi_dmul>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4640      	mov	r0, r8
 8009518:	4649      	mov	r1, r9
 800951a:	f7f6 fed7 	bl	80002cc <__adddf3>
 800951e:	4622      	mov	r2, r4
 8009520:	462b      	mov	r3, r5
 8009522:	f7f7 f889 	bl	8000638 <__aeabi_dmul>
 8009526:	f1ba 3fff 	cmp.w	sl, #4294967295
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	d148      	bne.n	80095c2 <atan+0x252>
 8009530:	4620      	mov	r0, r4
 8009532:	4629      	mov	r1, r5
 8009534:	f7f6 fec8 	bl	80002c8 <__aeabi_dsub>
 8009538:	e72f      	b.n	800939a <atan+0x2a>
 800953a:	4b52      	ldr	r3, [pc, #328]	@ (8009684 <atan+0x314>)
 800953c:	2200      	movs	r2, #0
 800953e:	4620      	mov	r0, r4
 8009540:	4629      	mov	r1, r5
 8009542:	f7f6 fec1 	bl	80002c8 <__aeabi_dsub>
 8009546:	4b4f      	ldr	r3, [pc, #316]	@ (8009684 <atan+0x314>)
 8009548:	4606      	mov	r6, r0
 800954a:	460f      	mov	r7, r1
 800954c:	2200      	movs	r2, #0
 800954e:	4620      	mov	r0, r4
 8009550:	4629      	mov	r1, r5
 8009552:	f7f6 febb 	bl	80002cc <__adddf3>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4630      	mov	r0, r6
 800955c:	4639      	mov	r1, r7
 800955e:	f7f7 f995 	bl	800088c <__aeabi_ddiv>
 8009562:	f04f 0a01 	mov.w	sl, #1
 8009566:	4604      	mov	r4, r0
 8009568:	460d      	mov	r5, r1
 800956a:	e765      	b.n	8009438 <atan+0xc8>
 800956c:	4b47      	ldr	r3, [pc, #284]	@ (800968c <atan+0x31c>)
 800956e:	429e      	cmp	r6, r3
 8009570:	d21c      	bcs.n	80095ac <atan+0x23c>
 8009572:	4b47      	ldr	r3, [pc, #284]	@ (8009690 <atan+0x320>)
 8009574:	2200      	movs	r2, #0
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	f7f6 fea5 	bl	80002c8 <__aeabi_dsub>
 800957e:	4b44      	ldr	r3, [pc, #272]	@ (8009690 <atan+0x320>)
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	2200      	movs	r2, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 f855 	bl	8000638 <__aeabi_dmul>
 800958e:	4b3d      	ldr	r3, [pc, #244]	@ (8009684 <atan+0x314>)
 8009590:	2200      	movs	r2, #0
 8009592:	f7f6 fe9b 	bl	80002cc <__adddf3>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4630      	mov	r0, r6
 800959c:	4639      	mov	r1, r7
 800959e:	f7f7 f975 	bl	800088c <__aeabi_ddiv>
 80095a2:	f04f 0a02 	mov.w	sl, #2
 80095a6:	4604      	mov	r4, r0
 80095a8:	460d      	mov	r5, r1
 80095aa:	e745      	b.n	8009438 <atan+0xc8>
 80095ac:	4622      	mov	r2, r4
 80095ae:	462b      	mov	r3, r5
 80095b0:	4938      	ldr	r1, [pc, #224]	@ (8009694 <atan+0x324>)
 80095b2:	2000      	movs	r0, #0
 80095b4:	f7f7 f96a 	bl	800088c <__aeabi_ddiv>
 80095b8:	f04f 0a03 	mov.w	sl, #3
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	e73a      	b.n	8009438 <atan+0xc8>
 80095c2:	4b35      	ldr	r3, [pc, #212]	@ (8009698 <atan+0x328>)
 80095c4:	4e35      	ldr	r6, [pc, #212]	@ (800969c <atan+0x32c>)
 80095c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f7f6 fe7b 	bl	80002c8 <__aeabi_dsub>
 80095d2:	4622      	mov	r2, r4
 80095d4:	462b      	mov	r3, r5
 80095d6:	f7f6 fe77 	bl	80002c8 <__aeabi_dsub>
 80095da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80095e6:	f7f6 fe6f 	bl	80002c8 <__aeabi_dsub>
 80095ea:	f1bb 0f00 	cmp.w	fp, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	460d      	mov	r5, r1
 80095f2:	f6bf aedc 	bge.w	80093ae <atan+0x3e>
 80095f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095fa:	461d      	mov	r5, r3
 80095fc:	e6d7      	b.n	80093ae <atan+0x3e>
 80095fe:	a51c      	add	r5, pc, #112	@ (adr r5, 8009670 <atan+0x300>)
 8009600:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009604:	e6d3      	b.n	80093ae <atan+0x3e>
 8009606:	bf00      	nop
 8009608:	54442d18 	.word	0x54442d18
 800960c:	3ff921fb 	.word	0x3ff921fb
 8009610:	8800759c 	.word	0x8800759c
 8009614:	7e37e43c 	.word	0x7e37e43c
 8009618:	e322da11 	.word	0xe322da11
 800961c:	3f90ad3a 	.word	0x3f90ad3a
 8009620:	24760deb 	.word	0x24760deb
 8009624:	3fa97b4b 	.word	0x3fa97b4b
 8009628:	a0d03d51 	.word	0xa0d03d51
 800962c:	3fb10d66 	.word	0x3fb10d66
 8009630:	c54c206e 	.word	0xc54c206e
 8009634:	3fb745cd 	.word	0x3fb745cd
 8009638:	920083ff 	.word	0x920083ff
 800963c:	3fc24924 	.word	0x3fc24924
 8009640:	5555550d 	.word	0x5555550d
 8009644:	3fd55555 	.word	0x3fd55555
 8009648:	2c6a6c2f 	.word	0x2c6a6c2f
 800964c:	bfa2b444 	.word	0xbfa2b444
 8009650:	52defd9a 	.word	0x52defd9a
 8009654:	3fadde2d 	.word	0x3fadde2d
 8009658:	af749a6d 	.word	0xaf749a6d
 800965c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009660:	fe231671 	.word	0xfe231671
 8009664:	3fbc71c6 	.word	0x3fbc71c6
 8009668:	9998ebc4 	.word	0x9998ebc4
 800966c:	3fc99999 	.word	0x3fc99999
 8009670:	54442d18 	.word	0x54442d18
 8009674:	bff921fb 	.word	0xbff921fb
 8009678:	440fffff 	.word	0x440fffff
 800967c:	7ff00000 	.word	0x7ff00000
 8009680:	3fdbffff 	.word	0x3fdbffff
 8009684:	3ff00000 	.word	0x3ff00000
 8009688:	3ff2ffff 	.word	0x3ff2ffff
 800968c:	40038000 	.word	0x40038000
 8009690:	3ff80000 	.word	0x3ff80000
 8009694:	bff00000 	.word	0xbff00000
 8009698:	0800c610 	.word	0x0800c610
 800969c:	0800c630 	.word	0x0800c630

080096a0 <cos>:
 80096a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096a2:	ec53 2b10 	vmov	r2, r3, d0
 80096a6:	4826      	ldr	r0, [pc, #152]	@ (8009740 <cos+0xa0>)
 80096a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80096ac:	4281      	cmp	r1, r0
 80096ae:	d806      	bhi.n	80096be <cos+0x1e>
 80096b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009738 <cos+0x98>
 80096b4:	b005      	add	sp, #20
 80096b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ba:	f000 b8cd 	b.w	8009858 <__kernel_cos>
 80096be:	4821      	ldr	r0, [pc, #132]	@ (8009744 <cos+0xa4>)
 80096c0:	4281      	cmp	r1, r0
 80096c2:	d908      	bls.n	80096d6 <cos+0x36>
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	f7f6 fdfe 	bl	80002c8 <__aeabi_dsub>
 80096cc:	ec41 0b10 	vmov	d0, r0, r1
 80096d0:	b005      	add	sp, #20
 80096d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80096d6:	4668      	mov	r0, sp
 80096d8:	f000 fc9e 	bl	800a018 <__ieee754_rem_pio2>
 80096dc:	f000 0003 	and.w	r0, r0, #3
 80096e0:	2801      	cmp	r0, #1
 80096e2:	d00b      	beq.n	80096fc <cos+0x5c>
 80096e4:	2802      	cmp	r0, #2
 80096e6:	d015      	beq.n	8009714 <cos+0x74>
 80096e8:	b9d8      	cbnz	r0, 8009722 <cos+0x82>
 80096ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096ee:	ed9d 0b00 	vldr	d0, [sp]
 80096f2:	f000 f8b1 	bl	8009858 <__kernel_cos>
 80096f6:	ec51 0b10 	vmov	r0, r1, d0
 80096fa:	e7e7      	b.n	80096cc <cos+0x2c>
 80096fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009700:	ed9d 0b00 	vldr	d0, [sp]
 8009704:	f000 f970 	bl	80099e8 <__kernel_sin>
 8009708:	ec53 2b10 	vmov	r2, r3, d0
 800970c:	4610      	mov	r0, r2
 800970e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009712:	e7db      	b.n	80096cc <cos+0x2c>
 8009714:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009718:	ed9d 0b00 	vldr	d0, [sp]
 800971c:	f000 f89c 	bl	8009858 <__kernel_cos>
 8009720:	e7f2      	b.n	8009708 <cos+0x68>
 8009722:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009726:	ed9d 0b00 	vldr	d0, [sp]
 800972a:	2001      	movs	r0, #1
 800972c:	f000 f95c 	bl	80099e8 <__kernel_sin>
 8009730:	e7e1      	b.n	80096f6 <cos+0x56>
 8009732:	bf00      	nop
 8009734:	f3af 8000 	nop.w
	...
 8009740:	3fe921fb 	.word	0x3fe921fb
 8009744:	7fefffff 	.word	0x7fefffff

08009748 <fabs>:
 8009748:	ec51 0b10 	vmov	r0, r1, d0
 800974c:	4602      	mov	r2, r0
 800974e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009752:	ec43 2b10 	vmov	d0, r2, r3
 8009756:	4770      	bx	lr

08009758 <sin>:
 8009758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800975a:	ec53 2b10 	vmov	r2, r3, d0
 800975e:	4826      	ldr	r0, [pc, #152]	@ (80097f8 <sin+0xa0>)
 8009760:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009764:	4281      	cmp	r1, r0
 8009766:	d807      	bhi.n	8009778 <sin+0x20>
 8009768:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80097f0 <sin+0x98>
 800976c:	2000      	movs	r0, #0
 800976e:	b005      	add	sp, #20
 8009770:	f85d eb04 	ldr.w	lr, [sp], #4
 8009774:	f000 b938 	b.w	80099e8 <__kernel_sin>
 8009778:	4820      	ldr	r0, [pc, #128]	@ (80097fc <sin+0xa4>)
 800977a:	4281      	cmp	r1, r0
 800977c:	d908      	bls.n	8009790 <sin+0x38>
 800977e:	4610      	mov	r0, r2
 8009780:	4619      	mov	r1, r3
 8009782:	f7f6 fda1 	bl	80002c8 <__aeabi_dsub>
 8009786:	ec41 0b10 	vmov	d0, r0, r1
 800978a:	b005      	add	sp, #20
 800978c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009790:	4668      	mov	r0, sp
 8009792:	f000 fc41 	bl	800a018 <__ieee754_rem_pio2>
 8009796:	f000 0003 	and.w	r0, r0, #3
 800979a:	2801      	cmp	r0, #1
 800979c:	d00c      	beq.n	80097b8 <sin+0x60>
 800979e:	2802      	cmp	r0, #2
 80097a0:	d011      	beq.n	80097c6 <sin+0x6e>
 80097a2:	b9e8      	cbnz	r0, 80097e0 <sin+0x88>
 80097a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097a8:	ed9d 0b00 	vldr	d0, [sp]
 80097ac:	2001      	movs	r0, #1
 80097ae:	f000 f91b 	bl	80099e8 <__kernel_sin>
 80097b2:	ec51 0b10 	vmov	r0, r1, d0
 80097b6:	e7e6      	b.n	8009786 <sin+0x2e>
 80097b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097bc:	ed9d 0b00 	vldr	d0, [sp]
 80097c0:	f000 f84a 	bl	8009858 <__kernel_cos>
 80097c4:	e7f5      	b.n	80097b2 <sin+0x5a>
 80097c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097ca:	ed9d 0b00 	vldr	d0, [sp]
 80097ce:	2001      	movs	r0, #1
 80097d0:	f000 f90a 	bl	80099e8 <__kernel_sin>
 80097d4:	ec53 2b10 	vmov	r2, r3, d0
 80097d8:	4610      	mov	r0, r2
 80097da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80097de:	e7d2      	b.n	8009786 <sin+0x2e>
 80097e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097e4:	ed9d 0b00 	vldr	d0, [sp]
 80097e8:	f000 f836 	bl	8009858 <__kernel_cos>
 80097ec:	e7f2      	b.n	80097d4 <sin+0x7c>
 80097ee:	bf00      	nop
	...
 80097f8:	3fe921fb 	.word	0x3fe921fb
 80097fc:	7fefffff 	.word	0x7fefffff

08009800 <sqrtf>:
 8009800:	b508      	push	{r3, lr}
 8009802:	ed2d 8b02 	vpush	{d8}
 8009806:	eeb0 8a40 	vmov.f32	s16, s0
 800980a:	f000 f821 	bl	8009850 <__ieee754_sqrtf>
 800980e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009816:	d60c      	bvs.n	8009832 <sqrtf+0x32>
 8009818:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009838 <sqrtf+0x38>
 800981c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009824:	d505      	bpl.n	8009832 <sqrtf+0x32>
 8009826:	f001 fc39 	bl	800b09c <__errno>
 800982a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800982e:	2321      	movs	r3, #33	@ 0x21
 8009830:	6003      	str	r3, [r0, #0]
 8009832:	ecbd 8b02 	vpop	{d8}
 8009836:	bd08      	pop	{r3, pc}
	...

08009840 <nan>:
 8009840:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009848 <nan+0x8>
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	00000000 	.word	0x00000000
 800984c:	7ff80000 	.word	0x7ff80000

08009850 <__ieee754_sqrtf>:
 8009850:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009854:	4770      	bx	lr
	...

08009858 <__kernel_cos>:
 8009858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	ec57 6b10 	vmov	r6, r7, d0
 8009860:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009864:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009868:	ed8d 1b00 	vstr	d1, [sp]
 800986c:	d206      	bcs.n	800987c <__kernel_cos+0x24>
 800986e:	4630      	mov	r0, r6
 8009870:	4639      	mov	r1, r7
 8009872:	f7f7 f991 	bl	8000b98 <__aeabi_d2iz>
 8009876:	2800      	cmp	r0, #0
 8009878:	f000 8088 	beq.w	800998c <__kernel_cos+0x134>
 800987c:	4632      	mov	r2, r6
 800987e:	463b      	mov	r3, r7
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f6 fed8 	bl	8000638 <__aeabi_dmul>
 8009888:	4b51      	ldr	r3, [pc, #324]	@ (80099d0 <__kernel_cos+0x178>)
 800988a:	2200      	movs	r2, #0
 800988c:	4604      	mov	r4, r0
 800988e:	460d      	mov	r5, r1
 8009890:	f7f6 fed2 	bl	8000638 <__aeabi_dmul>
 8009894:	a340      	add	r3, pc, #256	@ (adr r3, 8009998 <__kernel_cos+0x140>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	4682      	mov	sl, r0
 800989c:	468b      	mov	fp, r1
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f6 fec9 	bl	8000638 <__aeabi_dmul>
 80098a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80099a0 <__kernel_cos+0x148>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 fd0e 	bl	80002cc <__adddf3>
 80098b0:	4622      	mov	r2, r4
 80098b2:	462b      	mov	r3, r5
 80098b4:	f7f6 fec0 	bl	8000638 <__aeabi_dmul>
 80098b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80099a8 <__kernel_cos+0x150>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f6 fd03 	bl	80002c8 <__aeabi_dsub>
 80098c2:	4622      	mov	r2, r4
 80098c4:	462b      	mov	r3, r5
 80098c6:	f7f6 feb7 	bl	8000638 <__aeabi_dmul>
 80098ca:	a339      	add	r3, pc, #228	@ (adr r3, 80099b0 <__kernel_cos+0x158>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f7f6 fcfc 	bl	80002cc <__adddf3>
 80098d4:	4622      	mov	r2, r4
 80098d6:	462b      	mov	r3, r5
 80098d8:	f7f6 feae 	bl	8000638 <__aeabi_dmul>
 80098dc:	a336      	add	r3, pc, #216	@ (adr r3, 80099b8 <__kernel_cos+0x160>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fcf1 	bl	80002c8 <__aeabi_dsub>
 80098e6:	4622      	mov	r2, r4
 80098e8:	462b      	mov	r3, r5
 80098ea:	f7f6 fea5 	bl	8000638 <__aeabi_dmul>
 80098ee:	a334      	add	r3, pc, #208	@ (adr r3, 80099c0 <__kernel_cos+0x168>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fcea 	bl	80002cc <__adddf3>
 80098f8:	4622      	mov	r2, r4
 80098fa:	462b      	mov	r3, r5
 80098fc:	f7f6 fe9c 	bl	8000638 <__aeabi_dmul>
 8009900:	4622      	mov	r2, r4
 8009902:	462b      	mov	r3, r5
 8009904:	f7f6 fe98 	bl	8000638 <__aeabi_dmul>
 8009908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800990c:	4604      	mov	r4, r0
 800990e:	460d      	mov	r5, r1
 8009910:	4630      	mov	r0, r6
 8009912:	4639      	mov	r1, r7
 8009914:	f7f6 fe90 	bl	8000638 <__aeabi_dmul>
 8009918:	460b      	mov	r3, r1
 800991a:	4602      	mov	r2, r0
 800991c:	4629      	mov	r1, r5
 800991e:	4620      	mov	r0, r4
 8009920:	f7f6 fcd2 	bl	80002c8 <__aeabi_dsub>
 8009924:	4b2b      	ldr	r3, [pc, #172]	@ (80099d4 <__kernel_cos+0x17c>)
 8009926:	4598      	cmp	r8, r3
 8009928:	4606      	mov	r6, r0
 800992a:	460f      	mov	r7, r1
 800992c:	d810      	bhi.n	8009950 <__kernel_cos+0xf8>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4650      	mov	r0, sl
 8009934:	4659      	mov	r1, fp
 8009936:	f7f6 fcc7 	bl	80002c8 <__aeabi_dsub>
 800993a:	460b      	mov	r3, r1
 800993c:	4926      	ldr	r1, [pc, #152]	@ (80099d8 <__kernel_cos+0x180>)
 800993e:	4602      	mov	r2, r0
 8009940:	2000      	movs	r0, #0
 8009942:	f7f6 fcc1 	bl	80002c8 <__aeabi_dsub>
 8009946:	ec41 0b10 	vmov	d0, r0, r1
 800994a:	b003      	add	sp, #12
 800994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009950:	4b22      	ldr	r3, [pc, #136]	@ (80099dc <__kernel_cos+0x184>)
 8009952:	4921      	ldr	r1, [pc, #132]	@ (80099d8 <__kernel_cos+0x180>)
 8009954:	4598      	cmp	r8, r3
 8009956:	bf8c      	ite	hi
 8009958:	4d21      	ldrhi	r5, [pc, #132]	@ (80099e0 <__kernel_cos+0x188>)
 800995a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800995e:	2400      	movs	r4, #0
 8009960:	4622      	mov	r2, r4
 8009962:	462b      	mov	r3, r5
 8009964:	2000      	movs	r0, #0
 8009966:	f7f6 fcaf 	bl	80002c8 <__aeabi_dsub>
 800996a:	4622      	mov	r2, r4
 800996c:	4680      	mov	r8, r0
 800996e:	4689      	mov	r9, r1
 8009970:	462b      	mov	r3, r5
 8009972:	4650      	mov	r0, sl
 8009974:	4659      	mov	r1, fp
 8009976:	f7f6 fca7 	bl	80002c8 <__aeabi_dsub>
 800997a:	4632      	mov	r2, r6
 800997c:	463b      	mov	r3, r7
 800997e:	f7f6 fca3 	bl	80002c8 <__aeabi_dsub>
 8009982:	4602      	mov	r2, r0
 8009984:	460b      	mov	r3, r1
 8009986:	4640      	mov	r0, r8
 8009988:	4649      	mov	r1, r9
 800998a:	e7da      	b.n	8009942 <__kernel_cos+0xea>
 800998c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80099c8 <__kernel_cos+0x170>
 8009990:	e7db      	b.n	800994a <__kernel_cos+0xf2>
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
 8009998:	be8838d4 	.word	0xbe8838d4
 800999c:	bda8fae9 	.word	0xbda8fae9
 80099a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80099a4:	3e21ee9e 	.word	0x3e21ee9e
 80099a8:	809c52ad 	.word	0x809c52ad
 80099ac:	3e927e4f 	.word	0x3e927e4f
 80099b0:	19cb1590 	.word	0x19cb1590
 80099b4:	3efa01a0 	.word	0x3efa01a0
 80099b8:	16c15177 	.word	0x16c15177
 80099bc:	3f56c16c 	.word	0x3f56c16c
 80099c0:	5555554c 	.word	0x5555554c
 80099c4:	3fa55555 	.word	0x3fa55555
 80099c8:	00000000 	.word	0x00000000
 80099cc:	3ff00000 	.word	0x3ff00000
 80099d0:	3fe00000 	.word	0x3fe00000
 80099d4:	3fd33332 	.word	0x3fd33332
 80099d8:	3ff00000 	.word	0x3ff00000
 80099dc:	3fe90000 	.word	0x3fe90000
 80099e0:	3fd20000 	.word	0x3fd20000
 80099e4:	00000000 	.word	0x00000000

080099e8 <__kernel_sin>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	ec55 4b10 	vmov	r4, r5, d0
 80099f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80099f4:	b085      	sub	sp, #20
 80099f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80099fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80099fe:	4680      	mov	r8, r0
 8009a00:	d205      	bcs.n	8009a0e <__kernel_sin+0x26>
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7f7 f8c7 	bl	8000b98 <__aeabi_d2iz>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d052      	beq.n	8009ab4 <__kernel_sin+0xcc>
 8009a0e:	4622      	mov	r2, r4
 8009a10:	462b      	mov	r3, r5
 8009a12:	4620      	mov	r0, r4
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fe0f 	bl	8000638 <__aeabi_dmul>
 8009a1a:	4682      	mov	sl, r0
 8009a1c:	468b      	mov	fp, r1
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	4620      	mov	r0, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	f7f6 fe07 	bl	8000638 <__aeabi_dmul>
 8009a2a:	a342      	add	r3, pc, #264	@ (adr r3, 8009b34 <__kernel_sin+0x14c>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	e9cd 0100 	strd	r0, r1, [sp]
 8009a34:	4650      	mov	r0, sl
 8009a36:	4659      	mov	r1, fp
 8009a38:	f7f6 fdfe 	bl	8000638 <__aeabi_dmul>
 8009a3c:	a33f      	add	r3, pc, #252	@ (adr r3, 8009b3c <__kernel_sin+0x154>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f7f6 fc41 	bl	80002c8 <__aeabi_dsub>
 8009a46:	4652      	mov	r2, sl
 8009a48:	465b      	mov	r3, fp
 8009a4a:	f7f6 fdf5 	bl	8000638 <__aeabi_dmul>
 8009a4e:	a33d      	add	r3, pc, #244	@ (adr r3, 8009b44 <__kernel_sin+0x15c>)
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	f7f6 fc3a 	bl	80002cc <__adddf3>
 8009a58:	4652      	mov	r2, sl
 8009a5a:	465b      	mov	r3, fp
 8009a5c:	f7f6 fdec 	bl	8000638 <__aeabi_dmul>
 8009a60:	a33a      	add	r3, pc, #232	@ (adr r3, 8009b4c <__kernel_sin+0x164>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f7f6 fc2f 	bl	80002c8 <__aeabi_dsub>
 8009a6a:	4652      	mov	r2, sl
 8009a6c:	465b      	mov	r3, fp
 8009a6e:	f7f6 fde3 	bl	8000638 <__aeabi_dmul>
 8009a72:	a338      	add	r3, pc, #224	@ (adr r3, 8009b54 <__kernel_sin+0x16c>)
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	f7f6 fc28 	bl	80002cc <__adddf3>
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	f1b8 0f00 	cmp.w	r8, #0
 8009a84:	d11b      	bne.n	8009abe <__kernel_sin+0xd6>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	4659      	mov	r1, fp
 8009a8e:	f7f6 fdd3 	bl	8000638 <__aeabi_dmul>
 8009a92:	a325      	add	r3, pc, #148	@ (adr r3, 8009b28 <__kernel_sin+0x140>)
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f7f6 fc16 	bl	80002c8 <__aeabi_dsub>
 8009a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa0:	f7f6 fdca 	bl	8000638 <__aeabi_dmul>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f6 fc0e 	bl	80002cc <__adddf3>
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	ec45 4b10 	vmov	d0, r4, r5
 8009ab8:	b005      	add	sp, #20
 8009aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8009b30 <__kernel_sin+0x148>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f7f6 fdb7 	bl	8000638 <__aeabi_dmul>
 8009aca:	4632      	mov	r2, r6
 8009acc:	4680      	mov	r8, r0
 8009ace:	4689      	mov	r9, r1
 8009ad0:	463b      	mov	r3, r7
 8009ad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ad6:	f7f6 fdaf 	bl	8000638 <__aeabi_dmul>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4640      	mov	r0, r8
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	f7f6 fbf1 	bl	80002c8 <__aeabi_dsub>
 8009ae6:	4652      	mov	r2, sl
 8009ae8:	465b      	mov	r3, fp
 8009aea:	f7f6 fda5 	bl	8000638 <__aeabi_dmul>
 8009aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009af2:	f7f6 fbe9 	bl	80002c8 <__aeabi_dsub>
 8009af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b28 <__kernel_sin+0x140>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b04:	f7f6 fd98 	bl	8000638 <__aeabi_dmul>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	4639      	mov	r1, r7
 8009b10:	f7f6 fbdc 	bl	80002cc <__adddf3>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 fbd4 	bl	80002c8 <__aeabi_dsub>
 8009b20:	e7c6      	b.n	8009ab0 <__kernel_sin+0xc8>
 8009b22:	bf00      	nop
 8009b24:	f3af 8000 	nop.w
 8009b28:	55555549 	.word	0x55555549
 8009b2c:	3fc55555 	.word	0x3fc55555
 8009b30:	3fe00000 	.word	0x3fe00000
 8009b34:	5acfd57c 	.word	0x5acfd57c
 8009b38:	3de5d93a 	.word	0x3de5d93a
 8009b3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009b40:	3e5ae5e6 	.word	0x3e5ae5e6
 8009b44:	57b1fe7d 	.word	0x57b1fe7d
 8009b48:	3ec71de3 	.word	0x3ec71de3
 8009b4c:	19c161d5 	.word	0x19c161d5
 8009b50:	3f2a01a0 	.word	0x3f2a01a0
 8009b54:	1110f8a6 	.word	0x1110f8a6
 8009b58:	3f811111 	.word	0x3f811111
 8009b5c:	00000000 	.word	0x00000000

08009b60 <__ieee754_acos>:
 8009b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	ec55 4b10 	vmov	r4, r5, d0
 8009b68:	49b7      	ldr	r1, [pc, #732]	@ (8009e48 <__ieee754_acos+0x2e8>)
 8009b6a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009b6e:	428b      	cmp	r3, r1
 8009b70:	d919      	bls.n	8009ba6 <__ieee754_acos+0x46>
 8009b72:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8009b76:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009b7a:	4323      	orrs	r3, r4
 8009b7c:	d106      	bne.n	8009b8c <__ieee754_acos+0x2c>
 8009b7e:	2d00      	cmp	r5, #0
 8009b80:	f340 8210 	ble.w	8009fa4 <__ieee754_acos+0x444>
 8009b84:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8009dd8 <__ieee754_acos+0x278>
 8009b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	462b      	mov	r3, r5
 8009b90:	4620      	mov	r0, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 fb98 	bl	80002c8 <__aeabi_dsub>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	f7f6 fe76 	bl	800088c <__aeabi_ddiv>
 8009ba0:	ec41 0b10 	vmov	d0, r0, r1
 8009ba4:	e7f0      	b.n	8009b88 <__ieee754_acos+0x28>
 8009ba6:	49a9      	ldr	r1, [pc, #676]	@ (8009e4c <__ieee754_acos+0x2ec>)
 8009ba8:	428b      	cmp	r3, r1
 8009baa:	f200 8085 	bhi.w	8009cb8 <__ieee754_acos+0x158>
 8009bae:	4aa8      	ldr	r2, [pc, #672]	@ (8009e50 <__ieee754_acos+0x2f0>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	f240 81fa 	bls.w	8009faa <__ieee754_acos+0x44a>
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	462b      	mov	r3, r5
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f7f6 fd3b 	bl	8000638 <__aeabi_dmul>
 8009bc2:	a387      	add	r3, pc, #540	@ (adr r3, 8009de0 <__ieee754_acos+0x280>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	4606      	mov	r6, r0
 8009bca:	460f      	mov	r7, r1
 8009bcc:	f7f6 fd34 	bl	8000638 <__aeabi_dmul>
 8009bd0:	a385      	add	r3, pc, #532	@ (adr r3, 8009de8 <__ieee754_acos+0x288>)
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fb79 	bl	80002cc <__adddf3>
 8009bda:	4632      	mov	r2, r6
 8009bdc:	463b      	mov	r3, r7
 8009bde:	f7f6 fd2b 	bl	8000638 <__aeabi_dmul>
 8009be2:	a383      	add	r3, pc, #524	@ (adr r3, 8009df0 <__ieee754_acos+0x290>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 fb6e 	bl	80002c8 <__aeabi_dsub>
 8009bec:	4632      	mov	r2, r6
 8009bee:	463b      	mov	r3, r7
 8009bf0:	f7f6 fd22 	bl	8000638 <__aeabi_dmul>
 8009bf4:	a380      	add	r3, pc, #512	@ (adr r3, 8009df8 <__ieee754_acos+0x298>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f7f6 fb67 	bl	80002cc <__adddf3>
 8009bfe:	4632      	mov	r2, r6
 8009c00:	463b      	mov	r3, r7
 8009c02:	f7f6 fd19 	bl	8000638 <__aeabi_dmul>
 8009c06:	a37e      	add	r3, pc, #504	@ (adr r3, 8009e00 <__ieee754_acos+0x2a0>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 fb5c 	bl	80002c8 <__aeabi_dsub>
 8009c10:	4632      	mov	r2, r6
 8009c12:	463b      	mov	r3, r7
 8009c14:	f7f6 fd10 	bl	8000638 <__aeabi_dmul>
 8009c18:	a37b      	add	r3, pc, #492	@ (adr r3, 8009e08 <__ieee754_acos+0x2a8>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fb55 	bl	80002cc <__adddf3>
 8009c22:	4632      	mov	r2, r6
 8009c24:	463b      	mov	r3, r7
 8009c26:	f7f6 fd07 	bl	8000638 <__aeabi_dmul>
 8009c2a:	a379      	add	r3, pc, #484	@ (adr r3, 8009e10 <__ieee754_acos+0x2b0>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	4680      	mov	r8, r0
 8009c32:	4689      	mov	r9, r1
 8009c34:	4630      	mov	r0, r6
 8009c36:	4639      	mov	r1, r7
 8009c38:	f7f6 fcfe 	bl	8000638 <__aeabi_dmul>
 8009c3c:	a376      	add	r3, pc, #472	@ (adr r3, 8009e18 <__ieee754_acos+0x2b8>)
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	f7f6 fb41 	bl	80002c8 <__aeabi_dsub>
 8009c46:	4632      	mov	r2, r6
 8009c48:	463b      	mov	r3, r7
 8009c4a:	f7f6 fcf5 	bl	8000638 <__aeabi_dmul>
 8009c4e:	a374      	add	r3, pc, #464	@ (adr r3, 8009e20 <__ieee754_acos+0x2c0>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f7f6 fb3a 	bl	80002cc <__adddf3>
 8009c58:	4632      	mov	r2, r6
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	f7f6 fcec 	bl	8000638 <__aeabi_dmul>
 8009c60:	a371      	add	r3, pc, #452	@ (adr r3, 8009e28 <__ieee754_acos+0x2c8>)
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	f7f6 fb2f 	bl	80002c8 <__aeabi_dsub>
 8009c6a:	4632      	mov	r2, r6
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	f7f6 fce3 	bl	8000638 <__aeabi_dmul>
 8009c72:	4b78      	ldr	r3, [pc, #480]	@ (8009e54 <__ieee754_acos+0x2f4>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	f7f6 fb29 	bl	80002cc <__adddf3>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4640      	mov	r0, r8
 8009c80:	4649      	mov	r1, r9
 8009c82:	f7f6 fe03 	bl	800088c <__aeabi_ddiv>
 8009c86:	4622      	mov	r2, r4
 8009c88:	462b      	mov	r3, r5
 8009c8a:	f7f6 fcd5 	bl	8000638 <__aeabi_dmul>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	a167      	add	r1, pc, #412	@ (adr r1, 8009e30 <__ieee754_acos+0x2d0>)
 8009c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c98:	f7f6 fb16 	bl	80002c8 <__aeabi_dsub>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	f7f6 fb10 	bl	80002c8 <__aeabi_dsub>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	a162      	add	r1, pc, #392	@ (adr r1, 8009e38 <__ieee754_acos+0x2d8>)
 8009cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cb2:	f7f6 fb09 	bl	80002c8 <__aeabi_dsub>
 8009cb6:	e773      	b.n	8009ba0 <__ieee754_acos+0x40>
 8009cb8:	2d00      	cmp	r5, #0
 8009cba:	f280 80cf 	bge.w	8009e5c <__ieee754_acos+0x2fc>
 8009cbe:	4b65      	ldr	r3, [pc, #404]	@ (8009e54 <__ieee754_acos+0x2f4>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	f7f6 fb01 	bl	80002cc <__adddf3>
 8009cca:	4b63      	ldr	r3, [pc, #396]	@ (8009e58 <__ieee754_acos+0x2f8>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f7f6 fcb3 	bl	8000638 <__aeabi_dmul>
 8009cd2:	a343      	add	r3, pc, #268	@ (adr r3, 8009de0 <__ieee754_acos+0x280>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	4604      	mov	r4, r0
 8009cda:	460d      	mov	r5, r1
 8009cdc:	f7f6 fcac 	bl	8000638 <__aeabi_dmul>
 8009ce0:	a341      	add	r3, pc, #260	@ (adr r3, 8009de8 <__ieee754_acos+0x288>)
 8009ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce6:	f7f6 faf1 	bl	80002cc <__adddf3>
 8009cea:	4622      	mov	r2, r4
 8009cec:	462b      	mov	r3, r5
 8009cee:	f7f6 fca3 	bl	8000638 <__aeabi_dmul>
 8009cf2:	a33f      	add	r3, pc, #252	@ (adr r3, 8009df0 <__ieee754_acos+0x290>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 fae6 	bl	80002c8 <__aeabi_dsub>
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	462b      	mov	r3, r5
 8009d00:	f7f6 fc9a 	bl	8000638 <__aeabi_dmul>
 8009d04:	a33c      	add	r3, pc, #240	@ (adr r3, 8009df8 <__ieee754_acos+0x298>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	f7f6 fadf 	bl	80002cc <__adddf3>
 8009d0e:	4622      	mov	r2, r4
 8009d10:	462b      	mov	r3, r5
 8009d12:	f7f6 fc91 	bl	8000638 <__aeabi_dmul>
 8009d16:	a33a      	add	r3, pc, #232	@ (adr r3, 8009e00 <__ieee754_acos+0x2a0>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	f7f6 fad4 	bl	80002c8 <__aeabi_dsub>
 8009d20:	4622      	mov	r2, r4
 8009d22:	462b      	mov	r3, r5
 8009d24:	f7f6 fc88 	bl	8000638 <__aeabi_dmul>
 8009d28:	a337      	add	r3, pc, #220	@ (adr r3, 8009e08 <__ieee754_acos+0x2a8>)
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f7f6 facd 	bl	80002cc <__adddf3>
 8009d32:	4622      	mov	r2, r4
 8009d34:	462b      	mov	r3, r5
 8009d36:	f7f6 fc7f 	bl	8000638 <__aeabi_dmul>
 8009d3a:	a335      	add	r3, pc, #212	@ (adr r3, 8009e10 <__ieee754_acos+0x2b0>)
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	4606      	mov	r6, r0
 8009d42:	460f      	mov	r7, r1
 8009d44:	4620      	mov	r0, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7f6 fc76 	bl	8000638 <__aeabi_dmul>
 8009d4c:	a332      	add	r3, pc, #200	@ (adr r3, 8009e18 <__ieee754_acos+0x2b8>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fab9 	bl	80002c8 <__aeabi_dsub>
 8009d56:	4622      	mov	r2, r4
 8009d58:	462b      	mov	r3, r5
 8009d5a:	f7f6 fc6d 	bl	8000638 <__aeabi_dmul>
 8009d5e:	a330      	add	r3, pc, #192	@ (adr r3, 8009e20 <__ieee754_acos+0x2c0>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fab2 	bl	80002cc <__adddf3>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	462b      	mov	r3, r5
 8009d6c:	f7f6 fc64 	bl	8000638 <__aeabi_dmul>
 8009d70:	a32d      	add	r3, pc, #180	@ (adr r3, 8009e28 <__ieee754_acos+0x2c8>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 faa7 	bl	80002c8 <__aeabi_dsub>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	462b      	mov	r3, r5
 8009d7e:	f7f6 fc5b 	bl	8000638 <__aeabi_dmul>
 8009d82:	4b34      	ldr	r3, [pc, #208]	@ (8009e54 <__ieee754_acos+0x2f4>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	f7f6 faa1 	bl	80002cc <__adddf3>
 8009d8a:	ec45 4b10 	vmov	d0, r4, r5
 8009d8e:	4680      	mov	r8, r0
 8009d90:	4689      	mov	r9, r1
 8009d92:	f000 fb3d 	bl	800a410 <__ieee754_sqrt>
 8009d96:	ec55 4b10 	vmov	r4, r5, d0
 8009d9a:	4642      	mov	r2, r8
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	f7f6 fd73 	bl	800088c <__aeabi_ddiv>
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	f7f6 fc45 	bl	8000638 <__aeabi_dmul>
 8009dae:	a320      	add	r3, pc, #128	@ (adr r3, 8009e30 <__ieee754_acos+0x2d0>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f7f6 fa88 	bl	80002c8 <__aeabi_dsub>
 8009db8:	4622      	mov	r2, r4
 8009dba:	462b      	mov	r3, r5
 8009dbc:	f7f6 fa86 	bl	80002cc <__adddf3>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	f7f6 fa82 	bl	80002cc <__adddf3>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	a11c      	add	r1, pc, #112	@ (adr r1, 8009e40 <__ieee754_acos+0x2e0>)
 8009dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dd2:	e76e      	b.n	8009cb2 <__ieee754_acos+0x152>
 8009dd4:	f3af 8000 	nop.w
	...
 8009de0:	0dfdf709 	.word	0x0dfdf709
 8009de4:	3f023de1 	.word	0x3f023de1
 8009de8:	7501b288 	.word	0x7501b288
 8009dec:	3f49efe0 	.word	0x3f49efe0
 8009df0:	b5688f3b 	.word	0xb5688f3b
 8009df4:	3fa48228 	.word	0x3fa48228
 8009df8:	0e884455 	.word	0x0e884455
 8009dfc:	3fc9c155 	.word	0x3fc9c155
 8009e00:	03eb6f7d 	.word	0x03eb6f7d
 8009e04:	3fd4d612 	.word	0x3fd4d612
 8009e08:	55555555 	.word	0x55555555
 8009e0c:	3fc55555 	.word	0x3fc55555
 8009e10:	b12e9282 	.word	0xb12e9282
 8009e14:	3fb3b8c5 	.word	0x3fb3b8c5
 8009e18:	1b8d0159 	.word	0x1b8d0159
 8009e1c:	3fe6066c 	.word	0x3fe6066c
 8009e20:	9c598ac8 	.word	0x9c598ac8
 8009e24:	40002ae5 	.word	0x40002ae5
 8009e28:	1c8a2d4b 	.word	0x1c8a2d4b
 8009e2c:	40033a27 	.word	0x40033a27
 8009e30:	33145c07 	.word	0x33145c07
 8009e34:	3c91a626 	.word	0x3c91a626
 8009e38:	54442d18 	.word	0x54442d18
 8009e3c:	3ff921fb 	.word	0x3ff921fb
 8009e40:	54442d18 	.word	0x54442d18
 8009e44:	400921fb 	.word	0x400921fb
 8009e48:	3fefffff 	.word	0x3fefffff
 8009e4c:	3fdfffff 	.word	0x3fdfffff
 8009e50:	3c600000 	.word	0x3c600000
 8009e54:	3ff00000 	.word	0x3ff00000
 8009e58:	3fe00000 	.word	0x3fe00000
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	462b      	mov	r3, r5
 8009e60:	496b      	ldr	r1, [pc, #428]	@ (800a010 <__ieee754_acos+0x4b0>)
 8009e62:	2000      	movs	r0, #0
 8009e64:	f7f6 fa30 	bl	80002c8 <__aeabi_dsub>
 8009e68:	4b6a      	ldr	r3, [pc, #424]	@ (800a014 <__ieee754_acos+0x4b4>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f7f6 fbe4 	bl	8000638 <__aeabi_dmul>
 8009e70:	4604      	mov	r4, r0
 8009e72:	460d      	mov	r5, r1
 8009e74:	ec45 4b10 	vmov	d0, r4, r5
 8009e78:	f000 faca 	bl	800a410 <__ieee754_sqrt>
 8009e7c:	a34c      	add	r3, pc, #304	@ (adr r3, 8009fb0 <__ieee754_acos+0x450>)
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	4620      	mov	r0, r4
 8009e84:	4629      	mov	r1, r5
 8009e86:	ec59 8b10 	vmov	r8, r9, d0
 8009e8a:	f7f6 fbd5 	bl	8000638 <__aeabi_dmul>
 8009e8e:	a34a      	add	r3, pc, #296	@ (adr r3, 8009fb8 <__ieee754_acos+0x458>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f7f6 fa1a 	bl	80002cc <__adddf3>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	f7f6 fbcc 	bl	8000638 <__aeabi_dmul>
 8009ea0:	a347      	add	r3, pc, #284	@ (adr r3, 8009fc0 <__ieee754_acos+0x460>)
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f7f6 fa0f 	bl	80002c8 <__aeabi_dsub>
 8009eaa:	4622      	mov	r2, r4
 8009eac:	462b      	mov	r3, r5
 8009eae:	f7f6 fbc3 	bl	8000638 <__aeabi_dmul>
 8009eb2:	a345      	add	r3, pc, #276	@ (adr r3, 8009fc8 <__ieee754_acos+0x468>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fa08 	bl	80002cc <__adddf3>
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	f7f6 fbba 	bl	8000638 <__aeabi_dmul>
 8009ec4:	a342      	add	r3, pc, #264	@ (adr r3, 8009fd0 <__ieee754_acos+0x470>)
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	f7f6 f9fd 	bl	80002c8 <__aeabi_dsub>
 8009ece:	4622      	mov	r2, r4
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	f7f6 fbb1 	bl	8000638 <__aeabi_dmul>
 8009ed6:	a340      	add	r3, pc, #256	@ (adr r3, 8009fd8 <__ieee754_acos+0x478>)
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	f7f6 f9f6 	bl	80002cc <__adddf3>
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	462b      	mov	r3, r5
 8009ee4:	f7f6 fba8 	bl	8000638 <__aeabi_dmul>
 8009ee8:	a33d      	add	r3, pc, #244	@ (adr r3, 8009fe0 <__ieee754_acos+0x480>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	4682      	mov	sl, r0
 8009ef0:	468b      	mov	fp, r1
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	f7f6 fb9f 	bl	8000638 <__aeabi_dmul>
 8009efa:	a33b      	add	r3, pc, #236	@ (adr r3, 8009fe8 <__ieee754_acos+0x488>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 f9e2 	bl	80002c8 <__aeabi_dsub>
 8009f04:	4622      	mov	r2, r4
 8009f06:	462b      	mov	r3, r5
 8009f08:	f7f6 fb96 	bl	8000638 <__aeabi_dmul>
 8009f0c:	a338      	add	r3, pc, #224	@ (adr r3, 8009ff0 <__ieee754_acos+0x490>)
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	f7f6 f9db 	bl	80002cc <__adddf3>
 8009f16:	4622      	mov	r2, r4
 8009f18:	462b      	mov	r3, r5
 8009f1a:	f7f6 fb8d 	bl	8000638 <__aeabi_dmul>
 8009f1e:	a336      	add	r3, pc, #216	@ (adr r3, 8009ff8 <__ieee754_acos+0x498>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	f7f6 f9d0 	bl	80002c8 <__aeabi_dsub>
 8009f28:	4622      	mov	r2, r4
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	f7f6 fb84 	bl	8000638 <__aeabi_dmul>
 8009f30:	4b37      	ldr	r3, [pc, #220]	@ (800a010 <__ieee754_acos+0x4b0>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	f7f6 f9ca 	bl	80002cc <__adddf3>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4650      	mov	r0, sl
 8009f3e:	4659      	mov	r1, fp
 8009f40:	f7f6 fca4 	bl	800088c <__aeabi_ddiv>
 8009f44:	4642      	mov	r2, r8
 8009f46:	464b      	mov	r3, r9
 8009f48:	f7f6 fb76 	bl	8000638 <__aeabi_dmul>
 8009f4c:	2600      	movs	r6, #0
 8009f4e:	4682      	mov	sl, r0
 8009f50:	468b      	mov	fp, r1
 8009f52:	4632      	mov	r2, r6
 8009f54:	464b      	mov	r3, r9
 8009f56:	4630      	mov	r0, r6
 8009f58:	4649      	mov	r1, r9
 8009f5a:	f7f6 fb6d 	bl	8000638 <__aeabi_dmul>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	f7f6 f9af 	bl	80002c8 <__aeabi_dsub>
 8009f6a:	4632      	mov	r2, r6
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	464b      	mov	r3, r9
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	f7f6 f9a9 	bl	80002cc <__adddf3>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4620      	mov	r0, r4
 8009f80:	4629      	mov	r1, r5
 8009f82:	f7f6 fc83 	bl	800088c <__aeabi_ddiv>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	f7f6 f99d 	bl	80002cc <__adddf3>
 8009f92:	4632      	mov	r2, r6
 8009f94:	464b      	mov	r3, r9
 8009f96:	f7f6 f999 	bl	80002cc <__adddf3>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	f7f6 f995 	bl	80002cc <__adddf3>
 8009fa2:	e5fd      	b.n	8009ba0 <__ieee754_acos+0x40>
 8009fa4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a000 <__ieee754_acos+0x4a0>
 8009fa8:	e5ee      	b.n	8009b88 <__ieee754_acos+0x28>
 8009faa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800a008 <__ieee754_acos+0x4a8>
 8009fae:	e5eb      	b.n	8009b88 <__ieee754_acos+0x28>
 8009fb0:	0dfdf709 	.word	0x0dfdf709
 8009fb4:	3f023de1 	.word	0x3f023de1
 8009fb8:	7501b288 	.word	0x7501b288
 8009fbc:	3f49efe0 	.word	0x3f49efe0
 8009fc0:	b5688f3b 	.word	0xb5688f3b
 8009fc4:	3fa48228 	.word	0x3fa48228
 8009fc8:	0e884455 	.word	0x0e884455
 8009fcc:	3fc9c155 	.word	0x3fc9c155
 8009fd0:	03eb6f7d 	.word	0x03eb6f7d
 8009fd4:	3fd4d612 	.word	0x3fd4d612
 8009fd8:	55555555 	.word	0x55555555
 8009fdc:	3fc55555 	.word	0x3fc55555
 8009fe0:	b12e9282 	.word	0xb12e9282
 8009fe4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009fe8:	1b8d0159 	.word	0x1b8d0159
 8009fec:	3fe6066c 	.word	0x3fe6066c
 8009ff0:	9c598ac8 	.word	0x9c598ac8
 8009ff4:	40002ae5 	.word	0x40002ae5
 8009ff8:	1c8a2d4b 	.word	0x1c8a2d4b
 8009ffc:	40033a27 	.word	0x40033a27
 800a000:	54442d18 	.word	0x54442d18
 800a004:	400921fb 	.word	0x400921fb
 800a008:	54442d18 	.word	0x54442d18
 800a00c:	3ff921fb 	.word	0x3ff921fb
 800a010:	3ff00000 	.word	0x3ff00000
 800a014:	3fe00000 	.word	0x3fe00000

0800a018 <__ieee754_rem_pio2>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	ec57 6b10 	vmov	r6, r7, d0
 800a020:	4bc5      	ldr	r3, [pc, #788]	@ (800a338 <__ieee754_rem_pio2+0x320>)
 800a022:	b08d      	sub	sp, #52	@ 0x34
 800a024:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a028:	4598      	cmp	r8, r3
 800a02a:	4604      	mov	r4, r0
 800a02c:	9704      	str	r7, [sp, #16]
 800a02e:	d807      	bhi.n	800a040 <__ieee754_rem_pio2+0x28>
 800a030:	2200      	movs	r2, #0
 800a032:	2300      	movs	r3, #0
 800a034:	ed80 0b00 	vstr	d0, [r0]
 800a038:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a03c:	2500      	movs	r5, #0
 800a03e:	e028      	b.n	800a092 <__ieee754_rem_pio2+0x7a>
 800a040:	4bbe      	ldr	r3, [pc, #760]	@ (800a33c <__ieee754_rem_pio2+0x324>)
 800a042:	4598      	cmp	r8, r3
 800a044:	d878      	bhi.n	800a138 <__ieee754_rem_pio2+0x120>
 800a046:	9b04      	ldr	r3, [sp, #16]
 800a048:	4dbd      	ldr	r5, [pc, #756]	@ (800a340 <__ieee754_rem_pio2+0x328>)
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	4630      	mov	r0, r6
 800a04e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a300 <__ieee754_rem_pio2+0x2e8>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	4639      	mov	r1, r7
 800a056:	dd38      	ble.n	800a0ca <__ieee754_rem_pio2+0xb2>
 800a058:	f7f6 f936 	bl	80002c8 <__aeabi_dsub>
 800a05c:	45a8      	cmp	r8, r5
 800a05e:	4606      	mov	r6, r0
 800a060:	460f      	mov	r7, r1
 800a062:	d01a      	beq.n	800a09a <__ieee754_rem_pio2+0x82>
 800a064:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a308 <__ieee754_rem_pio2+0x2f0>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	f7f6 f92d 	bl	80002c8 <__aeabi_dsub>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	4680      	mov	r8, r0
 800a074:	4689      	mov	r9, r1
 800a076:	4630      	mov	r0, r6
 800a078:	4639      	mov	r1, r7
 800a07a:	f7f6 f925 	bl	80002c8 <__aeabi_dsub>
 800a07e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a308 <__ieee754_rem_pio2+0x2f0>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f7f6 f920 	bl	80002c8 <__aeabi_dsub>
 800a088:	e9c4 8900 	strd	r8, r9, [r4]
 800a08c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a090:	2501      	movs	r5, #1
 800a092:	4628      	mov	r0, r5
 800a094:	b00d      	add	sp, #52	@ 0x34
 800a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09a:	a39d      	add	r3, pc, #628	@ (adr r3, 800a310 <__ieee754_rem_pio2+0x2f8>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f7f6 f912 	bl	80002c8 <__aeabi_dsub>
 800a0a4:	a39c      	add	r3, pc, #624	@ (adr r3, 800a318 <__ieee754_rem_pio2+0x300>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	f7f6 f90b 	bl	80002c8 <__aeabi_dsub>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	4689      	mov	r9, r1
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 f903 	bl	80002c8 <__aeabi_dsub>
 800a0c2:	a395      	add	r3, pc, #596	@ (adr r3, 800a318 <__ieee754_rem_pio2+0x300>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	e7dc      	b.n	800a084 <__ieee754_rem_pio2+0x6c>
 800a0ca:	f7f6 f8ff 	bl	80002cc <__adddf3>
 800a0ce:	45a8      	cmp	r8, r5
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	d018      	beq.n	800a108 <__ieee754_rem_pio2+0xf0>
 800a0d6:	a38c      	add	r3, pc, #560	@ (adr r3, 800a308 <__ieee754_rem_pio2+0x2f0>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 f8f6 	bl	80002cc <__adddf3>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	4689      	mov	r9, r1
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	f7f6 f8ec 	bl	80002c8 <__aeabi_dsub>
 800a0f0:	a385      	add	r3, pc, #532	@ (adr r3, 800a308 <__ieee754_rem_pio2+0x2f0>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 f8e9 	bl	80002cc <__adddf3>
 800a0fa:	f04f 35ff 	mov.w	r5, #4294967295
 800a0fe:	e9c4 8900 	strd	r8, r9, [r4]
 800a102:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a106:	e7c4      	b.n	800a092 <__ieee754_rem_pio2+0x7a>
 800a108:	a381      	add	r3, pc, #516	@ (adr r3, 800a310 <__ieee754_rem_pio2+0x2f8>)
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f7f6 f8dd 	bl	80002cc <__adddf3>
 800a112:	a381      	add	r3, pc, #516	@ (adr r3, 800a318 <__ieee754_rem_pio2+0x300>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	4606      	mov	r6, r0
 800a11a:	460f      	mov	r7, r1
 800a11c:	f7f6 f8d6 	bl	80002cc <__adddf3>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4680      	mov	r8, r0
 800a126:	4689      	mov	r9, r1
 800a128:	4630      	mov	r0, r6
 800a12a:	4639      	mov	r1, r7
 800a12c:	f7f6 f8cc 	bl	80002c8 <__aeabi_dsub>
 800a130:	a379      	add	r3, pc, #484	@ (adr r3, 800a318 <__ieee754_rem_pio2+0x300>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	e7de      	b.n	800a0f6 <__ieee754_rem_pio2+0xde>
 800a138:	4b82      	ldr	r3, [pc, #520]	@ (800a344 <__ieee754_rem_pio2+0x32c>)
 800a13a:	4598      	cmp	r8, r3
 800a13c:	f200 80d1 	bhi.w	800a2e2 <__ieee754_rem_pio2+0x2ca>
 800a140:	f7ff fb02 	bl	8009748 <fabs>
 800a144:	ec57 6b10 	vmov	r6, r7, d0
 800a148:	a375      	add	r3, pc, #468	@ (adr r3, 800a320 <__ieee754_rem_pio2+0x308>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 fa71 	bl	8000638 <__aeabi_dmul>
 800a156:	4b7c      	ldr	r3, [pc, #496]	@ (800a348 <__ieee754_rem_pio2+0x330>)
 800a158:	2200      	movs	r2, #0
 800a15a:	f7f6 f8b7 	bl	80002cc <__adddf3>
 800a15e:	f7f6 fd1b 	bl	8000b98 <__aeabi_d2iz>
 800a162:	4605      	mov	r5, r0
 800a164:	f7f6 f9fe 	bl	8000564 <__aeabi_i2d>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a170:	a363      	add	r3, pc, #396	@ (adr r3, 800a300 <__ieee754_rem_pio2+0x2e8>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	f7f6 fa5f 	bl	8000638 <__aeabi_dmul>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4630      	mov	r0, r6
 800a180:	4639      	mov	r1, r7
 800a182:	f7f6 f8a1 	bl	80002c8 <__aeabi_dsub>
 800a186:	a360      	add	r3, pc, #384	@ (adr r3, 800a308 <__ieee754_rem_pio2+0x2f0>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	4682      	mov	sl, r0
 800a18e:	468b      	mov	fp, r1
 800a190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a194:	f7f6 fa50 	bl	8000638 <__aeabi_dmul>
 800a198:	2d1f      	cmp	r5, #31
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	dc0c      	bgt.n	800a1ba <__ieee754_rem_pio2+0x1a2>
 800a1a0:	4b6a      	ldr	r3, [pc, #424]	@ (800a34c <__ieee754_rem_pio2+0x334>)
 800a1a2:	1e6a      	subs	r2, r5, #1
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	4543      	cmp	r3, r8
 800a1aa:	d006      	beq.n	800a1ba <__ieee754_rem_pio2+0x1a2>
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	463b      	mov	r3, r7
 800a1b0:	4650      	mov	r0, sl
 800a1b2:	4659      	mov	r1, fp
 800a1b4:	f7f6 f888 	bl	80002c8 <__aeabi_dsub>
 800a1b8:	e00e      	b.n	800a1d8 <__ieee754_rem_pio2+0x1c0>
 800a1ba:	463b      	mov	r3, r7
 800a1bc:	4632      	mov	r2, r6
 800a1be:	4650      	mov	r0, sl
 800a1c0:	4659      	mov	r1, fp
 800a1c2:	f7f6 f881 	bl	80002c8 <__aeabi_dsub>
 800a1c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a1ca:	9305      	str	r3, [sp, #20]
 800a1cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a1d0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a1d4:	2b10      	cmp	r3, #16
 800a1d6:	dc02      	bgt.n	800a1de <__ieee754_rem_pio2+0x1c6>
 800a1d8:	e9c4 0100 	strd	r0, r1, [r4]
 800a1dc:	e039      	b.n	800a252 <__ieee754_rem_pio2+0x23a>
 800a1de:	a34c      	add	r3, pc, #304	@ (adr r3, 800a310 <__ieee754_rem_pio2+0x2f8>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1e8:	f7f6 fa26 	bl	8000638 <__aeabi_dmul>
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	460f      	mov	r7, r1
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	4659      	mov	r1, fp
 800a1f8:	f7f6 f866 	bl	80002c8 <__aeabi_dsub>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4680      	mov	r8, r0
 800a202:	4689      	mov	r9, r1
 800a204:	4650      	mov	r0, sl
 800a206:	4659      	mov	r1, fp
 800a208:	f7f6 f85e 	bl	80002c8 <__aeabi_dsub>
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	f7f6 f85a 	bl	80002c8 <__aeabi_dsub>
 800a214:	a340      	add	r3, pc, #256	@ (adr r3, 800a318 <__ieee754_rem_pio2+0x300>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	4606      	mov	r6, r0
 800a21c:	460f      	mov	r7, r1
 800a21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a222:	f7f6 fa09 	bl	8000638 <__aeabi_dmul>
 800a226:	4632      	mov	r2, r6
 800a228:	463b      	mov	r3, r7
 800a22a:	f7f6 f84d 	bl	80002c8 <__aeabi_dsub>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4606      	mov	r6, r0
 800a234:	460f      	mov	r7, r1
 800a236:	4640      	mov	r0, r8
 800a238:	4649      	mov	r1, r9
 800a23a:	f7f6 f845 	bl	80002c8 <__aeabi_dsub>
 800a23e:	9a05      	ldr	r2, [sp, #20]
 800a240:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b31      	cmp	r3, #49	@ 0x31
 800a248:	dc20      	bgt.n	800a28c <__ieee754_rem_pio2+0x274>
 800a24a:	e9c4 0100 	strd	r0, r1, [r4]
 800a24e:	46c2      	mov	sl, r8
 800a250:	46cb      	mov	fp, r9
 800a252:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a256:	4650      	mov	r0, sl
 800a258:	4642      	mov	r2, r8
 800a25a:	464b      	mov	r3, r9
 800a25c:	4659      	mov	r1, fp
 800a25e:	f7f6 f833 	bl	80002c8 <__aeabi_dsub>
 800a262:	463b      	mov	r3, r7
 800a264:	4632      	mov	r2, r6
 800a266:	f7f6 f82f 	bl	80002c8 <__aeabi_dsub>
 800a26a:	9b04      	ldr	r3, [sp, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a272:	f6bf af0e 	bge.w	800a092 <__ieee754_rem_pio2+0x7a>
 800a276:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a27a:	6063      	str	r3, [r4, #4]
 800a27c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a280:	f8c4 8000 	str.w	r8, [r4]
 800a284:	60a0      	str	r0, [r4, #8]
 800a286:	60e3      	str	r3, [r4, #12]
 800a288:	426d      	negs	r5, r5
 800a28a:	e702      	b.n	800a092 <__ieee754_rem_pio2+0x7a>
 800a28c:	a326      	add	r3, pc, #152	@ (adr r3, 800a328 <__ieee754_rem_pio2+0x310>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a296:	f7f6 f9cf 	bl	8000638 <__aeabi_dmul>
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	f7f6 f80f 	bl	80002c8 <__aeabi_dsub>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4682      	mov	sl, r0
 800a2b0:	468b      	mov	fp, r1
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	f7f6 f807 	bl	80002c8 <__aeabi_dsub>
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	463b      	mov	r3, r7
 800a2be:	f7f6 f803 	bl	80002c8 <__aeabi_dsub>
 800a2c2:	a31b      	add	r3, pc, #108	@ (adr r3, 800a330 <__ieee754_rem_pio2+0x318>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	460f      	mov	r7, r1
 800a2cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2d0:	f7f6 f9b2 	bl	8000638 <__aeabi_dmul>
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	f7f5 fff6 	bl	80002c8 <__aeabi_dsub>
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	e764      	b.n	800a1ac <__ieee754_rem_pio2+0x194>
 800a2e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a350 <__ieee754_rem_pio2+0x338>)
 800a2e4:	4598      	cmp	r8, r3
 800a2e6:	d935      	bls.n	800a354 <__ieee754_rem_pio2+0x33c>
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	f7f5 ffea 	bl	80002c8 <__aeabi_dsub>
 800a2f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a2f8:	e9c4 0100 	strd	r0, r1, [r4]
 800a2fc:	e69e      	b.n	800a03c <__ieee754_rem_pio2+0x24>
 800a2fe:	bf00      	nop
 800a300:	54400000 	.word	0x54400000
 800a304:	3ff921fb 	.word	0x3ff921fb
 800a308:	1a626331 	.word	0x1a626331
 800a30c:	3dd0b461 	.word	0x3dd0b461
 800a310:	1a600000 	.word	0x1a600000
 800a314:	3dd0b461 	.word	0x3dd0b461
 800a318:	2e037073 	.word	0x2e037073
 800a31c:	3ba3198a 	.word	0x3ba3198a
 800a320:	6dc9c883 	.word	0x6dc9c883
 800a324:	3fe45f30 	.word	0x3fe45f30
 800a328:	2e000000 	.word	0x2e000000
 800a32c:	3ba3198a 	.word	0x3ba3198a
 800a330:	252049c1 	.word	0x252049c1
 800a334:	397b839a 	.word	0x397b839a
 800a338:	3fe921fb 	.word	0x3fe921fb
 800a33c:	4002d97b 	.word	0x4002d97b
 800a340:	3ff921fb 	.word	0x3ff921fb
 800a344:	413921fb 	.word	0x413921fb
 800a348:	3fe00000 	.word	0x3fe00000
 800a34c:	0800c650 	.word	0x0800c650
 800a350:	7fefffff 	.word	0x7fefffff
 800a354:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a358:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a35c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a360:	4630      	mov	r0, r6
 800a362:	460f      	mov	r7, r1
 800a364:	f7f6 fc18 	bl	8000b98 <__aeabi_d2iz>
 800a368:	f7f6 f8fc 	bl	8000564 <__aeabi_i2d>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4630      	mov	r0, r6
 800a372:	4639      	mov	r1, r7
 800a374:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a378:	f7f5 ffa6 	bl	80002c8 <__aeabi_dsub>
 800a37c:	4b22      	ldr	r3, [pc, #136]	@ (800a408 <__ieee754_rem_pio2+0x3f0>)
 800a37e:	2200      	movs	r2, #0
 800a380:	f7f6 f95a 	bl	8000638 <__aeabi_dmul>
 800a384:	460f      	mov	r7, r1
 800a386:	4606      	mov	r6, r0
 800a388:	f7f6 fc06 	bl	8000b98 <__aeabi_d2iz>
 800a38c:	f7f6 f8ea 	bl	8000564 <__aeabi_i2d>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4630      	mov	r0, r6
 800a396:	4639      	mov	r1, r7
 800a398:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a39c:	f7f5 ff94 	bl	80002c8 <__aeabi_dsub>
 800a3a0:	4b19      	ldr	r3, [pc, #100]	@ (800a408 <__ieee754_rem_pio2+0x3f0>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f7f6 f948 	bl	8000638 <__aeabi_dmul>
 800a3a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a3ac:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a3b0:	f04f 0803 	mov.w	r8, #3
 800a3b4:	2600      	movs	r6, #0
 800a3b6:	2700      	movs	r7, #0
 800a3b8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a3bc:	4632      	mov	r2, r6
 800a3be:	463b      	mov	r3, r7
 800a3c0:	46c2      	mov	sl, r8
 800a3c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3c6:	f7f6 fb9f 	bl	8000b08 <__aeabi_dcmpeq>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d1f4      	bne.n	800a3b8 <__ieee754_rem_pio2+0x3a0>
 800a3ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a40c <__ieee754_rem_pio2+0x3f4>)
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	462a      	mov	r2, r5
 800a3d8:	4653      	mov	r3, sl
 800a3da:	4621      	mov	r1, r4
 800a3dc:	a806      	add	r0, sp, #24
 800a3de:	f000 f8ef 	bl	800a5c0 <__kernel_rem_pio2>
 800a3e2:	9b04      	ldr	r3, [sp, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	f6bf ae53 	bge.w	800a092 <__ieee754_rem_pio2+0x7a>
 800a3ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a3f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3f4:	e9c4 2300 	strd	r2, r3, [r4]
 800a3f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a3fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a400:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a404:	e740      	b.n	800a288 <__ieee754_rem_pio2+0x270>
 800a406:	bf00      	nop
 800a408:	41700000 	.word	0x41700000
 800a40c:	0800c6d0 	.word	0x0800c6d0

0800a410 <__ieee754_sqrt>:
 800a410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	4a66      	ldr	r2, [pc, #408]	@ (800a5b0 <__ieee754_sqrt+0x1a0>)
 800a416:	ec55 4b10 	vmov	r4, r5, d0
 800a41a:	43aa      	bics	r2, r5
 800a41c:	462b      	mov	r3, r5
 800a41e:	4621      	mov	r1, r4
 800a420:	d110      	bne.n	800a444 <__ieee754_sqrt+0x34>
 800a422:	4622      	mov	r2, r4
 800a424:	4620      	mov	r0, r4
 800a426:	4629      	mov	r1, r5
 800a428:	f7f6 f906 	bl	8000638 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	f7f5 ff4a 	bl	80002cc <__adddf3>
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	ec45 4b10 	vmov	d0, r4, r5
 800a440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a444:	2d00      	cmp	r5, #0
 800a446:	dc0e      	bgt.n	800a466 <__ieee754_sqrt+0x56>
 800a448:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a44c:	4322      	orrs	r2, r4
 800a44e:	d0f5      	beq.n	800a43c <__ieee754_sqrt+0x2c>
 800a450:	b19d      	cbz	r5, 800a47a <__ieee754_sqrt+0x6a>
 800a452:	4622      	mov	r2, r4
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f5 ff36 	bl	80002c8 <__aeabi_dsub>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	f7f6 fa14 	bl	800088c <__aeabi_ddiv>
 800a464:	e7e8      	b.n	800a438 <__ieee754_sqrt+0x28>
 800a466:	152a      	asrs	r2, r5, #20
 800a468:	d115      	bne.n	800a496 <__ieee754_sqrt+0x86>
 800a46a:	2000      	movs	r0, #0
 800a46c:	e009      	b.n	800a482 <__ieee754_sqrt+0x72>
 800a46e:	0acb      	lsrs	r3, r1, #11
 800a470:	3a15      	subs	r2, #21
 800a472:	0549      	lsls	r1, r1, #21
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0fa      	beq.n	800a46e <__ieee754_sqrt+0x5e>
 800a478:	e7f7      	b.n	800a46a <__ieee754_sqrt+0x5a>
 800a47a:	462a      	mov	r2, r5
 800a47c:	e7fa      	b.n	800a474 <__ieee754_sqrt+0x64>
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	3001      	adds	r0, #1
 800a482:	02dc      	lsls	r4, r3, #11
 800a484:	d5fb      	bpl.n	800a47e <__ieee754_sqrt+0x6e>
 800a486:	1e44      	subs	r4, r0, #1
 800a488:	1b12      	subs	r2, r2, r4
 800a48a:	f1c0 0420 	rsb	r4, r0, #32
 800a48e:	fa21 f404 	lsr.w	r4, r1, r4
 800a492:	4323      	orrs	r3, r4
 800a494:	4081      	lsls	r1, r0
 800a496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a49a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a49e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4a2:	07d2      	lsls	r2, r2, #31
 800a4a4:	bf5c      	itt	pl
 800a4a6:	005b      	lslpl	r3, r3, #1
 800a4a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a4ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4b0:	bf58      	it	pl
 800a4b2:	0049      	lslpl	r1, r1, #1
 800a4b4:	2600      	movs	r6, #0
 800a4b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a4ba:	107f      	asrs	r7, r7, #1
 800a4bc:	0049      	lsls	r1, r1, #1
 800a4be:	2016      	movs	r0, #22
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a4c6:	1915      	adds	r5, r2, r4
 800a4c8:	429d      	cmp	r5, r3
 800a4ca:	bfde      	ittt	le
 800a4cc:	192a      	addle	r2, r5, r4
 800a4ce:	1b5b      	suble	r3, r3, r5
 800a4d0:	1936      	addle	r6, r6, r4
 800a4d2:	0fcd      	lsrs	r5, r1, #31
 800a4d4:	3801      	subs	r0, #1
 800a4d6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a4da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a4de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a4e2:	d1f0      	bne.n	800a4c6 <__ieee754_sqrt+0xb6>
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	2420      	movs	r4, #32
 800a4e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	eb0c 0e00 	add.w	lr, ip, r0
 800a4f2:	dc02      	bgt.n	800a4fa <__ieee754_sqrt+0xea>
 800a4f4:	d113      	bne.n	800a51e <__ieee754_sqrt+0x10e>
 800a4f6:	458e      	cmp	lr, r1
 800a4f8:	d811      	bhi.n	800a51e <__ieee754_sqrt+0x10e>
 800a4fa:	f1be 0f00 	cmp.w	lr, #0
 800a4fe:	eb0e 000c 	add.w	r0, lr, ip
 800a502:	da3f      	bge.n	800a584 <__ieee754_sqrt+0x174>
 800a504:	2800      	cmp	r0, #0
 800a506:	db3d      	blt.n	800a584 <__ieee754_sqrt+0x174>
 800a508:	f102 0801 	add.w	r8, r2, #1
 800a50c:	1a9b      	subs	r3, r3, r2
 800a50e:	458e      	cmp	lr, r1
 800a510:	bf88      	it	hi
 800a512:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a516:	eba1 010e 	sub.w	r1, r1, lr
 800a51a:	4465      	add	r5, ip
 800a51c:	4642      	mov	r2, r8
 800a51e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a522:	3c01      	subs	r4, #1
 800a524:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a528:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a52c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a530:	d1dc      	bne.n	800a4ec <__ieee754_sqrt+0xdc>
 800a532:	4319      	orrs	r1, r3
 800a534:	d01b      	beq.n	800a56e <__ieee754_sqrt+0x15e>
 800a536:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a5b4 <__ieee754_sqrt+0x1a4>
 800a53a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a5b8 <__ieee754_sqrt+0x1a8>
 800a53e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a542:	e9db 2300 	ldrd	r2, r3, [fp]
 800a546:	f7f5 febf 	bl	80002c8 <__aeabi_dsub>
 800a54a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f6 faeb 	bl	8000b30 <__aeabi_dcmple>
 800a55a:	b140      	cbz	r0, 800a56e <__ieee754_sqrt+0x15e>
 800a55c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a560:	e9da 0100 	ldrd	r0, r1, [sl]
 800a564:	e9db 2300 	ldrd	r2, r3, [fp]
 800a568:	d10e      	bne.n	800a588 <__ieee754_sqrt+0x178>
 800a56a:	3601      	adds	r6, #1
 800a56c:	4625      	mov	r5, r4
 800a56e:	1073      	asrs	r3, r6, #1
 800a570:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a574:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a578:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a57c:	086b      	lsrs	r3, r5, #1
 800a57e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a582:	e759      	b.n	800a438 <__ieee754_sqrt+0x28>
 800a584:	4690      	mov	r8, r2
 800a586:	e7c1      	b.n	800a50c <__ieee754_sqrt+0xfc>
 800a588:	f7f5 fea0 	bl	80002cc <__adddf3>
 800a58c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4640      	mov	r0, r8
 800a596:	4649      	mov	r1, r9
 800a598:	f7f6 fac0 	bl	8000b1c <__aeabi_dcmplt>
 800a59c:	b120      	cbz	r0, 800a5a8 <__ieee754_sqrt+0x198>
 800a59e:	1cab      	adds	r3, r5, #2
 800a5a0:	bf08      	it	eq
 800a5a2:	3601      	addeq	r6, #1
 800a5a4:	3502      	adds	r5, #2
 800a5a6:	e7e2      	b.n	800a56e <__ieee754_sqrt+0x15e>
 800a5a8:	1c6b      	adds	r3, r5, #1
 800a5aa:	f023 0501 	bic.w	r5, r3, #1
 800a5ae:	e7de      	b.n	800a56e <__ieee754_sqrt+0x15e>
 800a5b0:	7ff00000 	.word	0x7ff00000
 800a5b4:	0800c7e0 	.word	0x0800c7e0
 800a5b8:	0800c7d8 	.word	0x0800c7d8
 800a5bc:	00000000 	.word	0x00000000

0800a5c0 <__kernel_rem_pio2>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	ed2d 8b02 	vpush	{d8}
 800a5c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a5cc:	f112 0f14 	cmn.w	r2, #20
 800a5d0:	9306      	str	r3, [sp, #24]
 800a5d2:	9104      	str	r1, [sp, #16]
 800a5d4:	4bc2      	ldr	r3, [pc, #776]	@ (800a8e0 <__kernel_rem_pio2+0x320>)
 800a5d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a5d8:	9008      	str	r0, [sp, #32]
 800a5da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	9b06      	ldr	r3, [sp, #24]
 800a5e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5e6:	bfa8      	it	ge
 800a5e8:	1ed4      	subge	r4, r2, #3
 800a5ea:	9305      	str	r3, [sp, #20]
 800a5ec:	bfb2      	itee	lt
 800a5ee:	2400      	movlt	r4, #0
 800a5f0:	2318      	movge	r3, #24
 800a5f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a5f6:	f06f 0317 	mvn.w	r3, #23
 800a5fa:	fb04 3303 	mla	r3, r4, r3, r3
 800a5fe:	eb03 0b02 	add.w	fp, r3, r2
 800a602:	9b00      	ldr	r3, [sp, #0]
 800a604:	9a05      	ldr	r2, [sp, #20]
 800a606:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800a8d0 <__kernel_rem_pio2+0x310>
 800a60a:	eb03 0802 	add.w	r8, r3, r2
 800a60e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a610:	1aa7      	subs	r7, r4, r2
 800a612:	ae20      	add	r6, sp, #128	@ 0x80
 800a614:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a618:	2500      	movs	r5, #0
 800a61a:	4545      	cmp	r5, r8
 800a61c:	dd12      	ble.n	800a644 <__kernel_rem_pio2+0x84>
 800a61e:	9b06      	ldr	r3, [sp, #24]
 800a620:	aa20      	add	r2, sp, #128	@ 0x80
 800a622:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a626:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a62a:	2700      	movs	r7, #0
 800a62c:	9b00      	ldr	r3, [sp, #0]
 800a62e:	429f      	cmp	r7, r3
 800a630:	dc2e      	bgt.n	800a690 <__kernel_rem_pio2+0xd0>
 800a632:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800a8d0 <__kernel_rem_pio2+0x310>
 800a636:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a63a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a63e:	46a8      	mov	r8, r5
 800a640:	2600      	movs	r6, #0
 800a642:	e01b      	b.n	800a67c <__kernel_rem_pio2+0xbc>
 800a644:	42ef      	cmn	r7, r5
 800a646:	d407      	bmi.n	800a658 <__kernel_rem_pio2+0x98>
 800a648:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a64c:	f7f5 ff8a 	bl	8000564 <__aeabi_i2d>
 800a650:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a654:	3501      	adds	r5, #1
 800a656:	e7e0      	b.n	800a61a <__kernel_rem_pio2+0x5a>
 800a658:	ec51 0b18 	vmov	r0, r1, d8
 800a65c:	e7f8      	b.n	800a650 <__kernel_rem_pio2+0x90>
 800a65e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a662:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a666:	f7f5 ffe7 	bl	8000638 <__aeabi_dmul>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a672:	f7f5 fe2b 	bl	80002cc <__adddf3>
 800a676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a67a:	3601      	adds	r6, #1
 800a67c:	9b05      	ldr	r3, [sp, #20]
 800a67e:	429e      	cmp	r6, r3
 800a680:	dded      	ble.n	800a65e <__kernel_rem_pio2+0x9e>
 800a682:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a686:	3701      	adds	r7, #1
 800a688:	ecaa 7b02 	vstmia	sl!, {d7}
 800a68c:	3508      	adds	r5, #8
 800a68e:	e7cd      	b.n	800a62c <__kernel_rem_pio2+0x6c>
 800a690:	9b00      	ldr	r3, [sp, #0]
 800a692:	f8dd 8000 	ldr.w	r8, [sp]
 800a696:	aa0c      	add	r2, sp, #48	@ 0x30
 800a698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a69c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a69e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a6a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a6aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6ac:	ab98      	add	r3, sp, #608	@ 0x260
 800a6ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a6b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a6b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a6ba:	ac0c      	add	r4, sp, #48	@ 0x30
 800a6bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a6be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a6c2:	46a1      	mov	r9, r4
 800a6c4:	46c2      	mov	sl, r8
 800a6c6:	f1ba 0f00 	cmp.w	sl, #0
 800a6ca:	dc77      	bgt.n	800a7bc <__kernel_rem_pio2+0x1fc>
 800a6cc:	4658      	mov	r0, fp
 800a6ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a6d2:	f000 fac5 	bl	800ac60 <scalbn>
 800a6d6:	ec57 6b10 	vmov	r6, r7, d0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f5 ffa8 	bl	8000638 <__aeabi_dmul>
 800a6e8:	ec41 0b10 	vmov	d0, r0, r1
 800a6ec:	f000 fb34 	bl	800ad58 <floor>
 800a6f0:	4b7c      	ldr	r3, [pc, #496]	@ (800a8e4 <__kernel_rem_pio2+0x324>)
 800a6f2:	ec51 0b10 	vmov	r0, r1, d0
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f7f5 ff9e 	bl	8000638 <__aeabi_dmul>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f5 fde0 	bl	80002c8 <__aeabi_dsub>
 800a708:	460f      	mov	r7, r1
 800a70a:	4606      	mov	r6, r0
 800a70c:	f7f6 fa44 	bl	8000b98 <__aeabi_d2iz>
 800a710:	9002      	str	r0, [sp, #8]
 800a712:	f7f5 ff27 	bl	8000564 <__aeabi_i2d>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4630      	mov	r0, r6
 800a71c:	4639      	mov	r1, r7
 800a71e:	f7f5 fdd3 	bl	80002c8 <__aeabi_dsub>
 800a722:	f1bb 0f00 	cmp.w	fp, #0
 800a726:	4606      	mov	r6, r0
 800a728:	460f      	mov	r7, r1
 800a72a:	dd6c      	ble.n	800a806 <__kernel_rem_pio2+0x246>
 800a72c:	f108 31ff 	add.w	r1, r8, #4294967295
 800a730:	ab0c      	add	r3, sp, #48	@ 0x30
 800a732:	9d02      	ldr	r5, [sp, #8]
 800a734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a738:	f1cb 0018 	rsb	r0, fp, #24
 800a73c:	fa43 f200 	asr.w	r2, r3, r0
 800a740:	4415      	add	r5, r2
 800a742:	4082      	lsls	r2, r0
 800a744:	1a9b      	subs	r3, r3, r2
 800a746:	aa0c      	add	r2, sp, #48	@ 0x30
 800a748:	9502      	str	r5, [sp, #8]
 800a74a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a74e:	f1cb 0217 	rsb	r2, fp, #23
 800a752:	fa43 f902 	asr.w	r9, r3, r2
 800a756:	f1b9 0f00 	cmp.w	r9, #0
 800a75a:	dd64      	ble.n	800a826 <__kernel_rem_pio2+0x266>
 800a75c:	9b02      	ldr	r3, [sp, #8]
 800a75e:	2200      	movs	r2, #0
 800a760:	3301      	adds	r3, #1
 800a762:	9302      	str	r3, [sp, #8]
 800a764:	4615      	mov	r5, r2
 800a766:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a76a:	4590      	cmp	r8, r2
 800a76c:	f300 80a1 	bgt.w	800a8b2 <__kernel_rem_pio2+0x2f2>
 800a770:	f1bb 0f00 	cmp.w	fp, #0
 800a774:	dd07      	ble.n	800a786 <__kernel_rem_pio2+0x1c6>
 800a776:	f1bb 0f01 	cmp.w	fp, #1
 800a77a:	f000 80c1 	beq.w	800a900 <__kernel_rem_pio2+0x340>
 800a77e:	f1bb 0f02 	cmp.w	fp, #2
 800a782:	f000 80c8 	beq.w	800a916 <__kernel_rem_pio2+0x356>
 800a786:	f1b9 0f02 	cmp.w	r9, #2
 800a78a:	d14c      	bne.n	800a826 <__kernel_rem_pio2+0x266>
 800a78c:	4632      	mov	r2, r6
 800a78e:	463b      	mov	r3, r7
 800a790:	4955      	ldr	r1, [pc, #340]	@ (800a8e8 <__kernel_rem_pio2+0x328>)
 800a792:	2000      	movs	r0, #0
 800a794:	f7f5 fd98 	bl	80002c8 <__aeabi_dsub>
 800a798:	4606      	mov	r6, r0
 800a79a:	460f      	mov	r7, r1
 800a79c:	2d00      	cmp	r5, #0
 800a79e:	d042      	beq.n	800a826 <__kernel_rem_pio2+0x266>
 800a7a0:	4658      	mov	r0, fp
 800a7a2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800a8d8 <__kernel_rem_pio2+0x318>
 800a7a6:	f000 fa5b 	bl	800ac60 <scalbn>
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	ec53 2b10 	vmov	r2, r3, d0
 800a7b2:	f7f5 fd89 	bl	80002c8 <__aeabi_dsub>
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	460f      	mov	r7, r1
 800a7ba:	e034      	b.n	800a826 <__kernel_rem_pio2+0x266>
 800a7bc:	4b4b      	ldr	r3, [pc, #300]	@ (800a8ec <__kernel_rem_pio2+0x32c>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7c4:	f7f5 ff38 	bl	8000638 <__aeabi_dmul>
 800a7c8:	f7f6 f9e6 	bl	8000b98 <__aeabi_d2iz>
 800a7cc:	f7f5 feca 	bl	8000564 <__aeabi_i2d>
 800a7d0:	4b47      	ldr	r3, [pc, #284]	@ (800a8f0 <__kernel_rem_pio2+0x330>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	f7f5 ff2e 	bl	8000638 <__aeabi_dmul>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e4:	f7f5 fd70 	bl	80002c8 <__aeabi_dsub>
 800a7e8:	f7f6 f9d6 	bl	8000b98 <__aeabi_d2iz>
 800a7ec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a7f0:	f849 0b04 	str.w	r0, [r9], #4
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7f5 fd68 	bl	80002cc <__adddf3>
 800a7fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a804:	e75f      	b.n	800a6c6 <__kernel_rem_pio2+0x106>
 800a806:	d107      	bne.n	800a818 <__kernel_rem_pio2+0x258>
 800a808:	f108 33ff 	add.w	r3, r8, #4294967295
 800a80c:	aa0c      	add	r2, sp, #48	@ 0x30
 800a80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a812:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a816:	e79e      	b.n	800a756 <__kernel_rem_pio2+0x196>
 800a818:	4b36      	ldr	r3, [pc, #216]	@ (800a8f4 <__kernel_rem_pio2+0x334>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	f7f6 f992 	bl	8000b44 <__aeabi_dcmpge>
 800a820:	2800      	cmp	r0, #0
 800a822:	d143      	bne.n	800a8ac <__kernel_rem_pio2+0x2ec>
 800a824:	4681      	mov	r9, r0
 800a826:	2200      	movs	r2, #0
 800a828:	2300      	movs	r3, #0
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	f7f6 f96b 	bl	8000b08 <__aeabi_dcmpeq>
 800a832:	2800      	cmp	r0, #0
 800a834:	f000 80c1 	beq.w	800a9ba <__kernel_rem_pio2+0x3fa>
 800a838:	f108 33ff 	add.w	r3, r8, #4294967295
 800a83c:	2200      	movs	r2, #0
 800a83e:	9900      	ldr	r1, [sp, #0]
 800a840:	428b      	cmp	r3, r1
 800a842:	da70      	bge.n	800a926 <__kernel_rem_pio2+0x366>
 800a844:	2a00      	cmp	r2, #0
 800a846:	f000 808b 	beq.w	800a960 <__kernel_rem_pio2+0x3a0>
 800a84a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a84e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a850:	f1ab 0b18 	sub.w	fp, fp, #24
 800a854:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0f6      	beq.n	800a84a <__kernel_rem_pio2+0x28a>
 800a85c:	4658      	mov	r0, fp
 800a85e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800a8d8 <__kernel_rem_pio2+0x318>
 800a862:	f000 f9fd 	bl	800ac60 <scalbn>
 800a866:	f108 0301 	add.w	r3, r8, #1
 800a86a:	00da      	lsls	r2, r3, #3
 800a86c:	9205      	str	r2, [sp, #20]
 800a86e:	ec55 4b10 	vmov	r4, r5, d0
 800a872:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a874:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800a8ec <__kernel_rem_pio2+0x32c>
 800a878:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a87c:	4646      	mov	r6, r8
 800a87e:	f04f 0a00 	mov.w	sl, #0
 800a882:	2e00      	cmp	r6, #0
 800a884:	f280 80d1 	bge.w	800aa2a <__kernel_rem_pio2+0x46a>
 800a888:	4644      	mov	r4, r8
 800a88a:	2c00      	cmp	r4, #0
 800a88c:	f2c0 80ff 	blt.w	800aa8e <__kernel_rem_pio2+0x4ce>
 800a890:	4b19      	ldr	r3, [pc, #100]	@ (800a8f8 <__kernel_rem_pio2+0x338>)
 800a892:	461f      	mov	r7, r3
 800a894:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a896:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a89a:	9306      	str	r3, [sp, #24]
 800a89c:	f04f 0a00 	mov.w	sl, #0
 800a8a0:	f04f 0b00 	mov.w	fp, #0
 800a8a4:	2600      	movs	r6, #0
 800a8a6:	eba8 0504 	sub.w	r5, r8, r4
 800a8aa:	e0e4      	b.n	800aa76 <__kernel_rem_pio2+0x4b6>
 800a8ac:	f04f 0902 	mov.w	r9, #2
 800a8b0:	e754      	b.n	800a75c <__kernel_rem_pio2+0x19c>
 800a8b2:	f854 3b04 	ldr.w	r3, [r4], #4
 800a8b6:	bb0d      	cbnz	r5, 800a8fc <__kernel_rem_pio2+0x33c>
 800a8b8:	b123      	cbz	r3, 800a8c4 <__kernel_rem_pio2+0x304>
 800a8ba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a8be:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	3201      	adds	r2, #1
 800a8c6:	461d      	mov	r5, r3
 800a8c8:	e74f      	b.n	800a76a <__kernel_rem_pio2+0x1aa>
 800a8ca:	bf00      	nop
 800a8cc:	f3af 8000 	nop.w
	...
 800a8dc:	3ff00000 	.word	0x3ff00000
 800a8e0:	0800c828 	.word	0x0800c828
 800a8e4:	40200000 	.word	0x40200000
 800a8e8:	3ff00000 	.word	0x3ff00000
 800a8ec:	3e700000 	.word	0x3e700000
 800a8f0:	41700000 	.word	0x41700000
 800a8f4:	3fe00000 	.word	0x3fe00000
 800a8f8:	0800c7e8 	.word	0x0800c7e8
 800a8fc:	1acb      	subs	r3, r1, r3
 800a8fe:	e7de      	b.n	800a8be <__kernel_rem_pio2+0x2fe>
 800a900:	f108 32ff 	add.w	r2, r8, #4294967295
 800a904:	ab0c      	add	r3, sp, #48	@ 0x30
 800a906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a90e:	a90c      	add	r1, sp, #48	@ 0x30
 800a910:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a914:	e737      	b.n	800a786 <__kernel_rem_pio2+0x1c6>
 800a916:	f108 32ff 	add.w	r2, r8, #4294967295
 800a91a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a920:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a924:	e7f3      	b.n	800a90e <__kernel_rem_pio2+0x34e>
 800a926:	a90c      	add	r1, sp, #48	@ 0x30
 800a928:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	430a      	orrs	r2, r1
 800a930:	e785      	b.n	800a83e <__kernel_rem_pio2+0x27e>
 800a932:	3401      	adds	r4, #1
 800a934:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a938:	2a00      	cmp	r2, #0
 800a93a:	d0fa      	beq.n	800a932 <__kernel_rem_pio2+0x372>
 800a93c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a93e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a942:	eb0d 0503 	add.w	r5, sp, r3
 800a946:	9b06      	ldr	r3, [sp, #24]
 800a948:	aa20      	add	r2, sp, #128	@ 0x80
 800a94a:	4443      	add	r3, r8
 800a94c:	f108 0701 	add.w	r7, r8, #1
 800a950:	3d98      	subs	r5, #152	@ 0x98
 800a952:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a956:	4444      	add	r4, r8
 800a958:	42bc      	cmp	r4, r7
 800a95a:	da04      	bge.n	800a966 <__kernel_rem_pio2+0x3a6>
 800a95c:	46a0      	mov	r8, r4
 800a95e:	e6a2      	b.n	800a6a6 <__kernel_rem_pio2+0xe6>
 800a960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a962:	2401      	movs	r4, #1
 800a964:	e7e6      	b.n	800a934 <__kernel_rem_pio2+0x374>
 800a966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a968:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a96c:	f7f5 fdfa 	bl	8000564 <__aeabi_i2d>
 800a970:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800ac30 <__kernel_rem_pio2+0x670>
 800a974:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a978:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a97c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a980:	46b2      	mov	sl, r6
 800a982:	f04f 0800 	mov.w	r8, #0
 800a986:	9b05      	ldr	r3, [sp, #20]
 800a988:	4598      	cmp	r8, r3
 800a98a:	dd05      	ble.n	800a998 <__kernel_rem_pio2+0x3d8>
 800a98c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a990:	3701      	adds	r7, #1
 800a992:	eca5 7b02 	vstmia	r5!, {d7}
 800a996:	e7df      	b.n	800a958 <__kernel_rem_pio2+0x398>
 800a998:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a99c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a9a0:	f7f5 fe4a 	bl	8000638 <__aeabi_dmul>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ac:	f7f5 fc8e 	bl	80002cc <__adddf3>
 800a9b0:	f108 0801 	add.w	r8, r8, #1
 800a9b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9b8:	e7e5      	b.n	800a986 <__kernel_rem_pio2+0x3c6>
 800a9ba:	f1cb 0000 	rsb	r0, fp, #0
 800a9be:	ec47 6b10 	vmov	d0, r6, r7
 800a9c2:	f000 f94d 	bl	800ac60 <scalbn>
 800a9c6:	ec55 4b10 	vmov	r4, r5, d0
 800a9ca:	4b9b      	ldr	r3, [pc, #620]	@ (800ac38 <__kernel_rem_pio2+0x678>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	f7f6 f8b7 	bl	8000b44 <__aeabi_dcmpge>
 800a9d6:	b300      	cbz	r0, 800aa1a <__kernel_rem_pio2+0x45a>
 800a9d8:	4b98      	ldr	r3, [pc, #608]	@ (800ac3c <__kernel_rem_pio2+0x67c>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	4620      	mov	r0, r4
 800a9de:	4629      	mov	r1, r5
 800a9e0:	f7f5 fe2a 	bl	8000638 <__aeabi_dmul>
 800a9e4:	f7f6 f8d8 	bl	8000b98 <__aeabi_d2iz>
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	f7f5 fdbb 	bl	8000564 <__aeabi_i2d>
 800a9ee:	4b92      	ldr	r3, [pc, #584]	@ (800ac38 <__kernel_rem_pio2+0x678>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f7f5 fe21 	bl	8000638 <__aeabi_dmul>
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f7f5 fc63 	bl	80002c8 <__aeabi_dsub>
 800aa02:	f7f6 f8c9 	bl	8000b98 <__aeabi_d2iz>
 800aa06:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa08:	f10b 0b18 	add.w	fp, fp, #24
 800aa0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800aa10:	f108 0801 	add.w	r8, r8, #1
 800aa14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800aa18:	e720      	b.n	800a85c <__kernel_rem_pio2+0x29c>
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f7f6 f8bb 	bl	8000b98 <__aeabi_d2iz>
 800aa22:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800aa28:	e718      	b.n	800a85c <__kernel_rem_pio2+0x29c>
 800aa2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aa30:	f7f5 fd98 	bl	8000564 <__aeabi_i2d>
 800aa34:	4622      	mov	r2, r4
 800aa36:	462b      	mov	r3, r5
 800aa38:	f7f5 fdfe 	bl	8000638 <__aeabi_dmul>
 800aa3c:	4652      	mov	r2, sl
 800aa3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800aa42:	465b      	mov	r3, fp
 800aa44:	4620      	mov	r0, r4
 800aa46:	4629      	mov	r1, r5
 800aa48:	f7f5 fdf6 	bl	8000638 <__aeabi_dmul>
 800aa4c:	3e01      	subs	r6, #1
 800aa4e:	4604      	mov	r4, r0
 800aa50:	460d      	mov	r5, r1
 800aa52:	e716      	b.n	800a882 <__kernel_rem_pio2+0x2c2>
 800aa54:	9906      	ldr	r1, [sp, #24]
 800aa56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800aa5a:	9106      	str	r1, [sp, #24]
 800aa5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800aa60:	f7f5 fdea 	bl	8000638 <__aeabi_dmul>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4650      	mov	r0, sl
 800aa6a:	4659      	mov	r1, fp
 800aa6c:	f7f5 fc2e 	bl	80002cc <__adddf3>
 800aa70:	3601      	adds	r6, #1
 800aa72:	4682      	mov	sl, r0
 800aa74:	468b      	mov	fp, r1
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	429e      	cmp	r6, r3
 800aa7a:	dc01      	bgt.n	800aa80 <__kernel_rem_pio2+0x4c0>
 800aa7c:	42ae      	cmp	r6, r5
 800aa7e:	dde9      	ble.n	800aa54 <__kernel_rem_pio2+0x494>
 800aa80:	ab48      	add	r3, sp, #288	@ 0x120
 800aa82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800aa86:	e9c5 ab00 	strd	sl, fp, [r5]
 800aa8a:	3c01      	subs	r4, #1
 800aa8c:	e6fd      	b.n	800a88a <__kernel_rem_pio2+0x2ca>
 800aa8e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	dc0b      	bgt.n	800aaac <__kernel_rem_pio2+0x4ec>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dc35      	bgt.n	800ab04 <__kernel_rem_pio2+0x544>
 800aa98:	d059      	beq.n	800ab4e <__kernel_rem_pio2+0x58e>
 800aa9a:	9b02      	ldr	r3, [sp, #8]
 800aa9c:	f003 0007 	and.w	r0, r3, #7
 800aaa0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800aaa4:	ecbd 8b02 	vpop	{d8}
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d1f3      	bne.n	800aa9a <__kernel_rem_pio2+0x4da>
 800aab2:	9b05      	ldr	r3, [sp, #20]
 800aab4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aab8:	eb0d 0403 	add.w	r4, sp, r3
 800aabc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800aac0:	4625      	mov	r5, r4
 800aac2:	46c2      	mov	sl, r8
 800aac4:	f1ba 0f00 	cmp.w	sl, #0
 800aac8:	dc69      	bgt.n	800ab9e <__kernel_rem_pio2+0x5de>
 800aaca:	4645      	mov	r5, r8
 800aacc:	2d01      	cmp	r5, #1
 800aace:	f300 8087 	bgt.w	800abe0 <__kernel_rem_pio2+0x620>
 800aad2:	9c05      	ldr	r4, [sp, #20]
 800aad4:	ab48      	add	r3, sp, #288	@ 0x120
 800aad6:	441c      	add	r4, r3
 800aad8:	2000      	movs	r0, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	f1b8 0f01 	cmp.w	r8, #1
 800aae0:	f300 809c 	bgt.w	800ac1c <__kernel_rem_pio2+0x65c>
 800aae4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800aae8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800aaec:	f1b9 0f00 	cmp.w	r9, #0
 800aaf0:	f040 80a6 	bne.w	800ac40 <__kernel_rem_pio2+0x680>
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	e9c3 5600 	strd	r5, r6, [r3]
 800aafa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800aafe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ab02:	e7ca      	b.n	800aa9a <__kernel_rem_pio2+0x4da>
 800ab04:	9d05      	ldr	r5, [sp, #20]
 800ab06:	ab48      	add	r3, sp, #288	@ 0x120
 800ab08:	441d      	add	r5, r3
 800ab0a:	4644      	mov	r4, r8
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	2100      	movs	r1, #0
 800ab10:	2c00      	cmp	r4, #0
 800ab12:	da35      	bge.n	800ab80 <__kernel_rem_pio2+0x5c0>
 800ab14:	f1b9 0f00 	cmp.w	r9, #0
 800ab18:	d038      	beq.n	800ab8c <__kernel_rem_pio2+0x5cc>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab20:	9c04      	ldr	r4, [sp, #16]
 800ab22:	e9c4 2300 	strd	r2, r3, [r4]
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ab2e:	f7f5 fbcb 	bl	80002c8 <__aeabi_dsub>
 800ab32:	ad4a      	add	r5, sp, #296	@ 0x128
 800ab34:	2401      	movs	r4, #1
 800ab36:	45a0      	cmp	r8, r4
 800ab38:	da2b      	bge.n	800ab92 <__kernel_rem_pio2+0x5d2>
 800ab3a:	f1b9 0f00 	cmp.w	r9, #0
 800ab3e:	d002      	beq.n	800ab46 <__kernel_rem_pio2+0x586>
 800ab40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab44:	4619      	mov	r1, r3
 800ab46:	9b04      	ldr	r3, [sp, #16]
 800ab48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ab4c:	e7a5      	b.n	800aa9a <__kernel_rem_pio2+0x4da>
 800ab4e:	9c05      	ldr	r4, [sp, #20]
 800ab50:	ab48      	add	r3, sp, #288	@ 0x120
 800ab52:	441c      	add	r4, r3
 800ab54:	2000      	movs	r0, #0
 800ab56:	2100      	movs	r1, #0
 800ab58:	f1b8 0f00 	cmp.w	r8, #0
 800ab5c:	da09      	bge.n	800ab72 <__kernel_rem_pio2+0x5b2>
 800ab5e:	f1b9 0f00 	cmp.w	r9, #0
 800ab62:	d002      	beq.n	800ab6a <__kernel_rem_pio2+0x5aa>
 800ab64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab68:	4619      	mov	r1, r3
 800ab6a:	9b04      	ldr	r3, [sp, #16]
 800ab6c:	e9c3 0100 	strd	r0, r1, [r3]
 800ab70:	e793      	b.n	800aa9a <__kernel_rem_pio2+0x4da>
 800ab72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab76:	f7f5 fba9 	bl	80002cc <__adddf3>
 800ab7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab7e:	e7eb      	b.n	800ab58 <__kernel_rem_pio2+0x598>
 800ab80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ab84:	f7f5 fba2 	bl	80002cc <__adddf3>
 800ab88:	3c01      	subs	r4, #1
 800ab8a:	e7c1      	b.n	800ab10 <__kernel_rem_pio2+0x550>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	e7c6      	b.n	800ab20 <__kernel_rem_pio2+0x560>
 800ab92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ab96:	f7f5 fb99 	bl	80002cc <__adddf3>
 800ab9a:	3401      	adds	r4, #1
 800ab9c:	e7cb      	b.n	800ab36 <__kernel_rem_pio2+0x576>
 800ab9e:	ed35 7b02 	vldmdb	r5!, {d7}
 800aba2:	ed8d 7b00 	vstr	d7, [sp]
 800aba6:	ed95 7b02 	vldr	d7, [r5, #8]
 800abaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abae:	ec53 2b17 	vmov	r2, r3, d7
 800abb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abb6:	f7f5 fb89 	bl	80002cc <__adddf3>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4606      	mov	r6, r0
 800abc0:	460f      	mov	r7, r1
 800abc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abc6:	f7f5 fb7f 	bl	80002c8 <__aeabi_dsub>
 800abca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abce:	f7f5 fb7d 	bl	80002cc <__adddf3>
 800abd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800abda:	e9c5 6700 	strd	r6, r7, [r5]
 800abde:	e771      	b.n	800aac4 <__kernel_rem_pio2+0x504>
 800abe0:	ed34 7b02 	vldmdb	r4!, {d7}
 800abe4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800abe8:	ec51 0b17 	vmov	r0, r1, d7
 800abec:	4652      	mov	r2, sl
 800abee:	465b      	mov	r3, fp
 800abf0:	ed8d 7b00 	vstr	d7, [sp]
 800abf4:	f7f5 fb6a 	bl	80002cc <__adddf3>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4606      	mov	r6, r0
 800abfe:	460f      	mov	r7, r1
 800ac00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac04:	f7f5 fb60 	bl	80002c8 <__aeabi_dsub>
 800ac08:	4652      	mov	r2, sl
 800ac0a:	465b      	mov	r3, fp
 800ac0c:	f7f5 fb5e 	bl	80002cc <__adddf3>
 800ac10:	3d01      	subs	r5, #1
 800ac12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac16:	e9c4 6700 	strd	r6, r7, [r4]
 800ac1a:	e757      	b.n	800aacc <__kernel_rem_pio2+0x50c>
 800ac1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac20:	f7f5 fb54 	bl	80002cc <__adddf3>
 800ac24:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac28:	e758      	b.n	800aadc <__kernel_rem_pio2+0x51c>
 800ac2a:	bf00      	nop
 800ac2c:	f3af 8000 	nop.w
	...
 800ac38:	41700000 	.word	0x41700000
 800ac3c:	3e700000 	.word	0x3e700000
 800ac40:	9b04      	ldr	r3, [sp, #16]
 800ac42:	9a04      	ldr	r2, [sp, #16]
 800ac44:	601d      	str	r5, [r3, #0]
 800ac46:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800ac4a:	605c      	str	r4, [r3, #4]
 800ac4c:	609f      	str	r7, [r3, #8]
 800ac4e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800ac52:	60d3      	str	r3, [r2, #12]
 800ac54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac58:	6110      	str	r0, [r2, #16]
 800ac5a:	6153      	str	r3, [r2, #20]
 800ac5c:	e71d      	b.n	800aa9a <__kernel_rem_pio2+0x4da>
 800ac5e:	bf00      	nop

0800ac60 <scalbn>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	ec55 4b10 	vmov	r4, r5, d0
 800ac66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	b991      	cbnz	r1, 800ac96 <scalbn+0x36>
 800ac70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ac74:	4323      	orrs	r3, r4
 800ac76:	d03b      	beq.n	800acf0 <scalbn+0x90>
 800ac78:	4b33      	ldr	r3, [pc, #204]	@ (800ad48 <scalbn+0xe8>)
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f7f5 fcda 	bl	8000638 <__aeabi_dmul>
 800ac84:	4b31      	ldr	r3, [pc, #196]	@ (800ad4c <scalbn+0xec>)
 800ac86:	429e      	cmp	r6, r3
 800ac88:	4604      	mov	r4, r0
 800ac8a:	460d      	mov	r5, r1
 800ac8c:	da0f      	bge.n	800acae <scalbn+0x4e>
 800ac8e:	a326      	add	r3, pc, #152	@ (adr r3, 800ad28 <scalbn+0xc8>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	e01e      	b.n	800acd4 <scalbn+0x74>
 800ac96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ac9a:	4291      	cmp	r1, r2
 800ac9c:	d10b      	bne.n	800acb6 <scalbn+0x56>
 800ac9e:	4622      	mov	r2, r4
 800aca0:	4620      	mov	r0, r4
 800aca2:	4629      	mov	r1, r5
 800aca4:	f7f5 fb12 	bl	80002cc <__adddf3>
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	e020      	b.n	800acf0 <scalbn+0x90>
 800acae:	460b      	mov	r3, r1
 800acb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800acb4:	3936      	subs	r1, #54	@ 0x36
 800acb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800acba:	4296      	cmp	r6, r2
 800acbc:	dd0d      	ble.n	800acda <scalbn+0x7a>
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	a11b      	add	r1, pc, #108	@ (adr r1, 800ad30 <scalbn+0xd0>)
 800acc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acc6:	da02      	bge.n	800acce <scalbn+0x6e>
 800acc8:	a11b      	add	r1, pc, #108	@ (adr r1, 800ad38 <scalbn+0xd8>)
 800acca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acce:	a318      	add	r3, pc, #96	@ (adr r3, 800ad30 <scalbn+0xd0>)
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	f7f5 fcb0 	bl	8000638 <__aeabi_dmul>
 800acd8:	e7e6      	b.n	800aca8 <scalbn+0x48>
 800acda:	1872      	adds	r2, r6, r1
 800acdc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ace0:	428a      	cmp	r2, r1
 800ace2:	dcec      	bgt.n	800acbe <scalbn+0x5e>
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	dd06      	ble.n	800acf6 <scalbn+0x96>
 800ace8:	f36f 531e 	bfc	r3, #20, #11
 800acec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800acf0:	ec45 4b10 	vmov	d0, r4, r5
 800acf4:	bd70      	pop	{r4, r5, r6, pc}
 800acf6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800acfa:	da08      	bge.n	800ad0e <scalbn+0xae>
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	a10a      	add	r1, pc, #40	@ (adr r1, 800ad28 <scalbn+0xc8>)
 800ad00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad04:	dac3      	bge.n	800ac8e <scalbn+0x2e>
 800ad06:	a10e      	add	r1, pc, #56	@ (adr r1, 800ad40 <scalbn+0xe0>)
 800ad08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad0c:	e7bf      	b.n	800ac8e <scalbn+0x2e>
 800ad0e:	3236      	adds	r2, #54	@ 0x36
 800ad10:	f36f 531e 	bfc	r3, #20, #11
 800ad14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad18:	4620      	mov	r0, r4
 800ad1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad50 <scalbn+0xf0>)
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	2200      	movs	r2, #0
 800ad20:	e7d8      	b.n	800acd4 <scalbn+0x74>
 800ad22:	bf00      	nop
 800ad24:	f3af 8000 	nop.w
 800ad28:	c2f8f359 	.word	0xc2f8f359
 800ad2c:	01a56e1f 	.word	0x01a56e1f
 800ad30:	8800759c 	.word	0x8800759c
 800ad34:	7e37e43c 	.word	0x7e37e43c
 800ad38:	8800759c 	.word	0x8800759c
 800ad3c:	fe37e43c 	.word	0xfe37e43c
 800ad40:	c2f8f359 	.word	0xc2f8f359
 800ad44:	81a56e1f 	.word	0x81a56e1f
 800ad48:	43500000 	.word	0x43500000
 800ad4c:	ffff3cb0 	.word	0xffff3cb0
 800ad50:	3c900000 	.word	0x3c900000
 800ad54:	00000000 	.word	0x00000000

0800ad58 <floor>:
 800ad58:	ec51 0b10 	vmov	r0, r1, d0
 800ad5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ad68:	2e13      	cmp	r6, #19
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	4680      	mov	r8, r0
 800ad70:	dc34      	bgt.n	800addc <floor+0x84>
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	da17      	bge.n	800ada6 <floor+0x4e>
 800ad76:	a332      	add	r3, pc, #200	@ (adr r3, 800ae40 <floor+0xe8>)
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	f7f5 faa6 	bl	80002cc <__adddf3>
 800ad80:	2200      	movs	r2, #0
 800ad82:	2300      	movs	r3, #0
 800ad84:	f7f5 fee8 	bl	8000b58 <__aeabi_dcmpgt>
 800ad88:	b150      	cbz	r0, 800ada0 <floor+0x48>
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	da55      	bge.n	800ae3a <floor+0xe2>
 800ad8e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ad92:	432c      	orrs	r4, r5
 800ad94:	2500      	movs	r5, #0
 800ad96:	42ac      	cmp	r4, r5
 800ad98:	4c2b      	ldr	r4, [pc, #172]	@ (800ae48 <floor+0xf0>)
 800ad9a:	bf08      	it	eq
 800ad9c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ada0:	4621      	mov	r1, r4
 800ada2:	4628      	mov	r0, r5
 800ada4:	e023      	b.n	800adee <floor+0x96>
 800ada6:	4f29      	ldr	r7, [pc, #164]	@ (800ae4c <floor+0xf4>)
 800ada8:	4137      	asrs	r7, r6
 800adaa:	ea01 0307 	and.w	r3, r1, r7
 800adae:	4303      	orrs	r3, r0
 800adb0:	d01d      	beq.n	800adee <floor+0x96>
 800adb2:	a323      	add	r3, pc, #140	@ (adr r3, 800ae40 <floor+0xe8>)
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	f7f5 fa88 	bl	80002cc <__adddf3>
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	f7f5 feca 	bl	8000b58 <__aeabi_dcmpgt>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d0eb      	beq.n	800ada0 <floor+0x48>
 800adc8:	2c00      	cmp	r4, #0
 800adca:	bfbe      	ittt	lt
 800adcc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800add0:	4133      	asrlt	r3, r6
 800add2:	18e4      	addlt	r4, r4, r3
 800add4:	ea24 0407 	bic.w	r4, r4, r7
 800add8:	2500      	movs	r5, #0
 800adda:	e7e1      	b.n	800ada0 <floor+0x48>
 800addc:	2e33      	cmp	r6, #51	@ 0x33
 800adde:	dd0a      	ble.n	800adf6 <floor+0x9e>
 800ade0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ade4:	d103      	bne.n	800adee <floor+0x96>
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	f7f5 fa6f 	bl	80002cc <__adddf3>
 800adee:	ec41 0b10 	vmov	d0, r0, r1
 800adf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800adfa:	f04f 37ff 	mov.w	r7, #4294967295
 800adfe:	40df      	lsrs	r7, r3
 800ae00:	4207      	tst	r7, r0
 800ae02:	d0f4      	beq.n	800adee <floor+0x96>
 800ae04:	a30e      	add	r3, pc, #56	@ (adr r3, 800ae40 <floor+0xe8>)
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f7f5 fa5f 	bl	80002cc <__adddf3>
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2300      	movs	r3, #0
 800ae12:	f7f5 fea1 	bl	8000b58 <__aeabi_dcmpgt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d0c2      	beq.n	800ada0 <floor+0x48>
 800ae1a:	2c00      	cmp	r4, #0
 800ae1c:	da0a      	bge.n	800ae34 <floor+0xdc>
 800ae1e:	2e14      	cmp	r6, #20
 800ae20:	d101      	bne.n	800ae26 <floor+0xce>
 800ae22:	3401      	adds	r4, #1
 800ae24:	e006      	b.n	800ae34 <floor+0xdc>
 800ae26:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	40b3      	lsls	r3, r6
 800ae2e:	441d      	add	r5, r3
 800ae30:	4545      	cmp	r5, r8
 800ae32:	d3f6      	bcc.n	800ae22 <floor+0xca>
 800ae34:	ea25 0507 	bic.w	r5, r5, r7
 800ae38:	e7b2      	b.n	800ada0 <floor+0x48>
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	462c      	mov	r4, r5
 800ae3e:	e7af      	b.n	800ada0 <floor+0x48>
 800ae40:	8800759c 	.word	0x8800759c
 800ae44:	7e37e43c 	.word	0x7e37e43c
 800ae48:	bff00000 	.word	0xbff00000
 800ae4c:	000fffff 	.word	0x000fffff

0800ae50 <malloc>:
 800ae50:	4b02      	ldr	r3, [pc, #8]	@ (800ae5c <malloc+0xc>)
 800ae52:	4601      	mov	r1, r0
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	f000 b82d 	b.w	800aeb4 <_malloc_r>
 800ae5a:	bf00      	nop
 800ae5c:	2000000c 	.word	0x2000000c

0800ae60 <free>:
 800ae60:	4b02      	ldr	r3, [pc, #8]	@ (800ae6c <free+0xc>)
 800ae62:	4601      	mov	r1, r0
 800ae64:	6818      	ldr	r0, [r3, #0]
 800ae66:	f000 b953 	b.w	800b110 <_free_r>
 800ae6a:	bf00      	nop
 800ae6c:	2000000c 	.word	0x2000000c

0800ae70 <sbrk_aligned>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	4e0f      	ldr	r6, [pc, #60]	@ (800aeb0 <sbrk_aligned+0x40>)
 800ae74:	460c      	mov	r4, r1
 800ae76:	6831      	ldr	r1, [r6, #0]
 800ae78:	4605      	mov	r5, r0
 800ae7a:	b911      	cbnz	r1, 800ae82 <sbrk_aligned+0x12>
 800ae7c:	f000 f8fe 	bl	800b07c <_sbrk_r>
 800ae80:	6030      	str	r0, [r6, #0]
 800ae82:	4621      	mov	r1, r4
 800ae84:	4628      	mov	r0, r5
 800ae86:	f000 f8f9 	bl	800b07c <_sbrk_r>
 800ae8a:	1c43      	adds	r3, r0, #1
 800ae8c:	d103      	bne.n	800ae96 <sbrk_aligned+0x26>
 800ae8e:	f04f 34ff 	mov.w	r4, #4294967295
 800ae92:	4620      	mov	r0, r4
 800ae94:	bd70      	pop	{r4, r5, r6, pc}
 800ae96:	1cc4      	adds	r4, r0, #3
 800ae98:	f024 0403 	bic.w	r4, r4, #3
 800ae9c:	42a0      	cmp	r0, r4
 800ae9e:	d0f8      	beq.n	800ae92 <sbrk_aligned+0x22>
 800aea0:	1a21      	subs	r1, r4, r0
 800aea2:	4628      	mov	r0, r5
 800aea4:	f000 f8ea 	bl	800b07c <_sbrk_r>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d1f2      	bne.n	800ae92 <sbrk_aligned+0x22>
 800aeac:	e7ef      	b.n	800ae8e <sbrk_aligned+0x1e>
 800aeae:	bf00      	nop
 800aeb0:	20000970 	.word	0x20000970

0800aeb4 <_malloc_r>:
 800aeb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb8:	1ccd      	adds	r5, r1, #3
 800aeba:	f025 0503 	bic.w	r5, r5, #3
 800aebe:	3508      	adds	r5, #8
 800aec0:	2d0c      	cmp	r5, #12
 800aec2:	bf38      	it	cc
 800aec4:	250c      	movcc	r5, #12
 800aec6:	2d00      	cmp	r5, #0
 800aec8:	4606      	mov	r6, r0
 800aeca:	db01      	blt.n	800aed0 <_malloc_r+0x1c>
 800aecc:	42a9      	cmp	r1, r5
 800aece:	d904      	bls.n	800aeda <_malloc_r+0x26>
 800aed0:	230c      	movs	r3, #12
 800aed2:	6033      	str	r3, [r6, #0]
 800aed4:	2000      	movs	r0, #0
 800aed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afb0 <_malloc_r+0xfc>
 800aede:	f000 f869 	bl	800afb4 <__malloc_lock>
 800aee2:	f8d8 3000 	ldr.w	r3, [r8]
 800aee6:	461c      	mov	r4, r3
 800aee8:	bb44      	cbnz	r4, 800af3c <_malloc_r+0x88>
 800aeea:	4629      	mov	r1, r5
 800aeec:	4630      	mov	r0, r6
 800aeee:	f7ff ffbf 	bl	800ae70 <sbrk_aligned>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	4604      	mov	r4, r0
 800aef6:	d158      	bne.n	800afaa <_malloc_r+0xf6>
 800aef8:	f8d8 4000 	ldr.w	r4, [r8]
 800aefc:	4627      	mov	r7, r4
 800aefe:	2f00      	cmp	r7, #0
 800af00:	d143      	bne.n	800af8a <_malloc_r+0xd6>
 800af02:	2c00      	cmp	r4, #0
 800af04:	d04b      	beq.n	800af9e <_malloc_r+0xea>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	4639      	mov	r1, r7
 800af0a:	4630      	mov	r0, r6
 800af0c:	eb04 0903 	add.w	r9, r4, r3
 800af10:	f000 f8b4 	bl	800b07c <_sbrk_r>
 800af14:	4581      	cmp	r9, r0
 800af16:	d142      	bne.n	800af9e <_malloc_r+0xea>
 800af18:	6821      	ldr	r1, [r4, #0]
 800af1a:	1a6d      	subs	r5, r5, r1
 800af1c:	4629      	mov	r1, r5
 800af1e:	4630      	mov	r0, r6
 800af20:	f7ff ffa6 	bl	800ae70 <sbrk_aligned>
 800af24:	3001      	adds	r0, #1
 800af26:	d03a      	beq.n	800af9e <_malloc_r+0xea>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	442b      	add	r3, r5
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	f8d8 3000 	ldr.w	r3, [r8]
 800af32:	685a      	ldr	r2, [r3, #4]
 800af34:	bb62      	cbnz	r2, 800af90 <_malloc_r+0xdc>
 800af36:	f8c8 7000 	str.w	r7, [r8]
 800af3a:	e00f      	b.n	800af5c <_malloc_r+0xa8>
 800af3c:	6822      	ldr	r2, [r4, #0]
 800af3e:	1b52      	subs	r2, r2, r5
 800af40:	d420      	bmi.n	800af84 <_malloc_r+0xd0>
 800af42:	2a0b      	cmp	r2, #11
 800af44:	d917      	bls.n	800af76 <_malloc_r+0xc2>
 800af46:	1961      	adds	r1, r4, r5
 800af48:	42a3      	cmp	r3, r4
 800af4a:	6025      	str	r5, [r4, #0]
 800af4c:	bf18      	it	ne
 800af4e:	6059      	strne	r1, [r3, #4]
 800af50:	6863      	ldr	r3, [r4, #4]
 800af52:	bf08      	it	eq
 800af54:	f8c8 1000 	streq.w	r1, [r8]
 800af58:	5162      	str	r2, [r4, r5]
 800af5a:	604b      	str	r3, [r1, #4]
 800af5c:	4630      	mov	r0, r6
 800af5e:	f000 f82f 	bl	800afc0 <__malloc_unlock>
 800af62:	f104 000b 	add.w	r0, r4, #11
 800af66:	1d23      	adds	r3, r4, #4
 800af68:	f020 0007 	bic.w	r0, r0, #7
 800af6c:	1ac2      	subs	r2, r0, r3
 800af6e:	bf1c      	itt	ne
 800af70:	1a1b      	subne	r3, r3, r0
 800af72:	50a3      	strne	r3, [r4, r2]
 800af74:	e7af      	b.n	800aed6 <_malloc_r+0x22>
 800af76:	6862      	ldr	r2, [r4, #4]
 800af78:	42a3      	cmp	r3, r4
 800af7a:	bf0c      	ite	eq
 800af7c:	f8c8 2000 	streq.w	r2, [r8]
 800af80:	605a      	strne	r2, [r3, #4]
 800af82:	e7eb      	b.n	800af5c <_malloc_r+0xa8>
 800af84:	4623      	mov	r3, r4
 800af86:	6864      	ldr	r4, [r4, #4]
 800af88:	e7ae      	b.n	800aee8 <_malloc_r+0x34>
 800af8a:	463c      	mov	r4, r7
 800af8c:	687f      	ldr	r7, [r7, #4]
 800af8e:	e7b6      	b.n	800aefe <_malloc_r+0x4a>
 800af90:	461a      	mov	r2, r3
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	42a3      	cmp	r3, r4
 800af96:	d1fb      	bne.n	800af90 <_malloc_r+0xdc>
 800af98:	2300      	movs	r3, #0
 800af9a:	6053      	str	r3, [r2, #4]
 800af9c:	e7de      	b.n	800af5c <_malloc_r+0xa8>
 800af9e:	230c      	movs	r3, #12
 800afa0:	6033      	str	r3, [r6, #0]
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 f80c 	bl	800afc0 <__malloc_unlock>
 800afa8:	e794      	b.n	800aed4 <_malloc_r+0x20>
 800afaa:	6005      	str	r5, [r0, #0]
 800afac:	e7d6      	b.n	800af5c <_malloc_r+0xa8>
 800afae:	bf00      	nop
 800afb0:	20000974 	.word	0x20000974

0800afb4 <__malloc_lock>:
 800afb4:	4801      	ldr	r0, [pc, #4]	@ (800afbc <__malloc_lock+0x8>)
 800afb6:	f000 b89b 	b.w	800b0f0 <__retarget_lock_acquire_recursive>
 800afba:	bf00      	nop
 800afbc:	20000ab4 	.word	0x20000ab4

0800afc0 <__malloc_unlock>:
 800afc0:	4801      	ldr	r0, [pc, #4]	@ (800afc8 <__malloc_unlock+0x8>)
 800afc2:	f000 b896 	b.w	800b0f2 <__retarget_lock_release_recursive>
 800afc6:	bf00      	nop
 800afc8:	20000ab4 	.word	0x20000ab4

0800afcc <sniprintf>:
 800afcc:	b40c      	push	{r2, r3}
 800afce:	b530      	push	{r4, r5, lr}
 800afd0:	4b18      	ldr	r3, [pc, #96]	@ (800b034 <sniprintf+0x68>)
 800afd2:	1e0c      	subs	r4, r1, #0
 800afd4:	681d      	ldr	r5, [r3, #0]
 800afd6:	b09d      	sub	sp, #116	@ 0x74
 800afd8:	da08      	bge.n	800afec <sniprintf+0x20>
 800afda:	238b      	movs	r3, #139	@ 0x8b
 800afdc:	602b      	str	r3, [r5, #0]
 800afde:	f04f 30ff 	mov.w	r0, #4294967295
 800afe2:	b01d      	add	sp, #116	@ 0x74
 800afe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afe8:	b002      	add	sp, #8
 800afea:	4770      	bx	lr
 800afec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aff4:	f04f 0300 	mov.w	r3, #0
 800aff8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800affa:	bf14      	ite	ne
 800affc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b000:	4623      	moveq	r3, r4
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	9307      	str	r3, [sp, #28]
 800b006:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b00a:	9002      	str	r0, [sp, #8]
 800b00c:	9006      	str	r0, [sp, #24]
 800b00e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b012:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b014:	ab21      	add	r3, sp, #132	@ 0x84
 800b016:	a902      	add	r1, sp, #8
 800b018:	4628      	mov	r0, r5
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	f000 f91e 	bl	800b25c <_svfiprintf_r>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	bfbc      	itt	lt
 800b024:	238b      	movlt	r3, #139	@ 0x8b
 800b026:	602b      	strlt	r3, [r5, #0]
 800b028:	2c00      	cmp	r4, #0
 800b02a:	d0da      	beq.n	800afe2 <sniprintf+0x16>
 800b02c:	9b02      	ldr	r3, [sp, #8]
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	e7d6      	b.n	800afe2 <sniprintf+0x16>
 800b034:	2000000c 	.word	0x2000000c

0800b038 <memmove>:
 800b038:	4288      	cmp	r0, r1
 800b03a:	b510      	push	{r4, lr}
 800b03c:	eb01 0402 	add.w	r4, r1, r2
 800b040:	d902      	bls.n	800b048 <memmove+0x10>
 800b042:	4284      	cmp	r4, r0
 800b044:	4623      	mov	r3, r4
 800b046:	d807      	bhi.n	800b058 <memmove+0x20>
 800b048:	1e43      	subs	r3, r0, #1
 800b04a:	42a1      	cmp	r1, r4
 800b04c:	d008      	beq.n	800b060 <memmove+0x28>
 800b04e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b052:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b056:	e7f8      	b.n	800b04a <memmove+0x12>
 800b058:	4402      	add	r2, r0
 800b05a:	4601      	mov	r1, r0
 800b05c:	428a      	cmp	r2, r1
 800b05e:	d100      	bne.n	800b062 <memmove+0x2a>
 800b060:	bd10      	pop	{r4, pc}
 800b062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b06a:	e7f7      	b.n	800b05c <memmove+0x24>

0800b06c <memset>:
 800b06c:	4402      	add	r2, r0
 800b06e:	4603      	mov	r3, r0
 800b070:	4293      	cmp	r3, r2
 800b072:	d100      	bne.n	800b076 <memset+0xa>
 800b074:	4770      	bx	lr
 800b076:	f803 1b01 	strb.w	r1, [r3], #1
 800b07a:	e7f9      	b.n	800b070 <memset+0x4>

0800b07c <_sbrk_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d06      	ldr	r5, [pc, #24]	@ (800b098 <_sbrk_r+0x1c>)
 800b080:	2300      	movs	r3, #0
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	602b      	str	r3, [r5, #0]
 800b088:	f7f7 f9fe 	bl	8002488 <_sbrk>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_sbrk_r+0x1a>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	b103      	cbz	r3, 800b096 <_sbrk_r+0x1a>
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	20000ab0 	.word	0x20000ab0

0800b09c <__errno>:
 800b09c:	4b01      	ldr	r3, [pc, #4]	@ (800b0a4 <__errno+0x8>)
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	2000000c 	.word	0x2000000c

0800b0a8 <__libc_init_array>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b0e0 <__libc_init_array+0x38>)
 800b0ac:	4c0d      	ldr	r4, [pc, #52]	@ (800b0e4 <__libc_init_array+0x3c>)
 800b0ae:	1b64      	subs	r4, r4, r5
 800b0b0:	10a4      	asrs	r4, r4, #2
 800b0b2:	2600      	movs	r6, #0
 800b0b4:	42a6      	cmp	r6, r4
 800b0b6:	d109      	bne.n	800b0cc <__libc_init_array+0x24>
 800b0b8:	4d0b      	ldr	r5, [pc, #44]	@ (800b0e8 <__libc_init_array+0x40>)
 800b0ba:	4c0c      	ldr	r4, [pc, #48]	@ (800b0ec <__libc_init_array+0x44>)
 800b0bc:	f000 fb8c 	bl	800b7d8 <_init>
 800b0c0:	1b64      	subs	r4, r4, r5
 800b0c2:	10a4      	asrs	r4, r4, #2
 800b0c4:	2600      	movs	r6, #0
 800b0c6:	42a6      	cmp	r6, r4
 800b0c8:	d105      	bne.n	800b0d6 <__libc_init_array+0x2e>
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0d0:	4798      	blx	r3
 800b0d2:	3601      	adds	r6, #1
 800b0d4:	e7ee      	b.n	800b0b4 <__libc_init_array+0xc>
 800b0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0da:	4798      	blx	r3
 800b0dc:	3601      	adds	r6, #1
 800b0de:	e7f2      	b.n	800b0c6 <__libc_init_array+0x1e>
 800b0e0:	0800c840 	.word	0x0800c840
 800b0e4:	0800c840 	.word	0x0800c840
 800b0e8:	0800c840 	.word	0x0800c840
 800b0ec:	0800c844 	.word	0x0800c844

0800b0f0 <__retarget_lock_acquire_recursive>:
 800b0f0:	4770      	bx	lr

0800b0f2 <__retarget_lock_release_recursive>:
 800b0f2:	4770      	bx	lr

0800b0f4 <memcpy>:
 800b0f4:	440a      	add	r2, r1
 800b0f6:	4291      	cmp	r1, r2
 800b0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0fc:	d100      	bne.n	800b100 <memcpy+0xc>
 800b0fe:	4770      	bx	lr
 800b100:	b510      	push	{r4, lr}
 800b102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b10a:	4291      	cmp	r1, r2
 800b10c:	d1f9      	bne.n	800b102 <memcpy+0xe>
 800b10e:	bd10      	pop	{r4, pc}

0800b110 <_free_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4605      	mov	r5, r0
 800b114:	2900      	cmp	r1, #0
 800b116:	d041      	beq.n	800b19c <_free_r+0x8c>
 800b118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b11c:	1f0c      	subs	r4, r1, #4
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bfb8      	it	lt
 800b122:	18e4      	addlt	r4, r4, r3
 800b124:	f7ff ff46 	bl	800afb4 <__malloc_lock>
 800b128:	4a1d      	ldr	r2, [pc, #116]	@ (800b1a0 <_free_r+0x90>)
 800b12a:	6813      	ldr	r3, [r2, #0]
 800b12c:	b933      	cbnz	r3, 800b13c <_free_r+0x2c>
 800b12e:	6063      	str	r3, [r4, #4]
 800b130:	6014      	str	r4, [r2, #0]
 800b132:	4628      	mov	r0, r5
 800b134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b138:	f7ff bf42 	b.w	800afc0 <__malloc_unlock>
 800b13c:	42a3      	cmp	r3, r4
 800b13e:	d908      	bls.n	800b152 <_free_r+0x42>
 800b140:	6820      	ldr	r0, [r4, #0]
 800b142:	1821      	adds	r1, r4, r0
 800b144:	428b      	cmp	r3, r1
 800b146:	bf01      	itttt	eq
 800b148:	6819      	ldreq	r1, [r3, #0]
 800b14a:	685b      	ldreq	r3, [r3, #4]
 800b14c:	1809      	addeq	r1, r1, r0
 800b14e:	6021      	streq	r1, [r4, #0]
 800b150:	e7ed      	b.n	800b12e <_free_r+0x1e>
 800b152:	461a      	mov	r2, r3
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	b10b      	cbz	r3, 800b15c <_free_r+0x4c>
 800b158:	42a3      	cmp	r3, r4
 800b15a:	d9fa      	bls.n	800b152 <_free_r+0x42>
 800b15c:	6811      	ldr	r1, [r2, #0]
 800b15e:	1850      	adds	r0, r2, r1
 800b160:	42a0      	cmp	r0, r4
 800b162:	d10b      	bne.n	800b17c <_free_r+0x6c>
 800b164:	6820      	ldr	r0, [r4, #0]
 800b166:	4401      	add	r1, r0
 800b168:	1850      	adds	r0, r2, r1
 800b16a:	4283      	cmp	r3, r0
 800b16c:	6011      	str	r1, [r2, #0]
 800b16e:	d1e0      	bne.n	800b132 <_free_r+0x22>
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	6053      	str	r3, [r2, #4]
 800b176:	4408      	add	r0, r1
 800b178:	6010      	str	r0, [r2, #0]
 800b17a:	e7da      	b.n	800b132 <_free_r+0x22>
 800b17c:	d902      	bls.n	800b184 <_free_r+0x74>
 800b17e:	230c      	movs	r3, #12
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	e7d6      	b.n	800b132 <_free_r+0x22>
 800b184:	6820      	ldr	r0, [r4, #0]
 800b186:	1821      	adds	r1, r4, r0
 800b188:	428b      	cmp	r3, r1
 800b18a:	bf04      	itt	eq
 800b18c:	6819      	ldreq	r1, [r3, #0]
 800b18e:	685b      	ldreq	r3, [r3, #4]
 800b190:	6063      	str	r3, [r4, #4]
 800b192:	bf04      	itt	eq
 800b194:	1809      	addeq	r1, r1, r0
 800b196:	6021      	streq	r1, [r4, #0]
 800b198:	6054      	str	r4, [r2, #4]
 800b19a:	e7ca      	b.n	800b132 <_free_r+0x22>
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000974 	.word	0x20000974

0800b1a4 <__ssputs_r>:
 800b1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a8:	688e      	ldr	r6, [r1, #8]
 800b1aa:	461f      	mov	r7, r3
 800b1ac:	42be      	cmp	r6, r7
 800b1ae:	680b      	ldr	r3, [r1, #0]
 800b1b0:	4682      	mov	sl, r0
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	4690      	mov	r8, r2
 800b1b6:	d82d      	bhi.n	800b214 <__ssputs_r+0x70>
 800b1b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1c0:	d026      	beq.n	800b210 <__ssputs_r+0x6c>
 800b1c2:	6965      	ldr	r5, [r4, #20]
 800b1c4:	6909      	ldr	r1, [r1, #16]
 800b1c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1ca:	eba3 0901 	sub.w	r9, r3, r1
 800b1ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1d2:	1c7b      	adds	r3, r7, #1
 800b1d4:	444b      	add	r3, r9
 800b1d6:	106d      	asrs	r5, r5, #1
 800b1d8:	429d      	cmp	r5, r3
 800b1da:	bf38      	it	cc
 800b1dc:	461d      	movcc	r5, r3
 800b1de:	0553      	lsls	r3, r2, #21
 800b1e0:	d527      	bpl.n	800b232 <__ssputs_r+0x8e>
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	f7ff fe66 	bl	800aeb4 <_malloc_r>
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	b360      	cbz	r0, 800b246 <__ssputs_r+0xa2>
 800b1ec:	6921      	ldr	r1, [r4, #16]
 800b1ee:	464a      	mov	r2, r9
 800b1f0:	f7ff ff80 	bl	800b0f4 <memcpy>
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1fe:	81a3      	strh	r3, [r4, #12]
 800b200:	6126      	str	r6, [r4, #16]
 800b202:	6165      	str	r5, [r4, #20]
 800b204:	444e      	add	r6, r9
 800b206:	eba5 0509 	sub.w	r5, r5, r9
 800b20a:	6026      	str	r6, [r4, #0]
 800b20c:	60a5      	str	r5, [r4, #8]
 800b20e:	463e      	mov	r6, r7
 800b210:	42be      	cmp	r6, r7
 800b212:	d900      	bls.n	800b216 <__ssputs_r+0x72>
 800b214:	463e      	mov	r6, r7
 800b216:	6820      	ldr	r0, [r4, #0]
 800b218:	4632      	mov	r2, r6
 800b21a:	4641      	mov	r1, r8
 800b21c:	f7ff ff0c 	bl	800b038 <memmove>
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	1b9b      	subs	r3, r3, r6
 800b224:	60a3      	str	r3, [r4, #8]
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	4433      	add	r3, r6
 800b22a:	6023      	str	r3, [r4, #0]
 800b22c:	2000      	movs	r0, #0
 800b22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b232:	462a      	mov	r2, r5
 800b234:	f000 fa9a 	bl	800b76c <_realloc_r>
 800b238:	4606      	mov	r6, r0
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d1e0      	bne.n	800b200 <__ssputs_r+0x5c>
 800b23e:	6921      	ldr	r1, [r4, #16]
 800b240:	4650      	mov	r0, sl
 800b242:	f7ff ff65 	bl	800b110 <_free_r>
 800b246:	230c      	movs	r3, #12
 800b248:	f8ca 3000 	str.w	r3, [sl]
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	e7e9      	b.n	800b22e <__ssputs_r+0x8a>
	...

0800b25c <_svfiprintf_r>:
 800b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	4698      	mov	r8, r3
 800b262:	898b      	ldrh	r3, [r1, #12]
 800b264:	061b      	lsls	r3, r3, #24
 800b266:	b09d      	sub	sp, #116	@ 0x74
 800b268:	4607      	mov	r7, r0
 800b26a:	460d      	mov	r5, r1
 800b26c:	4614      	mov	r4, r2
 800b26e:	d510      	bpl.n	800b292 <_svfiprintf_r+0x36>
 800b270:	690b      	ldr	r3, [r1, #16]
 800b272:	b973      	cbnz	r3, 800b292 <_svfiprintf_r+0x36>
 800b274:	2140      	movs	r1, #64	@ 0x40
 800b276:	f7ff fe1d 	bl	800aeb4 <_malloc_r>
 800b27a:	6028      	str	r0, [r5, #0]
 800b27c:	6128      	str	r0, [r5, #16]
 800b27e:	b930      	cbnz	r0, 800b28e <_svfiprintf_r+0x32>
 800b280:	230c      	movs	r3, #12
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	b01d      	add	sp, #116	@ 0x74
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	2340      	movs	r3, #64	@ 0x40
 800b290:	616b      	str	r3, [r5, #20]
 800b292:	2300      	movs	r3, #0
 800b294:	9309      	str	r3, [sp, #36]	@ 0x24
 800b296:	2320      	movs	r3, #32
 800b298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b29c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a0:	2330      	movs	r3, #48	@ 0x30
 800b2a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b440 <_svfiprintf_r+0x1e4>
 800b2a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2aa:	f04f 0901 	mov.w	r9, #1
 800b2ae:	4623      	mov	r3, r4
 800b2b0:	469a      	mov	sl, r3
 800b2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2b6:	b10a      	cbz	r2, 800b2bc <_svfiprintf_r+0x60>
 800b2b8:	2a25      	cmp	r2, #37	@ 0x25
 800b2ba:	d1f9      	bne.n	800b2b0 <_svfiprintf_r+0x54>
 800b2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c0:	d00b      	beq.n	800b2da <_svfiprintf_r+0x7e>
 800b2c2:	465b      	mov	r3, fp
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	f7ff ff6b 	bl	800b1a4 <__ssputs_r>
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	f000 80a7 	beq.w	800b422 <_svfiprintf_r+0x1c6>
 800b2d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2d6:	445a      	add	r2, fp
 800b2d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2da:	f89a 3000 	ldrb.w	r3, [sl]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 809f 	beq.w	800b422 <_svfiprintf_r+0x1c6>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ee:	f10a 0a01 	add.w	sl, sl, #1
 800b2f2:	9304      	str	r3, [sp, #16]
 800b2f4:	9307      	str	r3, [sp, #28]
 800b2f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2fc:	4654      	mov	r4, sl
 800b2fe:	2205      	movs	r2, #5
 800b300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b304:	484e      	ldr	r0, [pc, #312]	@ (800b440 <_svfiprintf_r+0x1e4>)
 800b306:	f7f4 ff8b 	bl	8000220 <memchr>
 800b30a:	9a04      	ldr	r2, [sp, #16]
 800b30c:	b9d8      	cbnz	r0, 800b346 <_svfiprintf_r+0xea>
 800b30e:	06d0      	lsls	r0, r2, #27
 800b310:	bf44      	itt	mi
 800b312:	2320      	movmi	r3, #32
 800b314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b318:	0711      	lsls	r1, r2, #28
 800b31a:	bf44      	itt	mi
 800b31c:	232b      	movmi	r3, #43	@ 0x2b
 800b31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b322:	f89a 3000 	ldrb.w	r3, [sl]
 800b326:	2b2a      	cmp	r3, #42	@ 0x2a
 800b328:	d015      	beq.n	800b356 <_svfiprintf_r+0xfa>
 800b32a:	9a07      	ldr	r2, [sp, #28]
 800b32c:	4654      	mov	r4, sl
 800b32e:	2000      	movs	r0, #0
 800b330:	f04f 0c0a 	mov.w	ip, #10
 800b334:	4621      	mov	r1, r4
 800b336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b33a:	3b30      	subs	r3, #48	@ 0x30
 800b33c:	2b09      	cmp	r3, #9
 800b33e:	d94b      	bls.n	800b3d8 <_svfiprintf_r+0x17c>
 800b340:	b1b0      	cbz	r0, 800b370 <_svfiprintf_r+0x114>
 800b342:	9207      	str	r2, [sp, #28]
 800b344:	e014      	b.n	800b370 <_svfiprintf_r+0x114>
 800b346:	eba0 0308 	sub.w	r3, r0, r8
 800b34a:	fa09 f303 	lsl.w	r3, r9, r3
 800b34e:	4313      	orrs	r3, r2
 800b350:	9304      	str	r3, [sp, #16]
 800b352:	46a2      	mov	sl, r4
 800b354:	e7d2      	b.n	800b2fc <_svfiprintf_r+0xa0>
 800b356:	9b03      	ldr	r3, [sp, #12]
 800b358:	1d19      	adds	r1, r3, #4
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	9103      	str	r1, [sp, #12]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bfbb      	ittet	lt
 800b362:	425b      	neglt	r3, r3
 800b364:	f042 0202 	orrlt.w	r2, r2, #2
 800b368:	9307      	strge	r3, [sp, #28]
 800b36a:	9307      	strlt	r3, [sp, #28]
 800b36c:	bfb8      	it	lt
 800b36e:	9204      	strlt	r2, [sp, #16]
 800b370:	7823      	ldrb	r3, [r4, #0]
 800b372:	2b2e      	cmp	r3, #46	@ 0x2e
 800b374:	d10a      	bne.n	800b38c <_svfiprintf_r+0x130>
 800b376:	7863      	ldrb	r3, [r4, #1]
 800b378:	2b2a      	cmp	r3, #42	@ 0x2a
 800b37a:	d132      	bne.n	800b3e2 <_svfiprintf_r+0x186>
 800b37c:	9b03      	ldr	r3, [sp, #12]
 800b37e:	1d1a      	adds	r2, r3, #4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	9203      	str	r2, [sp, #12]
 800b384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b388:	3402      	adds	r4, #2
 800b38a:	9305      	str	r3, [sp, #20]
 800b38c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b450 <_svfiprintf_r+0x1f4>
 800b390:	7821      	ldrb	r1, [r4, #0]
 800b392:	2203      	movs	r2, #3
 800b394:	4650      	mov	r0, sl
 800b396:	f7f4 ff43 	bl	8000220 <memchr>
 800b39a:	b138      	cbz	r0, 800b3ac <_svfiprintf_r+0x150>
 800b39c:	9b04      	ldr	r3, [sp, #16]
 800b39e:	eba0 000a 	sub.w	r0, r0, sl
 800b3a2:	2240      	movs	r2, #64	@ 0x40
 800b3a4:	4082      	lsls	r2, r0
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	3401      	adds	r4, #1
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b0:	4824      	ldr	r0, [pc, #144]	@ (800b444 <_svfiprintf_r+0x1e8>)
 800b3b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3b6:	2206      	movs	r2, #6
 800b3b8:	f7f4 ff32 	bl	8000220 <memchr>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d036      	beq.n	800b42e <_svfiprintf_r+0x1d2>
 800b3c0:	4b21      	ldr	r3, [pc, #132]	@ (800b448 <_svfiprintf_r+0x1ec>)
 800b3c2:	bb1b      	cbnz	r3, 800b40c <_svfiprintf_r+0x1b0>
 800b3c4:	9b03      	ldr	r3, [sp, #12]
 800b3c6:	3307      	adds	r3, #7
 800b3c8:	f023 0307 	bic.w	r3, r3, #7
 800b3cc:	3308      	adds	r3, #8
 800b3ce:	9303      	str	r3, [sp, #12]
 800b3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d2:	4433      	add	r3, r6
 800b3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3d6:	e76a      	b.n	800b2ae <_svfiprintf_r+0x52>
 800b3d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3dc:	460c      	mov	r4, r1
 800b3de:	2001      	movs	r0, #1
 800b3e0:	e7a8      	b.n	800b334 <_svfiprintf_r+0xd8>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	3401      	adds	r4, #1
 800b3e6:	9305      	str	r3, [sp, #20]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	f04f 0c0a 	mov.w	ip, #10
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3f4:	3a30      	subs	r2, #48	@ 0x30
 800b3f6:	2a09      	cmp	r2, #9
 800b3f8:	d903      	bls.n	800b402 <_svfiprintf_r+0x1a6>
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0c6      	beq.n	800b38c <_svfiprintf_r+0x130>
 800b3fe:	9105      	str	r1, [sp, #20]
 800b400:	e7c4      	b.n	800b38c <_svfiprintf_r+0x130>
 800b402:	fb0c 2101 	mla	r1, ip, r1, r2
 800b406:	4604      	mov	r4, r0
 800b408:	2301      	movs	r3, #1
 800b40a:	e7f0      	b.n	800b3ee <_svfiprintf_r+0x192>
 800b40c:	ab03      	add	r3, sp, #12
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	462a      	mov	r2, r5
 800b412:	4b0e      	ldr	r3, [pc, #56]	@ (800b44c <_svfiprintf_r+0x1f0>)
 800b414:	a904      	add	r1, sp, #16
 800b416:	4638      	mov	r0, r7
 800b418:	f3af 8000 	nop.w
 800b41c:	1c42      	adds	r2, r0, #1
 800b41e:	4606      	mov	r6, r0
 800b420:	d1d6      	bne.n	800b3d0 <_svfiprintf_r+0x174>
 800b422:	89ab      	ldrh	r3, [r5, #12]
 800b424:	065b      	lsls	r3, r3, #25
 800b426:	f53f af2d 	bmi.w	800b284 <_svfiprintf_r+0x28>
 800b42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b42c:	e72c      	b.n	800b288 <_svfiprintf_r+0x2c>
 800b42e:	ab03      	add	r3, sp, #12
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	462a      	mov	r2, r5
 800b434:	4b05      	ldr	r3, [pc, #20]	@ (800b44c <_svfiprintf_r+0x1f0>)
 800b436:	a904      	add	r1, sp, #16
 800b438:	4638      	mov	r0, r7
 800b43a:	f000 f879 	bl	800b530 <_printf_i>
 800b43e:	e7ed      	b.n	800b41c <_svfiprintf_r+0x1c0>
 800b440:	0800c5dc 	.word	0x0800c5dc
 800b444:	0800c5e6 	.word	0x0800c5e6
 800b448:	00000000 	.word	0x00000000
 800b44c:	0800b1a5 	.word	0x0800b1a5
 800b450:	0800c5e2 	.word	0x0800c5e2

0800b454 <_printf_common>:
 800b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	4616      	mov	r6, r2
 800b45a:	4698      	mov	r8, r3
 800b45c:	688a      	ldr	r2, [r1, #8]
 800b45e:	690b      	ldr	r3, [r1, #16]
 800b460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b464:	4293      	cmp	r3, r2
 800b466:	bfb8      	it	lt
 800b468:	4613      	movlt	r3, r2
 800b46a:	6033      	str	r3, [r6, #0]
 800b46c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b470:	4607      	mov	r7, r0
 800b472:	460c      	mov	r4, r1
 800b474:	b10a      	cbz	r2, 800b47a <_printf_common+0x26>
 800b476:	3301      	adds	r3, #1
 800b478:	6033      	str	r3, [r6, #0]
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	0699      	lsls	r1, r3, #26
 800b47e:	bf42      	ittt	mi
 800b480:	6833      	ldrmi	r3, [r6, #0]
 800b482:	3302      	addmi	r3, #2
 800b484:	6033      	strmi	r3, [r6, #0]
 800b486:	6825      	ldr	r5, [r4, #0]
 800b488:	f015 0506 	ands.w	r5, r5, #6
 800b48c:	d106      	bne.n	800b49c <_printf_common+0x48>
 800b48e:	f104 0a19 	add.w	sl, r4, #25
 800b492:	68e3      	ldr	r3, [r4, #12]
 800b494:	6832      	ldr	r2, [r6, #0]
 800b496:	1a9b      	subs	r3, r3, r2
 800b498:	42ab      	cmp	r3, r5
 800b49a:	dc26      	bgt.n	800b4ea <_printf_common+0x96>
 800b49c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4a0:	6822      	ldr	r2, [r4, #0]
 800b4a2:	3b00      	subs	r3, #0
 800b4a4:	bf18      	it	ne
 800b4a6:	2301      	movne	r3, #1
 800b4a8:	0692      	lsls	r2, r2, #26
 800b4aa:	d42b      	bmi.n	800b504 <_printf_common+0xb0>
 800b4ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	47c8      	blx	r9
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d01e      	beq.n	800b4f8 <_printf_common+0xa4>
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	6922      	ldr	r2, [r4, #16]
 800b4be:	f003 0306 	and.w	r3, r3, #6
 800b4c2:	2b04      	cmp	r3, #4
 800b4c4:	bf02      	ittt	eq
 800b4c6:	68e5      	ldreq	r5, [r4, #12]
 800b4c8:	6833      	ldreq	r3, [r6, #0]
 800b4ca:	1aed      	subeq	r5, r5, r3
 800b4cc:	68a3      	ldr	r3, [r4, #8]
 800b4ce:	bf0c      	ite	eq
 800b4d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4d4:	2500      	movne	r5, #0
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	bfc4      	itt	gt
 800b4da:	1a9b      	subgt	r3, r3, r2
 800b4dc:	18ed      	addgt	r5, r5, r3
 800b4de:	2600      	movs	r6, #0
 800b4e0:	341a      	adds	r4, #26
 800b4e2:	42b5      	cmp	r5, r6
 800b4e4:	d11a      	bne.n	800b51c <_printf_common+0xc8>
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	e008      	b.n	800b4fc <_printf_common+0xa8>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	4641      	mov	r1, r8
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	47c8      	blx	r9
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d103      	bne.n	800b500 <_printf_common+0xac>
 800b4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b500:	3501      	adds	r5, #1
 800b502:	e7c6      	b.n	800b492 <_printf_common+0x3e>
 800b504:	18e1      	adds	r1, r4, r3
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	2030      	movs	r0, #48	@ 0x30
 800b50a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b50e:	4422      	add	r2, r4
 800b510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b518:	3302      	adds	r3, #2
 800b51a:	e7c7      	b.n	800b4ac <_printf_common+0x58>
 800b51c:	2301      	movs	r3, #1
 800b51e:	4622      	mov	r2, r4
 800b520:	4641      	mov	r1, r8
 800b522:	4638      	mov	r0, r7
 800b524:	47c8      	blx	r9
 800b526:	3001      	adds	r0, #1
 800b528:	d0e6      	beq.n	800b4f8 <_printf_common+0xa4>
 800b52a:	3601      	adds	r6, #1
 800b52c:	e7d9      	b.n	800b4e2 <_printf_common+0x8e>
	...

0800b530 <_printf_i>:
 800b530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b534:	7e0f      	ldrb	r7, [r1, #24]
 800b536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b538:	2f78      	cmp	r7, #120	@ 0x78
 800b53a:	4691      	mov	r9, r2
 800b53c:	4680      	mov	r8, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	469a      	mov	sl, r3
 800b542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b546:	d807      	bhi.n	800b558 <_printf_i+0x28>
 800b548:	2f62      	cmp	r7, #98	@ 0x62
 800b54a:	d80a      	bhi.n	800b562 <_printf_i+0x32>
 800b54c:	2f00      	cmp	r7, #0
 800b54e:	f000 80d1 	beq.w	800b6f4 <_printf_i+0x1c4>
 800b552:	2f58      	cmp	r7, #88	@ 0x58
 800b554:	f000 80b8 	beq.w	800b6c8 <_printf_i+0x198>
 800b558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b55c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b560:	e03a      	b.n	800b5d8 <_printf_i+0xa8>
 800b562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b566:	2b15      	cmp	r3, #21
 800b568:	d8f6      	bhi.n	800b558 <_printf_i+0x28>
 800b56a:	a101      	add	r1, pc, #4	@ (adr r1, 800b570 <_printf_i+0x40>)
 800b56c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b570:	0800b5c9 	.word	0x0800b5c9
 800b574:	0800b5dd 	.word	0x0800b5dd
 800b578:	0800b559 	.word	0x0800b559
 800b57c:	0800b559 	.word	0x0800b559
 800b580:	0800b559 	.word	0x0800b559
 800b584:	0800b559 	.word	0x0800b559
 800b588:	0800b5dd 	.word	0x0800b5dd
 800b58c:	0800b559 	.word	0x0800b559
 800b590:	0800b559 	.word	0x0800b559
 800b594:	0800b559 	.word	0x0800b559
 800b598:	0800b559 	.word	0x0800b559
 800b59c:	0800b6db 	.word	0x0800b6db
 800b5a0:	0800b607 	.word	0x0800b607
 800b5a4:	0800b695 	.word	0x0800b695
 800b5a8:	0800b559 	.word	0x0800b559
 800b5ac:	0800b559 	.word	0x0800b559
 800b5b0:	0800b6fd 	.word	0x0800b6fd
 800b5b4:	0800b559 	.word	0x0800b559
 800b5b8:	0800b607 	.word	0x0800b607
 800b5bc:	0800b559 	.word	0x0800b559
 800b5c0:	0800b559 	.word	0x0800b559
 800b5c4:	0800b69d 	.word	0x0800b69d
 800b5c8:	6833      	ldr	r3, [r6, #0]
 800b5ca:	1d1a      	adds	r2, r3, #4
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6032      	str	r2, [r6, #0]
 800b5d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e09c      	b.n	800b716 <_printf_i+0x1e6>
 800b5dc:	6833      	ldr	r3, [r6, #0]
 800b5de:	6820      	ldr	r0, [r4, #0]
 800b5e0:	1d19      	adds	r1, r3, #4
 800b5e2:	6031      	str	r1, [r6, #0]
 800b5e4:	0606      	lsls	r6, r0, #24
 800b5e6:	d501      	bpl.n	800b5ec <_printf_i+0xbc>
 800b5e8:	681d      	ldr	r5, [r3, #0]
 800b5ea:	e003      	b.n	800b5f4 <_printf_i+0xc4>
 800b5ec:	0645      	lsls	r5, r0, #25
 800b5ee:	d5fb      	bpl.n	800b5e8 <_printf_i+0xb8>
 800b5f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5f4:	2d00      	cmp	r5, #0
 800b5f6:	da03      	bge.n	800b600 <_printf_i+0xd0>
 800b5f8:	232d      	movs	r3, #45	@ 0x2d
 800b5fa:	426d      	negs	r5, r5
 800b5fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b600:	4858      	ldr	r0, [pc, #352]	@ (800b764 <_printf_i+0x234>)
 800b602:	230a      	movs	r3, #10
 800b604:	e011      	b.n	800b62a <_printf_i+0xfa>
 800b606:	6821      	ldr	r1, [r4, #0]
 800b608:	6833      	ldr	r3, [r6, #0]
 800b60a:	0608      	lsls	r0, r1, #24
 800b60c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b610:	d402      	bmi.n	800b618 <_printf_i+0xe8>
 800b612:	0649      	lsls	r1, r1, #25
 800b614:	bf48      	it	mi
 800b616:	b2ad      	uxthmi	r5, r5
 800b618:	2f6f      	cmp	r7, #111	@ 0x6f
 800b61a:	4852      	ldr	r0, [pc, #328]	@ (800b764 <_printf_i+0x234>)
 800b61c:	6033      	str	r3, [r6, #0]
 800b61e:	bf14      	ite	ne
 800b620:	230a      	movne	r3, #10
 800b622:	2308      	moveq	r3, #8
 800b624:	2100      	movs	r1, #0
 800b626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b62a:	6866      	ldr	r6, [r4, #4]
 800b62c:	60a6      	str	r6, [r4, #8]
 800b62e:	2e00      	cmp	r6, #0
 800b630:	db05      	blt.n	800b63e <_printf_i+0x10e>
 800b632:	6821      	ldr	r1, [r4, #0]
 800b634:	432e      	orrs	r6, r5
 800b636:	f021 0104 	bic.w	r1, r1, #4
 800b63a:	6021      	str	r1, [r4, #0]
 800b63c:	d04b      	beq.n	800b6d6 <_printf_i+0x1a6>
 800b63e:	4616      	mov	r6, r2
 800b640:	fbb5 f1f3 	udiv	r1, r5, r3
 800b644:	fb03 5711 	mls	r7, r3, r1, r5
 800b648:	5dc7      	ldrb	r7, [r0, r7]
 800b64a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b64e:	462f      	mov	r7, r5
 800b650:	42bb      	cmp	r3, r7
 800b652:	460d      	mov	r5, r1
 800b654:	d9f4      	bls.n	800b640 <_printf_i+0x110>
 800b656:	2b08      	cmp	r3, #8
 800b658:	d10b      	bne.n	800b672 <_printf_i+0x142>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	07df      	lsls	r7, r3, #31
 800b65e:	d508      	bpl.n	800b672 <_printf_i+0x142>
 800b660:	6923      	ldr	r3, [r4, #16]
 800b662:	6861      	ldr	r1, [r4, #4]
 800b664:	4299      	cmp	r1, r3
 800b666:	bfde      	ittt	le
 800b668:	2330      	movle	r3, #48	@ 0x30
 800b66a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b66e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b672:	1b92      	subs	r2, r2, r6
 800b674:	6122      	str	r2, [r4, #16]
 800b676:	f8cd a000 	str.w	sl, [sp]
 800b67a:	464b      	mov	r3, r9
 800b67c:	aa03      	add	r2, sp, #12
 800b67e:	4621      	mov	r1, r4
 800b680:	4640      	mov	r0, r8
 800b682:	f7ff fee7 	bl	800b454 <_printf_common>
 800b686:	3001      	adds	r0, #1
 800b688:	d14a      	bne.n	800b720 <_printf_i+0x1f0>
 800b68a:	f04f 30ff 	mov.w	r0, #4294967295
 800b68e:	b004      	add	sp, #16
 800b690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	f043 0320 	orr.w	r3, r3, #32
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	4832      	ldr	r0, [pc, #200]	@ (800b768 <_printf_i+0x238>)
 800b69e:	2778      	movs	r7, #120	@ 0x78
 800b6a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	6831      	ldr	r1, [r6, #0]
 800b6a8:	061f      	lsls	r7, r3, #24
 800b6aa:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6ae:	d402      	bmi.n	800b6b6 <_printf_i+0x186>
 800b6b0:	065f      	lsls	r7, r3, #25
 800b6b2:	bf48      	it	mi
 800b6b4:	b2ad      	uxthmi	r5, r5
 800b6b6:	6031      	str	r1, [r6, #0]
 800b6b8:	07d9      	lsls	r1, r3, #31
 800b6ba:	bf44      	itt	mi
 800b6bc:	f043 0320 	orrmi.w	r3, r3, #32
 800b6c0:	6023      	strmi	r3, [r4, #0]
 800b6c2:	b11d      	cbz	r5, 800b6cc <_printf_i+0x19c>
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	e7ad      	b.n	800b624 <_printf_i+0xf4>
 800b6c8:	4826      	ldr	r0, [pc, #152]	@ (800b764 <_printf_i+0x234>)
 800b6ca:	e7e9      	b.n	800b6a0 <_printf_i+0x170>
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	f023 0320 	bic.w	r3, r3, #32
 800b6d2:	6023      	str	r3, [r4, #0]
 800b6d4:	e7f6      	b.n	800b6c4 <_printf_i+0x194>
 800b6d6:	4616      	mov	r6, r2
 800b6d8:	e7bd      	b.n	800b656 <_printf_i+0x126>
 800b6da:	6833      	ldr	r3, [r6, #0]
 800b6dc:	6825      	ldr	r5, [r4, #0]
 800b6de:	6961      	ldr	r1, [r4, #20]
 800b6e0:	1d18      	adds	r0, r3, #4
 800b6e2:	6030      	str	r0, [r6, #0]
 800b6e4:	062e      	lsls	r6, r5, #24
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	d501      	bpl.n	800b6ee <_printf_i+0x1be>
 800b6ea:	6019      	str	r1, [r3, #0]
 800b6ec:	e002      	b.n	800b6f4 <_printf_i+0x1c4>
 800b6ee:	0668      	lsls	r0, r5, #25
 800b6f0:	d5fb      	bpl.n	800b6ea <_printf_i+0x1ba>
 800b6f2:	8019      	strh	r1, [r3, #0]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	6123      	str	r3, [r4, #16]
 800b6f8:	4616      	mov	r6, r2
 800b6fa:	e7bc      	b.n	800b676 <_printf_i+0x146>
 800b6fc:	6833      	ldr	r3, [r6, #0]
 800b6fe:	1d1a      	adds	r2, r3, #4
 800b700:	6032      	str	r2, [r6, #0]
 800b702:	681e      	ldr	r6, [r3, #0]
 800b704:	6862      	ldr	r2, [r4, #4]
 800b706:	2100      	movs	r1, #0
 800b708:	4630      	mov	r0, r6
 800b70a:	f7f4 fd89 	bl	8000220 <memchr>
 800b70e:	b108      	cbz	r0, 800b714 <_printf_i+0x1e4>
 800b710:	1b80      	subs	r0, r0, r6
 800b712:	6060      	str	r0, [r4, #4]
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	6123      	str	r3, [r4, #16]
 800b718:	2300      	movs	r3, #0
 800b71a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b71e:	e7aa      	b.n	800b676 <_printf_i+0x146>
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	4632      	mov	r2, r6
 800b724:	4649      	mov	r1, r9
 800b726:	4640      	mov	r0, r8
 800b728:	47d0      	blx	sl
 800b72a:	3001      	adds	r0, #1
 800b72c:	d0ad      	beq.n	800b68a <_printf_i+0x15a>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	079b      	lsls	r3, r3, #30
 800b732:	d413      	bmi.n	800b75c <_printf_i+0x22c>
 800b734:	68e0      	ldr	r0, [r4, #12]
 800b736:	9b03      	ldr	r3, [sp, #12]
 800b738:	4298      	cmp	r0, r3
 800b73a:	bfb8      	it	lt
 800b73c:	4618      	movlt	r0, r3
 800b73e:	e7a6      	b.n	800b68e <_printf_i+0x15e>
 800b740:	2301      	movs	r3, #1
 800b742:	4632      	mov	r2, r6
 800b744:	4649      	mov	r1, r9
 800b746:	4640      	mov	r0, r8
 800b748:	47d0      	blx	sl
 800b74a:	3001      	adds	r0, #1
 800b74c:	d09d      	beq.n	800b68a <_printf_i+0x15a>
 800b74e:	3501      	adds	r5, #1
 800b750:	68e3      	ldr	r3, [r4, #12]
 800b752:	9903      	ldr	r1, [sp, #12]
 800b754:	1a5b      	subs	r3, r3, r1
 800b756:	42ab      	cmp	r3, r5
 800b758:	dcf2      	bgt.n	800b740 <_printf_i+0x210>
 800b75a:	e7eb      	b.n	800b734 <_printf_i+0x204>
 800b75c:	2500      	movs	r5, #0
 800b75e:	f104 0619 	add.w	r6, r4, #25
 800b762:	e7f5      	b.n	800b750 <_printf_i+0x220>
 800b764:	0800c5ed 	.word	0x0800c5ed
 800b768:	0800c5fe 	.word	0x0800c5fe

0800b76c <_realloc_r>:
 800b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b770:	4607      	mov	r7, r0
 800b772:	4614      	mov	r4, r2
 800b774:	460d      	mov	r5, r1
 800b776:	b921      	cbnz	r1, 800b782 <_realloc_r+0x16>
 800b778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b77c:	4611      	mov	r1, r2
 800b77e:	f7ff bb99 	b.w	800aeb4 <_malloc_r>
 800b782:	b92a      	cbnz	r2, 800b790 <_realloc_r+0x24>
 800b784:	f7ff fcc4 	bl	800b110 <_free_r>
 800b788:	4625      	mov	r5, r4
 800b78a:	4628      	mov	r0, r5
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	f000 f81a 	bl	800b7c8 <_malloc_usable_size_r>
 800b794:	4284      	cmp	r4, r0
 800b796:	4606      	mov	r6, r0
 800b798:	d802      	bhi.n	800b7a0 <_realloc_r+0x34>
 800b79a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b79e:	d8f4      	bhi.n	800b78a <_realloc_r+0x1e>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	f7ff fb86 	bl	800aeb4 <_malloc_r>
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	b908      	cbnz	r0, 800b7b0 <_realloc_r+0x44>
 800b7ac:	4645      	mov	r5, r8
 800b7ae:	e7ec      	b.n	800b78a <_realloc_r+0x1e>
 800b7b0:	42b4      	cmp	r4, r6
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	bf28      	it	cs
 800b7b8:	4632      	movcs	r2, r6
 800b7ba:	f7ff fc9b 	bl	800b0f4 <memcpy>
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff fca5 	bl	800b110 <_free_r>
 800b7c6:	e7f1      	b.n	800b7ac <_realloc_r+0x40>

0800b7c8 <_malloc_usable_size_r>:
 800b7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7cc:	1f18      	subs	r0, r3, #4
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	bfbc      	itt	lt
 800b7d2:	580b      	ldrlt	r3, [r1, r0]
 800b7d4:	18c0      	addlt	r0, r0, r3
 800b7d6:	4770      	bx	lr

0800b7d8 <_init>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	bf00      	nop
 800b7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7de:	bc08      	pop	{r3}
 800b7e0:	469e      	mov	lr, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <_fini>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	bf00      	nop
 800b7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ea:	bc08      	pop	{r3}
 800b7ec:	469e      	mov	lr, r3
 800b7ee:	4770      	bx	lr
