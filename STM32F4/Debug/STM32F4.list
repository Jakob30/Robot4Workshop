
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fdc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  080081ac  080081ac  000091ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa0  08008fa0  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008fa0  08008fa0  00009fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fa8  08008fa8  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fa8  08008fa8  00009fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fac  08008fac  00009fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008fb0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  2000005c  0800900c  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  0800900c  0000aabc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017181  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff1  00000000  00000000  0002120d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00024200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8d  00000000  00000000  000255e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024162  00000000  00000000  00026575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001941c  00000000  00000000  0004a6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e8f  00000000  00000000  00063af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  0013a9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001404e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008194 	.word	0x08008194

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08008194 	.word	0x08008194

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b988 	b.w	8000dd4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	468e      	mov	lr, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	4688      	mov	r8, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d962      	bls.n	8000bb8 <__udivmoddi4+0xdc>
 8000af2:	fab2 f682 	clz	r6, r2
 8000af6:	b14e      	cbz	r6, 8000b0c <__udivmoddi4+0x30>
 8000af8:	f1c6 0320 	rsb	r3, r6, #32
 8000afc:	fa01 f806 	lsl.w	r8, r1, r6
 8000b00:	fa20 f303 	lsr.w	r3, r0, r3
 8000b04:	40b7      	lsls	r7, r6
 8000b06:	ea43 0808 	orr.w	r8, r3, r8
 8000b0a:	40b4      	lsls	r4, r6
 8000b0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b10:	fa1f fc87 	uxth.w	ip, r7
 8000b14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b22:	fb01 f20c 	mul.w	r2, r1, ip
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b30:	f080 80ea 	bcs.w	8000d08 <__udivmoddi4+0x22c>
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f240 80e7 	bls.w	8000d08 <__udivmoddi4+0x22c>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	443b      	add	r3, r7
 8000b3e:	1a9a      	subs	r2, r3, r2
 8000b40:	b2a3      	uxth	r3, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b52:	459c      	cmp	ip, r3
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x8e>
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5c:	f080 80d6 	bcs.w	8000d0c <__udivmoddi4+0x230>
 8000b60:	459c      	cmp	ip, r3
 8000b62:	f240 80d3 	bls.w	8000d0c <__udivmoddi4+0x230>
 8000b66:	443b      	add	r3, r7
 8000b68:	3802      	subs	r0, #2
 8000b6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b6e:	eba3 030c 	sub.w	r3, r3, ip
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11d      	cbz	r5, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40f3      	lsrs	r3, r6
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d905      	bls.n	8000b92 <__udivmoddi4+0xb6>
 8000b86:	b10d      	cbz	r5, 8000b8c <__udivmoddi4+0xb0>
 8000b88:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e7f5      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000b92:	fab3 f183 	clz	r1, r3
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d146      	bne.n	8000c28 <__udivmoddi4+0x14c>
 8000b9a:	4573      	cmp	r3, lr
 8000b9c:	d302      	bcc.n	8000ba4 <__udivmoddi4+0xc8>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	f200 8105 	bhi.w	8000dae <__udivmoddi4+0x2d2>
 8000ba4:	1a84      	subs	r4, r0, r2
 8000ba6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000baa:	2001      	movs	r0, #1
 8000bac:	4690      	mov	r8, r2
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d0e5      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bb6:	e7e2      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f000 8090 	beq.w	8000cde <__udivmoddi4+0x202>
 8000bbe:	fab2 f682 	clz	r6, r2
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f040 80a4 	bne.w	8000d10 <__udivmoddi4+0x234>
 8000bc8:	1a8a      	subs	r2, r1, r2
 8000bca:	0c03      	lsrs	r3, r0, #16
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	b2bc      	uxth	r4, r7
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb04 f20c 	mul.w	r2, r4, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d907      	bls.n	8000bfa <__udivmoddi4+0x11e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x11c>
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	f200 80e0 	bhi.w	8000db8 <__udivmoddi4+0x2dc>
 8000bf8:	46c4      	mov	ip, r8
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c08:	fb02 f404 	mul.w	r4, r2, r4
 8000c0c:	429c      	cmp	r4, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x144>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x142>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f200 80ca 	bhi.w	8000db2 <__udivmoddi4+0x2d6>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	1b1b      	subs	r3, r3, r4
 8000c22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c26:	e7a5      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c28:	f1c1 0620 	rsb	r6, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c32:	431f      	orrs	r7, r3
 8000c34:	fa0e f401 	lsl.w	r4, lr, r1
 8000c38:	fa20 f306 	lsr.w	r3, r0, r6
 8000c3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c44:	4323      	orrs	r3, r4
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	fa1f fc87 	uxth.w	ip, r7
 8000c4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c52:	0c1c      	lsrs	r4, r3, #16
 8000c54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x1a0>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c6e:	f080 809c 	bcs.w	8000daa <__udivmoddi4+0x2ce>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8099 	bls.w	8000daa <__udivmoddi4+0x2ce>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	fa1f fe83 	uxth.w	lr, r3
 8000c84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c88:	fb09 4413 	mls	r4, r9, r3, r4
 8000c8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c94:	45a4      	cmp	ip, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x1ce>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c9e:	f080 8082 	bcs.w	8000da6 <__udivmoddi4+0x2ca>
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d97f      	bls.n	8000da6 <__udivmoddi4+0x2ca>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cb6:	4564      	cmp	r4, ip
 8000cb8:	4673      	mov	r3, lr
 8000cba:	46e1      	mov	r9, ip
 8000cbc:	d362      	bcc.n	8000d84 <__udivmoddi4+0x2a8>
 8000cbe:	d05f      	beq.n	8000d80 <__udivmoddi4+0x2a4>
 8000cc0:	b15d      	cbz	r5, 8000cda <__udivmoddi4+0x1fe>
 8000cc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000cc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cca:	fa04 f606 	lsl.w	r6, r4, r6
 8000cce:	fa22 f301 	lsr.w	r3, r2, r1
 8000cd2:	431e      	orrs	r6, r3
 8000cd4:	40cc      	lsrs	r4, r1
 8000cd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e74f      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000cde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ce2:	0c01      	lsrs	r1, r0, #16
 8000ce4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ce8:	b280      	uxth	r0, r0
 8000cea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	463c      	mov	r4, r7
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	46be      	mov	lr, r7
 8000cf8:	2620      	movs	r6, #32
 8000cfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cfe:	eba2 0208 	sub.w	r2, r2, r8
 8000d02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d06:	e766      	b.n	8000bd6 <__udivmoddi4+0xfa>
 8000d08:	4601      	mov	r1, r0
 8000d0a:	e718      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	e72c      	b.n	8000b6a <__udivmoddi4+0x8e>
 8000d10:	f1c6 0220 	rsb	r2, r6, #32
 8000d14:	fa2e f302 	lsr.w	r3, lr, r2
 8000d18:	40b7      	lsls	r7, r6
 8000d1a:	40b1      	lsls	r1, r6
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d24:	430a      	orrs	r2, r1
 8000d26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d2a:	b2bc      	uxth	r4, r7
 8000d2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb08 f904 	mul.w	r9, r8, r4
 8000d3a:	40b0      	lsls	r0, r6
 8000d3c:	4589      	cmp	r9, r1
 8000d3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d42:	b280      	uxth	r0, r0
 8000d44:	d93e      	bls.n	8000dc4 <__udivmoddi4+0x2e8>
 8000d46:	1879      	adds	r1, r7, r1
 8000d48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d4c:	d201      	bcs.n	8000d52 <__udivmoddi4+0x276>
 8000d4e:	4589      	cmp	r9, r1
 8000d50:	d81f      	bhi.n	8000d92 <__udivmoddi4+0x2b6>
 8000d52:	eba1 0109 	sub.w	r1, r1, r9
 8000d56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5a:	fb09 f804 	mul.w	r8, r9, r4
 8000d5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d62:	b292      	uxth	r2, r2
 8000d64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d68:	4542      	cmp	r2, r8
 8000d6a:	d229      	bcs.n	8000dc0 <__udivmoddi4+0x2e4>
 8000d6c:	18ba      	adds	r2, r7, r2
 8000d6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d72:	d2c4      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d74:	4542      	cmp	r2, r8
 8000d76:	d2c2      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d78:	f1a9 0102 	sub.w	r1, r9, #2
 8000d7c:	443a      	add	r2, r7
 8000d7e:	e7be      	b.n	8000cfe <__udivmoddi4+0x222>
 8000d80:	45f0      	cmp	r8, lr
 8000d82:	d29d      	bcs.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d84:	ebbe 0302 	subs.w	r3, lr, r2
 8000d88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	46e1      	mov	r9, ip
 8000d90:	e796      	b.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d92:	eba7 0909 	sub.w	r9, r7, r9
 8000d96:	4449      	add	r1, r9
 8000d98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da0:	fb09 f804 	mul.w	r8, r9, r4
 8000da4:	e7db      	b.n	8000d5e <__udivmoddi4+0x282>
 8000da6:	4673      	mov	r3, lr
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1ce>
 8000daa:	4650      	mov	r0, sl
 8000dac:	e766      	b.n	8000c7c <__udivmoddi4+0x1a0>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e6fd      	b.n	8000bae <__udivmoddi4+0xd2>
 8000db2:	443b      	add	r3, r7
 8000db4:	3a02      	subs	r2, #2
 8000db6:	e733      	b.n	8000c20 <__udivmoddi4+0x144>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	443b      	add	r3, r7
 8000dbe:	e71c      	b.n	8000bfa <__udivmoddi4+0x11e>
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	e79c      	b.n	8000cfe <__udivmoddi4+0x222>
 8000dc4:	eba1 0109 	sub.w	r1, r1, r9
 8000dc8:	46c4      	mov	ip, r8
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fb09 f804 	mul.w	r8, r9, r4
 8000dd2:	e7c4      	b.n	8000d5e <__udivmoddi4+0x282>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <writeDisplay>:
 * To write to external display with only one parameter, the string.
 * Also wraps the text around the edges if string size is bigger than the width of the monitor
 */

void writeDisplay(char* str)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	@ 0x30
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	6078      	str	r0, [r7, #4]
	ssd1306_Init();
 8000de0:	f000 f8b8 	bl	8000f54 <ssd1306_Init>
	SSD1306_Font_t font = Font_11x18; //Set font size
 8000de4:	4a3d      	ldr	r2, [pc, #244]	@ (8000edc <writeDisplay+0x104>)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t y = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int8_t str_length = strlen(str);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fa0a 	bl	8000210 <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t display_length = 128;
 8000e02:	2380      	movs	r3, #128	@ 0x80
 8000e04:	77fb      	strb	r3, [r7, #31]
	uint8_t display_height = 64;
 8000e06:	2340      	movs	r3, #64	@ 0x40
 8000e08:	77bb      	strb	r3, [r7, #30]
	uint8_t max_char = (display_length-2)/font.width; //Calculate maximum number of characters that fit in one line
 8000e0a:	7ffb      	ldrb	r3, [r7, #31]
 8000e0c:	3b02      	subs	r3, #2
 8000e0e:	7b3a      	ldrb	r2, [r7, #12]
 8000e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e14:	777b      	strb	r3, [r7, #29]
	uint8_t max_lines = display_height/font.height;
 8000e16:	7b7b      	ldrb	r3, [r7, #13]
 8000e18:	7fba      	ldrb	r2, [r7, #30]
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	773b      	strb	r3, [r7, #28]
	uint8_t line = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	ssd1306_Fill(Black);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f8fe 	bl	8001028 <ssd1306_Fill>

	while(str_length > 0 && line < max_lines)
 8000e2c:	e047      	b.n	8000ebe <writeDisplay+0xe6>
	{
		ssd1306_SetCursor(2, y); //Set cursor to start of the line
 8000e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e32:	4619      	mov	r1, r3
 8000e34:	2002      	movs	r0, #2
 8000e36:	f000 fa43 	bl	80012c0 <ssd1306_SetCursor>

		char* sub_str = malloc(max_char + 1); //Variable needed to store the string of the current line
 8000e3a:	7f7b      	ldrb	r3, [r7, #29]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f006 fce4 	bl	800780c <malloc>
 8000e44:	4603      	mov	r3, r0
 8000e46:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < max_char; i++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	e011      	b.n	8000e72 <writeDisplay+0x9a>
		{
			sub_str[i] = str[i + max_char * line];
 8000e4e:	7f7b      	ldrb	r3, [r7, #29]
 8000e50:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000e54:	fb03 f202 	mul.w	r2, r3, r2
 8000e58:	6a3b      	ldr	r3, [r7, #32]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	441a      	add	r2, r3
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	69b9      	ldr	r1, [r7, #24]
 8000e66:	440b      	add	r3, r1
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < max_char; i++)
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	623b      	str	r3, [r7, #32]
 8000e72:	7f7b      	ldrb	r3, [r7, #29]
 8000e74:	6a3a      	ldr	r2, [r7, #32]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	dbe9      	blt.n	8000e4e <writeDisplay+0x76>
		}
		sub_str[max_char] = '\0';	//At the end of the string, add a null terminator
 8000e7a:	7f7b      	ldrb	r3, [r7, #29]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4413      	add	r3, r2
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(sub_str, font, White); //Write the current line to the buffer
 8000e84:	2301      	movs	r3, #1
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8e:	69b8      	ldr	r0, [r7, #24]
 8000e90:	f000 f9f0 	bl	8001274 <ssd1306_WriteString>
		str_length = str_length - max_char;
 8000e94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000e98:	7f7b      	ldrb	r3, [r7, #29]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		y += font.height;
 8000ea2:	7b7a      	ldrb	r2, [r7, #13]
 8000ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ea8:	4413      	add	r3, r2
 8000eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		line++;
 8000eae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		free(sub_str);
 8000eb8:	69b8      	ldr	r0, [r7, #24]
 8000eba:	f006 fcaf 	bl	800781c <free>
	while(str_length > 0 && line < max_lines)
 8000ebe:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	dd04      	ble.n	8000ed0 <writeDisplay+0xf8>
 8000ec6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000eca:	7f3b      	ldrb	r3, [r7, #28]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3ae      	bcc.n	8000e2e <writeDisplay+0x56>
	}
	ssd1306_UpdateScreen();
 8000ed0:	f000 f8c2 	bl	8001058 <ssd1306_UpdateScreen>
}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	@ 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08008f48 	.word	0x08008f48

08000ee0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2178      	movs	r1, #120	@ 0x78
 8000f0e:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <ssd1306_WriteCommand+0x2c>)
 8000f10:	f003 fd20 	bl	8004954 <HAL_I2C_Mem_Write>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000480 	.word	0x20000480

08000f20 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f32:	9202      	str	r2, [sp, #8]
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2240      	movs	r2, #64	@ 0x40
 8000f3e:	2178      	movs	r1, #120	@ 0x78
 8000f40:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <ssd1306_WriteData+0x30>)
 8000f42:	f003 fd07 	bl	8004954 <HAL_I2C_Mem_Write>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000480 	.word	0x20000480

08000f54 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f58:	f7ff ffc2 	bl	8000ee0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f5c:	2064      	movs	r0, #100	@ 0x64
 8000f5e:	f003 f8b7 	bl	80040d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f9d8 	bl	8001318 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f68:	2020      	movs	r0, #32
 8000f6a:	f7ff ffc1 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff ffbe 	bl	8000ef0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f74:	20b0      	movs	r0, #176	@ 0xb0
 8000f76:	f7ff ffbb 	bl	8000ef0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f7a:	20c8      	movs	r0, #200	@ 0xc8
 8000f7c:	f7ff ffb8 	bl	8000ef0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ffb5 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f86:	2010      	movs	r0, #16
 8000f88:	f7ff ffb2 	bl	8000ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f8c:	2040      	movs	r0, #64	@ 0x40
 8000f8e:	f7ff ffaf 	bl	8000ef0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f92:	20ff      	movs	r0, #255	@ 0xff
 8000f94:	f000 f9ac 	bl	80012f0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f98:	20a1      	movs	r0, #161	@ 0xa1
 8000f9a:	f7ff ffa9 	bl	8000ef0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f9e:	20a6      	movs	r0, #166	@ 0xa6
 8000fa0:	f7ff ffa6 	bl	8000ef0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000fa4:	20a8      	movs	r0, #168	@ 0xa8
 8000fa6:	f7ff ffa3 	bl	8000ef0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000faa:	203f      	movs	r0, #63	@ 0x3f
 8000fac:	f7ff ffa0 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fb0:	20a4      	movs	r0, #164	@ 0xa4
 8000fb2:	f7ff ff9d 	bl	8000ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000fb6:	20d3      	movs	r0, #211	@ 0xd3
 8000fb8:	f7ff ff9a 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ff97 	bl	8000ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fc2:	20d5      	movs	r0, #213	@ 0xd5
 8000fc4:	f7ff ff94 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000fc8:	20f0      	movs	r0, #240	@ 0xf0
 8000fca:	f7ff ff91 	bl	8000ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000fce:	20d9      	movs	r0, #217	@ 0xd9
 8000fd0:	f7ff ff8e 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000fd4:	2022      	movs	r0, #34	@ 0x22
 8000fd6:	f7ff ff8b 	bl	8000ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000fda:	20da      	movs	r0, #218	@ 0xda
 8000fdc:	f7ff ff88 	bl	8000ef0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000fe0:	2012      	movs	r0, #18
 8000fe2:	f7ff ff85 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000fe6:	20db      	movs	r0, #219	@ 0xdb
 8000fe8:	f7ff ff82 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000fec:	2020      	movs	r0, #32
 8000fee:	f7ff ff7f 	bl	8000ef0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000ff2:	208d      	movs	r0, #141	@ 0x8d
 8000ff4:	f7ff ff7c 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000ff8:	2014      	movs	r0, #20
 8000ffa:	f7ff ff79 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 f98a 	bl	8001318 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f80f 	bl	8001028 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800100a:	f000 f825 	bl	8001058 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <ssd1306_Init+0xd0>)
 8001010:	2200      	movs	r2, #0
 8001012:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001014:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <ssd1306_Init+0xd0>)
 8001016:	2200      	movs	r2, #0
 8001018:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800101a:	4b02      	ldr	r3, [pc, #8]	@ (8001024 <ssd1306_Init+0xd0>)
 800101c:	2201      	movs	r2, #1
 800101e:	711a      	strb	r2, [r3, #4]
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000478 	.word	0x20000478

08001028 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <ssd1306_Fill+0x14>
 8001038:	2300      	movs	r3, #0
 800103a:	e000      	b.n	800103e <ssd1306_Fill+0x16>
 800103c:	23ff      	movs	r3, #255	@ 0xff
 800103e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001042:	4619      	mov	r1, r3
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <ssd1306_Fill+0x2c>)
 8001046:	f006 fcef 	bl	8007a28 <memset>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000078 	.word	0x20000078

08001058 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800105e:	2300      	movs	r3, #0
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	e016      	b.n	8001092 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	3b50      	subs	r3, #80	@ 0x50
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff40 	bl	8000ef0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff3d 	bl	8000ef0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001076:	2010      	movs	r0, #16
 8001078:	f7ff ff3a 	bl	8000ef0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	01db      	lsls	r3, r3, #7
 8001080:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <ssd1306_UpdateScreen+0x4c>)
 8001082:	4413      	add	r3, r2
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff4a 	bl	8000f20 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	3301      	adds	r3, #1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b07      	cmp	r3, #7
 8001096:	d9e5      	bls.n	8001064 <ssd1306_UpdateScreen+0xc>
    }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000078 	.word	0x20000078

080010a8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	460b      	mov	r3, r1
 80010b4:	71bb      	strb	r3, [r7, #6]
 80010b6:	4613      	mov	r3, r2
 80010b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db3d      	blt.n	800113e <ssd1306_DrawPixel+0x96>
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010c6:	d83a      	bhi.n	800113e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d11a      	bne.n	8001104 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	b2d8      	uxtb	r0, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	01db      	lsls	r3, r3, #7
 80010da:	4413      	add	r3, r2
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <ssd1306_DrawPixel+0xa4>)
 80010de:	5cd3      	ldrb	r3, [r2, r3]
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b259      	sxtb	r1, r3
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	4603      	mov	r3, r0
 80010f8:	01db      	lsls	r3, r3, #7
 80010fa:	4413      	add	r3, r2
 80010fc:	b2c9      	uxtb	r1, r1
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <ssd1306_DrawPixel+0xa4>)
 8001100:	54d1      	strb	r1, [r2, r3]
 8001102:	e01d      	b.n	8001140 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001104:	79fa      	ldrb	r2, [r7, #7]
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	b2d8      	uxtb	r0, r3
 800110c:	4603      	mov	r3, r0
 800110e:	01db      	lsls	r3, r3, #7
 8001110:	4413      	add	r3, r2
 8001112:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <ssd1306_DrawPixel+0xa4>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	b25a      	sxtb	r2, r3
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	b25b      	sxtb	r3, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	b25b      	sxtb	r3, r3
 800112a:	4013      	ands	r3, r2
 800112c:	b259      	sxtb	r1, r3
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	4603      	mov	r3, r0
 8001132:	01db      	lsls	r3, r3, #7
 8001134:	4413      	add	r3, r2
 8001136:	b2c9      	uxtb	r1, r1
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <ssd1306_DrawPixel+0xa4>)
 800113a:	54d1      	strb	r1, [r2, r3]
 800113c:	e000      	b.n	8001140 <ssd1306_DrawPixel+0x98>
        return;
 800113e:	bf00      	nop
    }
}
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000078 	.word	0x20000078

08001150 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	4604      	mov	r4, r0
 8001158:	4638      	mov	r0, r7
 800115a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800115e:	4623      	mov	r3, r4
 8001160:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b1f      	cmp	r3, #31
 8001166:	d902      	bls.n	800116e <ssd1306_WriteChar+0x1e>
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b7e      	cmp	r3, #126	@ 0x7e
 800116c:	d901      	bls.n	8001172 <ssd1306_WriteChar+0x22>
        return 0;
 800116e:	2300      	movs	r3, #0
 8001170:	e079      	b.n	8001266 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <ssd1306_WriteChar+0x34>
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	3b20      	subs	r3, #32
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	e000      	b.n	8001186 <ssd1306_WriteChar+0x36>
 8001184:	783b      	ldrb	r3, [r7, #0]
 8001186:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001188:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <ssd1306_WriteChar+0x120>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	4413      	add	r3, r2
 8001192:	2b80      	cmp	r3, #128	@ 0x80
 8001194:	dc06      	bgt.n	80011a4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001196:	4b36      	ldr	r3, [pc, #216]	@ (8001270 <ssd1306_WriteChar+0x120>)
 8001198:	885b      	ldrh	r3, [r3, #2]
 800119a:	461a      	mov	r2, r3
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80011a0:	2b40      	cmp	r3, #64	@ 0x40
 80011a2:	dd01      	ble.n	80011a8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e05e      	b.n	8001266 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	e04d      	b.n	800124a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	3b20      	subs	r3, #32
 80011b4:	7879      	ldrb	r1, [r7, #1]
 80011b6:	fb01 f303 	mul.w	r3, r1, r3
 80011ba:	4619      	mov	r1, r3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	440b      	add	r3, r1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	e036      	b.n	800123c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011de:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <ssd1306_WriteChar+0x120>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	b2d8      	uxtb	r0, r3
 80011ec:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <ssd1306_WriteChar+0x120>)
 80011ee:	885b      	ldrh	r3, [r3, #2]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff ff52 	bl	80010a8 <ssd1306_DrawPixel>
 8001204:	e017      	b.n	8001236 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <ssd1306_WriteChar+0x120>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b2d8      	uxtb	r0, r3
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <ssd1306_WriteChar+0x120>)
 8001216:	885b      	ldrh	r3, [r3, #2]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	b2d9      	uxtb	r1, r3
 8001222:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf0c      	ite	eq
 800122a:	2301      	moveq	r3, #1
 800122c:	2300      	movne	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	f7ff ff39 	bl	80010a8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	3301      	adds	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	429a      	cmp	r2, r3
 8001242:	d3c4      	bcc.n	80011ce <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	3301      	adds	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	787b      	ldrb	r3, [r7, #1]
 800124c:	461a      	mov	r2, r3
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	4293      	cmp	r3, r2
 8001252:	d3ac      	bcc.n	80011ae <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <ssd1306_WriteChar+0x120>)
 8001256:	881a      	ldrh	r2, [r3, #0]
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4413      	add	r3, r2
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <ssd1306_WriteChar+0x120>)
 8001262:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	20000478 	.word	0x20000478

08001274 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	4638      	mov	r0, r7
 800127e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001282:	e013      	b.n	80012ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	7818      	ldrb	r0, [r3, #0]
 8001288:	7e3b      	ldrb	r3, [r7, #24]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	463b      	mov	r3, r7
 800128e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001290:	f7ff ff5e 	bl	8001150 <ssd1306_WriteChar>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d002      	beq.n	80012a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	e008      	b.n	80012b8 <ssd1306_WriteString+0x44>
        }
        str++;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1e7      	bne.n	8001284 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	781b      	ldrb	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <ssd1306_SetCursor+0x2c>)
 80012d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <ssd1306_SetCursor+0x2c>)
 80012de:	805a      	strh	r2, [r3, #2]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000478 	.word	0x20000478

080012f0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80012fa:	2381      	movs	r3, #129	@ 0x81
 80012fc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fdf5 	bl	8000ef0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fdf1 	bl	8000ef0 <ssd1306_WriteCommand>
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001328:	23af      	movs	r3, #175	@ 0xaf
 800132a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <ssd1306_SetDisplayOn+0x38>)
 800132e:	2201      	movs	r2, #1
 8001330:	715a      	strb	r2, [r3, #5]
 8001332:	e004      	b.n	800133e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001334:	23ae      	movs	r3, #174	@ 0xae
 8001336:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <ssd1306_SetDisplayOn+0x38>)
 800133a:	2200      	movs	r2, #0
 800133c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fdd5 	bl	8000ef0 <ssd1306_WriteCommand>
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000478 	.word	0x20000478

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	f5ad 6d06 	sub.w	sp, sp, #2144	@ 0x860
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135c:	f002 fe46 	bl	8003fec <HAL_Init>
  motor_t motor2;
  motor_t motor3;
  motor_t motor4;
  motor_t motor5;

  motors[0] = &motor1;
 8001360:	4a43      	ldr	r2, [pc, #268]	@ (8001470 <main+0x11c>)
 8001362:	f207 43f4 	addw	r3, r7, #1268	@ 0x4f4
 8001366:	6013      	str	r3, [r2, #0]
  motors[1] = &motor2;
 8001368:	4a41      	ldr	r2, [pc, #260]	@ (8001470 <main+0x11c>)
 800136a:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 800136e:	6053      	str	r3, [r2, #4]
  motors[2] = &motor3;
 8001370:	4a3f      	ldr	r2, [pc, #252]	@ (8001470 <main+0x11c>)
 8001372:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 8001376:	6093      	str	r3, [r2, #8]
  motors[3] = &motor4;
 8001378:	4a3d      	ldr	r2, [pc, #244]	@ (8001470 <main+0x11c>)
 800137a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800137e:	60d3      	str	r3, [r2, #12]
  motors[4] = &motor5;
 8001380:	4a3b      	ldr	r2, [pc, #236]	@ (8001470 <main+0x11c>)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	6113      	str	r3, [r2, #16]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001386:	f000 f877 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138a:	f000 fd59 	bl	8001e40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800138e:	f000 fcd9 	bl	8001d44 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001392:	f000 fcad 	bl	8001cf0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001396:	f000 f8dd 	bl	8001554 <MX_I2C1_Init>
  MX_UART4_Init();
 800139a:	f000 fc55 	bl	8001c48 <MX_UART4_Init>
  MX_UART5_Init();
 800139e:	f000 fc7d 	bl	8001c9c <MX_UART5_Init>
  MX_USART3_UART_Init();
 80013a2:	f000 fcf9 	bl	8001d98 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80013a6:	f000 fd21 	bl	8001dec <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80013aa:	f000 f953 	bl	8001654 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013ae:	f000 f9c5 	bl	800173c <MX_TIM4_Init>
  MX_TIM9_Init();
 80013b2:	f000 fb41 	bl	8001a38 <MX_TIM9_Init>
  MX_TIM8_Init();
 80013b6:	f000 faa1 	bl	80018fc <MX_TIM8_Init>
  MX_TIM12_Init();
 80013ba:	f000 fb9b 	bl	8001af4 <MX_TIM12_Init>
  MX_TIM13_Init();
 80013be:	f000 fbf9 	bl	8001bb4 <MX_TIM13_Init>
  MX_TIM1_Init();
 80013c2:	f000 f8f5 	bl	80015b0 <MX_TIM1_Init>
  MX_TIM6_Init();
 80013c6:	f000 fa2d 	bl	8001824 <MX_TIM6_Init>
  MX_TIM7_Init();
 80013ca:	f000 fa61 	bl	8001890 <MX_TIM7_Init>
  MX_TIM10_Init();
 80013ce:	f000 fb6d 	bl	8001aac <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  active_movement_flag = 0;
 80013d2:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <main+0x120>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
  init_motor_1(&motor1, &driver1);
 80013d8:	f507 62fe 	add.w	r2, r7, #2032	@ 0x7f0
 80013dc:	f207 43f4 	addw	r3, r7, #1268	@ 0x4f4
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 f9f0 	bl	80037c8 <init_motor_1>
  init_motor_2(&motor2, &driver2);
 80013e8:	f507 62f0 	add.w	r2, r7, #1920	@ 0x780
 80013ec:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fab0 	bl	8003958 <init_motor_2>
  init_motor_3(&motor3, &driver3);
 80013f8:	f507 62e2 	add.w	r2, r7, #1808	@ 0x710
 80013fc:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fb70 	bl	8003ae8 <init_motor_3>
  init_motor_4(&motor4, &driver4);
 8001408:	f507 62d4 	add.w	r2, r7, #1696	@ 0x6a0
 800140c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fc2e 	bl	8003c74 <init_motor_4>
  init_motor_5(&motor5, &driver5);
 8001418:	f507 62c6 	add.w	r2, r7, #1584	@ 0x630
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fcf1 	bl	8003e08 <init_motor_5>

  tmc2209_enable(motor2.driver);
 8001426:	f507 6306 	add.w	r3, r7, #2144	@ 0x860
 800142a:	f5a3 6395 	sub.w	r3, r3, #1192	@ 0x4a8
 800142e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fe2e 	bl	8003094 <tmc2209_enable>
  HAL_Delay(3000);
 8001438:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800143c:	f002 fe48 	bl	80040d0 <HAL_Delay>
  moveDegrees(30, &motor2);
 8001440:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001444:	4618      	mov	r0, r3
 8001446:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800144a:	f002 f8d7 	bl	80035fc <moveDegrees>
  moveDegrees(30, &motor3);
 800144e:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 8001452:	4618      	mov	r0, r3
 8001454:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001458:	f002 f8d0 	bl	80035fc <moveDegrees>
  moveDegrees(30, &motor4);
 800145c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001460:	4618      	mov	r0, r3
 8001462:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001466:	f002 f8c9 	bl	80035fc <moveDegrees>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800146a:	bf00      	nop
 800146c:	e7fd      	b.n	800146a <main+0x116>
 800146e:	bf00      	nop
 8001470:	20000954 	.word	0x20000954
 8001474:	20000968 	.word	0x20000968

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	@ 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2234      	movs	r2, #52	@ 0x34
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f006 face 	bl	8007a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <SystemClock_Config+0xd4>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	4a29      	ldr	r2, [pc, #164]	@ (800154c <SystemClock_Config+0xd4>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <SystemClock_Config+0xd4>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <SystemClock_Config+0xd8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014c4:	4a22      	ldr	r2, [pc, #136]	@ (8001550 <SystemClock_Config+0xd8>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <SystemClock_Config+0xd8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d8:	2302      	movs	r3, #2
 80014da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e0:	2310      	movs	r3, #16
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014ec:	2310      	movs	r3, #16
 80014ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014f6:	2304      	movs	r3, #4
 80014f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4618      	mov	r0, r3
 8001508:	f004 f8d8 	bl	80056bc <HAL_RCC_OscConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001512:	f000 fd3f 	bl	8001f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001516:	230f      	movs	r3, #15
 8001518:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151a:	2302      	movs	r3, #2
 800151c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	2102      	movs	r1, #2
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fd78 	bl	8005028 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800153e:	f000 fd29 	bl	8001f94 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	@ 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800155a:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <MX_I2C1_Init+0x54>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001560:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_I2C1_Init+0x58>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001572:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001576:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_I2C1_Init+0x50>)
 8001592:	f003 f89b 	bl	80046cc <HAL_I2C_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800159c:	f000 fcfa 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000480 	.word	0x20000480
 80015a8:	40005400 	.word	0x40005400
 80015ac:	000186a0 	.word	0x000186a0

080015b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_TIM1_Init+0x9c>)
 80015ce:	4a20      	ldr	r2, [pc, #128]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 80015d2:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <MX_TIM1_Init+0x9c>)
 80015d4:	f240 3247 	movw	r2, #839	@ 0x347
 80015d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_TIM1_Init+0x9c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_TIM1_Init+0x9c>)
 80015e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <MX_TIM1_Init+0x9c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <MX_TIM1_Init+0x9c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MX_TIM1_Init+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015fa:	4814      	ldr	r0, [pc, #80]	@ (800164c <MX_TIM1_Init+0x9c>)
 80015fc:	f004 fafc 	bl	8005bf8 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001606:	f000 fcc5 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	@ (800164c <MX_TIM1_Init+0x9c>)
 8001618:	f004 ff56 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001622:	f000 fcb7 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800162e:	463b      	mov	r3, r7
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	@ (800164c <MX_TIM1_Init+0x9c>)
 8001634:	f005 fb44 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800163e:	f000 fca9 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200004d4 	.word	0x200004d4
 8001650:	40010000 	.word	0x40010000

08001654 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	@ 0x38
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001684:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <MX_TIM3_Init+0xe0>)
 8001686:	4a2c      	ldr	r2, [pc, #176]	@ (8001738 <MX_TIM3_Init+0xe4>)
 8001688:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <MX_TIM3_Init+0xe0>)
 800168c:	2229      	movs	r2, #41	@ 0x29
 800168e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <MX_TIM3_Init+0xe0>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001696:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <MX_TIM3_Init+0xe0>)
 8001698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800169c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <MX_TIM3_Init+0xe0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <MX_TIM3_Init+0xe0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016aa:	4822      	ldr	r0, [pc, #136]	@ (8001734 <MX_TIM3_Init+0xe0>)
 80016ac:	f004 faa4 	bl	8005bf8 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016b6:	f000 fc6d 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c4:	4619      	mov	r1, r3
 80016c6:	481b      	ldr	r0, [pc, #108]	@ (8001734 <MX_TIM3_Init+0xe0>)
 80016c8:	f004 fefe 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016d2:	f000 fc5f 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80016d6:	4817      	ldr	r0, [pc, #92]	@ (8001734 <MX_TIM3_Init+0xe0>)
 80016d8:	f004 fb7d 	bl	8005dd6 <HAL_TIM_OC_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016e2:	f000 fc57 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4619      	mov	r1, r3
 80016f4:	480f      	ldr	r0, [pc, #60]	@ (8001734 <MX_TIM3_Init+0xe0>)
 80016f6:	f005 fae3 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001700:	f000 fc48 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	@ (8001734 <MX_TIM3_Init+0xe0>)
 800171c:	f004 fe78 	bl	8006410 <HAL_TIM_OC_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001726:	f000 fc35 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3738      	adds	r7, #56	@ 0x38
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000051c 	.word	0x2000051c
 8001738:	40000400 	.word	0x40000400

0800173c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08e      	sub	sp, #56	@ 0x38
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	615a      	str	r2, [r3, #20]
 800176a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800176c:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <MX_TIM4_Init+0xe0>)
 800176e:	4a2c      	ldr	r2, [pc, #176]	@ (8001820 <MX_TIM4_Init+0xe4>)
 8001770:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 8001772:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <MX_TIM4_Init+0xe0>)
 8001774:	2229      	movs	r2, #41	@ 0x29
 8001776:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b28      	ldr	r3, [pc, #160]	@ (800181c <MX_TIM4_Init+0xe0>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800177e:	4b27      	ldr	r3, [pc, #156]	@ (800181c <MX_TIM4_Init+0xe0>)
 8001780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001784:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <MX_TIM4_Init+0xe0>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b23      	ldr	r3, [pc, #140]	@ (800181c <MX_TIM4_Init+0xe0>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001792:	4822      	ldr	r0, [pc, #136]	@ (800181c <MX_TIM4_Init+0xe0>)
 8001794:	f004 fa30 	bl	8005bf8 <HAL_TIM_Base_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800179e:	f000 fbf9 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ac:	4619      	mov	r1, r3
 80017ae:	481b      	ldr	r0, [pc, #108]	@ (800181c <MX_TIM4_Init+0xe0>)
 80017b0:	f004 fe8a 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80017ba:	f000 fbeb 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80017be:	4817      	ldr	r0, [pc, #92]	@ (800181c <MX_TIM4_Init+0xe0>)
 80017c0:	f004 fb09 	bl	8005dd6 <HAL_TIM_OC_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80017ca:	f000 fbe3 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	4619      	mov	r1, r3
 80017dc:	480f      	ldr	r0, [pc, #60]	@ (800181c <MX_TIM4_Init+0xe0>)
 80017de:	f005 fa6f 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80017e8:	f000 fbd4 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	@ (800181c <MX_TIM4_Init+0xe0>)
 8001804:	f004 fe04 	bl	8006410 <HAL_TIM_OC_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800180e:	f000 fbc1 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	3738      	adds	r7, #56	@ 0x38
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000564 	.word	0x20000564
 8001820:	40000800 	.word	0x40000800

08001824 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <MX_TIM6_Init+0x64>)
 8001834:	4a15      	ldr	r2, [pc, #84]	@ (800188c <MX_TIM6_Init+0x68>)
 8001836:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 839;
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <MX_TIM6_Init+0x64>)
 800183a:	f240 3247 	movw	r2, #839	@ 0x347
 800183e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <MX_TIM6_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <MX_TIM6_Init+0x64>)
 8001848:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800184c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <MX_TIM6_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001854:	480c      	ldr	r0, [pc, #48]	@ (8001888 <MX_TIM6_Init+0x64>)
 8001856:	f004 f9cf 	bl	8005bf8 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001860:	f000 fb98 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_TIM6_Init+0x64>)
 8001872:	f005 fa25 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800187c:	f000 fb8a 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200005ac 	.word	0x200005ac
 800188c:	40001000 	.word	0x40001000

08001890 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <MX_TIM7_Init+0x64>)
 80018a0:	4a15      	ldr	r2, [pc, #84]	@ (80018f8 <MX_TIM7_Init+0x68>)
 80018a2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 839;
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <MX_TIM7_Init+0x64>)
 80018a6:	f240 3247 	movw	r2, #839	@ 0x347
 80018aa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_TIM7_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <MX_TIM7_Init+0x64>)
 80018b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_TIM7_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <MX_TIM7_Init+0x64>)
 80018c2:	f004 f999 	bl	8005bf8 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80018cc:	f000 fb62 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_TIM7_Init+0x64>)
 80018de:	f005 f9ef 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80018e8:	f000 fb54 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200005f4 	.word	0x200005f4
 80018f8:	40001400 	.word	0x40001400

080018fc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b096      	sub	sp, #88	@ 0x58
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2220      	movs	r2, #32
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f006 f877 	bl	8007a28 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800193a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a30 <MX_TIM8_Init+0x134>)
 800193c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a34 <MX_TIM8_Init+0x138>)
 800193e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 8001940:	4b3b      	ldr	r3, [pc, #236]	@ (8001a30 <MX_TIM8_Init+0x134>)
 8001942:	2229      	movs	r2, #41	@ 0x29
 8001944:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <MX_TIM8_Init+0x134>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800194c:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <MX_TIM8_Init+0x134>)
 800194e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001952:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b36      	ldr	r3, [pc, #216]	@ (8001a30 <MX_TIM8_Init+0x134>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800195a:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <MX_TIM8_Init+0x134>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b33      	ldr	r3, [pc, #204]	@ (8001a30 <MX_TIM8_Init+0x134>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001966:	4832      	ldr	r0, [pc, #200]	@ (8001a30 <MX_TIM8_Init+0x134>)
 8001968:	f004 f946 	bl	8005bf8 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001972:	f000 fb0f 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001980:	4619      	mov	r1, r3
 8001982:	482b      	ldr	r0, [pc, #172]	@ (8001a30 <MX_TIM8_Init+0x134>)
 8001984:	f004 fda0 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800198e:	f000 fb01 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001992:	4827      	ldr	r0, [pc, #156]	@ (8001a30 <MX_TIM8_Init+0x134>)
 8001994:	f004 fa1f 	bl	8005dd6 <HAL_TIM_OC_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800199e:	f000 faf9 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019ae:	4619      	mov	r1, r3
 80019b0:	481f      	ldr	r0, [pc, #124]	@ (8001a30 <MX_TIM8_Init+0x134>)
 80019b2:	f005 f985 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80019bc:	f000 faea 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4812      	ldr	r0, [pc, #72]	@ (8001a30 <MX_TIM8_Init+0x134>)
 80019e6:	f004 fd13 	bl	8006410 <HAL_TIM_OC_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80019f0:	f000 fad0 	bl	8001f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	@ (8001a30 <MX_TIM8_Init+0x134>)
 8001a18:	f005 f9ce 	bl	8006db8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001a22:	f000 fab7 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	3758      	adds	r7, #88	@ 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000063c 	.word	0x2000063c
 8001a34:	40010400 	.word	0x40010400

08001a38 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_TIM9_Init+0x6c>)
 8001a4c:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <MX_TIM9_Init+0x70>)
 8001a4e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_TIM9_Init+0x6c>)
 8001a52:	f240 3247 	movw	r2, #839	@ 0x347
 8001a56:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_TIM9_Init+0x6c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_TIM9_Init+0x6c>)
 8001a60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a64:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_TIM9_Init+0x6c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <MX_TIM9_Init+0x6c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a72:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <MX_TIM9_Init+0x6c>)
 8001a74:	f004 f8c0 	bl	8005bf8 <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001a7e:	f000 fa89 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a86:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_TIM9_Init+0x6c>)
 8001a8e:	f004 fd1b 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001a98:	f000 fa7c 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000684 	.word	0x20000684
 8001aa8:	40014000 	.word	0x40014000

08001aac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <MX_TIM10_Init+0x40>)
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <MX_TIM10_Init+0x44>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <MX_TIM10_Init+0x40>)
 8001ab8:	f240 3247 	movw	r2, #839	@ 0x347
 8001abc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <MX_TIM10_Init+0x40>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <MX_TIM10_Init+0x40>)
 8001ac6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aca:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <MX_TIM10_Init+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <MX_TIM10_Init+0x40>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <MX_TIM10_Init+0x40>)
 8001ada:	f004 f88d 	bl	8005bf8 <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001ae4:	f000 fa56 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200006cc 	.word	0x200006cc
 8001af0:	40014400 	.word	0x40014400

08001af4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	@ 0x30
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b1c:	4a24      	ldr	r2, [pc, #144]	@ (8001bb0 <MX_TIM12_Init+0xbc>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 8001b20:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b22:	2229      	movs	r2, #41	@ 0x29
 8001b24:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b32:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001b40:	481a      	ldr	r0, [pc, #104]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b42:	f004 f859 	bl	8005bf8 <HAL_TIM_Base_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001b4c:	f000 fa22 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b54:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4813      	ldr	r0, [pc, #76]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b5e:	f004 fcb3 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001b68:	f000 fa14 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8001b6c:	480f      	ldr	r0, [pc, #60]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b6e:	f004 f932 	bl	8005dd6 <HAL_TIM_OC_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001b78:	f000 fa0c 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4806      	ldr	r0, [pc, #24]	@ (8001bac <MX_TIM12_Init+0xb8>)
 8001b94:	f004 fc3c 	bl	8006410 <HAL_TIM_OC_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001b9e:	f000 f9f9 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000714 	.word	0x20000714
 8001bb0:	40001800 	.word	0x40001800

08001bb4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001bce:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <MX_TIM13_Init+0x90>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001bd4:	2229      	movs	r2, #41	@ 0x29
 8001bd6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001be4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001bf2:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001bf4:	f004 f800 	bl	8005bf8 <HAL_TIM_Base_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001bfe:	f000 f9c9 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001c02:	480f      	ldr	r0, [pc, #60]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001c04:	f004 f8e7 	bl	8005dd6 <HAL_TIM_OC_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001c0e:	f000 f9c1 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <MX_TIM13_Init+0x8c>)
 8001c2a:	f004 fbf1 	bl	8006410 <HAL_TIM_OC_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001c34:	f000 f9ae 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000075c 	.word	0x2000075c
 8001c44:	40001c00 	.word	0x40001c00

08001c48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	@ (8001c98 <MX_UART4_Init+0x50>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c80:	f005 f900 	bl	8006e84 <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001c8a:	f000 f983 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200007a4 	.word	0x200007a4
 8001c98:	40004c00 	.word	0x40004c00

08001c9c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <MX_UART5_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <MX_UART5_Init+0x4c>)
 8001cd4:	f005 f8d6 	bl	8006e84 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001cde:	f000 f959 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200007ec 	.word	0x200007ec
 8001cec:	40005000 	.word	0x40005000

08001cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <MX_USART1_UART_Init+0x50>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_USART1_UART_Init+0x4c>)
 8001d28:	f005 f8ac 	bl	8006e84 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d32:	f000 f92f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000834 	.word	0x20000834
 8001d40:	40011000 	.word	0x40011000

08001d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <MX_USART2_UART_Init+0x50>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	f005 f882 	bl	8006e84 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d86:	f000 f905 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000087c 	.word	0x2000087c
 8001d94:	40004400 	.word	0x40004400

08001d98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001d9e:	4a12      	ldr	r2, [pc, #72]	@ (8001de8 <MX_USART3_UART_Init+0x50>)
 8001da0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <MX_USART3_UART_Init+0x4c>)
 8001dd0:	f005 f858 	bl	8006e84 <HAL_UART_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dda:	f000 f8db 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200008c4 	.word	0x200008c4
 8001de8:	40004800 	.word	0x40004800

08001dec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <MX_USART6_UART_Init+0x50>)
 8001df4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dfc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001e12:	220c      	movs	r2, #12
 8001e14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <MX_USART6_UART_Init+0x4c>)
 8001e24:	f005 f82e 	bl	8006e84 <HAL_UART_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e2e:	f000 f8b1 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000090c 	.word	0x2000090c
 8001e3c:	40011400 	.word	0x40011400

08001e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	@ 0x28
 8001e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a49      	ldr	r2, [pc, #292]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b43      	ldr	r3, [pc, #268]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a42      	ldr	r2, [pc, #264]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b40      	ldr	r3, [pc, #256]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b3c      	ldr	r3, [pc, #240]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a3b      	ldr	r2, [pc, #236]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a34      	ldr	r2, [pc, #208]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b2e      	ldr	r3, [pc, #184]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a2d      	ldr	r2, [pc, #180]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <MX_GPIO_Init+0x144>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f640 311f 	movw	r1, #2847	@ 0xb1f
 8001ee8:	4827      	ldr	r0, [pc, #156]	@ (8001f88 <MX_GPIO_Init+0x148>)
 8001eea:	f002 fbbb 	bl	8004664 <HAL_GPIO_WritePin>
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001ef4:	4825      	ldr	r0, [pc, #148]	@ (8001f8c <MX_GPIO_Init+0x14c>)
 8001ef6:	f002 fbb5 	bl	8004664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001efa:	2200      	movs	r2, #0
 8001efc:	f247 0117 	movw	r1, #28695	@ 0x7017
 8001f00:	4823      	ldr	r0, [pc, #140]	@ (8001f90 <MX_GPIO_Init+0x150>)
 8001f02:	f002 fbaf 	bl	8004664 <HAL_GPIO_WritePin>
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f0c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481a      	ldr	r0, [pc, #104]	@ (8001f88 <MX_GPIO_Init+0x148>)
 8001f1e:	f002 fa0d 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_yellow_Pin LED_green_Pin MOT_EN_3_Pin STEP_3_Pin
                           MOT_EN_5_Pin STEP_5_Pin DIR_5_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 8001f22:	f640 331f 	movw	r3, #2847	@ 0xb1f
 8001f26:	617b      	str	r3, [r7, #20]
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4813      	ldr	r0, [pc, #76]	@ (8001f88 <MX_GPIO_Init+0x148>)
 8001f3c:	f002 f9fe 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_EN_2_Pin STEP_2_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin;
 8001f40:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <MX_GPIO_Init+0x14c>)
 8001f5a:	f002 f9ef 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin MOT_EN_4_Pin STEP_4_Pin MOT_EN_1_Pin
                           STEP_1_Pin DIR_1_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001f5e:	f247 0317 	movw	r3, #28695	@ 0x7017
 8001f62:	617b      	str	r3, [r7, #20]
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4806      	ldr	r0, [pc, #24]	@ (8001f90 <MX_GPIO_Init+0x150>)
 8001f78:	f002 f9e0 	bl	800433c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	@ 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <Error_Handler+0x8>

08001fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_MspInit+0x4c>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a0f      	ldr	r2, [pc, #60]	@ (8001fec <HAL_MspInit+0x4c>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <HAL_MspInit+0x4c>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_MspInit+0x4c>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <HAL_MspInit+0x4c>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_MspInit+0x4c>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fde:	2007      	movs	r0, #7
 8001fe0:	f002 f96a 	bl	80042b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_I2C_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800202e:	23c0      	movs	r3, #192	@ 0xc0
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002032:	2312      	movs	r3, #18
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203e:	2304      	movs	r3, #4
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <HAL_I2C_MspInit+0x8c>)
 800204a:	f002 f977 	bl	800433c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002058:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800205c:	6413      	str	r3, [r2, #64]	@ 0x40
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	@ 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40005400 	.word	0x40005400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020400 	.word	0x40020400

08002080 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	@ 0x30
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a98      	ldr	r2, [pc, #608]	@ (80022f0 <HAL_TIM_Base_MspInit+0x270>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11e      	bne.n	80020d0 <HAL_TIM_Base_MspInit+0x50>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002096:	4b97      	ldr	r3, [pc, #604]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a96      	ldr	r2, [pc, #600]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b94      	ldr	r3, [pc, #592]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2018      	movs	r0, #24
 80020b4:	f002 f90b 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80020b8:	2018      	movs	r0, #24
 80020ba:	f002 f924 	bl	8004306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2019      	movs	r0, #25
 80020c4:	f002 f903 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020c8:	2019      	movs	r0, #25
 80020ca:	f002 f91c 	bl	8004306 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 80020ce:	e10a      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM3)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a88      	ldr	r2, [pc, #544]	@ (80022f8 <HAL_TIM_Base_MspInit+0x278>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d116      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020de:	4b85      	ldr	r3, [pc, #532]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a84      	ldr	r2, [pc, #528]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b82      	ldr	r3, [pc, #520]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	201d      	movs	r0, #29
 80020fc:	f002 f8e7 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002100:	201d      	movs	r0, #29
 8002102:	f002 f900 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 8002106:	e0ee      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM4)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7b      	ldr	r2, [pc, #492]	@ (80022fc <HAL_TIM_Base_MspInit+0x27c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d116      	bne.n	8002140 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
 8002116:	4b77      	ldr	r3, [pc, #476]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	4a76      	ldr	r2, [pc, #472]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6413      	str	r3, [r2, #64]	@ 0x40
 8002122:	4b74      	ldr	r3, [pc, #464]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	201e      	movs	r0, #30
 8002134:	f002 f8cb 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002138:	201e      	movs	r0, #30
 800213a:	f002 f8e4 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 800213e:	e0d2      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM6)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a6e      	ldr	r2, [pc, #440]	@ (8002300 <HAL_TIM_Base_MspInit+0x280>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d116      	bne.n	8002178 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
 800214e:	4b69      	ldr	r3, [pc, #420]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a68      	ldr	r2, [pc, #416]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	4b66      	ldr	r3, [pc, #408]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	2036      	movs	r0, #54	@ 0x36
 800216c:	f002 f8af 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002170:	2036      	movs	r0, #54	@ 0x36
 8002172:	f002 f8c8 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 8002176:	e0b6      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM7)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a61      	ldr	r2, [pc, #388]	@ (8002304 <HAL_TIM_Base_MspInit+0x284>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d116      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	4b5b      	ldr	r3, [pc, #364]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a5a      	ldr	r2, [pc, #360]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 800218c:	f043 0320 	orr.w	r3, r3, #32
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b58      	ldr	r3, [pc, #352]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2037      	movs	r0, #55	@ 0x37
 80021a4:	f002 f893 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021a8:	2037      	movs	r0, #55	@ 0x37
 80021aa:	f002 f8ac 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 80021ae:	e09a      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM8)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a54      	ldr	r2, [pc, #336]	@ (8002308 <HAL_TIM_Base_MspInit+0x288>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d126      	bne.n	8002208 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	4b4d      	ldr	r3, [pc, #308]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	4a4c      	ldr	r2, [pc, #304]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ca:	4b4a      	ldr	r3, [pc, #296]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	202b      	movs	r0, #43	@ 0x2b
 80021dc:	f002 f877 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80021e0:	202b      	movs	r0, #43	@ 0x2b
 80021e2:	f002 f890 	bl	8004306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	202c      	movs	r0, #44	@ 0x2c
 80021ec:	f002 f86f 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80021f0:	202c      	movs	r0, #44	@ 0x2c
 80021f2:	f002 f888 	bl	8004306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	202e      	movs	r0, #46	@ 0x2e
 80021fc:	f002 f867 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002200:	202e      	movs	r0, #46	@ 0x2e
 8002202:	f002 f880 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 8002206:	e06e      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM9)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3f      	ldr	r2, [pc, #252]	@ (800230c <HAL_TIM_Base_MspInit+0x28c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d116      	bne.n	8002240 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a36      	ldr	r2, [pc, #216]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b34      	ldr	r3, [pc, #208]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2018      	movs	r0, #24
 8002234:	f002 f84b 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002238:	2018      	movs	r0, #24
 800223a:	f002 f864 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 800223e:	e052      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM10)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a32      	ldr	r2, [pc, #200]	@ (8002310 <HAL_TIM_Base_MspInit+0x290>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d116      	bne.n	8002278 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b29      	ldr	r3, [pc, #164]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a28      	ldr	r2, [pc, #160]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2019      	movs	r0, #25
 800226c:	f002 f82f 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002270:	2019      	movs	r0, #25
 8002272:	f002 f848 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 8002276:	e036      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM12)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a25      	ldr	r2, [pc, #148]	@ (8002314 <HAL_TIM_Base_MspInit+0x294>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d116      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x230>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 800228c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002290:	6413      	str	r3, [r2, #64]	@ 0x40
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	202b      	movs	r0, #43	@ 0x2b
 80022a4:	f002 f813 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80022a8:	202b      	movs	r0, #43	@ 0x2b
 80022aa:	f002 f82c 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 80022ae:	e01a      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM13)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a18      	ldr	r2, [pc, #96]	@ (8002318 <HAL_TIM_Base_MspInit+0x298>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d115      	bne.n	80022e6 <HAL_TIM_Base_MspInit+0x266>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a0c      	ldr	r2, [pc, #48]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80022c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_TIM_Base_MspInit+0x274>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	202c      	movs	r0, #44	@ 0x2c
 80022dc:	f001 fff7 	bl	80042ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80022e0:	202c      	movs	r0, #44	@ 0x2c
 80022e2:	f002 f810 	bl	8004306 <HAL_NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3730      	adds	r7, #48	@ 0x30
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800
 8002300:	40001000 	.word	0x40001000
 8002304:	40001400 	.word	0x40001400
 8002308:	40010400 	.word	0x40010400
 800230c:	40014000 	.word	0x40014000
 8002310:	40014400 	.word	0x40014400
 8002314:	40001800 	.word	0x40001800
 8002318:	40001c00 	.word	0x40001c00

0800231c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b096      	sub	sp, #88	@ 0x58
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a9b      	ldr	r2, [pc, #620]	@ (80025a8 <HAL_UART_MspInit+0x28c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12c      	bne.n	8002398 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	643b      	str	r3, [r7, #64]	@ 0x40
 8002342:	4b9a      	ldr	r3, [pc, #616]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	4a99      	ldr	r2, [pc, #612]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002348:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800234c:	6413      	str	r3, [r2, #64]	@ 0x40
 800234e:	4b97      	ldr	r3, [pc, #604]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002356:	643b      	str	r3, [r7, #64]	@ 0x40
 8002358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800235e:	4b93      	ldr	r3, [pc, #588]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a92      	ldr	r2, [pc, #584]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b90      	ldr	r3, [pc, #576]	@ (80025ac <HAL_UART_MspInit+0x290>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002376:	2303      	movs	r3, #3
 8002378:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002386:	2308      	movs	r3, #8
 8002388:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800238e:	4619      	mov	r1, r3
 8002390:	4887      	ldr	r0, [pc, #540]	@ (80025b0 <HAL_UART_MspInit+0x294>)
 8002392:	f001 ffd3 	bl	800433c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002396:	e14c      	b.n	8002632 <HAL_UART_MspInit+0x316>
  else if(huart->Instance==UART5)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a85      	ldr	r2, [pc, #532]	@ (80025b4 <HAL_UART_MspInit+0x298>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d14b      	bne.n	800243a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023a6:	4b81      	ldr	r3, [pc, #516]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	4a80      	ldr	r2, [pc, #512]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b2:	4b7e      	ldr	r3, [pc, #504]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c2:	4b7a      	ldr	r3, [pc, #488]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	4a79      	ldr	r2, [pc, #484]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ce:	4b77      	ldr	r3, [pc, #476]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023de:	4b73      	ldr	r3, [pc, #460]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4a72      	ldr	r2, [pc, #456]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ea:	4b70      	ldr	r3, [pc, #448]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80023f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002408:	2308      	movs	r3, #8
 800240a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002410:	4619      	mov	r1, r3
 8002412:	4869      	ldr	r0, [pc, #420]	@ (80025b8 <HAL_UART_MspInit+0x29c>)
 8002414:	f001 ff92 	bl	800433c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002418:	2304      	movs	r3, #4
 800241a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002428:	2308      	movs	r3, #8
 800242a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002430:	4619      	mov	r1, r3
 8002432:	4862      	ldr	r0, [pc, #392]	@ (80025bc <HAL_UART_MspInit+0x2a0>)
 8002434:	f001 ff82 	bl	800433c <HAL_GPIO_Init>
}
 8002438:	e0fb      	b.n	8002632 <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a60      	ldr	r2, [pc, #384]	@ (80025c0 <HAL_UART_MspInit+0x2a4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d12d      	bne.n	80024a0 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002448:	4b58      	ldr	r3, [pc, #352]	@ (80025ac <HAL_UART_MspInit+0x290>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	4a57      	ldr	r2, [pc, #348]	@ (80025ac <HAL_UART_MspInit+0x290>)
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	6453      	str	r3, [r2, #68]	@ 0x44
 8002454:	4b55      	ldr	r3, [pc, #340]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800245e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002464:	4b51      	ldr	r3, [pc, #324]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	4a50      	ldr	r2, [pc, #320]	@ (80025ac <HAL_UART_MspInit+0x290>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002470:	4b4e      	ldr	r3, [pc, #312]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800247c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002480:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800248e:	2307      	movs	r3, #7
 8002490:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002496:	4619      	mov	r1, r3
 8002498:	4845      	ldr	r0, [pc, #276]	@ (80025b0 <HAL_UART_MspInit+0x294>)
 800249a:	f001 ff4f 	bl	800433c <HAL_GPIO_Init>
}
 800249e:	e0c8      	b.n	8002632 <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a47      	ldr	r2, [pc, #284]	@ (80025c4 <HAL_UART_MspInit+0x2a8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12c      	bne.n	8002504 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ae:	4b3f      	ldr	r3, [pc, #252]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a3e      	ldr	r2, [pc, #248]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b3c      	ldr	r3, [pc, #240]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a37      	ldr	r2, [pc, #220]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b35      	ldr	r3, [pc, #212]	@ (80025ac <HAL_UART_MspInit+0x290>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024e2:	230c      	movs	r3, #12
 80024e4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f2:	2307      	movs	r3, #7
 80024f4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024fa:	4619      	mov	r1, r3
 80024fc:	482c      	ldr	r0, [pc, #176]	@ (80025b0 <HAL_UART_MspInit+0x294>)
 80024fe:	f001 ff1d 	bl	800433c <HAL_GPIO_Init>
}
 8002502:	e096      	b.n	8002632 <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2f      	ldr	r2, [pc, #188]	@ (80025c8 <HAL_UART_MspInit+0x2ac>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d160      	bne.n	80025d0 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a25      	ldr	r2, [pc, #148]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b23      	ldr	r3, [pc, #140]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a1e      	ldr	r2, [pc, #120]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <HAL_UART_MspInit+0x290>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_UART_MspInit+0x290>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_UART_MspInit+0x290>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002562:	2320      	movs	r3, #32
 8002564:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256e:	2303      	movs	r3, #3
 8002570:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002572:	2307      	movs	r3, #7
 8002574:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002576:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800257a:	4619      	mov	r1, r3
 800257c:	480e      	ldr	r0, [pc, #56]	@ (80025b8 <HAL_UART_MspInit+0x29c>)
 800257e:	f001 fedd 	bl	800433c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002594:	2307      	movs	r3, #7
 8002596:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002598:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800259c:	4619      	mov	r1, r3
 800259e:	480b      	ldr	r0, [pc, #44]	@ (80025cc <HAL_UART_MspInit+0x2b0>)
 80025a0:	f001 fecc 	bl	800433c <HAL_GPIO_Init>
}
 80025a4:	e045      	b.n	8002632 <HAL_UART_MspInit+0x316>
 80025a6:	bf00      	nop
 80025a8:	40004c00 	.word	0x40004c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40005000 	.word	0x40005000
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40011000 	.word	0x40011000
 80025c4:	40004400 	.word	0x40004400
 80025c8:	40004800 	.word	0x40004800
 80025cc:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a19      	ldr	r2, [pc, #100]	@ (800263c <HAL_UART_MspInit+0x320>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d12b      	bne.n	8002632 <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <HAL_UART_MspInit+0x324>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <HAL_UART_MspInit+0x324>)
 80025e4:	f043 0320 	orr.w	r3, r3, #32
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_UART_MspInit+0x324>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_UART_MspInit+0x324>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <HAL_UART_MspInit+0x324>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_UART_MspInit+0x324>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002612:	23c0      	movs	r3, #192	@ 0xc0
 8002614:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002622:	2308      	movs	r3, #8
 8002624:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002626:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	@ (8002644 <HAL_UART_MspInit+0x328>)
 800262e:	f001 fe85 	bl	800433c <HAL_GPIO_Init>
}
 8002632:	bf00      	nop
 8002634:	3758      	adds	r7, #88	@ 0x58
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40011400 	.word	0x40011400
 8002640:	40023800 	.word	0x40023800
 8002644:	40020800 	.word	0x40020800

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <NMI_Handler+0x4>

08002650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <MemManage_Handler+0x4>

08002660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <BusFault_Handler+0x4>

08002668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <UsageFault_Handler+0x4>

08002670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269e:	f001 fcf7 	bl	8004090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026ac:	4803      	ldr	r0, [pc, #12]	@ (80026bc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80026ae:	f003 fdbf 	bl	8006230 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80026b2:	4803      	ldr	r0, [pc, #12]	@ (80026c0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80026b4:	f003 fdbc 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200004d4 	.word	0x200004d4
 80026c0:	20000684 	.word	0x20000684

080026c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c8:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80026ca:	f003 fdb1 	bl	8006230 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80026ce:	4803      	ldr	r0, [pc, #12]	@ (80026dc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80026d0:	f003 fdae 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200004d4 	.word	0x200004d4
 80026dc:	200006cc 	.word	0x200006cc

080026e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <TIM3_IRQHandler+0x10>)
 80026e6:	f003 fda3 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000051c 	.word	0x2000051c

080026f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <TIM4_IRQHandler+0x10>)
 80026fa:	f003 fd99 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000564 	.word	0x20000564

08002708 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800270c:	4803      	ldr	r0, [pc, #12]	@ (800271c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800270e:	f003 fd8f 	bl	8006230 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002712:	4803      	ldr	r0, [pc, #12]	@ (8002720 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002714:	f003 fd8c 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2000063c 	.word	0x2000063c
 8002720:	20000714 	.word	0x20000714

08002724 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002728:	4803      	ldr	r0, [pc, #12]	@ (8002738 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800272a:	f003 fd81 	bl	8006230 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800272e:	4803      	ldr	r0, [pc, #12]	@ (800273c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002730:	f003 fd7e 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	2000063c 	.word	0x2000063c
 800273c:	2000075c 	.word	0x2000075c

08002740 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <TIM8_CC_IRQHandler+0x10>)
 8002746:	f003 fd73 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000063c 	.word	0x2000063c

08002754 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <TIM6_DAC_IRQHandler+0x10>)
 800275a:	f003 fd69 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200005ac 	.word	0x200005ac

08002768 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <TIM7_IRQHandler+0x10>)
 800276e:	f003 fd5f 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200005f4 	.word	0x200005f4

0800277c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002784:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <_sbrk+0x5c>)
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <_sbrk+0x60>)
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002790:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <_sbrk+0x64>)
 800279a:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <_sbrk+0x68>)
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279e:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d207      	bcs.n	80027bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ac:	f005 f954 	bl	8007a58 <__errno>
 80027b0:	4603      	mov	r3, r0
 80027b2:	220c      	movs	r2, #12
 80027b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e009      	b.n	80027d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027bc:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <_sbrk+0x64>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	4a05      	ldr	r2, [pc, #20]	@ (80027e0 <_sbrk+0x64>)
 80027cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20020000 	.word	0x20020000
 80027dc:	00000400 	.word	0x00000400
 80027e0:	2000096c 	.word	0x2000096c
 80027e4:	20000ac0 	.word	0x20000ac0

080027e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <SystemInit+0x20>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	4a05      	ldr	r2, [pc, #20]	@ (8002808 <SystemInit+0x20>)
 80027f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <tmc2209_setup>:
#include "tmc2209.h"


void tmc2209_setup(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_  = serial_baud_rate;
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	601a      	str	r2, [r3, #0]
  stepper_driver->serial_address_    = serial_address;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	79fa      	ldrb	r2, [r7, #7]
 8002824:	711a      	strb	r2, [r3, #4]
  stepper_driver->cool_step_enabled_ = false;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

  tmc2209_initialize(stepper_driver, serial_baud_rate, serial_address);
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	461a      	mov	r2, r3
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f98e 	bl	8002b56 <tmc2209_initialize>
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <map>:

// unidirectional methods

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	69b9      	ldr	r1, [r7, #24]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	1a8a      	subs	r2, r1, r2
 800285c:	fb03 f202 	mul.w	r2, r3, r2
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1acb      	subs	r3, r1, r3
 8002866:	fb92 f2f3 	sdiv	r2, r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	4413      	add	r3, r2
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <constrain>:

long constrain(long x, long a, long b)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  if (x < a)
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	429a      	cmp	r2, r3
 800288c:	da01      	bge.n	8002892 <constrain+0x18>
  {
    return a;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	e006      	b.n	80028a0 <constrain+0x26>
  }
  else if (b < x)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	429a      	cmp	r2, r3
 8002898:	da01      	bge.n	800289e <constrain+0x24>
  {
    return b;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	e000      	b.n	80028a0 <constrain+0x26>
  }
  else
  {
    return x;
 800289e:	68fb      	ldr	r3, [r7, #12]
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <set_micro_steps_per_step>:

void set_micro_steps_per_step(tmc2209_stepper_driver_t *stepper_driver, uint16_t microsteps_per_step)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
  uint16_t microsteps_per_step_shifted = constrain(microsteps_per_step, MICROSTEPS_PER_STEP_MIN, MICROSTEPS_PER_STEP_MAX);
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028be:	2101      	movs	r1, #1
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ffda 	bl	800287a <constrain>
 80028c6:	4603      	mov	r3, r0
 80028c8:	81fb      	strh	r3, [r7, #14]
  microsteps_per_step_shifted          = microsteps_per_step >> 1;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	81fb      	strh	r3, [r7, #14]
  uint16_t exponent                    = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 80028d4:	e005      	b.n	80028e2 <set_micro_steps_per_step+0x36>
  {
    microsteps_per_step_shifted = microsteps_per_step_shifted >> 1;
 80028d6:	89fb      	ldrh	r3, [r7, #14]
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	81fb      	strh	r3, [r7, #14]
    ++exponent;
 80028dc:	89bb      	ldrh	r3, [r7, #12]
 80028de:	3301      	adds	r3, #1
 80028e0:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f6      	bne.n	80028d6 <set_micro_steps_per_step+0x2a>
  }
  set_micro_steps_per_step_power_of_two(stepper_driver, exponent);
 80028e8:	89bb      	ldrh	r3, [r7, #12]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f804 	bl	80028fc <set_micro_steps_per_step_power_of_two>
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <set_micro_steps_per_step_power_of_two>:

void set_micro_steps_per_step_power_of_two(tmc2209_stepper_driver_t *stepper_driver, uint8_t exponent)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  switch (exponent)
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	2b07      	cmp	r3, #7
 800290c:	d85a      	bhi.n	80029c4 <set_micro_steps_per_step_power_of_two+0xc8>
 800290e:	a201      	add	r2, pc, #4	@ (adr r2, 8002914 <set_micro_steps_per_step_power_of_two+0x18>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	08002935 	.word	0x08002935
 8002918:	08002947 	.word	0x08002947
 800291c:	08002959 	.word	0x08002959
 8002920:	0800296b 	.word	0x0800296b
 8002924:	0800297d 	.word	0x0800297d
 8002928:	0800298f 	.word	0x0800298f
 800292c:	080029a1 	.word	0x080029a1
 8002930:	080029b3 	.word	0x080029b3
  {
    case 0: {
      stepper_driver->chopper_config_.mres = MRES_001;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800293a:	2108      	movs	r1, #8
 800293c:	f361 0303 	bfi	r3, r1, #0, #4
 8002940:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002944:	e046      	b.n	80029d4 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 1: {
      stepper_driver->chopper_config_.mres = MRES_002;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800294c:	2107      	movs	r1, #7
 800294e:	f361 0303 	bfi	r3, r1, #0, #4
 8002952:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002956:	e03d      	b.n	80029d4 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 2: {
      stepper_driver->chopper_config_.mres = MRES_004;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800295e:	2106      	movs	r1, #6
 8002960:	f361 0303 	bfi	r3, r1, #0, #4
 8002964:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002968:	e034      	b.n	80029d4 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 3: {
      stepper_driver->chopper_config_.mres = MRES_008;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002970:	2105      	movs	r1, #5
 8002972:	f361 0303 	bfi	r3, r1, #0, #4
 8002976:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800297a:	e02b      	b.n	80029d4 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 4: {
      stepper_driver->chopper_config_.mres = MRES_016;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002982:	2104      	movs	r1, #4
 8002984:	f361 0303 	bfi	r3, r1, #0, #4
 8002988:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800298c:	e022      	b.n	80029d4 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 5: {
      stepper_driver->chopper_config_.mres = MRES_032;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002994:	2103      	movs	r1, #3
 8002996:	f361 0303 	bfi	r3, r1, #0, #4
 800299a:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800299e:	e019      	b.n	80029d4 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 6: {
      stepper_driver->chopper_config_.mres = MRES_064;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80029a6:	2102      	movs	r1, #2
 80029a8:	f361 0303 	bfi	r3, r1, #0, #4
 80029ac:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80029b0:	e010      	b.n	80029d4 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 7: {
      stepper_driver->chopper_config_.mres = MRES_128;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80029b8:	2101      	movs	r1, #1
 80029ba:	f361 0303 	bfi	r3, r1, #0, #4
 80029be:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80029c2:	e007      	b.n	80029d4 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 8:
    default: {
      stepper_driver->chopper_config_.mres = MRES_256;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80029ca:	f023 030f 	bic.w	r3, r3, #15
 80029ce:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80029d2:	bf00      	nop
    }
  }
  write_stored_chopper_config(stepper_driver);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb10 	bl	8002ffa <write_stored_chopper_config>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop

080029e4 <set_all_current_percent_values>:

void set_all_current_percent_values(tmc2209_stepper_driver_t *stepper_driver,
                                    uint8_t                   run_current_percent,
                                    uint8_t                   hold_current_percent,
                                    uint8_t                   hold_delay_percent)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	70fb      	strb	r3, [r7, #3]
 80029f6:	460b      	mov	r3, r1
 80029f8:	70bb      	strb	r3, [r7, #2]
 80029fa:	4613      	mov	r3, r2
 80029fc:	707b      	strb	r3, [r7, #1]
  uint8_t run_current  = percent_to_current_settings(stepper_driver, run_current_percent);
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa7e 	bl	8002f04 <percent_to_current_settings>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_current = percent_to_current_settings(stepper_driver, hold_current_percent);
 8002a0c:	78bb      	ldrb	r3, [r7, #2]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa77 	bl	8002f04 <percent_to_current_settings>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73bb      	strb	r3, [r7, #14]
  uint8_t hold_delay   = percent_to_hold_delay_setting(stepper_driver, hold_delay_percent);
 8002a1a:	787b      	ldrb	r3, [r7, #1]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa8d 	bl	8002f3e <percent_to_hold_delay_setting>
 8002a24:	4603      	mov	r3, r0
 8002a26:	737b      	strb	r3, [r7, #13]

  stepper_driver->driver_current_.irun       = run_current;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	b2d9      	uxtb	r1, r3
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002a36:	f361 0304 	bfi	r3, r1, #0, #5
 8002a3a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold      = hold_current;
 8002a3e:	7bbb      	ldrb	r3, [r7, #14]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	b2d9      	uxtb	r1, r3
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002a4c:	f361 0304 	bfi	r3, r1, #0, #5
 8002a50:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.iholddelay = hold_delay;
 8002a54:	7b7b      	ldrb	r3, [r7, #13]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	b2d9      	uxtb	r1, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002a62:	f361 0303 	bfi	r3, r1, #0, #4
 8002a66:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  write_stored_driver_current(stepper_driver);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa93 	bl	8002f96 <write_stored_driver_current>
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <enable_automatic_current_scaling>:
  stepper_driver->pwm_config_.freewheel = mode;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_current_scaling(tmc2209_stepper_driver_t *stepper_driver)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fac2 	bl	8003018 <write_stored_pwm_config>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <enable_automatic_gradient_adaptation>:
  stepper_driver->pwm_config_.pwm_freq = pwm_freq;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_gradient_adaptation(tmc2209_stepper_driver_t *stepper_driver)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8002aaa:	f043 0308 	orr.w	r3, r3, #8
 8002aae:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fab0 	bl	8003018 <write_stored_pwm_config>
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <enable_cool_step>:
{
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, stall_guard_threshold);
}

void enable_cool_step(tmc2209_stepper_driver_t *stepper_driver, uint8_t lower_threshold, uint8_t upper_threshold)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
 8002acc:	4613      	mov	r3, r2
 8002ace:	70bb      	strb	r3, [r7, #2]
  lower_threshold                    = constrain(lower_threshold, SEMIN_MIN, SEMIN_MAX);
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fecf 	bl	800287a <constrain>
 8002adc:	4603      	mov	r3, r0
 8002ade:	70fb      	strb	r3, [r7, #3]
  stepper_driver->cool_config_.semin = lower_threshold;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	b2d9      	uxtb	r1, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 8002aee:	f361 0303 	bfi	r3, r1, #0, #4
 8002af2:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
  upper_threshold                    = constrain(upper_threshold, SEMAX_MIN, SEMAX_MAX);
 8002af6:	78bb      	ldrb	r3, [r7, #2]
 8002af8:	220f      	movs	r2, #15
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff febc 	bl	800287a <constrain>
 8002b02:	4603      	mov	r3, r0
 8002b04:	70bb      	strb	r3, [r7, #2]
  stepper_driver->cool_config_.semax = upper_threshold;
 8002b06:	78bb      	ldrb	r3, [r7, #2]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002b14:	f361 0303 	bfi	r3, r1, #0, #4
 8002b18:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b20:	461a      	mov	r2, r3
 8002b22:	2142      	movs	r1, #66	@ 0x42
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 faee 	bl	8003106 <tmc2209_write>
  stepper_driver->cool_step_enabled_ = true;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <get_stall_guard_result>:
{
  return tmc2209_read(stepper_driver, ADDRESS_TSTEP);
}

uint16_t get_stall_guard_result(tmc2209_stepper_driver_t *stepper_driver)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  return tmc2209_read(stepper_driver, ADDRESS_SG_RESULT);
 8002b42:	2141      	movs	r1, #65	@ 0x41
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fb3c 	bl	80031c2 <tmc2209_read>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b29b      	uxth	r3, r3
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <tmc2209_initialize>:
{
  return tmc2209_read(stepper_driver, ADDRESS_MSCNT);
}

void tmc2209_initialize(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_ = serial_baud_rate;
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]

  set_operation_mode_to_serial(stepper_driver, serial_address);
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f813 	bl	8002b9a <set_operation_mode_to_serial>
  set_registers_to_default(stepper_driver);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f83f 	bl	8002bf8 <set_registers_to_default>

  minimize_motor_current(stepper_driver);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f8c2 	bl	8002d04 <minimize_motor_current>
  tmc2209_disable(stepper_driver);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 faa6 	bl	80030d2 <tmc2209_disable>
  enable_automatic_current_scaling(stepper_driver);
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff ff76 	bl	8002a78 <enable_automatic_current_scaling>
  enable_automatic_gradient_adaptation(stepper_driver);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff ff85 	bl	8002a9c <enable_automatic_gradient_adaptation>
//  disable_automatic_current_scaling(stepper_driver);
//  disable_automatic_gradient_adaptation(stepper_driver);
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <set_operation_mode_to_serial>:

void set_operation_mode_to_serial(tmc2209_stepper_driver_t *stepper_driver, tmc2209_serial_address_t serial_address)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  stepper_driver->serial_address_ = serial_address;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	711a      	strb	r2, [r3, #4]

  stepper_driver->global_config_.bytes            = 0;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  stepper_driver->global_config_.i_scale_analog   = 1;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.pdn_disable      = 1;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bca:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.mstep_reg_select = 1;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bd8:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.multistep_filt   = 1;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

  write_stored_global_config(stepper_driver);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9c4 	bl	8002f78 <write_stored_global_config>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <set_registers_to_default>:

void set_registers_to_default(tmc2209_stepper_driver_t *stepper_driver)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.bytes      = 0;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	669a      	str	r2, [r3, #104]	@ 0x68
  stepper_driver->driver_current_.ihold      = IHOLD_DEFAULT;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	f361 0304 	bfi	r3, r1, #0, #5
 8002c12:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.irun       = IRUN_DEFAULT;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002c1c:	f043 031f 	orr.w	r3, r3, #31
 8002c20:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	f361 0303 	bfi	r3, r1, #0, #4
 8002c30:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa62 	bl	8003106 <tmc2209_write>

  stepper_driver->chopper_config_.bytes  = CHOPPER_CONFIG_DEFAULT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	@ (8002cfc <set_registers_to_default+0x104>)
 8002c46:	659a      	str	r2, [r3, #88]	@ 0x58
  stepper_driver->chopper_config_.tbl    = TBL_DEFAULT;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	f361 33d0 	bfi	r3, r1, #15, #2
 8002c52:	6593      	str	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hend   = HEND_DEFAULT;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 8002c5a:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 8002c5e:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hstart = HSTART_DEFAULT;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002c68:	2105      	movs	r1, #5
 8002c6a:	f361 1306 	bfi	r3, r1, #4, #3
 8002c6e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.toff   = TOFF_DEFAULT;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002c78:	2103      	movs	r1, #3
 8002c7a:	f361 0303 	bfi	r3, r1, #0, #4
 8002c7e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	461a      	mov	r2, r3
 8002c88:	216c      	movs	r1, #108	@ 0x6c
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fa3b 	bl	8003106 <tmc2209_write>

  stepper_driver->pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	@ (8002d00 <set_registers_to_default+0x108>)
 8002c94:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2170      	movs	r1, #112	@ 0x70
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa31 	bl	8003106 <tmc2209_write>

  stepper_driver->cool_config_.bytes = COOLCONF_DEFAULT;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	661a      	str	r2, [r3, #96]	@ 0x60
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2142      	movs	r1, #66	@ 0x42
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa27 	bl	8003106 <tmc2209_write>

  tmc2209_write(stepper_driver, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002cb8:	2214      	movs	r2, #20
 8002cba:	2111      	movs	r1, #17
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fa22 	bl	8003106 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2113      	movs	r1, #19
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa1d 	bl	8003106 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2122      	movs	r1, #34	@ 0x22
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fa18 	bl	8003106 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2114      	movs	r1, #20
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa13 	bl	8003106 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2140      	movs	r1, #64	@ 0x40
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fa0e 	bl	8003106 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2142      	movs	r1, #66	@ 0x42
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa09 	bl	8003106 <tmc2209_write>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	10000053 	.word	0x10000053
 8002d00:	c10d0024 	.word	0xc10d0024

08002d04 <minimize_motor_current>:

  return global_config.pdn_disable;
}

void minimize_motor_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.irun  = CURRENT_SETTING_MIN;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002d12:	f023 031f 	bic.w	r3, r3, #31
 8002d16:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold = CURRENT_SETTING_MIN;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002d20:	f023 031f 	bic.w	r3, r3, #31
 8002d24:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  write_stored_driver_current(stepper_driver);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f934 	bl	8002f96 <write_stored_driver_current>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <reverse_data>:

uint32_t reverse_data(uint32_t data)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
  uint8_t  right_shift;
  uint8_t  left_shift;
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002d42:	2300      	movs	r3, #0
 8002d44:	72fb      	strb	r3, [r7, #11]
 8002d46:	e016      	b.n	8002d76 <reverse_data+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002d48:	7afb      	ldrb	r3, [r7, #11]
 8002d4a:	f1c3 0303 	rsb	r3, r3, #3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	72bb      	strb	r3, [r7, #10]
    left_shift  = i * BITS_PER_BYTE;
 8002d54:	7afb      	ldrb	r3, [r7, #11]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8002d5a:	7abb      	ldrb	r3, [r7, #10]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	7a7b      	ldrb	r3, [r7, #9]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	3301      	adds	r3, #1
 8002d74:	72fb      	strb	r3, [r7, #11]
 8002d76:	7afb      	ldrb	r3, [r7, #11]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d9e5      	bls.n	8002d48 <reverse_data+0x12>
  }
  return reversed_data;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <calculate_crc_write>:

uint8_t calculate_crc_write(write_read_reply_datagram_t *datagram, uint8_t datagram_size)
{
 8002d8a:	b4f0      	push	{r4, r5, r6, r7}
 8002d8c:	b088      	sub	sp, #32
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	70f9      	strb	r1, [r7, #3]
  uint8_t crc = 0;
 8002d94:	2100      	movs	r1, #0
 8002d96:	77f9      	strb	r1, [r7, #31]
  uint8_t byte;
  uint8_t datagram_bytes[7];
  for (int i = 0; i < datagram_size - 1; i++)
 8002d98:	2100      	movs	r1, #0
 8002d9a:	61b9      	str	r1, [r7, #24]
 8002d9c:	e01c      	b.n	8002dd8 <calculate_crc_write+0x4e>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002da4:	69bc      	ldr	r4, [r7, #24]
 8002da6:	00e4      	lsls	r4, r4, #3
 8002da8:	f1c4 0620 	rsb	r6, r4, #32
 8002dac:	f1a4 0520 	sub.w	r5, r4, #32
 8002db0:	fa20 f204 	lsr.w	r2, r0, r4
 8002db4:	fa01 f606 	lsl.w	r6, r1, r6
 8002db8:	4332      	orrs	r2, r6
 8002dba:	fa21 f505 	lsr.w	r5, r1, r5
 8002dbe:	432a      	orrs	r2, r5
 8002dc0:	fa21 f304 	lsr.w	r3, r1, r4
 8002dc4:	b2d4      	uxtb	r4, r2
 8002dc6:	f107 000c 	add.w	r0, r7, #12
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	4401      	add	r1, r0
 8002dce:	4620      	mov	r0, r4
 8002dd0:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < datagram_size - 1; i++)
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	3101      	adds	r1, #1
 8002dd6:	61b9      	str	r1, [r7, #24]
 8002dd8:	78f9      	ldrb	r1, [r7, #3]
 8002dda:	3901      	subs	r1, #1
 8002ddc:	69b8      	ldr	r0, [r7, #24]
 8002dde:	4288      	cmp	r0, r1
 8002de0:	dbdd      	blt.n	8002d9e <calculate_crc_write+0x14>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	e029      	b.n	8002e3c <calculate_crc_write+0xb2>
  {
    byte = datagram_bytes[i];
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	3320      	adds	r3, #32
 8002dec:	443b      	add	r3, r7
 8002dee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002df2:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002df4:	2300      	movs	r3, #0
 8002df6:	75bb      	strb	r3, [r7, #22]
 8002df8:	e01a      	b.n	8002e30 <calculate_crc_write+0xa6>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	09db      	lsrs	r3, r3, #7
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	7fbb      	ldrb	r3, [r7, #30]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d008      	beq.n	8002e1e <calculate_crc_write+0x94>
      {
        crc = (crc << 1) ^ 0x07;
 8002e0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	b25b      	sxtb	r3, r3
 8002e14:	f083 0307 	eor.w	r3, r3, #7
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e002      	b.n	8002e24 <calculate_crc_write+0x9a>
      }
      else
      {
        crc = crc << 1;
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]
      }
      byte = byte >> 1;
 8002e24:	7fbb      	ldrb	r3, [r7, #30]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002e2a:	7dbb      	ldrb	r3, [r7, #22]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	75bb      	strb	r3, [r7, #22]
 8002e30:	7dbb      	ldrb	r3, [r7, #22]
 8002e32:	2b07      	cmp	r3, #7
 8002e34:	d9e1      	bls.n	8002dfa <calculate_crc_write+0x70>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
 8002e3c:	7dfa      	ldrb	r2, [r7, #23]
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	429a      	cmp	r2, r3
 8002e44:	dbd0      	blt.n	8002de8 <calculate_crc_write+0x5e>
    }
  }
  return crc;
 8002e46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bcf0      	pop	{r4, r5, r6, r7}
 8002e50:	4770      	bx	lr

08002e52 <calculate_crc_read>:

uint8_t calculate_crc_read(read_request_datagram_t *datagram, uint8_t datagram_size)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  uint8_t datagram_bytes[4];
  for (int i = 0; i < (datagram_size - 1); i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	e00f      	b.n	8002e88 <calculate_crc_read+0x36>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	b2d9      	uxtb	r1, r3
 8002e76:	f107 0208 	add.w	r2, r7, #8
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	460a      	mov	r2, r1
 8002e80:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < (datagram_size - 1); i++)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	3301      	adds	r3, #1
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	dbea      	blt.n	8002e68 <calculate_crc_read+0x16>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e029      	b.n	8002eec <calculate_crc_read+0x9a>
  {
    byte = datagram_bytes[i];
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	443b      	add	r3, r7
 8002e9e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002ea2:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73bb      	strb	r3, [r7, #14]
 8002ea8:	e01a      	b.n	8002ee0 <calculate_crc_read+0x8e>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	09db      	lsrs	r3, r3, #7
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	7dbb      	ldrb	r3, [r7, #22]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d008      	beq.n	8002ece <calculate_crc_read+0x7c>
      {
        crc = (crc << 1) ^ 0x07;
 8002ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	f083 0307 	eor.w	r3, r3, #7
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	75fb      	strb	r3, [r7, #23]
 8002ecc:	e002      	b.n	8002ed4 <calculate_crc_read+0x82>
      }
      else
      {
        crc = crc << 1;
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 8002ed4:	7dbb      	ldrb	r3, [r7, #22]
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002eda:	7bbb      	ldrb	r3, [r7, #14]
 8002edc:	3301      	adds	r3, #1
 8002ede:	73bb      	strb	r3, [r7, #14]
 8002ee0:	7bbb      	ldrb	r3, [r7, #14]
 8002ee2:	2b07      	cmp	r3, #7
 8002ee4:	d9e1      	bls.n	8002eaa <calculate_crc_read+0x58>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbd0      	blt.n	8002e98 <calculate_crc_read+0x46>
    }
  }
  return crc;
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <percent_to_current_settings>:

uint8_t percent_to_current_settings(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	2264      	movs	r2, #100	@ 0x64
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fcaf 	bl	800287a <constrain>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  uint8_t current_setting     = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
 8002f20:	7bf8      	ldrb	r0, [r7, #15]
 8002f22:	231f      	movs	r3, #31
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	2300      	movs	r3, #0
 8002f28:	2264      	movs	r2, #100	@ 0x64
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f7ff fc89 	bl	8002842 <map>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73bb      	strb	r3, [r7, #14]
  return current_setting;
 8002f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <percent_to_hold_delay_setting>:
  uint8_t percent = map(current_setting, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

uint8_t percent_to_hold_delay_setting(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af02      	add	r7, sp, #8
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	2264      	movs	r2, #100	@ 0x64
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fc92 	bl	800287a <constrain>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_delay_setting  = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
 8002f5a:	7bf8      	ldrb	r0, [r7, #15]
 8002f5c:	230f      	movs	r3, #15
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	2264      	movs	r2, #100	@ 0x64
 8002f64:	2100      	movs	r1, #0
 8002f66:	f7ff fc6c 	bl	8002842 <map>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73bb      	strb	r3, [r7, #14]
  return hold_delay_setting;
 8002f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <write_stored_global_config>:
  uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

void write_stored_global_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_GCONF, stepper_driver->global_config_.bytes);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f84:	461a      	mov	r2, r3
 8002f86:	2100      	movs	r1, #0
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f8bc 	bl	8003106 <tmc2209_write>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <write_stored_driver_current>:
{
  return tmc2209_read(stepper_driver, ADDRESS_GCONF);
}

void write_stored_driver_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2110      	movs	r1, #16
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8ad 	bl	8003106 <tmc2209_write>

  if (stepper_driver->driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8002fb2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b13      	cmp	r3, #19
 8002fba:	d907      	bls.n	8002fcc <write_stored_driver_current+0x36>
  {
    stepper_driver->cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc6:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
 8002fca:	e006      	b.n	8002fda <write_stored_driver_current+0x44>
  }
  else
  {
    stepper_driver->cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fd6:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  }
  if (stepper_driver->cool_step_enabled_)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <write_stored_driver_current+0x5c>
  {
    tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2142      	movs	r1, #66	@ 0x42
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f88a 	bl	8003106 <tmc2209_write>
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <write_stored_chopper_config>:

void write_stored_chopper_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	461a      	mov	r2, r3
 8003008:	216c      	movs	r1, #108	@ 0x6c
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f87b 	bl	8003106 <tmc2209_write>
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <write_stored_pwm_config>:
{
  return tmc2209_read(stepper_driver, ADDRESS_CHOPCONF);
}

void write_stored_pwm_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	461a      	mov	r2, r3
 8003026:	2170      	movs	r1, #112	@ 0x70
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f86c 	bl	8003106 <tmc2209_write>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <tmc2209_set_uart>:

// /* Private function code -----------------------------------------------------*/

extern UART_HandleTypeDef huart1;
void tmc2209_set_uart(tmc2209_stepper_driver_t *stepper_driver, UART_HandleTypeDef uart)
{
 8003036:	b084      	sub	sp, #16
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	f107 0014 	add.w	r0, r7, #20
 8003044:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	stepper_driver->uart_ = uart;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3308      	adds	r3, #8
 800304c:	f107 0114 	add.w	r1, r7, #20
 8003050:	2248      	movs	r2, #72	@ 0x48
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fd2c 	bl	8007ab0 <memcpy>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003062:	b004      	add	sp, #16
 8003064:	4770      	bx	lr

08003066 <tmc2209_set_hardware_enable_pin>:

void tmc2209_set_hardware_enable_pin(tmc2209_stepper_driver_t *stepper_driver, uint16_t hardware_enable_pin, GPIO_TypeDef* hardware_enable_gpio_port)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	460b      	mov	r3, r1
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	817b      	strh	r3, [r7, #10]
   stepper_driver->hardware_enable_pin_ = hardware_enable_pin;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	897a      	ldrh	r2, [r7, #10]
 8003078:	80da      	strh	r2, [r3, #6]
   stepper_driver->hardware_enable_gpio_port_ = hardware_enable_gpio_port;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	651a      	str	r2, [r3, #80]	@ 0x50

   HAL_GPIO_WritePin(hardware_enable_gpio_port, hardware_enable_pin, GPIO_PIN_SET);
 8003080:	897b      	ldrh	r3, [r7, #10]
 8003082:	2201      	movs	r2, #1
 8003084:	4619      	mov	r1, r3
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f001 faec 	bl	8004664 <HAL_GPIO_WritePin>
 }
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <tmc2209_enable>:

 void tmc2209_enable(tmc2209_stepper_driver_t *stepper_driver)
 {
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
     HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_RESET);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	88db      	ldrh	r3, [r3, #6]
 80030a4:	2200      	movs	r2, #0
 80030a6:	4619      	mov	r1, r3
 80030a8:	f001 fadc 	bl	8004664 <HAL_GPIO_WritePin>
   }
   stepper_driver->toff_                = TOFF_DEFAULT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2203      	movs	r2, #3
 80030b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
   stepper_driver->chopper_config_.toff = TOFF_DEFAULT;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80030ba:	2103      	movs	r1, #3
 80030bc:	f361 0303 	bfi	r3, r1, #0, #4
 80030c0:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff98 	bl	8002ffa <write_stored_chopper_config>
 }
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <tmc2209_disable>:

 void tmc2209_disable(tmc2209_stepper_driver_t* stepper_driver)
 {
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
   HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_SET);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	88db      	ldrh	r3, [r3, #6]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4619      	mov	r1, r3
 80030e6:	f001 fabd 	bl	8004664 <HAL_GPIO_WritePin>
   }
   stepper_driver->chopper_config_.toff = TOFF_DISABLE;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff7e 	bl	8002ffa <write_stored_chopper_config>
 }
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <tmc2209_write>:

 void tmc2209_write(tmc2209_stepper_driver_t *stepper_driver, uint8_t register_address, uint32_t data)
 {
 8003106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003108:	b08b      	sub	sp, #44	@ 0x2c
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	460b      	mov	r3, r1
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	72fb      	strb	r3, [r7, #11]
   write_read_reply_datagram_t write_datagram;
   write_datagram.bytes            = 0;
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9c7 2306 	strd	r2, r3, [r7, #24]
   write_datagram.sync             = SYNC;
 8003120:	7e3b      	ldrb	r3, [r7, #24]
 8003122:	2205      	movs	r2, #5
 8003124:	f362 0303 	bfi	r3, r2, #0, #4
 8003128:	763b      	strb	r3, [r7, #24]
   write_datagram.serial_address   = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	767b      	strb	r3, [r7, #25]
   write_datagram.register_address = register_address;
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003134:	b2da      	uxtb	r2, r3
 8003136:	7ebb      	ldrb	r3, [r7, #26]
 8003138:	f362 0306 	bfi	r3, r2, #0, #7
 800313c:	76bb      	strb	r3, [r7, #26]
   write_datagram.rw               = RW_WRITE;
 800313e:	7ebb      	ldrb	r3, [r7, #26]
 8003140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003144:	76bb      	strb	r3, [r7, #26]
   write_datagram.data             = reverse_data(data);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff fdf5 	bl	8002d36 <reverse_data>
 800314c:	4603      	mov	r3, r0
 800314e:	f8c7 301b 	str.w	r3, [r7, #27]
   write_datagram.crc              = calculate_crc_write(&write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8003152:	f107 0318 	add.w	r3, r7, #24
 8003156:	2108      	movs	r1, #8
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fe16 	bl	8002d8a <calculate_crc_write>
 800315e:	4603      	mov	r3, r0
 8003160:	77fb      	strb	r3, [r7, #31]

   uint8_t datagram_bytes[8];
   for (int i = 0; i < 8; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
 8003166:	e01b      	b.n	80031a0 <tmc2209_write+0x9a>
   {
     datagram_bytes[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8003168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800316c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800316e:	00c9      	lsls	r1, r1, #3
 8003170:	f1c1 0620 	rsb	r6, r1, #32
 8003174:	f1a1 0020 	sub.w	r0, r1, #32
 8003178:	fa22 f401 	lsr.w	r4, r2, r1
 800317c:	fa03 f606 	lsl.w	r6, r3, r6
 8003180:	4334      	orrs	r4, r6
 8003182:	fa23 f000 	lsr.w	r0, r3, r0
 8003186:	4304      	orrs	r4, r0
 8003188:	fa23 f501 	lsr.w	r5, r3, r1
 800318c:	b2e1      	uxtb	r1, r4
 800318e:	f107 0210 	add.w	r2, r7, #16
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	4413      	add	r3, r2
 8003196:	460a      	mov	r2, r1
 8003198:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	3301      	adds	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	2b07      	cmp	r3, #7
 80031a4:	dde0      	ble.n	8003168 <tmc2209_write+0x62>
   }
   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, WRITE_READ_REPLY_DATAGRAM_SIZE, 0XFFFF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f103 0008 	add.w	r0, r3, #8
 80031ac:	f107 0110 	add.w	r1, r7, #16
 80031b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031b4:	2208      	movs	r2, #8
 80031b6:	f003 feb5 	bl	8006f24 <HAL_UART_Transmit>
   //   printf("Write Data Request: %s", datagram_bytes);
 }
 80031ba:	bf00      	nop
 80031bc:	372c      	adds	r7, #44	@ 0x2c
 80031be:	46bd      	mov	sp, r7
 80031c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c2 <tmc2209_read>:

 uint32_t tmc2209_read(tmc2209_stepper_driver_t * stepper_driver, uint8_t register_address)
 {
 80031c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c6:	b090      	sub	sp, #64	@ 0x40
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
   read_request_datagram_t read_request_datagram;
   read_request_datagram.bytes            = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   read_request_datagram.sync             = SYNC;
 80031d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031d8:	2205      	movs	r2, #5
 80031da:	f362 0303 	bfi	r3, r2, #0, #4
 80031de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
   read_request_datagram.serial_address   = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
   read_request_datagram.register_address = register_address;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031f4:	f362 0306 	bfi	r3, r2, #0, #7
 80031f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.rw               = RW_READ;
 80031fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003204:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.crc              = calculate_crc_read(&read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 8003208:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800320c:	2104      	movs	r1, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fe1f 	bl	8002e52 <calculate_crc_read>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

   uint8_t datagram_bytes[WRITE_READ_REPLY_DATAGRAM_SIZE];
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 800321a:	2300      	movs	r3, #0
 800321c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800321e:	e00e      	b.n	800323e <tmc2209_read+0x7c>
   {
     datagram_bytes[i] = (read_request_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8003220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	b2d9      	uxtb	r1, r3
 800322c:	f107 0220 	add.w	r2, r7, #32
 8003230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003232:	4413      	add	r3, r2
 8003234:	460a      	mov	r2, r1
 8003236:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8003238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323a:	3301      	adds	r3, #1
 800323c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800323e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003240:	2b03      	cmp	r3, #3
 8003242:	dded      	ble.n	8003220 <tmc2209_read+0x5e>
   }

   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, READ_REQUEST_DATAGRAM_SIZE, 0XFFFF);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f103 0008 	add.w	r0, r3, #8
 800324a:	f107 0120 	add.w	r1, r7, #32
 800324e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003252:	2204      	movs	r2, #4
 8003254:	f003 fe66 	bl	8006f24 <HAL_UART_Transmit>
//   printf("Write Data Request: %s", datagram_bytes);


   uint8_t                     byte_count = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
   write_read_reply_datagram_t read_reply_datagram;
   read_reply_datagram.bytes = 0;
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9c7 2306 	strd	r2, r3, [r7, #24]
//   {
//     HAL_UART_Receive(&huart1, (uint8_t *)&byte, 1, 100);
//     datagram_bytes[i] = byte;
//   }
   uint8_t uart_reply[WRITE_READ_REPLY_DATAGRAM_SIZE + 1];
   HAL_UART_Receive(&stepper_driver->uart_, uart_reply, 9, 100);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f103 0008 	add.w	r0, r3, #8
 8003270:	f107 010c 	add.w	r1, r7, #12
 8003274:	2364      	movs	r3, #100	@ 0x64
 8003276:	2209      	movs	r2, #9
 8003278:	f003 fedf 	bl	800703a <HAL_UART_Receive>
   uint8_t* datagram = uart_reply + sizeof(uint8_t);
 800327c:	f107 030c 	add.w	r3, r7, #12
 8003280:	3301      	adds	r3, #1
 8003282:	637b      	str	r3, [r7, #52]	@ 0x34

   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8003284:	2300      	movs	r3, #0
 8003286:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800328a:	e029      	b.n	80032e0 <tmc2209_read+0x11e>
   {
     read_reply_datagram.bytes |= ((uint64_t)datagram[i] << (byte_count++ * BITS_PER_BYTE));
 800328c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2200      	movs	r2, #0
 800329a:	4698      	mov	r8, r3
 800329c:	4691      	mov	r9, r2
 800329e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	f1a3 0120 	sub.w	r1, r3, #32
 80032ae:	f1c3 0220 	rsb	r2, r3, #32
 80032b2:	fa09 f503 	lsl.w	r5, r9, r3
 80032b6:	fa08 f101 	lsl.w	r1, r8, r1
 80032ba:	430d      	orrs	r5, r1
 80032bc:	fa28 f202 	lsr.w	r2, r8, r2
 80032c0:	4315      	orrs	r5, r2
 80032c2:	fa08 f403 	lsl.w	r4, r8, r3
 80032c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ca:	ea44 0a02 	orr.w	sl, r4, r2
 80032ce:	ea45 0b03 	orr.w	fp, r5, r3
 80032d2:	e9c7 ab06 	strd	sl, fp, [r7, #24]
   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 80032d6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80032da:	3301      	adds	r3, #1
 80032dc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80032e0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	d9d1      	bls.n	800328c <tmc2209_read+0xca>
   }
   uint32_t reversed_data = reverse_data(read_reply_datagram.data);
 80032e8:	f8d7 301b 	ldr.w	r3, [r7, #27]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fd22 	bl	8002d36 <reverse_data>
 80032f2:	6338      	str	r0, [r7, #48]	@ 0x30
   uint8_t  crc           = calculate_crc_write(&read_reply_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80032f4:	f107 0318 	add.w	r3, r7, #24
 80032f8:	2108      	movs	r1, #8
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fd45 	bl	8002d8a <calculate_crc_write>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   if (crc != read_reply_datagram.crc)
   {
   }
   return reversed_data;
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 }
 8003308:	4618      	mov	r0, r3
 800330a:	3740      	adds	r7, #64	@ 0x40
 800330c:	46bd      	mov	sp, r7
 800330e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003314 <toSteps>:

/*
 * Calculates the steps needed to rotate the amount stated in the variable degrees.
 */
int32_t toSteps(float degrees, motor_t* motor)
{
 8003314:	b5b0      	push	{r4, r5, r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	ed87 0a01 	vstr	s0, [r7, #4]
 800331e:	6038      	str	r0, [r7, #0]
	int32_t steps;
	steps = ((200.0 * (float)(motor->microsteps)/360.0)*degrees) * motor->gear_ratio;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332c:	ee17 0a90 	vmov	r0, s15
 8003330:	f7fd f92a 	bl	8000588 <__aeabi_f2d>
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	4b1a      	ldr	r3, [pc, #104]	@ (80033a4 <toSteps+0x90>)
 800333a:	f7fd f97d 	bl	8000638 <__aeabi_dmul>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <toSteps+0x94>)
 800334c:	f7fd fa9e 	bl	800088c <__aeabi_ddiv>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4614      	mov	r4, r2
 8003356:	461d      	mov	r5, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fd f915 	bl	8000588 <__aeabi_f2d>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4620      	mov	r0, r4
 8003364:	4629      	mov	r1, r5
 8003366:	f7fd f967 	bl	8000638 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4614      	mov	r4, r2
 8003370:	461d      	mov	r5, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f906 	bl	8000588 <__aeabi_f2d>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4620      	mov	r0, r4
 8003382:	4629      	mov	r1, r5
 8003384:	f7fd f958 	bl	8000638 <__aeabi_dmul>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4610      	mov	r0, r2
 800338e:	4619      	mov	r1, r3
 8003390:	f7fd fb64 	bl	8000a5c <__aeabi_d2iz>
 8003394:	4603      	mov	r3, r0
 8003396:	60fb      	str	r3, [r7, #12]
	return steps;
 8003398:	68fb      	ldr	r3, [r7, #12]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bdb0      	pop	{r4, r5, r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40690000 	.word	0x40690000
 80033a8:	40768000 	.word	0x40768000

080033ac <HAL_TIM_OC_DelayElapsedCallback>:
 * Every other cycle, as step only triggers on rising edge,
 * the velocity and the compare value is changed depending on current state of velocity ramp.
 *
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	int8_t index;
	motor_t* motor;

	//To know which timer and thus which motor caused the interrupt
	if (htim->Instance == motors[0]->motor_control_timer.Instance){ index = 0; }
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b72      	ldr	r3, [pc, #456]	@ (8003584 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	429a      	cmp	r2, r3
 80033c0:	d102      	bne.n	80033c8 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
 80033c6:	e026      	b.n	8003416 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[1]->motor_control_timer.Instance){ index = 1; }
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003584 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d102      	bne.n	80033dc <HAL_TIM_OC_DelayElapsedCallback+0x30>
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
 80033da:	e01c      	b.n	8003416 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[2]->motor_control_timer.Instance){ index = 2; }
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b68      	ldr	r3, [pc, #416]	@ (8003584 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d102      	bne.n	80033f0 <HAL_TIM_OC_DelayElapsedCallback+0x44>
 80033ea:	2302      	movs	r3, #2
 80033ec:	75fb      	strb	r3, [r7, #23]
 80033ee:	e012      	b.n	8003416 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[3]->motor_control_timer.Instance){ index = 3; }
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d102      	bne.n	8003404 <HAL_TIM_OC_DelayElapsedCallback+0x58>
 80033fe:	2303      	movs	r3, #3
 8003400:	75fb      	strb	r3, [r7, #23]
 8003402:	e008      	b.n	8003416 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[4]->motor_control_timer.Instance){ index = 4; }
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b5e      	ldr	r3, [pc, #376]	@ (8003584 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	429a      	cmp	r2, r3
 8003410:	d101      	bne.n	8003416 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 8003412:	2304      	movs	r3, #4
 8003414:	75fb      	strb	r3, [r7, #23]

	motor = motors[index];
 8003416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800341a:	4a5a      	ldr	r2, [pc, #360]	@ (8003584 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 800341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003420:	613b      	str	r3, [r7, #16]

	//Stop timer and movement if the robot reaches its destination
	if (motor->step >= motor->total_steps || motor->stall_flag)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	429a      	cmp	r2, r3
 800342c:	da04      	bge.n	8003438 <HAL_TIM_OC_DelayElapsedCallback+0x8c>
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <HAL_TIM_OC_DelayElapsedCallback+0xaa>
	{
		HAL_TIM_OC_Stop_IT(&motor->motor_control_timer, TIM_CHANNEL_1);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	3358      	adds	r3, #88	@ 0x58
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f002 fe38 	bl	80060b4 <HAL_TIM_OC_Stop_IT>
		motor->active_movement_flag = 0;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		motor->stall_flag = 0;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		return;
 8003454:	e093      	b.n	800357e <HAL_TIM_OC_DelayElapsedCallback+0x1d2>
	}

	if (motor->cycle % 2 == 0) //Change velocity only every other cycle because step only triggers on rising edge
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d167      	bne.n	8003532 <HAL_TIM_OC_DelayElapsedCallback+0x186>
	{
//		if (motor->stall_flag && motor->step < (motor->step_at_stall + motor->dec_steps_after_stall))
//		{
//			motor->v = sqrtf(2 * motor->dec_max * (2 * motor->step_at_stall - motor->step));
//		}
		if (motor->step >= 0 && motor->step < motor->acc_steps)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	db1b      	blt.n	80034a2 <HAL_TIM_OC_DelayElapsedCallback+0xf6>
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	429a      	cmp	r2, r3
 8003474:	da15      	bge.n	80034a2 <HAL_TIM_OC_DelayElapsedCallback+0xf6>
		{
			motor->v = sqrtf(2 * motor->acc_max * (motor->step + 1));
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800347e:	3201      	adds	r2, #1
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	eeb0 0a67 	vmov.f32	s0, s15
 8003492:	f004 f999 	bl	80077c8 <sqrtf>
 8003496:	eef0 7a40 	vmov.f32	s15, s0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	edc3 7a06 	vstr	s15, [r3, #24]
 80034a0:	e042      	b.n	8003528 <HAL_TIM_OC_DelayElapsedCallback+0x17c>
			// v = acc_ramp[step]
		}
		else if (motor->const_steps != 0 && motor->step >= motor->acc_steps && motor->step < (motor->total_steps - motor->dec_steps))
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d018      	beq.n	80034dc <HAL_TIM_OC_DelayElapsedCallback+0x130>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	429a      	cmp	r2, r3
 80034b4:	db12      	blt.n	80034dc <HAL_TIM_OC_DelayElapsedCallback+0x130>
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	69d9      	ldr	r1, [r3, #28]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	1acb      	subs	r3, r1, r3
 80034c4:	429a      	cmp	r2, r3
 80034c6:	da09      	bge.n	80034dc <HAL_TIM_OC_DelayElapsedCallback+0x130>
			motor->v = motor->v_max;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	edc3 7a06 	vstr	s15, [r3, #24]
 80034da:	e025      	b.n	8003528 <HAL_TIM_OC_DelayElapsedCallback+0x17c>
		else if (motor->step >= (motor->total_steps - motor->dec_steps) && motor->step < motor->total_steps)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	1acb      	subs	r3, r1, r3
 80034ea:	429a      	cmp	r2, r3
 80034ec:	db1c      	blt.n	8003528 <HAL_TIM_OC_DelayElapsedCallback+0x17c>
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	da16      	bge.n	8003528 <HAL_TIM_OC_DelayElapsedCallback+0x17c>
		{
			motor->v = sqrtf(2 * motor->dec_max * (motor->total_steps - motor->step));
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	69d1      	ldr	r1, [r2, #28]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003506:	1a8a      	subs	r2, r1, r2
 8003508:	fb02 f303 	mul.w	r3, r2, r3
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	eeb0 0a67 	vmov.f32	s0, s15
 800351a:	f004 f955 	bl	80077c8 <sqrtf>
 800351e:	eef0 7a40 	vmov.f32	s15, s0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	edc3 7a06 	vstr	s15, [r3, #24]
			// v = acc_ramp[total_steps - step]
		}

		motor->step++;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	motor->cycle++;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30

	HAL_GPIO_TogglePin(motor->gpio_ports.step, motor->gpio_pins.step);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f001 f8a4 	bl	8004696 <HAL_GPIO_TogglePin>
	 *	But this is not the answer since the time has to be converted into timer ticks.
	 *	The timer runs at 2 MHz so we need to divide our current period duration by 1 / 2000000 s or 0.5 µs.
	 *	-> delay in ticks = 1/(2*v)/0.0000005 = 2000000/(2*v)
	 */

	int32_t delay = 2000000 / (2 * motor->v);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	edd3 7a06 	vldr	s15, [r3, #24]
 8003554:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003558:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003588 <HAL_TIM_OC_DelayElapsedCallback+0x1dc>
 800355c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003564:	ee17 3a90 	vmov	r3, s15
 8003568:	60fb      	str	r3, [r7, #12]
	//Add delay to current compare value in register
	int32_t total_delay = __HAL_TIM_GET_COMPARE(&motor->motor_control_timer, TIM_CHANNEL_1) + delay;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&motor->motor_control_timer, TIM_CHANNEL_1, total_delay);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000954 	.word	0x20000954
 8003588:	49f42400 	.word	0x49f42400

0800358c <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupt service routine for timer 9, which periodically invokes status checks.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MOTOR_COUNT; i++)
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	e025      	b.n	80035e6 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		if (htim->Instance == motors[i]->status_check_timer.Instance)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4916      	ldr	r1, [pc, #88]	@ (80035f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d118      	bne.n	80035e0 <HAL_TIM_PeriodElapsedCallback+0x54>
		{
			if (motors[i]->active_movement_flag)
 80035ae:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_TIM_PeriodElapsedCallback+0x42>
				motors[i]->status_flag = 1;
 80035be:	4a0e      	ldr	r2, [pc, #56]	@ (80035f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			else
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);

			break;
 80035cc:	e00f      	b.n	80035ee <HAL_TIM_PeriodElapsedCallback+0x62>
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);
 80035ce:	4a0a      	ldr	r2, [pc, #40]	@ (80035f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	33a0      	adds	r3, #160	@ 0xa0
 80035d8:	4618      	mov	r0, r3
 80035da:	f002 fbcd 	bl	8005d78 <HAL_TIM_Base_Stop_IT>
			break;
 80035de:	e006      	b.n	80035ee <HAL_TIM_PeriodElapsedCallback+0x62>
	for(int i = 0; i < MOTOR_COUNT; i++)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3301      	adds	r3, #1
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	ddd6      	ble.n	800359a <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
//	writeDisplay("HAHA");
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000954 	.word	0x20000954

080035fc <moveDegrees>:

/*
 * Initiates motor movement by starting the timer and calculating the steps
 */
void moveDegrees(float degrees, motor_t* motor)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	ed87 0a01 	vstr	s0, [r7, #4]
 8003606:	6038      	str	r0, [r7, #0]
	tmc2209_enable(motor->driver);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fd40 	bl	8003094 <tmc2209_enable>
	motor->total_steps = toSteps(degrees, motor); //Convert degrees to steps
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	ed97 0a01 	vldr	s0, [r7, #4]
 800361a:	f7ff fe7b 	bl	8003314 <toSteps>
 800361e:	4602      	mov	r2, r0
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	61da      	str	r2, [r3, #28]
	motor->acc_steps = (motor->v_max * motor->v_max) / (2 * motor->acc_max); //Calculate total acceleration and deceleration steps
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	68d2      	ldr	r2, [r2, #12]
 800362c:	fb03 f202 	mul.w	r2, r3, r2
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fbb2 f3f3 	udiv	r3, r2, r3
 800363a:	461a      	mov	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->dec_steps = (motor->v_max * motor->v_max) / (2 * motor->dec_max);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	68d2      	ldr	r2, [r2, #12]
 8003648:	fb03 f202 	mul.w	r2, r3, r2
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	461a      	mov	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->const_steps = motor->total_steps - (motor->acc_steps + motor->dec_steps);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	440b      	add	r3, r1
 800366a:	1ad2      	subs	r2, r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	621a      	str	r2, [r3, #32]

	motor->v = 0;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
	motor->step = 0;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->cycle = 0;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->stall_flag = 0;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (motor->const_steps < 0)	//If acceleration steps + deceleration steps are bigger than total steps
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	2b00      	cmp	r3, #0
 8003692:	da12      	bge.n	80036ba <moveDegrees+0xbe>
	{
		motor->acc_steps = motor->total_steps / 2;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	0fda      	lsrs	r2, r3, #31
 800369a:	4413      	add	r3, r2
 800369c:	105b      	asrs	r3, r3, #1
 800369e:	461a      	mov	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
		motor->dec_steps = motor->total_steps / 2;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	0fda      	lsrs	r2, r3, #31
 80036aa:	4413      	add	r3, r2
 80036ac:	105b      	asrs	r3, r3, #1
 80036ae:	461a      	mov	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	629a      	str	r2, [r3, #40]	@ 0x28
		motor->const_steps = 0;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	621a      	str	r2, [r3, #32]
	}

	//Start timer in output compare with interrupt
	HAL_GPIO_WritePin(motor->gpio_ports.step, motor->gpio_pins.step, GPIO_PIN_RESET);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036c4:	2200      	movs	r2, #0
 80036c6:	4619      	mov	r1, r3
 80036c8:	f000 ffcc 	bl	8004664 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&motor->motor_control_timer, TIM_CHANNEL_1, 1);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	2201      	movs	r2, #1
 80036d2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_OC_Start_IT(&motor->motor_control_timer, TIM_CHANNEL_1);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	3358      	adds	r3, #88	@ 0x58
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 fbd4 	bl	8005e88 <HAL_TIM_OC_Start_IT>

	motor->active_movement_flag = 1;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	HAL_TIM_Base_Start_IT(&motor->status_check_timer);  //Timer for periodical status checks
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	33a0      	adds	r3, #160	@ 0xa0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 fad3 	bl	8005c98 <HAL_TIM_Base_Start_IT>

	motor->status_flag = 0;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	while(motor->active_movement_flag)		//While motor is moving, periodically check driver status
 80036fa:	e002      	b.n	8003702 <moveDegrees+0x106>
	{
		checkDriverStatus(motor);
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f000 f845 	bl	800378c <checkDriverStatus>
	while(motor->active_movement_flag)		//While motor is moving, periodically check driver status
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f7      	bne.n	80036fc <moveDegrees+0x100>
	}
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <checkStall>:

/*
 * Also work in progress, now simply outputs stallguard result to monitor.
 */
void checkStall(uint16_t stallguard_result, motor_t* motor)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af02      	add	r7, sp, #8
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	80fb      	strh	r3, [r7, #6]

	if (stallguard_result <= motor->stallGuard_threshold && motor->v > VELOCITY_THRESHOLD)
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800372c:	429a      	cmp	r2, r3
 800372e:	d80d      	bhi.n	800374c <checkStall+0x34>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	edd3 7a06 	vldr	s15, [r3, #24]
 8003736:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003780 <checkStall+0x68>
 800373a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003742:	dd03      	ble.n	800374c <checkStall+0x34>
	{
		motor->stall_flag = 1;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	char str[10];
	snprintf(str, sizeof(str), "%c:%u", motor->ID, stallguard_result);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	f107 000c 	add.w	r0, r7, #12
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	4a09      	ldr	r2, [pc, #36]	@ (8003784 <checkStall+0x6c>)
 800375e:	210a      	movs	r1, #10
 8003760:	f004 f912 	bl	8007988 <sniprintf>
	HAL_GPIO_TogglePin(LED_red_GPIO_Port, LED_red_Pin);
 8003764:	2101      	movs	r1, #1
 8003766:	4808      	ldr	r0, [pc, #32]	@ (8003788 <checkStall+0x70>)
 8003768:	f000 ff95 	bl	8004696 <HAL_GPIO_TogglePin>
	writeDisplay(str);
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	4618      	mov	r0, r3
 8003772:	f7fd fb31 	bl	8000dd8 <writeDisplay>
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	43480000 	.word	0x43480000
 8003784:	080081e4 	.word	0x080081e4
 8003788:	40020400 	.word	0x40020400

0800378c <checkDriverStatus>:
 * It only does something when status_flag has been set to 1.
 * Then it calls the checkOverheat and Load functions.
 */

void checkDriverStatus(motor_t* motor)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	if (motor->status_flag)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <checkDriverStatus+0x34>
	{
//		tmc2209_status_t status;
		uint16_t stallguard_result;

		motor->status_flag = 0;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
//		status = get_status(motor->driver);
//
//		checkOverheating(status);

		stallguard_result = get_stall_guard_result(motor->driver);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f9c4 	bl	8002b3a <get_stall_guard_result>
 80037b2:	4603      	mov	r3, r0
 80037b4:	81fb      	strh	r3, [r7, #14]
		checkStall(stallguard_result, motor);
 80037b6:	89fb      	ldrh	r3, [r7, #14]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ffac 	bl	8003718 <checkStall>
	}
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <init_motor_1>:
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart5;


void init_motor_1(motor_t *motor1, tmc2209_stepper_driver_t *driver1)
{
 80037c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ca:	b093      	sub	sp, #76	@ 0x4c
 80037cc:	af10      	add	r7, sp, #64	@ 0x40
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	motor1->ID = '1';
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2231      	movs	r2, #49	@ 0x31
 80037d6:	701a      	strb	r2, [r3, #0]

	motor1->gear_ratio = GEAR_RATIO_M_1;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a5a      	ldr	r2, [pc, #360]	@ (8003944 <init_motor_1+0x17c>)
 80037dc:	605a      	str	r2, [r3, #4]
	motor1->microsteps = MICROSTEPS_M_1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	609a      	str	r2, [r3, #8]
	motor1->v_max 	= V_MAX_M_1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80037ea:	60da      	str	r2, [r3, #12]
	motor1->acc_max = ACC_MAX_M_1;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80037f2:	611a      	str	r2, [r3, #16]
	motor1->dec_max = DEC_MAX_M_1;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80037fa:	615a      	str	r2, [r3, #20]

	motor1->v = 0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
	motor1->total_steps = 0;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
	motor1->const_steps = 0;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	621a      	str	r2, [r3, #32]
	motor1->acc_steps = 0;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	625a      	str	r2, [r3, #36]	@ 0x24
	motor1->dec_steps = 0;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	629a      	str	r2, [r3, #40]	@ 0x28
	motor1->step = 0;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor1->cycle = 0;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30

	motor1->active_movement_flag = 0;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	motor1->step_at_stall = 0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	639a      	str	r2, [r3, #56]	@ 0x38
	motor1->dec_steps_after_stall = 0;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor1->stall_flag = 0;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	motor1->status_flag = 0;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	motor1->hold_current_percent = HOLD_CURRENT_PERCENT_M_1;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2214      	movs	r2, #20
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor1->run_current_percent = RUN_CURRENT_PERCENT_M_1;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2246      	movs	r2, #70	@ 0x46
 8003858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	motor1->gpio_pins.step 		= STEP_1_Pin;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003862:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	motor1->gpio_pins.dir 		= DIR_1_Pin;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800386c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	motor1->gpio_pins.mot_en 	= MOT_EN_1_Pin;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003876:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motor1->gpio_ports.step 	= STEP_1_GPIO_Port;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a32      	ldr	r2, [pc, #200]	@ (8003948 <init_motor_1+0x180>)
 800387e:	64da      	str	r2, [r3, #76]	@ 0x4c
	motor1->gpio_ports.dir 		= DIR_1_GPIO_Port;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a31      	ldr	r2, [pc, #196]	@ (8003948 <init_motor_1+0x180>)
 8003884:	651a      	str	r2, [r3, #80]	@ 0x50
	motor1->gpio_ports.mot_en 	= MOT_EN_1_GPIO_Port;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2f      	ldr	r2, [pc, #188]	@ (8003948 <init_motor_1+0x180>)
 800388a:	655a      	str	r2, [r3, #84]	@ 0x54

	motor1->motor_control_timer = htim12;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a2f      	ldr	r2, [pc, #188]	@ (800394c <init_motor_1+0x184>)
 8003890:	3358      	adds	r3, #88	@ 0x58
 8003892:	4611      	mov	r1, r2
 8003894:	2248      	movs	r2, #72	@ 0x48
 8003896:	4618      	mov	r0, r3
 8003898:	f004 f90a 	bl	8007ab0 <memcpy>
	motor1->status_check_timer = htim1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <init_motor_1+0x188>)
 80038a0:	33a0      	adds	r3, #160	@ 0xa0
 80038a2:	4611      	mov	r1, r2
 80038a4:	2248      	movs	r2, #72	@ 0x48
 80038a6:	4618      	mov	r0, r3
 80038a8:	f004 f902 	bl	8007ab0 <memcpy>
	motor1->uart = huart1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a29      	ldr	r2, [pc, #164]	@ (8003954 <init_motor_1+0x18c>)
 80038b0:	33e8      	adds	r3, #232	@ 0xe8
 80038b2:	4611      	mov	r1, r2
 80038b4:	2248      	movs	r2, #72	@ 0x48
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 f8fa 	bl	8007ab0 <memcpy>

	motor1->position_limit = POSITION_LIMIT_M_1;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f64e 7295 	movw	r2, #61333	@ 0xef95
 80038c2:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	motor1->stallGuard_threshold = STALLGUARD_THRESHOLD_M_1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	220a      	movs	r2, #10
 80038ca:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

	tmc2209_set_uart(driver1, huart1);
 80038ce:	4e21      	ldr	r6, [pc, #132]	@ (8003954 <init_motor_1+0x18c>)
 80038d0:	466d      	mov	r5, sp
 80038d2:	f106 040c 	add.w	r4, r6, #12
 80038d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80038e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80038ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80038ee:	6838      	ldr	r0, [r7, #0]
 80038f0:	f7ff fba1 	bl	8003036 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver1, motor1->gpio_pins.mot_en, motor1->gpio_ports.mot_en);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8b3 1048 	ldrh.w	r1, [r3, #72]	@ 0x48
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	461a      	mov	r2, r3
 8003900:	6838      	ldr	r0, [r7, #0]
 8003902:	f7ff fbb0 	bl	8003066 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 8003906:	2200      	movs	r2, #0
 8003908:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800390c:	6838      	ldr	r0, [r7, #0]
 800390e:	f7fe ff7d 	bl	800280c <tmc2209_setup>
	set_micro_steps_per_step(driver1, motor1->microsteps);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	b29b      	uxth	r3, r3
 8003918:	4619      	mov	r1, r3
 800391a:	6838      	ldr	r0, [r7, #0]
 800391c:	f7fe ffc6 	bl	80028ac <set_micro_steps_per_step>
	set_all_current_percent_values(driver1, motor1->run_current_percent, motor1->hold_current_percent, 0);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 1043 	ldrb.w	r1, [r3, #67]	@ 0x43
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 800392c:	2300      	movs	r3, #0
 800392e:	6838      	ldr	r0, [r7, #0]
 8003930:	f7ff f858 	bl	80029e4 <set_all_current_percent_values>

	motor1->driver = driver1;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003944:	41200000 	.word	0x41200000
 8003948:	40020400 	.word	0x40020400
 800394c:	20000714 	.word	0x20000714
 8003950:	200004d4 	.word	0x200004d4
 8003954:	20000834 	.word	0x20000834

08003958 <init_motor_2>:

void init_motor_2(motor_t *motor2, tmc2209_stepper_driver_t *driver2)
{
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	b093      	sub	sp, #76	@ 0x4c
 800395c:	af10      	add	r7, sp, #64	@ 0x40
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
	motor2->ID = '2';
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2232      	movs	r2, #50	@ 0x32
 8003966:	701a      	strb	r2, [r3, #0]

	motor2->gear_ratio = GEAR_RATIO_M_2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ad4 <init_motor_2+0x17c>)
 800396c:	605a      	str	r2, [r3, #4]
	motor2->microsteps = MICROSTEPS_M_2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	609a      	str	r2, [r3, #8]
	motor2->v_max 	= V_MAX_M_2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800397a:	60da      	str	r2, [r3, #12]
	motor2->acc_max = ACC_MAX_M_2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8003982:	611a      	str	r2, [r3, #16]
	motor2->dec_max = DEC_MAX_M_2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800398a:	615a      	str	r2, [r3, #20]

	motor2->v = 0;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	619a      	str	r2, [r3, #24]
	motor2->total_steps = 0;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	61da      	str	r2, [r3, #28]
	motor2->const_steps = 0;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	621a      	str	r2, [r3, #32]
	motor2->acc_steps = 0;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	625a      	str	r2, [r3, #36]	@ 0x24
	motor2->dec_steps = 0;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	629a      	str	r2, [r3, #40]	@ 0x28
	motor2->step = 0;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor2->cycle = 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	@ 0x30

	motor2->active_movement_flag = 0;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	motor2->step_at_stall = 0;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	639a      	str	r2, [r3, #56]	@ 0x38
	motor2->dec_steps_after_stall = 0;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor2->stall_flag = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	motor2->status_flag = 0;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	motor2->hold_current_percent = HOLD_CURRENT_PERCENT_M_2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2250      	movs	r2, #80	@ 0x50
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor2->run_current_percent = RUN_CURRENT_PERCENT_M_2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2264      	movs	r2, #100	@ 0x64
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	motor2->gpio_pins.step 		= STEP_2_Pin;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2280      	movs	r2, #128	@ 0x80
 80039f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	motor2->gpio_pins.dir 		= DIR_2_Pin;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	motor2->gpio_pins.mot_en 	= MOT_EN_2_Pin;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2240      	movs	r2, #64	@ 0x40
 8003a02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motor2->gpio_ports.step 	= STEP_2_GPIO_Port;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a33      	ldr	r2, [pc, #204]	@ (8003ad8 <init_motor_2+0x180>)
 8003a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
	motor2->gpio_ports.dir 		= DIR_2_GPIO_Port;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a32      	ldr	r2, [pc, #200]	@ (8003ad8 <init_motor_2+0x180>)
 8003a10:	651a      	str	r2, [r3, #80]	@ 0x50
	motor2->gpio_ports.mot_en 	= MOT_EN_2_GPIO_Port;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a30      	ldr	r2, [pc, #192]	@ (8003ad8 <init_motor_2+0x180>)
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54

	motor2->motor_control_timer = htim13;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a30      	ldr	r2, [pc, #192]	@ (8003adc <init_motor_2+0x184>)
 8003a1c:	3358      	adds	r3, #88	@ 0x58
 8003a1e:	4611      	mov	r1, r2
 8003a20:	2248      	movs	r2, #72	@ 0x48
 8003a22:	4618      	mov	r0, r3
 8003a24:	f004 f844 	bl	8007ab0 <memcpy>
	motor2->status_check_timer = htim6;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae0 <init_motor_2+0x188>)
 8003a2c:	33a0      	adds	r3, #160	@ 0xa0
 8003a2e:	4611      	mov	r1, r2
 8003a30:	2248      	movs	r2, #72	@ 0x48
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 f83c 	bl	8007ab0 <memcpy>

	motor2->uart = huart6;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae4 <init_motor_2+0x18c>)
 8003a3c:	33e8      	adds	r3, #232	@ 0xe8
 8003a3e:	4611      	mov	r1, r2
 8003a40:	2248      	movs	r2, #72	@ 0x48
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 f834 	bl	8007ab0 <memcpy>

	motor2->position_limit = POSITION_LIMIT_M_2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8003a4e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	motor2->stallGuard_threshold = STALLGUARD_THRESHOLD_M_2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	220a      	movs	r2, #10
 8003a56:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

	tmc2209_set_uart(driver2, motor2->uart);
 8003a5a:	687e      	ldr	r6, [r7, #4]
 8003a5c:	466d      	mov	r5, sp
 8003a5e:	f106 04f4 	add.w	r4, r6, #244	@ 0xf4
 8003a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a6e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003a72:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a76:	f106 03e8 	add.w	r3, r6, #232	@ 0xe8
 8003a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a7c:	6838      	ldr	r0, [r7, #0]
 8003a7e:	f7ff fada 	bl	8003036 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver2, motor2->gpio_pins.mot_en, motor2->gpio_ports.mot_en);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8b3 1048 	ldrh.w	r1, [r3, #72]	@ 0x48
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6838      	ldr	r0, [r7, #0]
 8003a90:	f7ff fae9 	bl	8003066 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003a9a:	6838      	ldr	r0, [r7, #0]
 8003a9c:	f7fe feb6 	bl	800280c <tmc2209_setup>
//	disable_stealth_chop(motor2->driver);
	set_micro_steps_per_step(driver2, motor2->microsteps);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6838      	ldr	r0, [r7, #0]
 8003aaa:	f7fe feff 	bl	80028ac <set_micro_steps_per_step>
	set_all_current_percent_values(driver2, motor2->run_current_percent, motor2->hold_current_percent, 0);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 1043 	ldrb.w	r1, [r3, #67]	@ 0x43
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8003aba:	2300      	movs	r3, #0
 8003abc:	6838      	ldr	r0, [r7, #0]
 8003abe:	f7fe ff91 	bl	80029e4 <set_all_current_percent_values>

	motor2->driver = driver2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40f00000 	.word	0x40f00000
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	2000075c 	.word	0x2000075c
 8003ae0:	200005ac 	.word	0x200005ac
 8003ae4:	2000090c 	.word	0x2000090c

08003ae8 <init_motor_3>:

void init_motor_3(motor_t *motor3, tmc2209_stepper_driver_t *driver3)
{
 8003ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aea:	b093      	sub	sp, #76	@ 0x4c
 8003aec:	af10      	add	r7, sp, #64	@ 0x40
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
	motor3->ID = '3';
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2233      	movs	r2, #51	@ 0x33
 8003af6:	701a      	strb	r2, [r3, #0]

	motor3->gear_ratio = GEAR_RATIO_M_3;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a59      	ldr	r2, [pc, #356]	@ (8003c60 <init_motor_3+0x178>)
 8003afc:	605a      	str	r2, [r3, #4]
	motor3->microsteps = MICROSTEPS_M_3;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	609a      	str	r2, [r3, #8]
	motor3->v_max 	= V_MAX_M_3;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8003b0a:	60da      	str	r2, [r3, #12]
	motor3->acc_max = ACC_MAX_M_3;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003b12:	611a      	str	r2, [r3, #16]
	motor3->dec_max = DEC_MAX_M_3;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003b1a:	615a      	str	r2, [r3, #20]

	motor3->v = 0;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	619a      	str	r2, [r3, #24]
	motor3->total_steps = 0;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
	motor3->const_steps = 0;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	621a      	str	r2, [r3, #32]
	motor3->acc_steps = 0;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24
	motor3->dec_steps = 0;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28
	motor3->step = 0;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor3->cycle = 0;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30

	motor3->active_movement_flag = 0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	motor3->step_at_stall = 0;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	639a      	str	r2, [r3, #56]	@ 0x38
	motor3->dec_steps_after_stall = 0;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor3->stall_flag = 0;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	motor3->status_flag = 0;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	motor3->hold_current_percent = HOLD_CURRENT_PERCENT_M_3;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	221e      	movs	r2, #30
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor3->run_current_percent = RUN_CURRENT_PERCENT_M_3;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2246      	movs	r2, #70	@ 0x46
 8003b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	motor3->gpio_pins.step 		= STEP_3_Pin;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2208      	movs	r2, #8
 8003b80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	motor3->gpio_pins.dir 		= DIR_3_Pin;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	motor3->gpio_pins.mot_en 	= MOT_EN_3_Pin;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2204      	movs	r2, #4
 8003b92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motor3->gpio_ports.step 	= STEP_3_GPIO_Port;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a32      	ldr	r2, [pc, #200]	@ (8003c64 <init_motor_3+0x17c>)
 8003b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
	motor3->gpio_ports.dir 		= DIR_3_GPIO_Port;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a31      	ldr	r2, [pc, #196]	@ (8003c64 <init_motor_3+0x17c>)
 8003ba0:	651a      	str	r2, [r3, #80]	@ 0x50
	motor3->gpio_ports.mot_en 	= MOT_EN_3_GPIO_Port;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8003c64 <init_motor_3+0x17c>)
 8003ba6:	655a      	str	r2, [r3, #84]	@ 0x54

	motor3->motor_control_timer = htim3;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a2f      	ldr	r2, [pc, #188]	@ (8003c68 <init_motor_3+0x180>)
 8003bac:	3358      	adds	r3, #88	@ 0x58
 8003bae:	4611      	mov	r1, r2
 8003bb0:	2248      	movs	r2, #72	@ 0x48
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 ff7c 	bl	8007ab0 <memcpy>
	motor3->status_check_timer = htim7;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a2c      	ldr	r2, [pc, #176]	@ (8003c6c <init_motor_3+0x184>)
 8003bbc:	33a0      	adds	r3, #160	@ 0xa0
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	2248      	movs	r2, #72	@ 0x48
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f003 ff74 	bl	8007ab0 <memcpy>

	motor3->uart = huart3;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a29      	ldr	r2, [pc, #164]	@ (8003c70 <init_motor_3+0x188>)
 8003bcc:	33e8      	adds	r3, #232	@ 0xe8
 8003bce:	4611      	mov	r1, r2
 8003bd0:	2248      	movs	r2, #72	@ 0x48
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f003 ff6c 	bl	8007ab0 <memcpy>

	motor3->position_limit = POSITION_LIMIT_M_3;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8003bde:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	motor3->stallGuard_threshold = STALLGUARD_THRESHOLD_M_3;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	220a      	movs	r2, #10
 8003be6:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

	tmc2209_set_uart(driver3, huart3);
 8003bea:	4e21      	ldr	r6, [pc, #132]	@ (8003c70 <init_motor_3+0x188>)
 8003bec:	466d      	mov	r5, sp
 8003bee:	f106 040c 	add.w	r4, r6, #12
 8003bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bfe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003c02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003c06:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003c0a:	6838      	ldr	r0, [r7, #0]
 8003c0c:	f7ff fa13 	bl	8003036 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver3, motor3->gpio_pins.mot_en, motor3->gpio_ports.mot_en);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b3 1048 	ldrh.w	r1, [r3, #72]	@ 0x48
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f7ff fa22 	bl	8003066 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_0);
 8003c22:	2200      	movs	r2, #0
 8003c24:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003c28:	6838      	ldr	r0, [r7, #0]
 8003c2a:	f7fe fdef 	bl	800280c <tmc2209_setup>
	set_micro_steps_per_step(driver3, motor3->microsteps);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	6838      	ldr	r0, [r7, #0]
 8003c38:	f7fe fe38 	bl	80028ac <set_micro_steps_per_step>
	set_all_current_percent_values(driver3, motor3->run_current_percent, motor3->hold_current_percent, 0);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 1043 	ldrb.w	r1, [r3, #67]	@ 0x43
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6838      	ldr	r0, [r7, #0]
 8003c4c:	f7fe feca 	bl	80029e4 <set_all_current_percent_values>

	motor3->driver = driver3;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c60:	40f00000 	.word	0x40f00000
 8003c64:	40020800 	.word	0x40020800
 8003c68:	2000051c 	.word	0x2000051c
 8003c6c:	200005f4 	.word	0x200005f4
 8003c70:	200008c4 	.word	0x200008c4

08003c74 <init_motor_4>:

void init_motor_4(motor_t *motor4, tmc2209_stepper_driver_t *driver4)
{
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c76:	b093      	sub	sp, #76	@ 0x4c
 8003c78:	af10      	add	r7, sp, #64	@ 0x40
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
	motor4->ID = '4';
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2234      	movs	r2, #52	@ 0x34
 8003c82:	701a      	strb	r2, [r3, #0]

	motor4->gear_ratio = GEAR_RATIO_M_4;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a5b      	ldr	r2, [pc, #364]	@ (8003df4 <init_motor_4+0x180>)
 8003c88:	605a      	str	r2, [r3, #4]
	motor4->microsteps = MICROSTEPS_M_4;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	609a      	str	r2, [r3, #8]
	motor4->v_max 	= V_MAX_M_4;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c96:	60da      	str	r2, [r3, #12]
	motor4->acc_max = ACC_MAX_M_4;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8003c9e:	611a      	str	r2, [r3, #16]
	motor4->dec_max = DEC_MAX_M_4;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8003ca6:	615a      	str	r2, [r3, #20]

	motor4->v = 0;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
	motor4->total_steps = 0;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
	motor4->const_steps = 0;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	621a      	str	r2, [r3, #32]
	motor4->acc_steps = 0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24
	motor4->dec_steps = 0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	629a      	str	r2, [r3, #40]	@ 0x28
	motor4->step = 0;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor4->cycle = 0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30

	motor4->active_movement_flag = 0;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	motor4->step_at_stall = 0;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	639a      	str	r2, [r3, #56]	@ 0x38
	motor4->dec_steps_after_stall = 0;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor4->stall_flag = 0;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	motor4->status_flag = 0;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	motor4->hold_current_percent = HOLD_CURRENT_PERCENT_M_4;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	221e      	movs	r2, #30
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor4->run_current_percent = RUN_CURRENT_PERCENT_M_4;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2246      	movs	r2, #70	@ 0x46
 8003d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	motor4->gpio_pins.step 		= STEP_4_Pin;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	motor4->gpio_pins.dir 		= DIR_4_Pin;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2210      	movs	r2, #16
 8003d14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	motor4->gpio_pins.mot_en 	= MOT_EN_4_Pin;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motor4->gpio_ports.step 	= STEP_4_GPIO_Port;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a35      	ldr	r2, [pc, #212]	@ (8003df8 <init_motor_4+0x184>)
 8003d24:	64da      	str	r2, [r3, #76]	@ 0x4c
	motor4->gpio_ports.dir 		= DIR_4_GPIO_Port;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a33      	ldr	r2, [pc, #204]	@ (8003df8 <init_motor_4+0x184>)
 8003d2a:	651a      	str	r2, [r3, #80]	@ 0x50
	motor4->gpio_ports.mot_en 	= MOT_EN_4_GPIO_Port;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a32      	ldr	r2, [pc, #200]	@ (8003df8 <init_motor_4+0x184>)
 8003d30:	655a      	str	r2, [r3, #84]	@ 0x54

	motor4->motor_control_timer = htim4;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a31      	ldr	r2, [pc, #196]	@ (8003dfc <init_motor_4+0x188>)
 8003d36:	3358      	adds	r3, #88	@ 0x58
 8003d38:	4611      	mov	r1, r2
 8003d3a:	2248      	movs	r2, #72	@ 0x48
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 feb7 	bl	8007ab0 <memcpy>
	motor4->status_check_timer = htim9;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2e      	ldr	r2, [pc, #184]	@ (8003e00 <init_motor_4+0x18c>)
 8003d46:	33a0      	adds	r3, #160	@ 0xa0
 8003d48:	4611      	mov	r1, r2
 8003d4a:	2248      	movs	r2, #72	@ 0x48
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f003 feaf 	bl	8007ab0 <memcpy>

	motor4->uart = huart4;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <init_motor_4+0x190>)
 8003d56:	33e8      	adds	r3, #232	@ 0xe8
 8003d58:	4611      	mov	r1, r2
 8003d5a:	2248      	movs	r2, #72	@ 0x48
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fea7 	bl	8007ab0 <memcpy>

	motor4->position_limit = POSITION_LIMIT_M_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003d68:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	motor4->stallGuard_threshold = STALLGUARD_THRESHOLD_M_4;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	220a      	movs	r2, #10
 8003d70:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

	tmc2209_set_uart(driver4, huart4);
 8003d74:	4e23      	ldr	r6, [pc, #140]	@ (8003e04 <init_motor_4+0x190>)
 8003d76:	466d      	mov	r5, sp
 8003d78:	f106 040c 	add.w	r4, r6, #12
 8003d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003d8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003d90:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003d94:	6838      	ldr	r0, [r7, #0]
 8003d96:	f7ff f94e 	bl	8003036 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver4, motor4->gpio_pins.mot_en, motor4->gpio_ports.mot_en);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8b3 1048 	ldrh.w	r1, [r3, #72]	@ 0x48
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da4:	461a      	mov	r2, r3
 8003da6:	6838      	ldr	r0, [r7, #0]
 8003da8:	f7ff f95d 	bl	8003066 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8003dac:	2200      	movs	r2, #0
 8003dae:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f7fe fd2a 	bl	800280c <tmc2209_setup>
	enable_cool_step(driver4, 0, 1);
 8003db8:	2201      	movs	r2, #1
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6838      	ldr	r0, [r7, #0]
 8003dbe:	f7fe fe7f 	bl	8002ac0 <enable_cool_step>
	set_micro_steps_per_step(driver4, motor4->microsteps);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f7fe fd6e 	bl	80028ac <set_micro_steps_per_step>
	set_all_current_percent_values(driver4, motor4->run_current_percent, motor4->hold_current_percent, 0);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 1043 	ldrb.w	r1, [r3, #67]	@ 0x43
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6838      	ldr	r0, [r7, #0]
 8003de0:	f7fe fe00 	bl	80029e4 <set_all_current_percent_values>

	motor4->driver = driver4;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df4:	40f00000 	.word	0x40f00000
 8003df8:	40020400 	.word	0x40020400
 8003dfc:	20000564 	.word	0x20000564
 8003e00:	20000684 	.word	0x20000684
 8003e04:	200007a4 	.word	0x200007a4

08003e08 <init_motor_5>:

void init_motor_5(motor_t *motor5, tmc2209_stepper_driver_t *driver5)
{
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	b093      	sub	sp, #76	@ 0x4c
 8003e0c:	af10      	add	r7, sp, #64	@ 0x40
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	motor5->ID = '5';
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2235      	movs	r2, #53	@ 0x35
 8003e16:	701a      	strb	r2, [r3, #0]

	motor5->gear_ratio = GEAR_RATIO_M_5;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e1e:	605a      	str	r2, [r3, #4]
	motor5->microsteps = MICROSTEPS_M_5;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2208      	movs	r2, #8
 8003e24:	609a      	str	r2, [r3, #8]
	motor5->v_max 	= V_MAX_M_5;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003e2c:	60da      	str	r2, [r3, #12]
	motor5->acc_max = ACC_MAX_M_5;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e34:	611a      	str	r2, [r3, #16]
	motor5->dec_max = DEC_MAX_M_5;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e3c:	615a      	str	r2, [r3, #20]

	motor5->v = 0;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	619a      	str	r2, [r3, #24]
	motor5->total_steps = 0;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	61da      	str	r2, [r3, #28]
	motor5->const_steps = 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	621a      	str	r2, [r3, #32]
	motor5->acc_steps = 0;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	625a      	str	r2, [r3, #36]	@ 0x24
	motor5->dec_steps = 0;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28
	motor5->step = 0;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor5->cycle = 0;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30

	motor5->active_movement_flag = 0;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	motor5->step_at_stall = 0;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	639a      	str	r2, [r3, #56]	@ 0x38
	motor5->dec_steps_after_stall = 0;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor5->stall_flag = 0;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	motor5->status_flag = 0;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	motor5->hold_current_percent = HOLD_CURRENT_PERCENT_M_5;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2205      	movs	r2, #5
 8003e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor5->run_current_percent = RUN_CURRENT_PERCENT_M_5;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2246      	movs	r2, #70	@ 0x46
 8003e9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	motor5->gpio_pins.step 		= STEP_5_Pin;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	motor5->gpio_pins.dir 		= DIR_5_Pin;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	motor5->gpio_pins.mot_en 	= MOT_EN_5_Pin;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	motor5->gpio_ports.step 	= STEP_5_GPIO_Port;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	@ (8003f84 <init_motor_5+0x17c>)
 8003ebe:	64da      	str	r2, [r3, #76]	@ 0x4c
	motor5->gpio_ports.dir 		= DIR_5_GPIO_Port;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a30      	ldr	r2, [pc, #192]	@ (8003f84 <init_motor_5+0x17c>)
 8003ec4:	651a      	str	r2, [r3, #80]	@ 0x50
	motor5->gpio_ports.mot_en 	= MOT_EN_5_GPIO_Port;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f84 <init_motor_5+0x17c>)
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54

	motor5->motor_control_timer = htim8;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a2e      	ldr	r2, [pc, #184]	@ (8003f88 <init_motor_5+0x180>)
 8003ed0:	3358      	adds	r3, #88	@ 0x58
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	2248      	movs	r2, #72	@ 0x48
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 fdea 	bl	8007ab0 <memcpy>
	motor5->status_check_timer = htim10;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a2b      	ldr	r2, [pc, #172]	@ (8003f8c <init_motor_5+0x184>)
 8003ee0:	33a0      	adds	r3, #160	@ 0xa0
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	2248      	movs	r2, #72	@ 0x48
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f003 fde2 	bl	8007ab0 <memcpy>

	motor5->uart = huart5;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a28      	ldr	r2, [pc, #160]	@ (8003f90 <init_motor_5+0x188>)
 8003ef0:	33e8      	adds	r3, #232	@ 0xe8
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	2248      	movs	r2, #72	@ 0x48
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f003 fdda 	bl	8007ab0 <memcpy>

	motor5->position_limit = POSITION_LIMIT_M_5;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a25      	ldr	r2, [pc, #148]	@ (8003f94 <init_motor_5+0x18c>)
 8003f00:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	motor5->stallGuard_threshold = STALLGUARD_THRESHOLD_M_5;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2205      	movs	r2, #5
 8003f08:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

	tmc2209_set_uart(driver5, huart5);
 8003f0c:	4e20      	ldr	r6, [pc, #128]	@ (8003f90 <init_motor_5+0x188>)
 8003f0e:	466d      	mov	r5, sp
 8003f10:	f106 040c 	add.w	r4, r6, #12
 8003f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003f24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003f28:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003f2c:	6838      	ldr	r0, [r7, #0]
 8003f2e:	f7ff f882 	bl	8003036 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver5, motor5->gpio_pins.mot_en, motor5->gpio_ports.mot_en);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 1048 	ldrh.w	r1, [r3, #72]	@ 0x48
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	f7ff f891 	bl	8003066 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_0);
 8003f44:	2200      	movs	r2, #0
 8003f46:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003f4a:	6838      	ldr	r0, [r7, #0]
 8003f4c:	f7fe fc5e 	bl	800280c <tmc2209_setup>
	set_micro_steps_per_step(driver5, motor5->microsteps);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4619      	mov	r1, r3
 8003f58:	6838      	ldr	r0, [r7, #0]
 8003f5a:	f7fe fca7 	bl	80028ac <set_micro_steps_per_step>
	set_all_current_percent_values(driver5, motor5->run_current_percent, motor5->hold_current_percent, 0);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 1043 	ldrb.w	r1, [r3, #67]	@ 0x43
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	6838      	ldr	r0, [r7, #0]
 8003f6e:	f7fe fd39 	bl	80029e4 <set_all_current_percent_values>

	motor5->driver = driver5;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40020800 	.word	0x40020800
 8003f88:	2000063c 	.word	0x2000063c
 8003f8c:	200006cc 	.word	0x200006cc
 8003f90:	200007ec 	.word	0x200007ec
 8003f94:	00027100 	.word	0x00027100

08003f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003f9c:	f7fe fc24 	bl	80027e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fa0:	480c      	ldr	r0, [pc, #48]	@ (8003fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fa2:	490d      	ldr	r1, [pc, #52]	@ (8003fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8003fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fa8:	e002      	b.n	8003fb0 <LoopCopyDataInit>

08003faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fae:	3304      	adds	r3, #4

08003fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fb4:	d3f9      	bcc.n	8003faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8003fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fbc:	e001      	b.n	8003fc2 <LoopFillZerobss>

08003fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fc0:	3204      	adds	r2, #4

08003fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fc4:	d3fb      	bcc.n	8003fbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003fc6:	f003 fd4d 	bl	8007a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fca:	f7fd f9c3 	bl	8001354 <main>
  bx  lr    
 8003fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fd8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003fdc:	08008fb0 	.word	0x08008fb0
  ldr r2, =_sbss
 8003fe0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003fe4:	20000abc 	.word	0x20000abc

08003fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fe8:	e7fe      	b.n	8003fe8 <ADC_IRQHandler>
	...

08003fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800402c <HAL_Init+0x40>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800402c <HAL_Init+0x40>)
 8003ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_Init+0x40>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <HAL_Init+0x40>)
 8004002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004008:	4b08      	ldr	r3, [pc, #32]	@ (800402c <HAL_Init+0x40>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a07      	ldr	r2, [pc, #28]	@ (800402c <HAL_Init+0x40>)
 800400e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004014:	2003      	movs	r0, #3
 8004016:	f000 f94f 	bl	80042b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800401a:	2000      	movs	r0, #0
 800401c:	f000 f808 	bl	8004030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004020:	f7fd ffbe 	bl	8001fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023c00 	.word	0x40023c00

08004030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004038:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <HAL_InitTick+0x54>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <HAL_InitTick+0x58>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4619      	mov	r1, r3
 8004042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004046:	fbb3 f3f1 	udiv	r3, r3, r1
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f967 	bl	8004322 <HAL_SYSTICK_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e00e      	b.n	800407c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b0f      	cmp	r3, #15
 8004062:	d80a      	bhi.n	800407a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004064:	2200      	movs	r2, #0
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	f04f 30ff 	mov.w	r0, #4294967295
 800406c:	f000 f92f 	bl	80042ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004070:	4a06      	ldr	r2, [pc, #24]	@ (800408c <HAL_InitTick+0x5c>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000000 	.word	0x20000000
 8004088:	20000008 	.word	0x20000008
 800408c:	20000004 	.word	0x20000004

08004090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_IncTick+0x20>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <HAL_IncTick+0x24>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <HAL_IncTick+0x24>)
 80040a2:	6013      	str	r3, [r2, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000008 	.word	0x20000008
 80040b4:	20000970 	.word	0x20000970

080040b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return uwTick;
 80040bc:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <HAL_GetTick+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000970 	.word	0x20000970

080040d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040d8:	f7ff ffee 	bl	80040b8 <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d005      	beq.n	80040f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_Delay+0x44>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040f6:	bf00      	nop
 80040f8:	f7ff ffde 	bl	80040b8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	429a      	cmp	r2, r3
 8004106:	d8f7      	bhi.n	80040f8 <HAL_Delay+0x28>
  {
  }
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000008 	.word	0x20000008

08004118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004128:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <__NVIC_SetPriorityGrouping+0x44>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004134:	4013      	ands	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800414a:	4a04      	ldr	r2, [pc, #16]	@ (800415c <__NVIC_SetPriorityGrouping+0x44>)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	60d3      	str	r3, [r2, #12]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000ed00 	.word	0xe000ed00

08004160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004164:	4b04      	ldr	r3, [pc, #16]	@ (8004178 <__NVIC_GetPriorityGrouping+0x18>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	0a1b      	lsrs	r3, r3, #8
 800416a:	f003 0307 	and.w	r3, r3, #7
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	2b00      	cmp	r3, #0
 800418c:	db0b      	blt.n	80041a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	4907      	ldr	r1, [pc, #28]	@ (80041b4 <__NVIC_EnableIRQ+0x38>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2001      	movs	r0, #1
 800419e:	fa00 f202 	lsl.w	r2, r0, r2
 80041a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000e100 	.word	0xe000e100

080041b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	6039      	str	r1, [r7, #0]
 80041c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	db0a      	blt.n	80041e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	490c      	ldr	r1, [pc, #48]	@ (8004204 <__NVIC_SetPriority+0x4c>)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	0112      	lsls	r2, r2, #4
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	440b      	add	r3, r1
 80041dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e0:	e00a      	b.n	80041f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4908      	ldr	r1, [pc, #32]	@ (8004208 <__NVIC_SetPriority+0x50>)
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	3b04      	subs	r3, #4
 80041f0:	0112      	lsls	r2, r2, #4
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	440b      	add	r3, r1
 80041f6:	761a      	strb	r2, [r3, #24]
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000e100 	.word	0xe000e100
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	@ 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f1c3 0307 	rsb	r3, r3, #7
 8004226:	2b04      	cmp	r3, #4
 8004228:	bf28      	it	cs
 800422a:	2304      	movcs	r3, #4
 800422c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3304      	adds	r3, #4
 8004232:	2b06      	cmp	r3, #6
 8004234:	d902      	bls.n	800423c <NVIC_EncodePriority+0x30>
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	3b03      	subs	r3, #3
 800423a:	e000      	b.n	800423e <NVIC_EncodePriority+0x32>
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004240:	f04f 32ff 	mov.w	r2, #4294967295
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43da      	mvns	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	401a      	ands	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004254:	f04f 31ff 	mov.w	r1, #4294967295
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	43d9      	mvns	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004264:	4313      	orrs	r3, r2
         );
}
 8004266:	4618      	mov	r0, r3
 8004268:	3724      	adds	r7, #36	@ 0x24
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3b01      	subs	r3, #1
 8004280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004284:	d301      	bcc.n	800428a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004286:	2301      	movs	r3, #1
 8004288:	e00f      	b.n	80042aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428a:	4a0a      	ldr	r2, [pc, #40]	@ (80042b4 <SysTick_Config+0x40>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004292:	210f      	movs	r1, #15
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	f7ff ff8e 	bl	80041b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800429c:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <SysTick_Config+0x40>)
 800429e:	2200      	movs	r2, #0
 80042a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a2:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <SysTick_Config+0x40>)
 80042a4:	2207      	movs	r2, #7
 80042a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	e000e010 	.word	0xe000e010

080042b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff29 	bl	8004118 <__NVIC_SetPriorityGrouping>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4603      	mov	r3, r0
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e0:	f7ff ff3e 	bl	8004160 <__NVIC_GetPriorityGrouping>
 80042e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f7ff ff8e 	bl	800420c <NVIC_EncodePriority>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff5d 	bl	80041b8 <__NVIC_SetPriority>
}
 80042fe:	bf00      	nop
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	4603      	mov	r3, r0
 800430e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff31 	bl	800417c <__NVIC_EnableIRQ>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff ffa2 	bl	8004274 <SysTick_Config>
 8004330:	4603      	mov	r3, r0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	@ 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e165      	b.n	8004624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004358:	2201      	movs	r2, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	429a      	cmp	r2, r3
 8004372:	f040 8154 	bne.w	800461e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d005      	beq.n	800438e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800438a:	2b02      	cmp	r3, #2
 800438c:	d130      	bne.n	80043f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	2203      	movs	r2, #3
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043c4:	2201      	movs	r2, #1
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 0201 	and.w	r2, r3, #1
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d017      	beq.n	800442c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d123      	bne.n	8004480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	08da      	lsrs	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3208      	adds	r2, #8
 8004440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	220f      	movs	r2, #15
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4313      	orrs	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	08da      	lsrs	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3208      	adds	r2, #8
 800447a:	69b9      	ldr	r1, [r7, #24]
 800447c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	2203      	movs	r2, #3
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0203 	and.w	r2, r3, #3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80ae 	beq.w	800461e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b5d      	ldr	r3, [pc, #372]	@ (800463c <HAL_GPIO_Init+0x300>)
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	4a5c      	ldr	r2, [pc, #368]	@ (800463c <HAL_GPIO_Init+0x300>)
 80044cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044d2:	4b5a      	ldr	r3, [pc, #360]	@ (800463c <HAL_GPIO_Init+0x300>)
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044de:	4a58      	ldr	r2, [pc, #352]	@ (8004640 <HAL_GPIO_Init+0x304>)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	3302      	adds	r3, #2
 80044e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	220f      	movs	r2, #15
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4f      	ldr	r2, [pc, #316]	@ (8004644 <HAL_GPIO_Init+0x308>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d025      	beq.n	8004556 <HAL_GPIO_Init+0x21a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4e      	ldr	r2, [pc, #312]	@ (8004648 <HAL_GPIO_Init+0x30c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01f      	beq.n	8004552 <HAL_GPIO_Init+0x216>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4d      	ldr	r2, [pc, #308]	@ (800464c <HAL_GPIO_Init+0x310>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d019      	beq.n	800454e <HAL_GPIO_Init+0x212>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4c      	ldr	r2, [pc, #304]	@ (8004650 <HAL_GPIO_Init+0x314>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_GPIO_Init+0x20e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4b      	ldr	r2, [pc, #300]	@ (8004654 <HAL_GPIO_Init+0x318>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00d      	beq.n	8004546 <HAL_GPIO_Init+0x20a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4a      	ldr	r2, [pc, #296]	@ (8004658 <HAL_GPIO_Init+0x31c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <HAL_GPIO_Init+0x206>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a49      	ldr	r2, [pc, #292]	@ (800465c <HAL_GPIO_Init+0x320>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <HAL_GPIO_Init+0x202>
 800453a:	2306      	movs	r3, #6
 800453c:	e00c      	b.n	8004558 <HAL_GPIO_Init+0x21c>
 800453e:	2307      	movs	r3, #7
 8004540:	e00a      	b.n	8004558 <HAL_GPIO_Init+0x21c>
 8004542:	2305      	movs	r3, #5
 8004544:	e008      	b.n	8004558 <HAL_GPIO_Init+0x21c>
 8004546:	2304      	movs	r3, #4
 8004548:	e006      	b.n	8004558 <HAL_GPIO_Init+0x21c>
 800454a:	2303      	movs	r3, #3
 800454c:	e004      	b.n	8004558 <HAL_GPIO_Init+0x21c>
 800454e:	2302      	movs	r3, #2
 8004550:	e002      	b.n	8004558 <HAL_GPIO_Init+0x21c>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <HAL_GPIO_Init+0x21c>
 8004556:	2300      	movs	r3, #0
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	f002 0203 	and.w	r2, r2, #3
 800455e:	0092      	lsls	r2, r2, #2
 8004560:	4093      	lsls	r3, r2
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004568:	4935      	ldr	r1, [pc, #212]	@ (8004640 <HAL_GPIO_Init+0x304>)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	089b      	lsrs	r3, r3, #2
 800456e:	3302      	adds	r3, #2
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004576:	4b3a      	ldr	r3, [pc, #232]	@ (8004660 <HAL_GPIO_Init+0x324>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	43db      	mvns	r3, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4013      	ands	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800459a:	4a31      	ldr	r2, [pc, #196]	@ (8004660 <HAL_GPIO_Init+0x324>)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004660 <HAL_GPIO_Init+0x324>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045c4:	4a26      	ldr	r2, [pc, #152]	@ (8004660 <HAL_GPIO_Init+0x324>)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045ca:	4b25      	ldr	r3, [pc, #148]	@ (8004660 <HAL_GPIO_Init+0x324>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4013      	ands	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004660 <HAL_GPIO_Init+0x324>)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <HAL_GPIO_Init+0x324>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4013      	ands	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004618:	4a11      	ldr	r2, [pc, #68]	@ (8004660 <HAL_GPIO_Init+0x324>)
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3301      	adds	r3, #1
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	f67f ae96 	bls.w	8004358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	3724      	adds	r7, #36	@ 0x24
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
 8004640:	40013800 	.word	0x40013800
 8004644:	40020000 	.word	0x40020000
 8004648:	40020400 	.word	0x40020400
 800464c:	40020800 	.word	0x40020800
 8004650:	40020c00 	.word	0x40020c00
 8004654:	40021000 	.word	0x40021000
 8004658:	40021400 	.word	0x40021400
 800465c:	40021800 	.word	0x40021800
 8004660:	40013c00 	.word	0x40013c00

08004664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
 8004670:	4613      	mov	r3, r2
 8004672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004674:	787b      	ldrb	r3, [r7, #1]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004680:	e003      	b.n	800468a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004682:	887b      	ldrh	r3, [r7, #2]
 8004684:	041a      	lsls	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	619a      	str	r2, [r3, #24]
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046a8:	887a      	ldrh	r2, [r7, #2]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	041a      	lsls	r2, r3, #16
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	43d9      	mvns	r1, r3
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	400b      	ands	r3, r1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	619a      	str	r2, [r3, #24]
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e12b      	b.n	8004936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd fc7c 	bl	8001ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2224      	movs	r2, #36	@ 0x24
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800471e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800472e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004730:	f000 fd6c 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 8004734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	4a81      	ldr	r2, [pc, #516]	@ (8004940 <HAL_I2C_Init+0x274>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d807      	bhi.n	8004750 <HAL_I2C_Init+0x84>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a80      	ldr	r2, [pc, #512]	@ (8004944 <HAL_I2C_Init+0x278>)
 8004744:	4293      	cmp	r3, r2
 8004746:	bf94      	ite	ls
 8004748:	2301      	movls	r3, #1
 800474a:	2300      	movhi	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e006      	b.n	800475e <HAL_I2C_Init+0x92>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a7d      	ldr	r2, [pc, #500]	@ (8004948 <HAL_I2C_Init+0x27c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0e7      	b.n	8004936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a78      	ldr	r2, [pc, #480]	@ (800494c <HAL_I2C_Init+0x280>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0c9b      	lsrs	r3, r3, #18
 8004770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a6a      	ldr	r2, [pc, #424]	@ (8004940 <HAL_I2C_Init+0x274>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d802      	bhi.n	80047a0 <HAL_I2C_Init+0xd4>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3301      	adds	r3, #1
 800479e:	e009      	b.n	80047b4 <HAL_I2C_Init+0xe8>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	4a69      	ldr	r2, [pc, #420]	@ (8004950 <HAL_I2C_Init+0x284>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	3301      	adds	r3, #1
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	495c      	ldr	r1, [pc, #368]	@ (8004940 <HAL_I2C_Init+0x274>)
 80047d0:	428b      	cmp	r3, r1
 80047d2:	d819      	bhi.n	8004808 <HAL_I2C_Init+0x13c>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1e59      	subs	r1, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e2:	1c59      	adds	r1, r3, #1
 80047e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047e8:	400b      	ands	r3, r1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_I2C_Init+0x138>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1e59      	subs	r1, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004802:	e051      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004804:	2304      	movs	r3, #4
 8004806:	e04f      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d111      	bne.n	8004834 <HAL_I2C_Init+0x168>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1e58      	subs	r0, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	440b      	add	r3, r1
 800481e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e012      	b.n	800485a <HAL_I2C_Init+0x18e>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1e58      	subs	r0, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	0099      	lsls	r1, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	fbb0 f3f3 	udiv	r3, r0, r3
 800484a:	3301      	adds	r3, #1
 800484c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Init+0x196>
 800485e:	2301      	movs	r3, #1
 8004860:	e022      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10e      	bne.n	8004888 <HAL_I2C_Init+0x1bc>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1e58      	subs	r0, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	440b      	add	r3, r1
 8004878:	fbb0 f3f3 	udiv	r3, r0, r3
 800487c:	3301      	adds	r3, #1
 800487e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004886:	e00f      	b.n	80048a8 <HAL_I2C_Init+0x1dc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e58      	subs	r0, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	0099      	lsls	r1, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	fbb0 f3f3 	udiv	r3, r0, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	6809      	ldr	r1, [r1, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6911      	ldr	r1, [r2, #16]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68d2      	ldr	r2, [r2, #12]
 80048e2:	4311      	orrs	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	000186a0 	.word	0x000186a0
 8004944:	001e847f 	.word	0x001e847f
 8004948:	003d08ff 	.word	0x003d08ff
 800494c:	431bde83 	.word	0x431bde83
 8004950:	10624dd3 	.word	0x10624dd3

08004954 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	4608      	mov	r0, r1
 800495e:	4611      	mov	r1, r2
 8004960:	461a      	mov	r2, r3
 8004962:	4603      	mov	r3, r0
 8004964:	817b      	strh	r3, [r7, #10]
 8004966:	460b      	mov	r3, r1
 8004968:	813b      	strh	r3, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800496e:	f7ff fba3 	bl	80040b8 <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	f040 80d9 	bne.w	8004b34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2319      	movs	r3, #25
 8004988:	2201      	movs	r2, #1
 800498a:	496d      	ldr	r1, [pc, #436]	@ (8004b40 <HAL_I2C_Mem_Write+0x1ec>)
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f971 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
 800499a:	e0cc      	b.n	8004b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_I2C_Mem_Write+0x56>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e0c5      	b.n	8004b36 <HAL_I2C_Mem_Write+0x1e2>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d007      	beq.n	80049d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2221      	movs	r2, #33	@ 0x21
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2240      	movs	r2, #64	@ 0x40
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a3a      	ldr	r2, [r7, #32]
 80049fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b44 <HAL_I2C_Mem_Write+0x1f0>)
 8004a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a12:	88f8      	ldrh	r0, [r7, #6]
 8004a14:	893a      	ldrh	r2, [r7, #8]
 8004a16:	8979      	ldrh	r1, [r7, #10]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	4603      	mov	r3, r0
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f890 	bl	8004b48 <I2C_RequestMemoryWrite>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d052      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e081      	b.n	8004b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fa36 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d107      	bne.n	8004a5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06b      	b.n	8004b36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	781a      	ldrb	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_I2C_Mem_Write+0x180>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d017      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1aa      	bne.n	8004a32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fa29 	bl	8004f38 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d107      	bne.n	8004b04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e016      	b.n	8004b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	00100002 	.word	0x00100002
 8004b44:	ffff0000 	.word	0xffff0000

08004b48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	4608      	mov	r0, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	461a      	mov	r2, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	817b      	strh	r3, [r7, #10]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	813b      	strh	r3, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f878 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b98:	d103      	bne.n	8004ba2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e05f      	b.n	8004c66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ba6:	897b      	ldrh	r3, [r7, #10]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	492d      	ldr	r1, [pc, #180]	@ (8004c70 <I2C_RequestMemoryWrite+0x128>)
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f8d3 	bl	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e04c      	b.n	8004c66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	6a39      	ldr	r1, [r7, #32]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f95e 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d107      	bne.n	8004c0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e02b      	b.n	8004c66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c14:	893b      	ldrh	r3, [r7, #8]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	611a      	str	r2, [r3, #16]
 8004c1e:	e021      	b.n	8004c64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c20:	893b      	ldrh	r3, [r7, #8]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c30:	6a39      	ldr	r1, [r7, #32]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f938 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d107      	bne.n	8004c56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e005      	b.n	8004c66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c5a:	893b      	ldrh	r3, [r7, #8]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	00010002 	.word	0x00010002

08004c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c84:	e048      	b.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d044      	beq.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7ff fa13 	bl	80040b8 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d139      	bne.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d10d      	bne.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	43da      	mvns	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	e00c      	b.n	8004ce4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	43da      	mvns	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d116      	bne.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e023      	b.n	8004d60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10d      	bne.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	43da      	mvns	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	e00c      	b.n	8004d58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d093      	beq.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d76:	e071      	b.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d86:	d123      	bne.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	f043 0204 	orr.w	r2, r3, #4
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e067      	b.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d041      	beq.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd8:	f7ff f96e 	bl	80040b8 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d136      	bne.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d10c      	bne.n	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4013      	ands	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	e00b      	b.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	43da      	mvns	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	f043 0220 	orr.w	r2, r3, #32
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e021      	b.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10c      	bne.n	8004e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e00b      	b.n	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f af6d 	bne.w	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb4:	e034      	b.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f886 	bl	8004fc8 <I2C_IsAcknowledgeFailed>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e034      	b.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d028      	beq.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ece:	f7ff f8f3 	bl	80040b8 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d11d      	bne.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	2b80      	cmp	r3, #128	@ 0x80
 8004ef0:	d016      	beq.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	f043 0220 	orr.w	r2, r3, #32
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e007      	b.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2a:	2b80      	cmp	r3, #128	@ 0x80
 8004f2c:	d1c3      	bne.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f44:	e034      	b.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f83e 	bl	8004fc8 <I2C_IsAcknowledgeFailed>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e034      	b.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d028      	beq.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5e:	f7ff f8ab 	bl	80040b8 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11d      	bne.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d016      	beq.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	f043 0220 	orr.w	r2, r3, #32
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e007      	b.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d1c3      	bne.n	8004f46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fde:	d11b      	bne.n	8005018 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fe8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	f043 0204 	orr.w	r2, r3, #4
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0cc      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800503c:	4b68      	ldr	r3, [pc, #416]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d90c      	bls.n	8005064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504a:	4b65      	ldr	r3, [pc, #404]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b63      	ldr	r3, [pc, #396]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0b8      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d020      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800507c:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4a58      	ldr	r2, [pc, #352]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005094:	4b53      	ldr	r3, [pc, #332]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a52      	ldr	r2, [pc, #328]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800509e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a0:	4b50      	ldr	r3, [pc, #320]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	494d      	ldr	r1, [pc, #308]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d044      	beq.n	8005148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	4b47      	ldr	r3, [pc, #284]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d119      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e07f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d003      	beq.n	80050e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e6:	4b3f      	ldr	r3, [pc, #252]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e06f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f6:	4b3b      	ldr	r3, [pc, #236]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e067      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005106:	4b37      	ldr	r3, [pc, #220]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f023 0203 	bic.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4934      	ldr	r1, [pc, #208]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005118:	f7fe ffce 	bl	80040b8 <HAL_GetTick>
 800511c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	e00a      	b.n	8005136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005120:	f7fe ffca 	bl	80040b8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e04f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	4b2b      	ldr	r3, [pc, #172]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 020c 	and.w	r2, r3, #12
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	429a      	cmp	r2, r3
 8005146:	d1eb      	bne.n	8005120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005148:	4b25      	ldr	r3, [pc, #148]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d20c      	bcs.n	8005170 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005156:	4b22      	ldr	r3, [pc, #136]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b20      	ldr	r3, [pc, #128]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e032      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800517c:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4916      	ldr	r1, [pc, #88]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800519a:	4b12      	ldr	r3, [pc, #72]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	490e      	ldr	r1, [pc, #56]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ae:	f000 f855 	bl	800525c <HAL_RCC_GetSysClockFreq>
 80051b2:	4602      	mov	r2, r0
 80051b4:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	490a      	ldr	r1, [pc, #40]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c0>)
 80051c0:	5ccb      	ldrb	r3, [r1, r3]
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	4a09      	ldr	r2, [pc, #36]	@ (80051ec <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051ca:	4b09      	ldr	r3, [pc, #36]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe ff2e 	bl	8004030 <HAL_InitTick>

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40023c00 	.word	0x40023c00
 80051e4:	40023800 	.word	0x40023800
 80051e8:	08008f54 	.word	0x08008f54
 80051ec:	20000000 	.word	0x20000000
 80051f0:	20000004 	.word	0x20000004

080051f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f8:	4b03      	ldr	r3, [pc, #12]	@ (8005208 <HAL_RCC_GetHCLKFreq+0x14>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000

0800520c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005210:	f7ff fff0 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b05      	ldr	r3, [pc, #20]	@ (800522c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	0a9b      	lsrs	r3, r3, #10
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4903      	ldr	r1, [pc, #12]	@ (8005230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40023800 	.word	0x40023800
 8005230:	08008f64 	.word	0x08008f64

08005234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005238:	f7ff ffdc 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b05      	ldr	r3, [pc, #20]	@ (8005254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	0b5b      	lsrs	r3, r3, #13
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4903      	ldr	r1, [pc, #12]	@ (8005258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40023800 	.word	0x40023800
 8005258:	08008f64 	.word	0x08008f64

0800525c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005260:	b0ae      	sub	sp, #184	@ 0xb8
 8005262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005282:	4bcb      	ldr	r3, [pc, #812]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b0c      	cmp	r3, #12
 800528c:	f200 8206 	bhi.w	800569c <HAL_RCC_GetSysClockFreq+0x440>
 8005290:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005296:	bf00      	nop
 8005298:	080052cd 	.word	0x080052cd
 800529c:	0800569d 	.word	0x0800569d
 80052a0:	0800569d 	.word	0x0800569d
 80052a4:	0800569d 	.word	0x0800569d
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	0800569d 	.word	0x0800569d
 80052b0:	0800569d 	.word	0x0800569d
 80052b4:	0800569d 	.word	0x0800569d
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	0800569d 	.word	0x0800569d
 80052c0:	0800569d 	.word	0x0800569d
 80052c4:	0800569d 	.word	0x0800569d
 80052c8:	080054cd 	.word	0x080054cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052cc:	4bb9      	ldr	r3, [pc, #740]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80052ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052d2:	e1e7      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d4:	4bb8      	ldr	r3, [pc, #736]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80052d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052da:	e1e3      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052dc:	4bb4      	ldr	r3, [pc, #720]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e8:	4bb1      	ldr	r3, [pc, #708]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d071      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f4:	4bae      	ldr	r3, [pc, #696]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	099b      	lsrs	r3, r3, #6
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005300:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005310:	2300      	movs	r3, #0
 8005312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005316:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800531a:	4622      	mov	r2, r4
 800531c:	462b      	mov	r3, r5
 800531e:	f04f 0000 	mov.w	r0, #0
 8005322:	f04f 0100 	mov.w	r1, #0
 8005326:	0159      	lsls	r1, r3, #5
 8005328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800532c:	0150      	lsls	r0, r2, #5
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4621      	mov	r1, r4
 8005334:	1a51      	subs	r1, r2, r1
 8005336:	6439      	str	r1, [r7, #64]	@ 0x40
 8005338:	4629      	mov	r1, r5
 800533a:	eb63 0301 	sbc.w	r3, r3, r1
 800533e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800534c:	4649      	mov	r1, r9
 800534e:	018b      	lsls	r3, r1, #6
 8005350:	4641      	mov	r1, r8
 8005352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005356:	4641      	mov	r1, r8
 8005358:	018a      	lsls	r2, r1, #6
 800535a:	4641      	mov	r1, r8
 800535c:	1a51      	subs	r1, r2, r1
 800535e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005360:	4649      	mov	r1, r9
 8005362:	eb63 0301 	sbc.w	r3, r3, r1
 8005366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005374:	4649      	mov	r1, r9
 8005376:	00cb      	lsls	r3, r1, #3
 8005378:	4641      	mov	r1, r8
 800537a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537e:	4641      	mov	r1, r8
 8005380:	00ca      	lsls	r2, r1, #3
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	4603      	mov	r3, r0
 8005388:	4622      	mov	r2, r4
 800538a:	189b      	adds	r3, r3, r2
 800538c:	633b      	str	r3, [r7, #48]	@ 0x30
 800538e:	462b      	mov	r3, r5
 8005390:	460a      	mov	r2, r1
 8005392:	eb42 0303 	adc.w	r3, r2, r3
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053a4:	4629      	mov	r1, r5
 80053a6:	024b      	lsls	r3, r1, #9
 80053a8:	4621      	mov	r1, r4
 80053aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053ae:	4621      	mov	r1, r4
 80053b0:	024a      	lsls	r2, r1, #9
 80053b2:	4610      	mov	r0, r2
 80053b4:	4619      	mov	r1, r3
 80053b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80053c8:	f7fb fb70 	bl	8000aac <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d6:	e067      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d8:	4b75      	ldr	r3, [pc, #468]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	099b      	lsrs	r3, r3, #6
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80053e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f2:	2300      	movs	r3, #0
 80053f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	f04f 0000 	mov.w	r0, #0
 8005402:	f04f 0100 	mov.w	r1, #0
 8005406:	0159      	lsls	r1, r3, #5
 8005408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800540c:	0150      	lsls	r0, r2, #5
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4621      	mov	r1, r4
 8005414:	1a51      	subs	r1, r2, r1
 8005416:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005418:	4629      	mov	r1, r5
 800541a:	eb63 0301 	sbc.w	r3, r3, r1
 800541e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800542c:	4649      	mov	r1, r9
 800542e:	018b      	lsls	r3, r1, #6
 8005430:	4641      	mov	r1, r8
 8005432:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005436:	4641      	mov	r1, r8
 8005438:	018a      	lsls	r2, r1, #6
 800543a:	4641      	mov	r1, r8
 800543c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005440:	4649      	mov	r1, r9
 8005442:	eb63 0b01 	sbc.w	fp, r3, r1
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005452:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800545a:	4692      	mov	sl, r2
 800545c:	469b      	mov	fp, r3
 800545e:	4623      	mov	r3, r4
 8005460:	eb1a 0303 	adds.w	r3, sl, r3
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	462b      	mov	r3, r5
 8005468:	eb4b 0303 	adc.w	r3, fp, r3
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800547a:	4629      	mov	r1, r5
 800547c:	028b      	lsls	r3, r1, #10
 800547e:	4621      	mov	r1, r4
 8005480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005484:	4621      	mov	r1, r4
 8005486:	028a      	lsls	r2, r1, #10
 8005488:	4610      	mov	r0, r2
 800548a:	4619      	mov	r1, r3
 800548c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005490:	2200      	movs	r2, #0
 8005492:	673b      	str	r3, [r7, #112]	@ 0x70
 8005494:	677a      	str	r2, [r7, #116]	@ 0x74
 8005496:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800549a:	f7fb fb07 	bl	8000aac <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4613      	mov	r3, r2
 80054a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054a8:	4b41      	ldr	r3, [pc, #260]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80054ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054ca:	e0eb      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054cc:	4b38      	ldr	r3, [pc, #224]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d8:	4b35      	ldr	r3, [pc, #212]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d06b      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e4:	4b32      	ldr	r3, [pc, #200]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	099b      	lsrs	r3, r3, #6
 80054ea:	2200      	movs	r2, #0
 80054ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80054f8:	2300      	movs	r3, #0
 80054fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80054fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005500:	4622      	mov	r2, r4
 8005502:	462b      	mov	r3, r5
 8005504:	f04f 0000 	mov.w	r0, #0
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	0159      	lsls	r1, r3, #5
 800550e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005512:	0150      	lsls	r0, r2, #5
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4621      	mov	r1, r4
 800551a:	1a51      	subs	r1, r2, r1
 800551c:	61b9      	str	r1, [r7, #24]
 800551e:	4629      	mov	r1, r5
 8005520:	eb63 0301 	sbc.w	r3, r3, r1
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005532:	4659      	mov	r1, fp
 8005534:	018b      	lsls	r3, r1, #6
 8005536:	4651      	mov	r1, sl
 8005538:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800553c:	4651      	mov	r1, sl
 800553e:	018a      	lsls	r2, r1, #6
 8005540:	4651      	mov	r1, sl
 8005542:	ebb2 0801 	subs.w	r8, r2, r1
 8005546:	4659      	mov	r1, fp
 8005548:	eb63 0901 	sbc.w	r9, r3, r1
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005558:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800555c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005560:	4690      	mov	r8, r2
 8005562:	4699      	mov	r9, r3
 8005564:	4623      	mov	r3, r4
 8005566:	eb18 0303 	adds.w	r3, r8, r3
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	462b      	mov	r3, r5
 800556e:	eb49 0303 	adc.w	r3, r9, r3
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005580:	4629      	mov	r1, r5
 8005582:	024b      	lsls	r3, r1, #9
 8005584:	4621      	mov	r1, r4
 8005586:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800558a:	4621      	mov	r1, r4
 800558c:	024a      	lsls	r2, r1, #9
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005596:	2200      	movs	r2, #0
 8005598:	65bb      	str	r3, [r7, #88]	@ 0x58
 800559a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800559c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055a0:	f7fb fa84 	bl	8000aac <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4613      	mov	r3, r2
 80055aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055ae:	e065      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x420>
 80055b0:	40023800 	.word	0x40023800
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055bc:	4b3d      	ldr	r3, [pc, #244]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	099b      	lsrs	r3, r3, #6
 80055c2:	2200      	movs	r2, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	4611      	mov	r1, r2
 80055c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80055ce:	2300      	movs	r3, #0
 80055d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80055d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80055d6:	4642      	mov	r2, r8
 80055d8:	464b      	mov	r3, r9
 80055da:	f04f 0000 	mov.w	r0, #0
 80055de:	f04f 0100 	mov.w	r1, #0
 80055e2:	0159      	lsls	r1, r3, #5
 80055e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e8:	0150      	lsls	r0, r2, #5
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4641      	mov	r1, r8
 80055f0:	1a51      	subs	r1, r2, r1
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	4649      	mov	r1, r9
 80055f6:	eb63 0301 	sbc.w	r3, r3, r1
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005608:	4659      	mov	r1, fp
 800560a:	018b      	lsls	r3, r1, #6
 800560c:	4651      	mov	r1, sl
 800560e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005612:	4651      	mov	r1, sl
 8005614:	018a      	lsls	r2, r1, #6
 8005616:	4651      	mov	r1, sl
 8005618:	1a54      	subs	r4, r2, r1
 800561a:	4659      	mov	r1, fp
 800561c:	eb63 0501 	sbc.w	r5, r3, r1
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	00eb      	lsls	r3, r5, #3
 800562a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562e:	00e2      	lsls	r2, r4, #3
 8005630:	4614      	mov	r4, r2
 8005632:	461d      	mov	r5, r3
 8005634:	4643      	mov	r3, r8
 8005636:	18e3      	adds	r3, r4, r3
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	464b      	mov	r3, r9
 800563c:	eb45 0303 	adc.w	r3, r5, r3
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800564e:	4629      	mov	r1, r5
 8005650:	028b      	lsls	r3, r1, #10
 8005652:	4621      	mov	r1, r4
 8005654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005658:	4621      	mov	r1, r4
 800565a:	028a      	lsls	r2, r1, #10
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005664:	2200      	movs	r2, #0
 8005666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005668:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800566a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800566e:	f7fb fa1d 	bl	8000aac <__aeabi_uldivmod>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4613      	mov	r3, r2
 8005678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800567c:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	0f1b      	lsrs	r3, r3, #28
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800568a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800568e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800569a:	e003      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800569c:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800569e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80056a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	37b8      	adds	r7, #184	@ 0xb8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b2:	bf00      	nop
 80056b4:	40023800 	.word	0x40023800
 80056b8:	00f42400 	.word	0x00f42400

080056bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e28d      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8083 	beq.w	80057e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056dc:	4b94      	ldr	r3, [pc, #592]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 030c 	and.w	r3, r3, #12
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d019      	beq.n	800571c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80056e8:	4b91      	ldr	r3, [pc, #580]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80056f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005700:	d00c      	beq.n	800571c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005702:	4b8b      	ldr	r3, [pc, #556]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800570a:	2b0c      	cmp	r3, #12
 800570c:	d112      	bne.n	8005734 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800570e:	4b88      	ldr	r3, [pc, #544]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800571a:	d10b      	bne.n	8005734 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571c:	4b84      	ldr	r3, [pc, #528]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05b      	beq.n	80057e0 <HAL_RCC_OscConfig+0x124>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d157      	bne.n	80057e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e25a      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800573c:	d106      	bne.n	800574c <HAL_RCC_OscConfig+0x90>
 800573e:	4b7c      	ldr	r3, [pc, #496]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a7b      	ldr	r2, [pc, #492]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e01d      	b.n	8005788 <HAL_RCC_OscConfig+0xcc>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005754:	d10c      	bne.n	8005770 <HAL_RCC_OscConfig+0xb4>
 8005756:	4b76      	ldr	r3, [pc, #472]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a75      	ldr	r2, [pc, #468]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 800575c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	4b73      	ldr	r3, [pc, #460]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a72      	ldr	r2, [pc, #456]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e00b      	b.n	8005788 <HAL_RCC_OscConfig+0xcc>
 8005770:	4b6f      	ldr	r3, [pc, #444]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a6e      	ldr	r2, [pc, #440]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	4b6c      	ldr	r3, [pc, #432]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a6b      	ldr	r2, [pc, #428]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fe fc92 	bl	80040b8 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005798:	f7fe fc8e 	bl	80040b8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	@ 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e21f      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	4b61      	ldr	r3, [pc, #388]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0xdc>
 80057b6:	e014      	b.n	80057e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fe fc7e 	bl	80040b8 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fe fc7a 	bl	80040b8 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	@ 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e20b      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d2:	4b57      	ldr	r3, [pc, #348]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x104>
 80057de:	e000      	b.n	80057e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d06f      	beq.n	80058ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057ee:	4b50      	ldr	r3, [pc, #320]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80057fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8005802:	2b08      	cmp	r3, #8
 8005804:	d105      	bne.n	8005812 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005806:	4b4a      	ldr	r3, [pc, #296]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005812:	4b47      	ldr	r3, [pc, #284]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d11c      	bne.n	8005858 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800581e:	4b44      	ldr	r3, [pc, #272]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d116      	bne.n	8005858 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800582a:	4b41      	ldr	r3, [pc, #260]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_RCC_OscConfig+0x186>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d001      	beq.n	8005842 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e1d3      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005842:	4b3b      	ldr	r3, [pc, #236]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4937      	ldr	r1, [pc, #220]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005856:	e03a      	b.n	80058ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d020      	beq.n	80058a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005860:	4b34      	ldr	r3, [pc, #208]	@ (8005934 <HAL_RCC_OscConfig+0x278>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7fe fc27 	bl	80040b8 <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800586e:	f7fe fc23 	bl	80040b8 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e1b4      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005880:	4b2b      	ldr	r3, [pc, #172]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f0      	beq.n	800586e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588c:	4b28      	ldr	r3, [pc, #160]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	4925      	ldr	r1, [pc, #148]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 800589c:	4313      	orrs	r3, r2
 800589e:	600b      	str	r3, [r1, #0]
 80058a0:	e015      	b.n	80058ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058a2:	4b24      	ldr	r3, [pc, #144]	@ (8005934 <HAL_RCC_OscConfig+0x278>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a8:	f7fe fc06 	bl	80040b8 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b0:	f7fe fc02 	bl	80040b8 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e193      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d036      	beq.n	8005948 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d016      	beq.n	8005910 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e2:	4b15      	ldr	r3, [pc, #84]	@ (8005938 <HAL_RCC_OscConfig+0x27c>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fe fbe6 	bl	80040b8 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058f0:	f7fe fbe2 	bl	80040b8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e173      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005902:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <HAL_RCC_OscConfig+0x274>)
 8005904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0x234>
 800590e:	e01b      	b.n	8005948 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005910:	4b09      	ldr	r3, [pc, #36]	@ (8005938 <HAL_RCC_OscConfig+0x27c>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005916:	f7fe fbcf 	bl	80040b8 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591c:	e00e      	b.n	800593c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591e:	f7fe fbcb 	bl	80040b8 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d907      	bls.n	800593c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e15c      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
 8005930:	40023800 	.word	0x40023800
 8005934:	42470000 	.word	0x42470000
 8005938:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593c:	4b8a      	ldr	r3, [pc, #552]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 800593e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1ea      	bne.n	800591e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8097 	beq.w	8005a84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800595a:	4b83      	ldr	r3, [pc, #524]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005974:	6413      	str	r3, [r2, #64]	@ 0x40
 8005976:	4b7c      	ldr	r3, [pc, #496]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005982:	2301      	movs	r3, #1
 8005984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005986:	4b79      	ldr	r3, [pc, #484]	@ (8005b6c <HAL_RCC_OscConfig+0x4b0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d118      	bne.n	80059c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005992:	4b76      	ldr	r3, [pc, #472]	@ (8005b6c <HAL_RCC_OscConfig+0x4b0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a75      	ldr	r2, [pc, #468]	@ (8005b6c <HAL_RCC_OscConfig+0x4b0>)
 8005998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800599c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800599e:	f7fe fb8b 	bl	80040b8 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a6:	f7fe fb87 	bl	80040b8 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e118      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b8:	4b6c      	ldr	r3, [pc, #432]	@ (8005b6c <HAL_RCC_OscConfig+0x4b0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d106      	bne.n	80059da <HAL_RCC_OscConfig+0x31e>
 80059cc:	4b66      	ldr	r3, [pc, #408]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d0:	4a65      	ldr	r2, [pc, #404]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d8:	e01c      	b.n	8005a14 <HAL_RCC_OscConfig+0x358>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b05      	cmp	r3, #5
 80059e0:	d10c      	bne.n	80059fc <HAL_RCC_OscConfig+0x340>
 80059e2:	4b61      	ldr	r3, [pc, #388]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e6:	4a60      	ldr	r2, [pc, #384]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 80059f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f2:	4a5d      	ldr	r2, [pc, #372]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 80059f4:	f043 0301 	orr.w	r3, r3, #1
 80059f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059fa:	e00b      	b.n	8005a14 <HAL_RCC_OscConfig+0x358>
 80059fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 80059fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a00:	4a59      	ldr	r2, [pc, #356]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a08:	4b57      	ldr	r3, [pc, #348]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0c:	4a56      	ldr	r2, [pc, #344]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005a0e:	f023 0304 	bic.w	r3, r3, #4
 8005a12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d015      	beq.n	8005a48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1c:	f7fe fb4c 	bl	80040b8 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a22:	e00a      	b.n	8005a3a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a24:	f7fe fb48 	bl	80040b8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e0d7      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0ee      	beq.n	8005a24 <HAL_RCC_OscConfig+0x368>
 8005a46:	e014      	b.n	8005a72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a48:	f7fe fb36 	bl	80040b8 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a50:	f7fe fb32 	bl	80040b8 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e0c1      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a66:	4b40      	ldr	r3, [pc, #256]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1ee      	bne.n	8005a50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d105      	bne.n	8005a84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a78:	4b3b      	ldr	r3, [pc, #236]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80ad 	beq.w	8005be8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a8e:	4b36      	ldr	r3, [pc, #216]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d060      	beq.n	8005b5c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d145      	bne.n	8005b2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa2:	4b33      	ldr	r3, [pc, #204]	@ (8005b70 <HAL_RCC_OscConfig+0x4b4>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fe fb06 	bl	80040b8 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab0:	f7fe fb02 	bl	80040b8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e093      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac2:	4b29      	ldr	r3, [pc, #164]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69da      	ldr	r2, [r3, #28]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af0:	061b      	lsls	r3, r3, #24
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af8:	071b      	lsls	r3, r3, #28
 8005afa:	491b      	ldr	r1, [pc, #108]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b00:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <HAL_RCC_OscConfig+0x4b4>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b06:	f7fe fad7 	bl	80040b8 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0e:	f7fe fad3 	bl	80040b8 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e064      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b20:	4b11      	ldr	r3, [pc, #68]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x452>
 8005b2c:	e05c      	b.n	8005be8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2e:	4b10      	ldr	r3, [pc, #64]	@ (8005b70 <HAL_RCC_OscConfig+0x4b4>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fe fac0 	bl	80040b8 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3c:	f7fe fabc 	bl	80040b8 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e04d      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4e:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <HAL_RCC_OscConfig+0x4ac>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0x480>
 8005b5a:	e045      	b.n	8005be8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d107      	bne.n	8005b74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e040      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	40007000 	.word	0x40007000
 8005b70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b74:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <HAL_RCC_OscConfig+0x538>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d030      	beq.n	8005be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d129      	bne.n	8005be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d122      	bne.n	8005be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005baa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d119      	bne.n	8005be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d10f      	bne.n	8005be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d107      	bne.n	8005be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800

08005bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e041      	b.n	8005c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fc fa2e 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f000 fd2c 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d001      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e04e      	b.n	8005d4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a23      	ldr	r2, [pc, #140]	@ (8005d5c <HAL_TIM_Base_Start_IT+0xc4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d022      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x80>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cda:	d01d      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x80>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d60 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d018      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x80>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1e      	ldr	r2, [pc, #120]	@ (8005d64 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d013      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x80>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00e      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x80>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8005d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d009      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x80>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a19      	ldr	r2, [pc, #100]	@ (8005d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x80>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a18      	ldr	r2, [pc, #96]	@ (8005d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d111      	bne.n	8005d3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b06      	cmp	r3, #6
 8005d28:	d010      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3a:	e007      	b.n	8005d4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800
 8005d68:	40000c00 	.word	0x40000c00
 8005d6c:	40010400 	.word	0x40010400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40001800 	.word	0x40001800

08005d78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <HAL_TIM_Base_Stop_IT+0x48>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_Base_Stop_IT+0x48>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e041      	b.n	8005e6c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f839 	bl	8005e74 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f000 fc3d 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <HAL_TIM_OC_Start_IT+0x28>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e022      	b.n	8005ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d109      	bne.n	8005eca <HAL_TIM_OC_Start_IT+0x42>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	bf14      	ite	ne
 8005ec2:	2301      	movne	r3, #1
 8005ec4:	2300      	moveq	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	e015      	b.n	8005ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d109      	bne.n	8005ee4 <HAL_TIM_OC_Start_IT+0x5c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	e008      	b.n	8005ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e0c7      	b.n	800608e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_OC_Start_IT+0x86>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f0c:	e013      	b.n	8005f36 <HAL_TIM_OC_Start_IT+0xae>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_OC_Start_IT+0x96>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f1c:	e00b      	b.n	8005f36 <HAL_TIM_OC_Start_IT+0xae>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_OC_Start_IT+0xa6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f2c:	e003      	b.n	8005f36 <HAL_TIM_OC_Start_IT+0xae>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b0c      	cmp	r3, #12
 8005f3a:	d841      	bhi.n	8005fc0 <HAL_TIM_OC_Start_IT+0x138>
 8005f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <HAL_TIM_OC_Start_IT+0xbc>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08005fc1 	.word	0x08005fc1
 8005f4c:	08005fc1 	.word	0x08005fc1
 8005f50:	08005fc1 	.word	0x08005fc1
 8005f54:	08005f8b 	.word	0x08005f8b
 8005f58:	08005fc1 	.word	0x08005fc1
 8005f5c:	08005fc1 	.word	0x08005fc1
 8005f60:	08005fc1 	.word	0x08005fc1
 8005f64:	08005f9d 	.word	0x08005f9d
 8005f68:	08005fc1 	.word	0x08005fc1
 8005f6c:	08005fc1 	.word	0x08005fc1
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	08005faf 	.word	0x08005faf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0202 	orr.w	r2, r2, #2
 8005f86:	60da      	str	r2, [r3, #12]
      break;
 8005f88:	e01d      	b.n	8005fc6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0204 	orr.w	r2, r2, #4
 8005f98:	60da      	str	r2, [r3, #12]
      break;
 8005f9a:	e014      	b.n	8005fc6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0208 	orr.w	r2, r2, #8
 8005faa:	60da      	str	r2, [r3, #12]
      break;
 8005fac:	e00b      	b.n	8005fc6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0210 	orr.w	r2, r2, #16
 8005fbc:	60da      	str	r2, [r3, #12]
      break;
 8005fbe:	e002      	b.n	8005fc6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d15f      	bne.n	800608c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fe4d 	bl	8006c74 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2e      	ldr	r2, [pc, #184]	@ (8006098 <HAL_TIM_OC_Start_IT+0x210>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIM_OC_Start_IT+0x166>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800609c <HAL_TIM_OC_Start_IT+0x214>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <HAL_TIM_OC_Start_IT+0x16a>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <HAL_TIM_OC_Start_IT+0x16c>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006006:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a22      	ldr	r2, [pc, #136]	@ (8006098 <HAL_TIM_OC_Start_IT+0x210>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <HAL_TIM_OC_Start_IT+0x1d0>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800601a:	d01d      	beq.n	8006058 <HAL_TIM_OC_Start_IT+0x1d0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1f      	ldr	r2, [pc, #124]	@ (80060a0 <HAL_TIM_OC_Start_IT+0x218>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <HAL_TIM_OC_Start_IT+0x1d0>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1e      	ldr	r2, [pc, #120]	@ (80060a4 <HAL_TIM_OC_Start_IT+0x21c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_TIM_OC_Start_IT+0x1d0>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1c      	ldr	r2, [pc, #112]	@ (80060a8 <HAL_TIM_OC_Start_IT+0x220>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_TIM_OC_Start_IT+0x1d0>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a17      	ldr	r2, [pc, #92]	@ (800609c <HAL_TIM_OC_Start_IT+0x214>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_TIM_OC_Start_IT+0x1d0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a18      	ldr	r2, [pc, #96]	@ (80060ac <HAL_TIM_OC_Start_IT+0x224>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIM_OC_Start_IT+0x1d0>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a17      	ldr	r2, [pc, #92]	@ (80060b0 <HAL_TIM_OC_Start_IT+0x228>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d111      	bne.n	800607c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b06      	cmp	r3, #6
 8006068:	d010      	beq.n	800608c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607a:	e007      	b.n	800608c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40010000 	.word	0x40010000
 800609c:	40010400 	.word	0x40010400
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40001800 	.word	0x40001800

080060b4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b0c      	cmp	r3, #12
 80060c6:	d841      	bhi.n	800614c <HAL_TIM_OC_Stop_IT+0x98>
 80060c8:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <HAL_TIM_OC_Stop_IT+0x1c>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006105 	.word	0x08006105
 80060d4:	0800614d 	.word	0x0800614d
 80060d8:	0800614d 	.word	0x0800614d
 80060dc:	0800614d 	.word	0x0800614d
 80060e0:	08006117 	.word	0x08006117
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	08006129 	.word	0x08006129
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	0800613b 	.word	0x0800613b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0202 	bic.w	r2, r2, #2
 8006112:	60da      	str	r2, [r3, #12]
      break;
 8006114:	e01d      	b.n	8006152 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0204 	bic.w	r2, r2, #4
 8006124:	60da      	str	r2, [r3, #12]
      break;
 8006126:	e014      	b.n	8006152 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0208 	bic.w	r2, r2, #8
 8006136:	60da      	str	r2, [r3, #12]
      break;
 8006138:	e00b      	b.n	8006152 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0210 	bic.w	r2, r2, #16
 8006148:	60da      	str	r2, [r3, #12]
      break;
 800614a:	e002      	b.n	8006152 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
      break;
 8006150:	bf00      	nop
  }

  if (status == HAL_OK)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d161      	bne.n	800621c <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2200      	movs	r2, #0
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fd87 	bl	8006c74 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a2f      	ldr	r2, [pc, #188]	@ (8006228 <HAL_TIM_OC_Stop_IT+0x174>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_TIM_OC_Stop_IT+0xc6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2d      	ldr	r2, [pc, #180]	@ (800622c <HAL_TIM_OC_Stop_IT+0x178>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d101      	bne.n	800617e <HAL_TIM_OC_Stop_IT+0xca>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_TIM_OC_Stop_IT+0xcc>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d017      	beq.n	80061b4 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6a1a      	ldr	r2, [r3, #32]
 800618a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10f      	bne.n	80061b4 <HAL_TIM_OC_Stop_IT+0x100>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	f240 4344 	movw	r3, #1092	@ 0x444
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_OC_Stop_IT+0x100>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061be:	4013      	ands	r3, r2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10f      	bne.n	80061e4 <HAL_TIM_OC_Stop_IT+0x130>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d107      	bne.n	80061e4 <HAL_TIM_OC_Stop_IT+0x130>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <HAL_TIM_OC_Stop_IT+0x140>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f2:	e013      	b.n	800621c <HAL_TIM_OC_Stop_IT+0x168>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d104      	bne.n	8006204 <HAL_TIM_OC_Stop_IT+0x150>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006202:	e00b      	b.n	800621c <HAL_TIM_OC_Stop_IT+0x168>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b08      	cmp	r3, #8
 8006208:	d104      	bne.n	8006214 <HAL_TIM_OC_Stop_IT+0x160>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006212:	e003      	b.n	800621c <HAL_TIM_OC_Stop_IT+0x168>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40010000 	.word	0x40010000
 800622c:	40010400 	.word	0x40010400

08006230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0202 	mvn.w	r2, #2
 8006264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f9eb 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fd f892 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f9ee 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d020      	beq.n	80062e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0204 	mvn.w	r2, #4
 80062b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9c5 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fd f86c 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f9c8 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d020      	beq.n	800632c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01b      	beq.n	800632c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0208 	mvn.w	r2, #8
 80062fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2204      	movs	r2, #4
 8006302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f99f 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006318:	e005      	b.n	8006326 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fd f846 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f9a2 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	d020      	beq.n	8006378 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01b      	beq.n	8006378 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0210 	mvn.w	r2, #16
 8006348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2208      	movs	r2, #8
 800634e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f979 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006364:	e005      	b.n	8006372 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fd f820 	bl	80033ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f97c 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0201 	mvn.w	r2, #1
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fd f8f8 	bl	800358c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fd58 	bl	8006e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f94d 	bl	800667e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00c      	beq.n	8006408 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0220 	mvn.w	r2, #32
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fd2a 	bl	8006e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_TIM_OC_ConfigChannel+0x1e>
 800642a:	2302      	movs	r3, #2
 800642c:	e048      	b.n	80064c0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b0c      	cmp	r3, #12
 800643a:	d839      	bhi.n	80064b0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800643c:	a201      	add	r2, pc, #4	@ (adr r2, 8006444 <HAL_TIM_OC_ConfigChannel+0x34>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	08006479 	.word	0x08006479
 8006448:	080064b1 	.word	0x080064b1
 800644c:	080064b1 	.word	0x080064b1
 8006450:	080064b1 	.word	0x080064b1
 8006454:	08006487 	.word	0x08006487
 8006458:	080064b1 	.word	0x080064b1
 800645c:	080064b1 	.word	0x080064b1
 8006460:	080064b1 	.word	0x080064b1
 8006464:	08006495 	.word	0x08006495
 8006468:	080064b1 	.word	0x080064b1
 800646c:	080064b1 	.word	0x080064b1
 8006470:	080064b1 	.word	0x080064b1
 8006474:	080064a3 	.word	0x080064a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f9ae 	bl	80067e0 <TIM_OC1_SetConfig>
      break;
 8006484:	e017      	b.n	80064b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fa17 	bl	80068c0 <TIM_OC2_SetConfig>
      break;
 8006492:	e010      	b.n	80064b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fa86 	bl	80069ac <TIM_OC3_SetConfig>
      break;
 80064a0:	e009      	b.n	80064b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 faf3 	bl	8006a94 <TIM_OC4_SetConfig>
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]
      break;
 80064b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIM_ConfigClockSource+0x1c>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0b4      	b.n	800664e <HAL_TIM_ConfigClockSource+0x186>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800650a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800651c:	d03e      	beq.n	800659c <HAL_TIM_ConfigClockSource+0xd4>
 800651e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006522:	f200 8087 	bhi.w	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800652a:	f000 8086 	beq.w	800663a <HAL_TIM_ConfigClockSource+0x172>
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006532:	d87f      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b70      	cmp	r3, #112	@ 0x70
 8006536:	d01a      	beq.n	800656e <HAL_TIM_ConfigClockSource+0xa6>
 8006538:	2b70      	cmp	r3, #112	@ 0x70
 800653a:	d87b      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b60      	cmp	r3, #96	@ 0x60
 800653e:	d050      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006540:	2b60      	cmp	r3, #96	@ 0x60
 8006542:	d877      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b50      	cmp	r3, #80	@ 0x50
 8006546:	d03c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006548:	2b50      	cmp	r3, #80	@ 0x50
 800654a:	d873      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	d058      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x13a>
 8006550:	2b40      	cmp	r3, #64	@ 0x40
 8006552:	d86f      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b30      	cmp	r3, #48	@ 0x30
 8006556:	d064      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b30      	cmp	r3, #48	@ 0x30
 800655a:	d86b      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d060      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d867      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05c      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006568:	2b10      	cmp	r3, #16
 800656a:	d05a      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 800656c:	e062      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800657e:	f000 fb59 	bl	8006c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]
      break;
 800659a:	e04f      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ac:	f000 fb42 	bl	8006c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065be:	609a      	str	r2, [r3, #8]
      break;
 80065c0:	e03c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	461a      	mov	r2, r3
 80065d0:	f000 fab6 	bl	8006b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2150      	movs	r1, #80	@ 0x50
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fb0f 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80065e0:	e02c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ee:	461a      	mov	r2, r3
 80065f0:	f000 fad5 	bl	8006b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2160      	movs	r1, #96	@ 0x60
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 faff 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 8006600:	e01c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800660e:	461a      	mov	r2, r3
 8006610:	f000 fa96 	bl	8006b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2140      	movs	r1, #64	@ 0x40
 800661a:	4618      	mov	r0, r3
 800661c:	f000 faef 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 8006620:	e00c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f000 fae6 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 8006632:	e003      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      break;
 8006638:	e000      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800663a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a43      	ldr	r2, [pc, #268]	@ (80067b4 <TIM_Base_SetConfig+0x120>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b2:	d00f      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a40      	ldr	r2, [pc, #256]	@ (80067b8 <TIM_Base_SetConfig+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a3f      	ldr	r2, [pc, #252]	@ (80067bc <TIM_Base_SetConfig+0x128>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d007      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3e      	ldr	r2, [pc, #248]	@ (80067c0 <TIM_Base_SetConfig+0x12c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a3d      	ldr	r2, [pc, #244]	@ (80067c4 <TIM_Base_SetConfig+0x130>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d108      	bne.n	80066e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a32      	ldr	r2, [pc, #200]	@ (80067b4 <TIM_Base_SetConfig+0x120>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f4:	d027      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2f      	ldr	r2, [pc, #188]	@ (80067b8 <TIM_Base_SetConfig+0x124>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d023      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a2e      	ldr	r2, [pc, #184]	@ (80067bc <TIM_Base_SetConfig+0x128>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01f      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2d      	ldr	r2, [pc, #180]	@ (80067c0 <TIM_Base_SetConfig+0x12c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d01b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2c      	ldr	r2, [pc, #176]	@ (80067c4 <TIM_Base_SetConfig+0x130>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d017      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2b      	ldr	r2, [pc, #172]	@ (80067c8 <TIM_Base_SetConfig+0x134>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2a      	ldr	r2, [pc, #168]	@ (80067cc <TIM_Base_SetConfig+0x138>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00f      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a29      	ldr	r2, [pc, #164]	@ (80067d0 <TIM_Base_SetConfig+0x13c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a28      	ldr	r2, [pc, #160]	@ (80067d4 <TIM_Base_SetConfig+0x140>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a27      	ldr	r2, [pc, #156]	@ (80067d8 <TIM_Base_SetConfig+0x144>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a26      	ldr	r2, [pc, #152]	@ (80067dc <TIM_Base_SetConfig+0x148>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800674c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a0e      	ldr	r2, [pc, #56]	@ (80067b4 <TIM_Base_SetConfig+0x120>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_Base_SetConfig+0xf2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a10      	ldr	r2, [pc, #64]	@ (80067c4 <TIM_Base_SetConfig+0x130>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d103      	bne.n	800678e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f043 0204 	orr.w	r2, r3, #4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	601a      	str	r2, [r3, #0]
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40000c00 	.word	0x40000c00
 80067c4:	40010400 	.word	0x40010400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800
 80067d4:	40001800 	.word	0x40001800
 80067d8:	40001c00 	.word	0x40001c00
 80067dc:	40002000 	.word	0x40002000

080067e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f023 0201 	bic.w	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 0302 	bic.w	r3, r3, #2
 8006828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a20      	ldr	r2, [pc, #128]	@ (80068b8 <TIM_OC1_SetConfig+0xd8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_OC1_SetConfig+0x64>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a1f      	ldr	r2, [pc, #124]	@ (80068bc <TIM_OC1_SetConfig+0xdc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d10c      	bne.n	800685e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f023 0308 	bic.w	r3, r3, #8
 800684a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 0304 	bic.w	r3, r3, #4
 800685c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a15      	ldr	r2, [pc, #84]	@ (80068b8 <TIM_OC1_SetConfig+0xd8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_OC1_SetConfig+0x8e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a14      	ldr	r2, [pc, #80]	@ (80068bc <TIM_OC1_SetConfig+0xdc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d111      	bne.n	8006892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800687c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40010400 	.word	0x40010400

080068c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f023 0210 	bic.w	r2, r3, #16
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f023 0320 	bic.w	r3, r3, #32
 800690a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a22      	ldr	r2, [pc, #136]	@ (80069a4 <TIM_OC2_SetConfig+0xe4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC2_SetConfig+0x68>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a21      	ldr	r2, [pc, #132]	@ (80069a8 <TIM_OC2_SetConfig+0xe8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d10d      	bne.n	8006944 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800692e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a17      	ldr	r2, [pc, #92]	@ (80069a4 <TIM_OC2_SetConfig+0xe4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d003      	beq.n	8006954 <TIM_OC2_SetConfig+0x94>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a16      	ldr	r2, [pc, #88]	@ (80069a8 <TIM_OC2_SetConfig+0xe8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d113      	bne.n	800697c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800695a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40010400 	.word	0x40010400

080069ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a21      	ldr	r2, [pc, #132]	@ (8006a8c <TIM_OC3_SetConfig+0xe0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_OC3_SetConfig+0x66>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a20      	ldr	r2, [pc, #128]	@ (8006a90 <TIM_OC3_SetConfig+0xe4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d10d      	bne.n	8006a2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a16      	ldr	r2, [pc, #88]	@ (8006a8c <TIM_OC3_SetConfig+0xe0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d003      	beq.n	8006a3e <TIM_OC3_SetConfig+0x92>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a15      	ldr	r2, [pc, #84]	@ (8006a90 <TIM_OC3_SetConfig+0xe4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d113      	bne.n	8006a66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	621a      	str	r2, [r3, #32]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40010400 	.word	0x40010400

08006a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a12      	ldr	r2, [pc, #72]	@ (8006b38 <TIM_OC4_SetConfig+0xa4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_OC4_SetConfig+0x68>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a11      	ldr	r2, [pc, #68]	@ (8006b3c <TIM_OC4_SetConfig+0xa8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d109      	bne.n	8006b10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	019b      	lsls	r3, r3, #6
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	621a      	str	r2, [r3, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40010400 	.word	0x40010400

08006b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f023 030a 	bic.w	r3, r3, #10
 8006b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b087      	sub	sp, #28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	f023 0210 	bic.w	r2, r3, #16
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	031b      	lsls	r3, r3, #12
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f043 0307 	orr.w	r3, r3, #7
 8006c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	609a      	str	r2, [r3, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	021a      	lsls	r2, r3, #8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	609a      	str	r2, [r3, #8]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2201      	movs	r2, #1
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1a      	ldr	r2, [r3, #32]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	401a      	ands	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1a      	ldr	r2, [r3, #32]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cac:	431a      	orrs	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e05a      	b.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a21      	ldr	r2, [pc, #132]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d022      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d24:	d01d      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d018      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1b      	ldr	r2, [pc, #108]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00e      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a18      	ldr	r2, [pc, #96]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a17      	ldr	r2, [pc, #92]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10c      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40001800 	.word	0x40001800

08006db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e03d      	b.n	8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e042      	b.n	8006f1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fb fa36 	bl	800231c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2224      	movs	r2, #36	@ 0x24
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa09 	bl	80072e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695a      	ldr	r2, [r3, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08a      	sub	sp, #40	@ 0x28
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d175      	bne.n	8007030 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_UART_Transmit+0x2c>
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e06e      	b.n	8007032 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2221      	movs	r2, #33	@ 0x21
 8006f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f62:	f7fd f8a9 	bl	80040b8 <HAL_GetTick>
 8006f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	88fa      	ldrh	r2, [r7, #6]
 8006f6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	88fa      	ldrh	r2, [r7, #6]
 8006f72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f7c:	d108      	bne.n	8006f90 <HAL_UART_Transmit+0x6c>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d104      	bne.n	8006f90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	e003      	b.n	8006f98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f98:	e02e      	b.n	8006ff8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2180      	movs	r1, #128	@ 0x80
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f8df 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e03a      	b.n	8007032 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	e007      	b.n	8006fea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1cb      	bne.n	8006f9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2200      	movs	r2, #0
 800700a:	2140      	movs	r1, #64	@ 0x40
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f8ab 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e006      	b.n	8007032 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	e000      	b.n	8007032 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007030:	2302      	movs	r3, #2
  }
}
 8007032:	4618      	mov	r0, r3
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b08a      	sub	sp, #40	@ 0x28
 800703e:	af02      	add	r7, sp, #8
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	603b      	str	r3, [r7, #0]
 8007046:	4613      	mov	r3, r2
 8007048:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b20      	cmp	r3, #32
 8007058:	f040 8081 	bne.w	800715e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <HAL_UART_Receive+0x2e>
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e079      	b.n	8007160 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2222      	movs	r2, #34	@ 0x22
 8007076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007080:	f7fd f81a 	bl	80040b8 <HAL_GetTick>
 8007084:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	88fa      	ldrh	r2, [r7, #6]
 800708a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800709a:	d108      	bne.n	80070ae <HAL_UART_Receive+0x74>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	e003      	b.n	80070b6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80070b6:	e047      	b.n	8007148 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2200      	movs	r2, #0
 80070c0:	2120      	movs	r1, #32
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f850 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e042      	b.n	8007160 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10c      	bne.n	80070fa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	3302      	adds	r3, #2
 80070f6:	61bb      	str	r3, [r7, #24]
 80070f8:	e01f      	b.n	800713a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007102:	d007      	beq.n	8007114 <HAL_UART_Receive+0xda>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <HAL_UART_Receive+0xe8>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	b2da      	uxtb	r2, r3
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	e008      	b.n	8007134 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800712e:	b2da      	uxtb	r2, r3
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	3301      	adds	r3, #1
 8007138:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1b2      	bne.n	80070b8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	e000      	b.n	8007160 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800715e:	2302      	movs	r3, #2
  }
}
 8007160:	4618      	mov	r0, r3
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007178:	e03b      	b.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d037      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fc ff99 	bl	80040b8 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	6a3a      	ldr	r2, [r7, #32]
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <UART_WaitOnFlagUntilTimeout+0x30>
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e03a      	b.n	8007212 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d023      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b80      	cmp	r3, #128	@ 0x80
 80071ae:	d020      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b40      	cmp	r3, #64	@ 0x40
 80071b4:	d01d      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d116      	bne.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f81d 	bl	800721a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2208      	movs	r2, #8
 80071e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e00f      	b.n	8007212 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4013      	ands	r3, r2
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	429a      	cmp	r2, r3
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	429a      	cmp	r2, r3
 800720e:	d0b4      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800721a:	b480      	push	{r7}
 800721c:	b095      	sub	sp, #84	@ 0x54
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007242:	643a      	str	r2, [r7, #64]	@ 0x40
 8007244:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3314      	adds	r3, #20
 800725c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	61fb      	str	r3, [r7, #28]
   return(result);
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3314      	adds	r3, #20
 8007274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800727c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e5      	bne.n	8007256 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	2b01      	cmp	r3, #1
 8007290:	d119      	bne.n	80072c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b2:	61ba      	str	r2, [r7, #24]
 80072b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	613b      	str	r3, [r7, #16]
   return(result);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072d4:	bf00      	nop
 80072d6:	3754      	adds	r7, #84	@ 0x54
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e4:	b0c0      	sub	sp, #256	@ 0x100
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	68d9      	ldr	r1, [r3, #12]
 80072fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	ea40 0301 	orr.w	r3, r0, r1
 8007308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	431a      	orrs	r2, r3
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	431a      	orrs	r2, r3
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007338:	f021 010c 	bic.w	r1, r1, #12
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007346:	430b      	orrs	r3, r1
 8007348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735a:	6999      	ldr	r1, [r3, #24]
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	ea40 0301 	orr.w	r3, r0, r1
 8007366:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4b8f      	ldr	r3, [pc, #572]	@ (80075ac <UART_SetConfig+0x2cc>)
 8007370:	429a      	cmp	r2, r3
 8007372:	d005      	beq.n	8007380 <UART_SetConfig+0xa0>
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4b8d      	ldr	r3, [pc, #564]	@ (80075b0 <UART_SetConfig+0x2d0>)
 800737c:	429a      	cmp	r2, r3
 800737e:	d104      	bne.n	800738a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007380:	f7fd ff58 	bl	8005234 <HAL_RCC_GetPCLK2Freq>
 8007384:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007388:	e003      	b.n	8007392 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800738a:	f7fd ff3f 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 800738e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739c:	f040 810c 	bne.w	80075b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	1891      	adds	r1, r2, r2
 80073b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073ba:	415b      	adcs	r3, r3
 80073bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073c2:	4621      	mov	r1, r4
 80073c4:	eb12 0801 	adds.w	r8, r2, r1
 80073c8:	4629      	mov	r1, r5
 80073ca:	eb43 0901 	adc.w	r9, r3, r1
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073e2:	4690      	mov	r8, r2
 80073e4:	4699      	mov	r9, r3
 80073e6:	4623      	mov	r3, r4
 80073e8:	eb18 0303 	adds.w	r3, r8, r3
 80073ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073f0:	462b      	mov	r3, r5
 80073f2:	eb49 0303 	adc.w	r3, r9, r3
 80073f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007406:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800740a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800740e:	460b      	mov	r3, r1
 8007410:	18db      	adds	r3, r3, r3
 8007412:	653b      	str	r3, [r7, #80]	@ 0x50
 8007414:	4613      	mov	r3, r2
 8007416:	eb42 0303 	adc.w	r3, r2, r3
 800741a:	657b      	str	r3, [r7, #84]	@ 0x54
 800741c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007424:	f7f9 fb42 	bl	8000aac <__aeabi_uldivmod>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4b61      	ldr	r3, [pc, #388]	@ (80075b4 <UART_SetConfig+0x2d4>)
 800742e:	fba3 2302 	umull	r2, r3, r3, r2
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	011c      	lsls	r4, r3, #4
 8007436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800743a:	2200      	movs	r2, #0
 800743c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007440:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007448:	4642      	mov	r2, r8
 800744a:	464b      	mov	r3, r9
 800744c:	1891      	adds	r1, r2, r2
 800744e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007450:	415b      	adcs	r3, r3
 8007452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007458:	4641      	mov	r1, r8
 800745a:	eb12 0a01 	adds.w	sl, r2, r1
 800745e:	4649      	mov	r1, r9
 8007460:	eb43 0b01 	adc.w	fp, r3, r1
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007478:	4692      	mov	sl, r2
 800747a:	469b      	mov	fp, r3
 800747c:	4643      	mov	r3, r8
 800747e:	eb1a 0303 	adds.w	r3, sl, r3
 8007482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007486:	464b      	mov	r3, r9
 8007488:	eb4b 0303 	adc.w	r3, fp, r3
 800748c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800749c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074a4:	460b      	mov	r3, r1
 80074a6:	18db      	adds	r3, r3, r3
 80074a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074aa:	4613      	mov	r3, r2
 80074ac:	eb42 0303 	adc.w	r3, r2, r3
 80074b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074ba:	f7f9 faf7 	bl	8000aac <__aeabi_uldivmod>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	4b3b      	ldr	r3, [pc, #236]	@ (80075b4 <UART_SetConfig+0x2d4>)
 80074c6:	fba3 2301 	umull	r2, r3, r3, r1
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	2264      	movs	r2, #100	@ 0x64
 80074ce:	fb02 f303 	mul.w	r3, r2, r3
 80074d2:	1acb      	subs	r3, r1, r3
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074da:	4b36      	ldr	r3, [pc, #216]	@ (80075b4 <UART_SetConfig+0x2d4>)
 80074dc:	fba3 2302 	umull	r2, r3, r3, r2
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074e8:	441c      	add	r4, r3
 80074ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80074f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80074fc:	4642      	mov	r2, r8
 80074fe:	464b      	mov	r3, r9
 8007500:	1891      	adds	r1, r2, r2
 8007502:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007504:	415b      	adcs	r3, r3
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800750c:	4641      	mov	r1, r8
 800750e:	1851      	adds	r1, r2, r1
 8007510:	6339      	str	r1, [r7, #48]	@ 0x30
 8007512:	4649      	mov	r1, r9
 8007514:	414b      	adcs	r3, r1
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	f04f 0300 	mov.w	r3, #0
 8007520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007524:	4659      	mov	r1, fp
 8007526:	00cb      	lsls	r3, r1, #3
 8007528:	4651      	mov	r1, sl
 800752a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800752e:	4651      	mov	r1, sl
 8007530:	00ca      	lsls	r2, r1, #3
 8007532:	4610      	mov	r0, r2
 8007534:	4619      	mov	r1, r3
 8007536:	4603      	mov	r3, r0
 8007538:	4642      	mov	r2, r8
 800753a:	189b      	adds	r3, r3, r2
 800753c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007540:	464b      	mov	r3, r9
 8007542:	460a      	mov	r2, r1
 8007544:	eb42 0303 	adc.w	r3, r2, r3
 8007548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007558:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800755c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007560:	460b      	mov	r3, r1
 8007562:	18db      	adds	r3, r3, r3
 8007564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007566:	4613      	mov	r3, r2
 8007568:	eb42 0303 	adc.w	r3, r2, r3
 800756c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800756e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007576:	f7f9 fa99 	bl	8000aac <__aeabi_uldivmod>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4b0d      	ldr	r3, [pc, #52]	@ (80075b4 <UART_SetConfig+0x2d4>)
 8007580:	fba3 1302 	umull	r1, r3, r3, r2
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	2164      	movs	r1, #100	@ 0x64
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	3332      	adds	r3, #50	@ 0x32
 8007592:	4a08      	ldr	r2, [pc, #32]	@ (80075b4 <UART_SetConfig+0x2d4>)
 8007594:	fba2 2303 	umull	r2, r3, r2, r3
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	f003 0207 	and.w	r2, r3, #7
 800759e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4422      	add	r2, r4
 80075a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075a8:	e106      	b.n	80077b8 <UART_SetConfig+0x4d8>
 80075aa:	bf00      	nop
 80075ac:	40011000 	.word	0x40011000
 80075b0:	40011400 	.word	0x40011400
 80075b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075bc:	2200      	movs	r2, #0
 80075be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075ca:	4642      	mov	r2, r8
 80075cc:	464b      	mov	r3, r9
 80075ce:	1891      	adds	r1, r2, r2
 80075d0:	6239      	str	r1, [r7, #32]
 80075d2:	415b      	adcs	r3, r3
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075da:	4641      	mov	r1, r8
 80075dc:	1854      	adds	r4, r2, r1
 80075de:	4649      	mov	r1, r9
 80075e0:	eb43 0501 	adc.w	r5, r3, r1
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	00eb      	lsls	r3, r5, #3
 80075ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075f2:	00e2      	lsls	r2, r4, #3
 80075f4:	4614      	mov	r4, r2
 80075f6:	461d      	mov	r5, r3
 80075f8:	4643      	mov	r3, r8
 80075fa:	18e3      	adds	r3, r4, r3
 80075fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007600:	464b      	mov	r3, r9
 8007602:	eb45 0303 	adc.w	r3, r5, r3
 8007606:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800760a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007616:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007626:	4629      	mov	r1, r5
 8007628:	008b      	lsls	r3, r1, #2
 800762a:	4621      	mov	r1, r4
 800762c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007630:	4621      	mov	r1, r4
 8007632:	008a      	lsls	r2, r1, #2
 8007634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007638:	f7f9 fa38 	bl	8000aac <__aeabi_uldivmod>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4b60      	ldr	r3, [pc, #384]	@ (80077c4 <UART_SetConfig+0x4e4>)
 8007642:	fba3 2302 	umull	r2, r3, r3, r2
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	011c      	lsls	r4, r3, #4
 800764a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800764e:	2200      	movs	r2, #0
 8007650:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007654:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800765c:	4642      	mov	r2, r8
 800765e:	464b      	mov	r3, r9
 8007660:	1891      	adds	r1, r2, r2
 8007662:	61b9      	str	r1, [r7, #24]
 8007664:	415b      	adcs	r3, r3
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800766c:	4641      	mov	r1, r8
 800766e:	1851      	adds	r1, r2, r1
 8007670:	6139      	str	r1, [r7, #16]
 8007672:	4649      	mov	r1, r9
 8007674:	414b      	adcs	r3, r1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007684:	4659      	mov	r1, fp
 8007686:	00cb      	lsls	r3, r1, #3
 8007688:	4651      	mov	r1, sl
 800768a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800768e:	4651      	mov	r1, sl
 8007690:	00ca      	lsls	r2, r1, #3
 8007692:	4610      	mov	r0, r2
 8007694:	4619      	mov	r1, r3
 8007696:	4603      	mov	r3, r0
 8007698:	4642      	mov	r2, r8
 800769a:	189b      	adds	r3, r3, r2
 800769c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076a0:	464b      	mov	r3, r9
 80076a2:	460a      	mov	r2, r1
 80076a4:	eb42 0303 	adc.w	r3, r2, r3
 80076a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	f04f 0300 	mov.w	r3, #0
 80076c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076c4:	4649      	mov	r1, r9
 80076c6:	008b      	lsls	r3, r1, #2
 80076c8:	4641      	mov	r1, r8
 80076ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ce:	4641      	mov	r1, r8
 80076d0:	008a      	lsls	r2, r1, #2
 80076d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076d6:	f7f9 f9e9 	bl	8000aac <__aeabi_uldivmod>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	4b38      	ldr	r3, [pc, #224]	@ (80077c4 <UART_SetConfig+0x4e4>)
 80076e2:	fba3 2301 	umull	r2, r3, r3, r1
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	2264      	movs	r2, #100	@ 0x64
 80076ea:	fb02 f303 	mul.w	r3, r2, r3
 80076ee:	1acb      	subs	r3, r1, r3
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	3332      	adds	r3, #50	@ 0x32
 80076f4:	4a33      	ldr	r2, [pc, #204]	@ (80077c4 <UART_SetConfig+0x4e4>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007700:	441c      	add	r4, r3
 8007702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007706:	2200      	movs	r2, #0
 8007708:	673b      	str	r3, [r7, #112]	@ 0x70
 800770a:	677a      	str	r2, [r7, #116]	@ 0x74
 800770c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007710:	4642      	mov	r2, r8
 8007712:	464b      	mov	r3, r9
 8007714:	1891      	adds	r1, r2, r2
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	415b      	adcs	r3, r3
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007720:	4641      	mov	r1, r8
 8007722:	1851      	adds	r1, r2, r1
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	4649      	mov	r1, r9
 8007728:	414b      	adcs	r3, r1
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007738:	4659      	mov	r1, fp
 800773a:	00cb      	lsls	r3, r1, #3
 800773c:	4651      	mov	r1, sl
 800773e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007742:	4651      	mov	r1, sl
 8007744:	00ca      	lsls	r2, r1, #3
 8007746:	4610      	mov	r0, r2
 8007748:	4619      	mov	r1, r3
 800774a:	4603      	mov	r3, r0
 800774c:	4642      	mov	r2, r8
 800774e:	189b      	adds	r3, r3, r2
 8007750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007752:	464b      	mov	r3, r9
 8007754:	460a      	mov	r2, r1
 8007756:	eb42 0303 	adc.w	r3, r2, r3
 800775a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	663b      	str	r3, [r7, #96]	@ 0x60
 8007766:	667a      	str	r2, [r7, #100]	@ 0x64
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007774:	4649      	mov	r1, r9
 8007776:	008b      	lsls	r3, r1, #2
 8007778:	4641      	mov	r1, r8
 800777a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800777e:	4641      	mov	r1, r8
 8007780:	008a      	lsls	r2, r1, #2
 8007782:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007786:	f7f9 f991 	bl	8000aac <__aeabi_uldivmod>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <UART_SetConfig+0x4e4>)
 8007790:	fba3 1302 	umull	r1, r3, r3, r2
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	2164      	movs	r1, #100	@ 0x64
 8007798:	fb01 f303 	mul.w	r3, r1, r3
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	3332      	adds	r3, #50	@ 0x32
 80077a2:	4a08      	ldr	r2, [pc, #32]	@ (80077c4 <UART_SetConfig+0x4e4>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	f003 020f 	and.w	r2, r3, #15
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4422      	add	r2, r4
 80077b6:	609a      	str	r2, [r3, #8]
}
 80077b8:	bf00      	nop
 80077ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077be:	46bd      	mov	sp, r7
 80077c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077c4:	51eb851f 	.word	0x51eb851f

080077c8 <sqrtf>:
 80077c8:	b508      	push	{r3, lr}
 80077ca:	ed2d 8b02 	vpush	{d8}
 80077ce:	eeb0 8a40 	vmov.f32	s16, s0
 80077d2:	f000 f817 	bl	8007804 <__ieee754_sqrtf>
 80077d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80077da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077de:	d60c      	bvs.n	80077fa <sqrtf+0x32>
 80077e0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007800 <sqrtf+0x38>
 80077e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80077e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ec:	d505      	bpl.n	80077fa <sqrtf+0x32>
 80077ee:	f000 f933 	bl	8007a58 <__errno>
 80077f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80077f6:	2321      	movs	r3, #33	@ 0x21
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	ecbd 8b02 	vpop	{d8}
 80077fe:	bd08      	pop	{r3, pc}
 8007800:	00000000 	.word	0x00000000

08007804 <__ieee754_sqrtf>:
 8007804:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007808:	4770      	bx	lr
	...

0800780c <malloc>:
 800780c:	4b02      	ldr	r3, [pc, #8]	@ (8007818 <malloc+0xc>)
 800780e:	4601      	mov	r1, r0
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	f000 b82d 	b.w	8007870 <_malloc_r>
 8007816:	bf00      	nop
 8007818:	2000000c 	.word	0x2000000c

0800781c <free>:
 800781c:	4b02      	ldr	r3, [pc, #8]	@ (8007828 <free+0xc>)
 800781e:	4601      	mov	r1, r0
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	f000 b953 	b.w	8007acc <_free_r>
 8007826:	bf00      	nop
 8007828:	2000000c 	.word	0x2000000c

0800782c <sbrk_aligned>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4e0f      	ldr	r6, [pc, #60]	@ (800786c <sbrk_aligned+0x40>)
 8007830:	460c      	mov	r4, r1
 8007832:	6831      	ldr	r1, [r6, #0]
 8007834:	4605      	mov	r5, r0
 8007836:	b911      	cbnz	r1, 800783e <sbrk_aligned+0x12>
 8007838:	f000 f8fe 	bl	8007a38 <_sbrk_r>
 800783c:	6030      	str	r0, [r6, #0]
 800783e:	4621      	mov	r1, r4
 8007840:	4628      	mov	r0, r5
 8007842:	f000 f8f9 	bl	8007a38 <_sbrk_r>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d103      	bne.n	8007852 <sbrk_aligned+0x26>
 800784a:	f04f 34ff 	mov.w	r4, #4294967295
 800784e:	4620      	mov	r0, r4
 8007850:	bd70      	pop	{r4, r5, r6, pc}
 8007852:	1cc4      	adds	r4, r0, #3
 8007854:	f024 0403 	bic.w	r4, r4, #3
 8007858:	42a0      	cmp	r0, r4
 800785a:	d0f8      	beq.n	800784e <sbrk_aligned+0x22>
 800785c:	1a21      	subs	r1, r4, r0
 800785e:	4628      	mov	r0, r5
 8007860:	f000 f8ea 	bl	8007a38 <_sbrk_r>
 8007864:	3001      	adds	r0, #1
 8007866:	d1f2      	bne.n	800784e <sbrk_aligned+0x22>
 8007868:	e7ef      	b.n	800784a <sbrk_aligned+0x1e>
 800786a:	bf00      	nop
 800786c:	20000974 	.word	0x20000974

08007870 <_malloc_r>:
 8007870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007874:	1ccd      	adds	r5, r1, #3
 8007876:	f025 0503 	bic.w	r5, r5, #3
 800787a:	3508      	adds	r5, #8
 800787c:	2d0c      	cmp	r5, #12
 800787e:	bf38      	it	cc
 8007880:	250c      	movcc	r5, #12
 8007882:	2d00      	cmp	r5, #0
 8007884:	4606      	mov	r6, r0
 8007886:	db01      	blt.n	800788c <_malloc_r+0x1c>
 8007888:	42a9      	cmp	r1, r5
 800788a:	d904      	bls.n	8007896 <_malloc_r+0x26>
 800788c:	230c      	movs	r3, #12
 800788e:	6033      	str	r3, [r6, #0]
 8007890:	2000      	movs	r0, #0
 8007892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800796c <_malloc_r+0xfc>
 800789a:	f000 f869 	bl	8007970 <__malloc_lock>
 800789e:	f8d8 3000 	ldr.w	r3, [r8]
 80078a2:	461c      	mov	r4, r3
 80078a4:	bb44      	cbnz	r4, 80078f8 <_malloc_r+0x88>
 80078a6:	4629      	mov	r1, r5
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7ff ffbf 	bl	800782c <sbrk_aligned>
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	4604      	mov	r4, r0
 80078b2:	d158      	bne.n	8007966 <_malloc_r+0xf6>
 80078b4:	f8d8 4000 	ldr.w	r4, [r8]
 80078b8:	4627      	mov	r7, r4
 80078ba:	2f00      	cmp	r7, #0
 80078bc:	d143      	bne.n	8007946 <_malloc_r+0xd6>
 80078be:	2c00      	cmp	r4, #0
 80078c0:	d04b      	beq.n	800795a <_malloc_r+0xea>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	4639      	mov	r1, r7
 80078c6:	4630      	mov	r0, r6
 80078c8:	eb04 0903 	add.w	r9, r4, r3
 80078cc:	f000 f8b4 	bl	8007a38 <_sbrk_r>
 80078d0:	4581      	cmp	r9, r0
 80078d2:	d142      	bne.n	800795a <_malloc_r+0xea>
 80078d4:	6821      	ldr	r1, [r4, #0]
 80078d6:	1a6d      	subs	r5, r5, r1
 80078d8:	4629      	mov	r1, r5
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff ffa6 	bl	800782c <sbrk_aligned>
 80078e0:	3001      	adds	r0, #1
 80078e2:	d03a      	beq.n	800795a <_malloc_r+0xea>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	442b      	add	r3, r5
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	f8d8 3000 	ldr.w	r3, [r8]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	bb62      	cbnz	r2, 800794c <_malloc_r+0xdc>
 80078f2:	f8c8 7000 	str.w	r7, [r8]
 80078f6:	e00f      	b.n	8007918 <_malloc_r+0xa8>
 80078f8:	6822      	ldr	r2, [r4, #0]
 80078fa:	1b52      	subs	r2, r2, r5
 80078fc:	d420      	bmi.n	8007940 <_malloc_r+0xd0>
 80078fe:	2a0b      	cmp	r2, #11
 8007900:	d917      	bls.n	8007932 <_malloc_r+0xc2>
 8007902:	1961      	adds	r1, r4, r5
 8007904:	42a3      	cmp	r3, r4
 8007906:	6025      	str	r5, [r4, #0]
 8007908:	bf18      	it	ne
 800790a:	6059      	strne	r1, [r3, #4]
 800790c:	6863      	ldr	r3, [r4, #4]
 800790e:	bf08      	it	eq
 8007910:	f8c8 1000 	streq.w	r1, [r8]
 8007914:	5162      	str	r2, [r4, r5]
 8007916:	604b      	str	r3, [r1, #4]
 8007918:	4630      	mov	r0, r6
 800791a:	f000 f82f 	bl	800797c <__malloc_unlock>
 800791e:	f104 000b 	add.w	r0, r4, #11
 8007922:	1d23      	adds	r3, r4, #4
 8007924:	f020 0007 	bic.w	r0, r0, #7
 8007928:	1ac2      	subs	r2, r0, r3
 800792a:	bf1c      	itt	ne
 800792c:	1a1b      	subne	r3, r3, r0
 800792e:	50a3      	strne	r3, [r4, r2]
 8007930:	e7af      	b.n	8007892 <_malloc_r+0x22>
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	42a3      	cmp	r3, r4
 8007936:	bf0c      	ite	eq
 8007938:	f8c8 2000 	streq.w	r2, [r8]
 800793c:	605a      	strne	r2, [r3, #4]
 800793e:	e7eb      	b.n	8007918 <_malloc_r+0xa8>
 8007940:	4623      	mov	r3, r4
 8007942:	6864      	ldr	r4, [r4, #4]
 8007944:	e7ae      	b.n	80078a4 <_malloc_r+0x34>
 8007946:	463c      	mov	r4, r7
 8007948:	687f      	ldr	r7, [r7, #4]
 800794a:	e7b6      	b.n	80078ba <_malloc_r+0x4a>
 800794c:	461a      	mov	r2, r3
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	42a3      	cmp	r3, r4
 8007952:	d1fb      	bne.n	800794c <_malloc_r+0xdc>
 8007954:	2300      	movs	r3, #0
 8007956:	6053      	str	r3, [r2, #4]
 8007958:	e7de      	b.n	8007918 <_malloc_r+0xa8>
 800795a:	230c      	movs	r3, #12
 800795c:	6033      	str	r3, [r6, #0]
 800795e:	4630      	mov	r0, r6
 8007960:	f000 f80c 	bl	800797c <__malloc_unlock>
 8007964:	e794      	b.n	8007890 <_malloc_r+0x20>
 8007966:	6005      	str	r5, [r0, #0]
 8007968:	e7d6      	b.n	8007918 <_malloc_r+0xa8>
 800796a:	bf00      	nop
 800796c:	20000978 	.word	0x20000978

08007970 <__malloc_lock>:
 8007970:	4801      	ldr	r0, [pc, #4]	@ (8007978 <__malloc_lock+0x8>)
 8007972:	f000 b89b 	b.w	8007aac <__retarget_lock_acquire_recursive>
 8007976:	bf00      	nop
 8007978:	20000ab8 	.word	0x20000ab8

0800797c <__malloc_unlock>:
 800797c:	4801      	ldr	r0, [pc, #4]	@ (8007984 <__malloc_unlock+0x8>)
 800797e:	f000 b896 	b.w	8007aae <__retarget_lock_release_recursive>
 8007982:	bf00      	nop
 8007984:	20000ab8 	.word	0x20000ab8

08007988 <sniprintf>:
 8007988:	b40c      	push	{r2, r3}
 800798a:	b530      	push	{r4, r5, lr}
 800798c:	4b18      	ldr	r3, [pc, #96]	@ (80079f0 <sniprintf+0x68>)
 800798e:	1e0c      	subs	r4, r1, #0
 8007990:	681d      	ldr	r5, [r3, #0]
 8007992:	b09d      	sub	sp, #116	@ 0x74
 8007994:	da08      	bge.n	80079a8 <sniprintf+0x20>
 8007996:	238b      	movs	r3, #139	@ 0x8b
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	f04f 30ff 	mov.w	r0, #4294967295
 800799e:	b01d      	add	sp, #116	@ 0x74
 80079a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079a4:	b002      	add	sp, #8
 80079a6:	4770      	bx	lr
 80079a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80079ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80079b6:	bf14      	ite	ne
 80079b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079bc:	4623      	moveq	r3, r4
 80079be:	9304      	str	r3, [sp, #16]
 80079c0:	9307      	str	r3, [sp, #28]
 80079c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079c6:	9002      	str	r0, [sp, #8]
 80079c8:	9006      	str	r0, [sp, #24]
 80079ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079d0:	ab21      	add	r3, sp, #132	@ 0x84
 80079d2:	a902      	add	r1, sp, #8
 80079d4:	4628      	mov	r0, r5
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	f000 f91e 	bl	8007c18 <_svfiprintf_r>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	bfbc      	itt	lt
 80079e0:	238b      	movlt	r3, #139	@ 0x8b
 80079e2:	602b      	strlt	r3, [r5, #0]
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d0da      	beq.n	800799e <sniprintf+0x16>
 80079e8:	9b02      	ldr	r3, [sp, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	e7d6      	b.n	800799e <sniprintf+0x16>
 80079f0:	2000000c 	.word	0x2000000c

080079f4 <memmove>:
 80079f4:	4288      	cmp	r0, r1
 80079f6:	b510      	push	{r4, lr}
 80079f8:	eb01 0402 	add.w	r4, r1, r2
 80079fc:	d902      	bls.n	8007a04 <memmove+0x10>
 80079fe:	4284      	cmp	r4, r0
 8007a00:	4623      	mov	r3, r4
 8007a02:	d807      	bhi.n	8007a14 <memmove+0x20>
 8007a04:	1e43      	subs	r3, r0, #1
 8007a06:	42a1      	cmp	r1, r4
 8007a08:	d008      	beq.n	8007a1c <memmove+0x28>
 8007a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a12:	e7f8      	b.n	8007a06 <memmove+0x12>
 8007a14:	4402      	add	r2, r0
 8007a16:	4601      	mov	r1, r0
 8007a18:	428a      	cmp	r2, r1
 8007a1a:	d100      	bne.n	8007a1e <memmove+0x2a>
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a26:	e7f7      	b.n	8007a18 <memmove+0x24>

08007a28 <memset>:
 8007a28:	4402      	add	r2, r0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d100      	bne.n	8007a32 <memset+0xa>
 8007a30:	4770      	bx	lr
 8007a32:	f803 1b01 	strb.w	r1, [r3], #1
 8007a36:	e7f9      	b.n	8007a2c <memset+0x4>

08007a38 <_sbrk_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d06      	ldr	r5, [pc, #24]	@ (8007a54 <_sbrk_r+0x1c>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	f7fa fe9a 	bl	800277c <_sbrk>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_sbrk_r+0x1a>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_sbrk_r+0x1a>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	20000ab4 	.word	0x20000ab4

08007a58 <__errno>:
 8007a58:	4b01      	ldr	r3, [pc, #4]	@ (8007a60 <__errno+0x8>)
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	2000000c 	.word	0x2000000c

08007a64 <__libc_init_array>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	4d0d      	ldr	r5, [pc, #52]	@ (8007a9c <__libc_init_array+0x38>)
 8007a68:	4c0d      	ldr	r4, [pc, #52]	@ (8007aa0 <__libc_init_array+0x3c>)
 8007a6a:	1b64      	subs	r4, r4, r5
 8007a6c:	10a4      	asrs	r4, r4, #2
 8007a6e:	2600      	movs	r6, #0
 8007a70:	42a6      	cmp	r6, r4
 8007a72:	d109      	bne.n	8007a88 <__libc_init_array+0x24>
 8007a74:	4d0b      	ldr	r5, [pc, #44]	@ (8007aa4 <__libc_init_array+0x40>)
 8007a76:	4c0c      	ldr	r4, [pc, #48]	@ (8007aa8 <__libc_init_array+0x44>)
 8007a78:	f000 fb8c 	bl	8008194 <_init>
 8007a7c:	1b64      	subs	r4, r4, r5
 8007a7e:	10a4      	asrs	r4, r4, #2
 8007a80:	2600      	movs	r6, #0
 8007a82:	42a6      	cmp	r6, r4
 8007a84:	d105      	bne.n	8007a92 <__libc_init_array+0x2e>
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8c:	4798      	blx	r3
 8007a8e:	3601      	adds	r6, #1
 8007a90:	e7ee      	b.n	8007a70 <__libc_init_array+0xc>
 8007a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a96:	4798      	blx	r3
 8007a98:	3601      	adds	r6, #1
 8007a9a:	e7f2      	b.n	8007a82 <__libc_init_array+0x1e>
 8007a9c:	08008fa8 	.word	0x08008fa8
 8007aa0:	08008fa8 	.word	0x08008fa8
 8007aa4:	08008fa8 	.word	0x08008fa8
 8007aa8:	08008fac 	.word	0x08008fac

08007aac <__retarget_lock_acquire_recursive>:
 8007aac:	4770      	bx	lr

08007aae <__retarget_lock_release_recursive>:
 8007aae:	4770      	bx	lr

08007ab0 <memcpy>:
 8007ab0:	440a      	add	r2, r1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab8:	d100      	bne.n	8007abc <memcpy+0xc>
 8007aba:	4770      	bx	lr
 8007abc:	b510      	push	{r4, lr}
 8007abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac6:	4291      	cmp	r1, r2
 8007ac8:	d1f9      	bne.n	8007abe <memcpy+0xe>
 8007aca:	bd10      	pop	{r4, pc}

08007acc <_free_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4605      	mov	r5, r0
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	d041      	beq.n	8007b58 <_free_r+0x8c>
 8007ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad8:	1f0c      	subs	r4, r1, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bfb8      	it	lt
 8007ade:	18e4      	addlt	r4, r4, r3
 8007ae0:	f7ff ff46 	bl	8007970 <__malloc_lock>
 8007ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b5c <_free_r+0x90>)
 8007ae6:	6813      	ldr	r3, [r2, #0]
 8007ae8:	b933      	cbnz	r3, 8007af8 <_free_r+0x2c>
 8007aea:	6063      	str	r3, [r4, #4]
 8007aec:	6014      	str	r4, [r2, #0]
 8007aee:	4628      	mov	r0, r5
 8007af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af4:	f7ff bf42 	b.w	800797c <__malloc_unlock>
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d908      	bls.n	8007b0e <_free_r+0x42>
 8007afc:	6820      	ldr	r0, [r4, #0]
 8007afe:	1821      	adds	r1, r4, r0
 8007b00:	428b      	cmp	r3, r1
 8007b02:	bf01      	itttt	eq
 8007b04:	6819      	ldreq	r1, [r3, #0]
 8007b06:	685b      	ldreq	r3, [r3, #4]
 8007b08:	1809      	addeq	r1, r1, r0
 8007b0a:	6021      	streq	r1, [r4, #0]
 8007b0c:	e7ed      	b.n	8007aea <_free_r+0x1e>
 8007b0e:	461a      	mov	r2, r3
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	b10b      	cbz	r3, 8007b18 <_free_r+0x4c>
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	d9fa      	bls.n	8007b0e <_free_r+0x42>
 8007b18:	6811      	ldr	r1, [r2, #0]
 8007b1a:	1850      	adds	r0, r2, r1
 8007b1c:	42a0      	cmp	r0, r4
 8007b1e:	d10b      	bne.n	8007b38 <_free_r+0x6c>
 8007b20:	6820      	ldr	r0, [r4, #0]
 8007b22:	4401      	add	r1, r0
 8007b24:	1850      	adds	r0, r2, r1
 8007b26:	4283      	cmp	r3, r0
 8007b28:	6011      	str	r1, [r2, #0]
 8007b2a:	d1e0      	bne.n	8007aee <_free_r+0x22>
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	6053      	str	r3, [r2, #4]
 8007b32:	4408      	add	r0, r1
 8007b34:	6010      	str	r0, [r2, #0]
 8007b36:	e7da      	b.n	8007aee <_free_r+0x22>
 8007b38:	d902      	bls.n	8007b40 <_free_r+0x74>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	e7d6      	b.n	8007aee <_free_r+0x22>
 8007b40:	6820      	ldr	r0, [r4, #0]
 8007b42:	1821      	adds	r1, r4, r0
 8007b44:	428b      	cmp	r3, r1
 8007b46:	bf04      	itt	eq
 8007b48:	6819      	ldreq	r1, [r3, #0]
 8007b4a:	685b      	ldreq	r3, [r3, #4]
 8007b4c:	6063      	str	r3, [r4, #4]
 8007b4e:	bf04      	itt	eq
 8007b50:	1809      	addeq	r1, r1, r0
 8007b52:	6021      	streq	r1, [r4, #0]
 8007b54:	6054      	str	r4, [r2, #4]
 8007b56:	e7ca      	b.n	8007aee <_free_r+0x22>
 8007b58:	bd38      	pop	{r3, r4, r5, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000978 	.word	0x20000978

08007b60 <__ssputs_r>:
 8007b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b64:	688e      	ldr	r6, [r1, #8]
 8007b66:	461f      	mov	r7, r3
 8007b68:	42be      	cmp	r6, r7
 8007b6a:	680b      	ldr	r3, [r1, #0]
 8007b6c:	4682      	mov	sl, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	4690      	mov	r8, r2
 8007b72:	d82d      	bhi.n	8007bd0 <__ssputs_r+0x70>
 8007b74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b7c:	d026      	beq.n	8007bcc <__ssputs_r+0x6c>
 8007b7e:	6965      	ldr	r5, [r4, #20]
 8007b80:	6909      	ldr	r1, [r1, #16]
 8007b82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b86:	eba3 0901 	sub.w	r9, r3, r1
 8007b8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b8e:	1c7b      	adds	r3, r7, #1
 8007b90:	444b      	add	r3, r9
 8007b92:	106d      	asrs	r5, r5, #1
 8007b94:	429d      	cmp	r5, r3
 8007b96:	bf38      	it	cc
 8007b98:	461d      	movcc	r5, r3
 8007b9a:	0553      	lsls	r3, r2, #21
 8007b9c:	d527      	bpl.n	8007bee <__ssputs_r+0x8e>
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7ff fe66 	bl	8007870 <_malloc_r>
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	b360      	cbz	r0, 8007c02 <__ssputs_r+0xa2>
 8007ba8:	6921      	ldr	r1, [r4, #16]
 8007baa:	464a      	mov	r2, r9
 8007bac:	f7ff ff80 	bl	8007ab0 <memcpy>
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	6126      	str	r6, [r4, #16]
 8007bbe:	6165      	str	r5, [r4, #20]
 8007bc0:	444e      	add	r6, r9
 8007bc2:	eba5 0509 	sub.w	r5, r5, r9
 8007bc6:	6026      	str	r6, [r4, #0]
 8007bc8:	60a5      	str	r5, [r4, #8]
 8007bca:	463e      	mov	r6, r7
 8007bcc:	42be      	cmp	r6, r7
 8007bce:	d900      	bls.n	8007bd2 <__ssputs_r+0x72>
 8007bd0:	463e      	mov	r6, r7
 8007bd2:	6820      	ldr	r0, [r4, #0]
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	4641      	mov	r1, r8
 8007bd8:	f7ff ff0c 	bl	80079f4 <memmove>
 8007bdc:	68a3      	ldr	r3, [r4, #8]
 8007bde:	1b9b      	subs	r3, r3, r6
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	4433      	add	r3, r6
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	2000      	movs	r0, #0
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	462a      	mov	r2, r5
 8007bf0:	f000 fa9a 	bl	8008128 <_realloc_r>
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d1e0      	bne.n	8007bbc <__ssputs_r+0x5c>
 8007bfa:	6921      	ldr	r1, [r4, #16]
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	f7ff ff65 	bl	8007acc <_free_r>
 8007c02:	230c      	movs	r3, #12
 8007c04:	f8ca 3000 	str.w	r3, [sl]
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c0e:	81a3      	strh	r3, [r4, #12]
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	e7e9      	b.n	8007bea <__ssputs_r+0x8a>
	...

08007c18 <_svfiprintf_r>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	4698      	mov	r8, r3
 8007c1e:	898b      	ldrh	r3, [r1, #12]
 8007c20:	061b      	lsls	r3, r3, #24
 8007c22:	b09d      	sub	sp, #116	@ 0x74
 8007c24:	4607      	mov	r7, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	4614      	mov	r4, r2
 8007c2a:	d510      	bpl.n	8007c4e <_svfiprintf_r+0x36>
 8007c2c:	690b      	ldr	r3, [r1, #16]
 8007c2e:	b973      	cbnz	r3, 8007c4e <_svfiprintf_r+0x36>
 8007c30:	2140      	movs	r1, #64	@ 0x40
 8007c32:	f7ff fe1d 	bl	8007870 <_malloc_r>
 8007c36:	6028      	str	r0, [r5, #0]
 8007c38:	6128      	str	r0, [r5, #16]
 8007c3a:	b930      	cbnz	r0, 8007c4a <_svfiprintf_r+0x32>
 8007c3c:	230c      	movs	r3, #12
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	b01d      	add	sp, #116	@ 0x74
 8007c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4a:	2340      	movs	r3, #64	@ 0x40
 8007c4c:	616b      	str	r3, [r5, #20]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c52:	2320      	movs	r3, #32
 8007c54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c58:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c5c:	2330      	movs	r3, #48	@ 0x30
 8007c5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007dfc <_svfiprintf_r+0x1e4>
 8007c62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c66:	f04f 0901 	mov.w	r9, #1
 8007c6a:	4623      	mov	r3, r4
 8007c6c:	469a      	mov	sl, r3
 8007c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c72:	b10a      	cbz	r2, 8007c78 <_svfiprintf_r+0x60>
 8007c74:	2a25      	cmp	r2, #37	@ 0x25
 8007c76:	d1f9      	bne.n	8007c6c <_svfiprintf_r+0x54>
 8007c78:	ebba 0b04 	subs.w	fp, sl, r4
 8007c7c:	d00b      	beq.n	8007c96 <_svfiprintf_r+0x7e>
 8007c7e:	465b      	mov	r3, fp
 8007c80:	4622      	mov	r2, r4
 8007c82:	4629      	mov	r1, r5
 8007c84:	4638      	mov	r0, r7
 8007c86:	f7ff ff6b 	bl	8007b60 <__ssputs_r>
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	f000 80a7 	beq.w	8007dde <_svfiprintf_r+0x1c6>
 8007c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c92:	445a      	add	r2, fp
 8007c94:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c96:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 809f 	beq.w	8007dde <_svfiprintf_r+0x1c6>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007caa:	f10a 0a01 	add.w	sl, sl, #1
 8007cae:	9304      	str	r3, [sp, #16]
 8007cb0:	9307      	str	r3, [sp, #28]
 8007cb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cb8:	4654      	mov	r4, sl
 8007cba:	2205      	movs	r2, #5
 8007cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc0:	484e      	ldr	r0, [pc, #312]	@ (8007dfc <_svfiprintf_r+0x1e4>)
 8007cc2:	f7f8 faad 	bl	8000220 <memchr>
 8007cc6:	9a04      	ldr	r2, [sp, #16]
 8007cc8:	b9d8      	cbnz	r0, 8007d02 <_svfiprintf_r+0xea>
 8007cca:	06d0      	lsls	r0, r2, #27
 8007ccc:	bf44      	itt	mi
 8007cce:	2320      	movmi	r3, #32
 8007cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cd4:	0711      	lsls	r1, r2, #28
 8007cd6:	bf44      	itt	mi
 8007cd8:	232b      	movmi	r3, #43	@ 0x2b
 8007cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cde:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ce4:	d015      	beq.n	8007d12 <_svfiprintf_r+0xfa>
 8007ce6:	9a07      	ldr	r2, [sp, #28]
 8007ce8:	4654      	mov	r4, sl
 8007cea:	2000      	movs	r0, #0
 8007cec:	f04f 0c0a 	mov.w	ip, #10
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cf6:	3b30      	subs	r3, #48	@ 0x30
 8007cf8:	2b09      	cmp	r3, #9
 8007cfa:	d94b      	bls.n	8007d94 <_svfiprintf_r+0x17c>
 8007cfc:	b1b0      	cbz	r0, 8007d2c <_svfiprintf_r+0x114>
 8007cfe:	9207      	str	r2, [sp, #28]
 8007d00:	e014      	b.n	8007d2c <_svfiprintf_r+0x114>
 8007d02:	eba0 0308 	sub.w	r3, r0, r8
 8007d06:	fa09 f303 	lsl.w	r3, r9, r3
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	46a2      	mov	sl, r4
 8007d10:	e7d2      	b.n	8007cb8 <_svfiprintf_r+0xa0>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	1d19      	adds	r1, r3, #4
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	9103      	str	r1, [sp, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfbb      	ittet	lt
 8007d1e:	425b      	neglt	r3, r3
 8007d20:	f042 0202 	orrlt.w	r2, r2, #2
 8007d24:	9307      	strge	r3, [sp, #28]
 8007d26:	9307      	strlt	r3, [sp, #28]
 8007d28:	bfb8      	it	lt
 8007d2a:	9204      	strlt	r2, [sp, #16]
 8007d2c:	7823      	ldrb	r3, [r4, #0]
 8007d2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d30:	d10a      	bne.n	8007d48 <_svfiprintf_r+0x130>
 8007d32:	7863      	ldrb	r3, [r4, #1]
 8007d34:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d36:	d132      	bne.n	8007d9e <_svfiprintf_r+0x186>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	1d1a      	adds	r2, r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	9203      	str	r2, [sp, #12]
 8007d40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d44:	3402      	adds	r4, #2
 8007d46:	9305      	str	r3, [sp, #20]
 8007d48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e0c <_svfiprintf_r+0x1f4>
 8007d4c:	7821      	ldrb	r1, [r4, #0]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	4650      	mov	r0, sl
 8007d52:	f7f8 fa65 	bl	8000220 <memchr>
 8007d56:	b138      	cbz	r0, 8007d68 <_svfiprintf_r+0x150>
 8007d58:	9b04      	ldr	r3, [sp, #16]
 8007d5a:	eba0 000a 	sub.w	r0, r0, sl
 8007d5e:	2240      	movs	r2, #64	@ 0x40
 8007d60:	4082      	lsls	r2, r0
 8007d62:	4313      	orrs	r3, r2
 8007d64:	3401      	adds	r4, #1
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6c:	4824      	ldr	r0, [pc, #144]	@ (8007e00 <_svfiprintf_r+0x1e8>)
 8007d6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d72:	2206      	movs	r2, #6
 8007d74:	f7f8 fa54 	bl	8000220 <memchr>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d036      	beq.n	8007dea <_svfiprintf_r+0x1d2>
 8007d7c:	4b21      	ldr	r3, [pc, #132]	@ (8007e04 <_svfiprintf_r+0x1ec>)
 8007d7e:	bb1b      	cbnz	r3, 8007dc8 <_svfiprintf_r+0x1b0>
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	3307      	adds	r3, #7
 8007d84:	f023 0307 	bic.w	r3, r3, #7
 8007d88:	3308      	adds	r3, #8
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d8e:	4433      	add	r3, r6
 8007d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d92:	e76a      	b.n	8007c6a <_svfiprintf_r+0x52>
 8007d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d98:	460c      	mov	r4, r1
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	e7a8      	b.n	8007cf0 <_svfiprintf_r+0xd8>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	3401      	adds	r4, #1
 8007da2:	9305      	str	r3, [sp, #20]
 8007da4:	4619      	mov	r1, r3
 8007da6:	f04f 0c0a 	mov.w	ip, #10
 8007daa:	4620      	mov	r0, r4
 8007dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007db0:	3a30      	subs	r2, #48	@ 0x30
 8007db2:	2a09      	cmp	r2, #9
 8007db4:	d903      	bls.n	8007dbe <_svfiprintf_r+0x1a6>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0c6      	beq.n	8007d48 <_svfiprintf_r+0x130>
 8007dba:	9105      	str	r1, [sp, #20]
 8007dbc:	e7c4      	b.n	8007d48 <_svfiprintf_r+0x130>
 8007dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e7f0      	b.n	8007daa <_svfiprintf_r+0x192>
 8007dc8:	ab03      	add	r3, sp, #12
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	462a      	mov	r2, r5
 8007dce:	4b0e      	ldr	r3, [pc, #56]	@ (8007e08 <_svfiprintf_r+0x1f0>)
 8007dd0:	a904      	add	r1, sp, #16
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f3af 8000 	nop.w
 8007dd8:	1c42      	adds	r2, r0, #1
 8007dda:	4606      	mov	r6, r0
 8007ddc:	d1d6      	bne.n	8007d8c <_svfiprintf_r+0x174>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	065b      	lsls	r3, r3, #25
 8007de2:	f53f af2d 	bmi.w	8007c40 <_svfiprintf_r+0x28>
 8007de6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007de8:	e72c      	b.n	8007c44 <_svfiprintf_r+0x2c>
 8007dea:	ab03      	add	r3, sp, #12
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	462a      	mov	r2, r5
 8007df0:	4b05      	ldr	r3, [pc, #20]	@ (8007e08 <_svfiprintf_r+0x1f0>)
 8007df2:	a904      	add	r1, sp, #16
 8007df4:	4638      	mov	r0, r7
 8007df6:	f000 f879 	bl	8007eec <_printf_i>
 8007dfa:	e7ed      	b.n	8007dd8 <_svfiprintf_r+0x1c0>
 8007dfc:	08008f6c 	.word	0x08008f6c
 8007e00:	08008f76 	.word	0x08008f76
 8007e04:	00000000 	.word	0x00000000
 8007e08:	08007b61 	.word	0x08007b61
 8007e0c:	08008f72 	.word	0x08008f72

08007e10 <_printf_common>:
 8007e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e14:	4616      	mov	r6, r2
 8007e16:	4698      	mov	r8, r3
 8007e18:	688a      	ldr	r2, [r1, #8]
 8007e1a:	690b      	ldr	r3, [r1, #16]
 8007e1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	bfb8      	it	lt
 8007e24:	4613      	movlt	r3, r2
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	b10a      	cbz	r2, 8007e36 <_printf_common+0x26>
 8007e32:	3301      	adds	r3, #1
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	0699      	lsls	r1, r3, #26
 8007e3a:	bf42      	ittt	mi
 8007e3c:	6833      	ldrmi	r3, [r6, #0]
 8007e3e:	3302      	addmi	r3, #2
 8007e40:	6033      	strmi	r3, [r6, #0]
 8007e42:	6825      	ldr	r5, [r4, #0]
 8007e44:	f015 0506 	ands.w	r5, r5, #6
 8007e48:	d106      	bne.n	8007e58 <_printf_common+0x48>
 8007e4a:	f104 0a19 	add.w	sl, r4, #25
 8007e4e:	68e3      	ldr	r3, [r4, #12]
 8007e50:	6832      	ldr	r2, [r6, #0]
 8007e52:	1a9b      	subs	r3, r3, r2
 8007e54:	42ab      	cmp	r3, r5
 8007e56:	dc26      	bgt.n	8007ea6 <_printf_common+0x96>
 8007e58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	3b00      	subs	r3, #0
 8007e60:	bf18      	it	ne
 8007e62:	2301      	movne	r3, #1
 8007e64:	0692      	lsls	r2, r2, #26
 8007e66:	d42b      	bmi.n	8007ec0 <_printf_common+0xb0>
 8007e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	4638      	mov	r0, r7
 8007e70:	47c8      	blx	r9
 8007e72:	3001      	adds	r0, #1
 8007e74:	d01e      	beq.n	8007eb4 <_printf_common+0xa4>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	6922      	ldr	r2, [r4, #16]
 8007e7a:	f003 0306 	and.w	r3, r3, #6
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	bf02      	ittt	eq
 8007e82:	68e5      	ldreq	r5, [r4, #12]
 8007e84:	6833      	ldreq	r3, [r6, #0]
 8007e86:	1aed      	subeq	r5, r5, r3
 8007e88:	68a3      	ldr	r3, [r4, #8]
 8007e8a:	bf0c      	ite	eq
 8007e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e90:	2500      	movne	r5, #0
 8007e92:	4293      	cmp	r3, r2
 8007e94:	bfc4      	itt	gt
 8007e96:	1a9b      	subgt	r3, r3, r2
 8007e98:	18ed      	addgt	r5, r5, r3
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	341a      	adds	r4, #26
 8007e9e:	42b5      	cmp	r5, r6
 8007ea0:	d11a      	bne.n	8007ed8 <_printf_common+0xc8>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e008      	b.n	8007eb8 <_printf_common+0xa8>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	4641      	mov	r1, r8
 8007eac:	4638      	mov	r0, r7
 8007eae:	47c8      	blx	r9
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d103      	bne.n	8007ebc <_printf_common+0xac>
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	e7c6      	b.n	8007e4e <_printf_common+0x3e>
 8007ec0:	18e1      	adds	r1, r4, r3
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	2030      	movs	r0, #48	@ 0x30
 8007ec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007eca:	4422      	add	r2, r4
 8007ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ed0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	e7c7      	b.n	8007e68 <_printf_common+0x58>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4622      	mov	r2, r4
 8007edc:	4641      	mov	r1, r8
 8007ede:	4638      	mov	r0, r7
 8007ee0:	47c8      	blx	r9
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d0e6      	beq.n	8007eb4 <_printf_common+0xa4>
 8007ee6:	3601      	adds	r6, #1
 8007ee8:	e7d9      	b.n	8007e9e <_printf_common+0x8e>
	...

08007eec <_printf_i>:
 8007eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef0:	7e0f      	ldrb	r7, [r1, #24]
 8007ef2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ef4:	2f78      	cmp	r7, #120	@ 0x78
 8007ef6:	4691      	mov	r9, r2
 8007ef8:	4680      	mov	r8, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	469a      	mov	sl, r3
 8007efe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f02:	d807      	bhi.n	8007f14 <_printf_i+0x28>
 8007f04:	2f62      	cmp	r7, #98	@ 0x62
 8007f06:	d80a      	bhi.n	8007f1e <_printf_i+0x32>
 8007f08:	2f00      	cmp	r7, #0
 8007f0a:	f000 80d1 	beq.w	80080b0 <_printf_i+0x1c4>
 8007f0e:	2f58      	cmp	r7, #88	@ 0x58
 8007f10:	f000 80b8 	beq.w	8008084 <_printf_i+0x198>
 8007f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f1c:	e03a      	b.n	8007f94 <_printf_i+0xa8>
 8007f1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f22:	2b15      	cmp	r3, #21
 8007f24:	d8f6      	bhi.n	8007f14 <_printf_i+0x28>
 8007f26:	a101      	add	r1, pc, #4	@ (adr r1, 8007f2c <_printf_i+0x40>)
 8007f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f99 	.word	0x08007f99
 8007f34:	08007f15 	.word	0x08007f15
 8007f38:	08007f15 	.word	0x08007f15
 8007f3c:	08007f15 	.word	0x08007f15
 8007f40:	08007f15 	.word	0x08007f15
 8007f44:	08007f99 	.word	0x08007f99
 8007f48:	08007f15 	.word	0x08007f15
 8007f4c:	08007f15 	.word	0x08007f15
 8007f50:	08007f15 	.word	0x08007f15
 8007f54:	08007f15 	.word	0x08007f15
 8007f58:	08008097 	.word	0x08008097
 8007f5c:	08007fc3 	.word	0x08007fc3
 8007f60:	08008051 	.word	0x08008051
 8007f64:	08007f15 	.word	0x08007f15
 8007f68:	08007f15 	.word	0x08007f15
 8007f6c:	080080b9 	.word	0x080080b9
 8007f70:	08007f15 	.word	0x08007f15
 8007f74:	08007fc3 	.word	0x08007fc3
 8007f78:	08007f15 	.word	0x08007f15
 8007f7c:	08007f15 	.word	0x08007f15
 8007f80:	08008059 	.word	0x08008059
 8007f84:	6833      	ldr	r3, [r6, #0]
 8007f86:	1d1a      	adds	r2, r3, #4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6032      	str	r2, [r6, #0]
 8007f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f94:	2301      	movs	r3, #1
 8007f96:	e09c      	b.n	80080d2 <_printf_i+0x1e6>
 8007f98:	6833      	ldr	r3, [r6, #0]
 8007f9a:	6820      	ldr	r0, [r4, #0]
 8007f9c:	1d19      	adds	r1, r3, #4
 8007f9e:	6031      	str	r1, [r6, #0]
 8007fa0:	0606      	lsls	r6, r0, #24
 8007fa2:	d501      	bpl.n	8007fa8 <_printf_i+0xbc>
 8007fa4:	681d      	ldr	r5, [r3, #0]
 8007fa6:	e003      	b.n	8007fb0 <_printf_i+0xc4>
 8007fa8:	0645      	lsls	r5, r0, #25
 8007faa:	d5fb      	bpl.n	8007fa4 <_printf_i+0xb8>
 8007fac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fb0:	2d00      	cmp	r5, #0
 8007fb2:	da03      	bge.n	8007fbc <_printf_i+0xd0>
 8007fb4:	232d      	movs	r3, #45	@ 0x2d
 8007fb6:	426d      	negs	r5, r5
 8007fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fbc:	4858      	ldr	r0, [pc, #352]	@ (8008120 <_printf_i+0x234>)
 8007fbe:	230a      	movs	r3, #10
 8007fc0:	e011      	b.n	8007fe6 <_printf_i+0xfa>
 8007fc2:	6821      	ldr	r1, [r4, #0]
 8007fc4:	6833      	ldr	r3, [r6, #0]
 8007fc6:	0608      	lsls	r0, r1, #24
 8007fc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fcc:	d402      	bmi.n	8007fd4 <_printf_i+0xe8>
 8007fce:	0649      	lsls	r1, r1, #25
 8007fd0:	bf48      	it	mi
 8007fd2:	b2ad      	uxthmi	r5, r5
 8007fd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fd6:	4852      	ldr	r0, [pc, #328]	@ (8008120 <_printf_i+0x234>)
 8007fd8:	6033      	str	r3, [r6, #0]
 8007fda:	bf14      	ite	ne
 8007fdc:	230a      	movne	r3, #10
 8007fde:	2308      	moveq	r3, #8
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fe6:	6866      	ldr	r6, [r4, #4]
 8007fe8:	60a6      	str	r6, [r4, #8]
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	db05      	blt.n	8007ffa <_printf_i+0x10e>
 8007fee:	6821      	ldr	r1, [r4, #0]
 8007ff0:	432e      	orrs	r6, r5
 8007ff2:	f021 0104 	bic.w	r1, r1, #4
 8007ff6:	6021      	str	r1, [r4, #0]
 8007ff8:	d04b      	beq.n	8008092 <_printf_i+0x1a6>
 8007ffa:	4616      	mov	r6, r2
 8007ffc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008000:	fb03 5711 	mls	r7, r3, r1, r5
 8008004:	5dc7      	ldrb	r7, [r0, r7]
 8008006:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800800a:	462f      	mov	r7, r5
 800800c:	42bb      	cmp	r3, r7
 800800e:	460d      	mov	r5, r1
 8008010:	d9f4      	bls.n	8007ffc <_printf_i+0x110>
 8008012:	2b08      	cmp	r3, #8
 8008014:	d10b      	bne.n	800802e <_printf_i+0x142>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	07df      	lsls	r7, r3, #31
 800801a:	d508      	bpl.n	800802e <_printf_i+0x142>
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	6861      	ldr	r1, [r4, #4]
 8008020:	4299      	cmp	r1, r3
 8008022:	bfde      	ittt	le
 8008024:	2330      	movle	r3, #48	@ 0x30
 8008026:	f806 3c01 	strble.w	r3, [r6, #-1]
 800802a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800802e:	1b92      	subs	r2, r2, r6
 8008030:	6122      	str	r2, [r4, #16]
 8008032:	f8cd a000 	str.w	sl, [sp]
 8008036:	464b      	mov	r3, r9
 8008038:	aa03      	add	r2, sp, #12
 800803a:	4621      	mov	r1, r4
 800803c:	4640      	mov	r0, r8
 800803e:	f7ff fee7 	bl	8007e10 <_printf_common>
 8008042:	3001      	adds	r0, #1
 8008044:	d14a      	bne.n	80080dc <_printf_i+0x1f0>
 8008046:	f04f 30ff 	mov.w	r0, #4294967295
 800804a:	b004      	add	sp, #16
 800804c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	f043 0320 	orr.w	r3, r3, #32
 8008056:	6023      	str	r3, [r4, #0]
 8008058:	4832      	ldr	r0, [pc, #200]	@ (8008124 <_printf_i+0x238>)
 800805a:	2778      	movs	r7, #120	@ 0x78
 800805c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	6831      	ldr	r1, [r6, #0]
 8008064:	061f      	lsls	r7, r3, #24
 8008066:	f851 5b04 	ldr.w	r5, [r1], #4
 800806a:	d402      	bmi.n	8008072 <_printf_i+0x186>
 800806c:	065f      	lsls	r7, r3, #25
 800806e:	bf48      	it	mi
 8008070:	b2ad      	uxthmi	r5, r5
 8008072:	6031      	str	r1, [r6, #0]
 8008074:	07d9      	lsls	r1, r3, #31
 8008076:	bf44      	itt	mi
 8008078:	f043 0320 	orrmi.w	r3, r3, #32
 800807c:	6023      	strmi	r3, [r4, #0]
 800807e:	b11d      	cbz	r5, 8008088 <_printf_i+0x19c>
 8008080:	2310      	movs	r3, #16
 8008082:	e7ad      	b.n	8007fe0 <_printf_i+0xf4>
 8008084:	4826      	ldr	r0, [pc, #152]	@ (8008120 <_printf_i+0x234>)
 8008086:	e7e9      	b.n	800805c <_printf_i+0x170>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	f023 0320 	bic.w	r3, r3, #32
 800808e:	6023      	str	r3, [r4, #0]
 8008090:	e7f6      	b.n	8008080 <_printf_i+0x194>
 8008092:	4616      	mov	r6, r2
 8008094:	e7bd      	b.n	8008012 <_printf_i+0x126>
 8008096:	6833      	ldr	r3, [r6, #0]
 8008098:	6825      	ldr	r5, [r4, #0]
 800809a:	6961      	ldr	r1, [r4, #20]
 800809c:	1d18      	adds	r0, r3, #4
 800809e:	6030      	str	r0, [r6, #0]
 80080a0:	062e      	lsls	r6, r5, #24
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	d501      	bpl.n	80080aa <_printf_i+0x1be>
 80080a6:	6019      	str	r1, [r3, #0]
 80080a8:	e002      	b.n	80080b0 <_printf_i+0x1c4>
 80080aa:	0668      	lsls	r0, r5, #25
 80080ac:	d5fb      	bpl.n	80080a6 <_printf_i+0x1ba>
 80080ae:	8019      	strh	r1, [r3, #0]
 80080b0:	2300      	movs	r3, #0
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	4616      	mov	r6, r2
 80080b6:	e7bc      	b.n	8008032 <_printf_i+0x146>
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	1d1a      	adds	r2, r3, #4
 80080bc:	6032      	str	r2, [r6, #0]
 80080be:	681e      	ldr	r6, [r3, #0]
 80080c0:	6862      	ldr	r2, [r4, #4]
 80080c2:	2100      	movs	r1, #0
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7f8 f8ab 	bl	8000220 <memchr>
 80080ca:	b108      	cbz	r0, 80080d0 <_printf_i+0x1e4>
 80080cc:	1b80      	subs	r0, r0, r6
 80080ce:	6060      	str	r0, [r4, #4]
 80080d0:	6863      	ldr	r3, [r4, #4]
 80080d2:	6123      	str	r3, [r4, #16]
 80080d4:	2300      	movs	r3, #0
 80080d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080da:	e7aa      	b.n	8008032 <_printf_i+0x146>
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	4632      	mov	r2, r6
 80080e0:	4649      	mov	r1, r9
 80080e2:	4640      	mov	r0, r8
 80080e4:	47d0      	blx	sl
 80080e6:	3001      	adds	r0, #1
 80080e8:	d0ad      	beq.n	8008046 <_printf_i+0x15a>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	079b      	lsls	r3, r3, #30
 80080ee:	d413      	bmi.n	8008118 <_printf_i+0x22c>
 80080f0:	68e0      	ldr	r0, [r4, #12]
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	4298      	cmp	r0, r3
 80080f6:	bfb8      	it	lt
 80080f8:	4618      	movlt	r0, r3
 80080fa:	e7a6      	b.n	800804a <_printf_i+0x15e>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4632      	mov	r2, r6
 8008100:	4649      	mov	r1, r9
 8008102:	4640      	mov	r0, r8
 8008104:	47d0      	blx	sl
 8008106:	3001      	adds	r0, #1
 8008108:	d09d      	beq.n	8008046 <_printf_i+0x15a>
 800810a:	3501      	adds	r5, #1
 800810c:	68e3      	ldr	r3, [r4, #12]
 800810e:	9903      	ldr	r1, [sp, #12]
 8008110:	1a5b      	subs	r3, r3, r1
 8008112:	42ab      	cmp	r3, r5
 8008114:	dcf2      	bgt.n	80080fc <_printf_i+0x210>
 8008116:	e7eb      	b.n	80080f0 <_printf_i+0x204>
 8008118:	2500      	movs	r5, #0
 800811a:	f104 0619 	add.w	r6, r4, #25
 800811e:	e7f5      	b.n	800810c <_printf_i+0x220>
 8008120:	08008f7d 	.word	0x08008f7d
 8008124:	08008f8e 	.word	0x08008f8e

08008128 <_realloc_r>:
 8008128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812c:	4607      	mov	r7, r0
 800812e:	4614      	mov	r4, r2
 8008130:	460d      	mov	r5, r1
 8008132:	b921      	cbnz	r1, 800813e <_realloc_r+0x16>
 8008134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	4611      	mov	r1, r2
 800813a:	f7ff bb99 	b.w	8007870 <_malloc_r>
 800813e:	b92a      	cbnz	r2, 800814c <_realloc_r+0x24>
 8008140:	f7ff fcc4 	bl	8007acc <_free_r>
 8008144:	4625      	mov	r5, r4
 8008146:	4628      	mov	r0, r5
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814c:	f000 f81a 	bl	8008184 <_malloc_usable_size_r>
 8008150:	4284      	cmp	r4, r0
 8008152:	4606      	mov	r6, r0
 8008154:	d802      	bhi.n	800815c <_realloc_r+0x34>
 8008156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800815a:	d8f4      	bhi.n	8008146 <_realloc_r+0x1e>
 800815c:	4621      	mov	r1, r4
 800815e:	4638      	mov	r0, r7
 8008160:	f7ff fb86 	bl	8007870 <_malloc_r>
 8008164:	4680      	mov	r8, r0
 8008166:	b908      	cbnz	r0, 800816c <_realloc_r+0x44>
 8008168:	4645      	mov	r5, r8
 800816a:	e7ec      	b.n	8008146 <_realloc_r+0x1e>
 800816c:	42b4      	cmp	r4, r6
 800816e:	4622      	mov	r2, r4
 8008170:	4629      	mov	r1, r5
 8008172:	bf28      	it	cs
 8008174:	4632      	movcs	r2, r6
 8008176:	f7ff fc9b 	bl	8007ab0 <memcpy>
 800817a:	4629      	mov	r1, r5
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff fca5 	bl	8007acc <_free_r>
 8008182:	e7f1      	b.n	8008168 <_realloc_r+0x40>

08008184 <_malloc_usable_size_r>:
 8008184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008188:	1f18      	subs	r0, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	bfbc      	itt	lt
 800818e:	580b      	ldrlt	r3, [r1, r0]
 8008190:	18c0      	addlt	r0, r0, r3
 8008192:	4770      	bx	lr

08008194 <_init>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr

080081a0 <_fini>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	bf00      	nop
 80081a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a6:	bc08      	pop	{r3}
 80081a8:	469e      	mov	lr, r3
 80081aa:	4770      	bx	lr
