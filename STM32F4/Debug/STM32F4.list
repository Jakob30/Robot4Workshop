
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006f70  08006f70  00007f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f88  08006f88  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f88  08006f88  00007f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f90  08006f90  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f90  08006f90  00007f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f94  08006f94  00007f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006f98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  2000005c  08006ff4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08006ff4  0000869c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016073  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad3  00000000  00000000  0001e0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00020bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef2  00000000  00000000  00021ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003015  00000000  00000000  00022dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168fb  00000000  00000000  00025dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6774  00000000  00000000  0003c6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  00112e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001182d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006f58 	.word	0x08006f58

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08006f58 	.word	0x08006f58

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2iz>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a8:	d215      	bcs.n	80009d6 <__aeabi_d2iz+0x36>
 80009aa:	d511      	bpl.n	80009d0 <__aeabi_d2iz+0x30>
 80009ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d912      	bls.n	80009dc <__aeabi_d2iz+0x3c>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009da:	d105      	bne.n	80009e8 <__aeabi_d2iz+0x48>
 80009dc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	bf08      	it	eq
 80009e2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_uldivmod>:
 80009f0:	b953      	cbnz	r3, 8000a08 <__aeabi_uldivmod+0x18>
 80009f2:	b94a      	cbnz	r2, 8000a08 <__aeabi_uldivmod+0x18>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	bf08      	it	eq
 80009f8:	2800      	cmpeq	r0, #0
 80009fa:	bf1c      	itt	ne
 80009fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000a00:	f04f 30ff 	movne.w	r0, #4294967295
 8000a04:	f000 b988 	b.w	8000d18 <__aeabi_idiv0>
 8000a08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a10:	f000 f806 	bl	8000a20 <__udivmoddi4>
 8000a14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1c:	b004      	add	sp, #16
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9d08      	ldr	r5, [sp, #32]
 8000a26:	468e      	mov	lr, r1
 8000a28:	4604      	mov	r4, r0
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14a      	bne.n	8000ac6 <__udivmoddi4+0xa6>
 8000a30:	428a      	cmp	r2, r1
 8000a32:	4617      	mov	r7, r2
 8000a34:	d962      	bls.n	8000afc <__udivmoddi4+0xdc>
 8000a36:	fab2 f682 	clz	r6, r2
 8000a3a:	b14e      	cbz	r6, 8000a50 <__udivmoddi4+0x30>
 8000a3c:	f1c6 0320 	rsb	r3, r6, #32
 8000a40:	fa01 f806 	lsl.w	r8, r1, r6
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	40b7      	lsls	r7, r6
 8000a4a:	ea43 0808 	orr.w	r8, r3, r8
 8000a4e:	40b4      	lsls	r4, r6
 8000a50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a5c:	0c23      	lsrs	r3, r4, #16
 8000a5e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a66:	fb01 f20c 	mul.w	r2, r1, ip
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d909      	bls.n	8000a82 <__udivmoddi4+0x62>
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a74:	f080 80ea 	bcs.w	8000c4c <__udivmoddi4+0x22c>
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	f240 80e7 	bls.w	8000c4c <__udivmoddi4+0x22c>
 8000a7e:	3902      	subs	r1, #2
 8000a80:	443b      	add	r3, r7
 8000a82:	1a9a      	subs	r2, r3, r2
 8000a84:	b2a3      	uxth	r3, r4
 8000a86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a92:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a96:	459c      	cmp	ip, r3
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0x8e>
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa0:	f080 80d6 	bcs.w	8000c50 <__udivmoddi4+0x230>
 8000aa4:	459c      	cmp	ip, r3
 8000aa6:	f240 80d3 	bls.w	8000c50 <__udivmoddi4+0x230>
 8000aaa:	443b      	add	r3, r7
 8000aac:	3802      	subs	r0, #2
 8000aae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab2:	eba3 030c 	sub.w	r3, r3, ip
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	b11d      	cbz	r5, 8000ac2 <__udivmoddi4+0xa2>
 8000aba:	40f3      	lsrs	r3, r6
 8000abc:	2200      	movs	r2, #0
 8000abe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d905      	bls.n	8000ad6 <__udivmoddi4+0xb6>
 8000aca:	b10d      	cbz	r5, 8000ad0 <__udivmoddi4+0xb0>
 8000acc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e7f5      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000ad6:	fab3 f183 	clz	r1, r3
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d146      	bne.n	8000b6c <__udivmoddi4+0x14c>
 8000ade:	4573      	cmp	r3, lr
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xc8>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 8105 	bhi.w	8000cf2 <__udivmoddi4+0x2d2>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	4690      	mov	r8, r2
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e5      	beq.n	8000ac2 <__udivmoddi4+0xa2>
 8000af6:	e9c5 4800 	strd	r4, r8, [r5]
 8000afa:	e7e2      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	f000 8090 	beq.w	8000c22 <__udivmoddi4+0x202>
 8000b02:	fab2 f682 	clz	r6, r2
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f040 80a4 	bne.w	8000c54 <__udivmoddi4+0x234>
 8000b0c:	1a8a      	subs	r2, r1, r2
 8000b0e:	0c03      	lsrs	r3, r0, #16
 8000b10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b14:	b280      	uxth	r0, r0
 8000b16:	b2bc      	uxth	r4, r7
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b1e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b26:	fb04 f20c 	mul.w	r2, r4, ip
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d907      	bls.n	8000b3e <__udivmoddi4+0x11e>
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b34:	d202      	bcs.n	8000b3c <__udivmoddi4+0x11c>
 8000b36:	429a      	cmp	r2, r3
 8000b38:	f200 80e0 	bhi.w	8000cfc <__udivmoddi4+0x2dc>
 8000b3c:	46c4      	mov	ip, r8
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b44:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b48:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b4c:	fb02 f404 	mul.w	r4, r2, r4
 8000b50:	429c      	cmp	r4, r3
 8000b52:	d907      	bls.n	8000b64 <__udivmoddi4+0x144>
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b5a:	d202      	bcs.n	8000b62 <__udivmoddi4+0x142>
 8000b5c:	429c      	cmp	r4, r3
 8000b5e:	f200 80ca 	bhi.w	8000cf6 <__udivmoddi4+0x2d6>
 8000b62:	4602      	mov	r2, r0
 8000b64:	1b1b      	subs	r3, r3, r4
 8000b66:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b6a:	e7a5      	b.n	8000ab8 <__udivmoddi4+0x98>
 8000b6c:	f1c1 0620 	rsb	r6, r1, #32
 8000b70:	408b      	lsls	r3, r1
 8000b72:	fa22 f706 	lsr.w	r7, r2, r6
 8000b76:	431f      	orrs	r7, r3
 8000b78:	fa0e f401 	lsl.w	r4, lr, r1
 8000b7c:	fa20 f306 	lsr.w	r3, r0, r6
 8000b80:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b84:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b8e:	fa1f fc87 	uxth.w	ip, r7
 8000b92:	fbbe f0f9 	udiv	r0, lr, r9
 8000b96:	0c1c      	lsrs	r4, r3, #16
 8000b98:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b9c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ba0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	fa02 f201 	lsl.w	r2, r2, r1
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x1a0>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bb2:	f080 809c 	bcs.w	8000cee <__udivmoddi4+0x2ce>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8099 	bls.w	8000cee <__udivmoddi4+0x2ce>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	eba4 040e 	sub.w	r4, r4, lr
 8000bc4:	fa1f fe83 	uxth.w	lr, r3
 8000bc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bd4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bd8:	45a4      	cmp	ip, r4
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x1ce>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f103 3eff 	add.w	lr, r3, #4294967295
 8000be2:	f080 8082 	bcs.w	8000cea <__udivmoddi4+0x2ca>
 8000be6:	45a4      	cmp	ip, r4
 8000be8:	d97f      	bls.n	8000cea <__udivmoddi4+0x2ca>
 8000bea:	3b02      	subs	r3, #2
 8000bec:	443c      	add	r4, r7
 8000bee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bf2:	eba4 040c 	sub.w	r4, r4, ip
 8000bf6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bfa:	4564      	cmp	r4, ip
 8000bfc:	4673      	mov	r3, lr
 8000bfe:	46e1      	mov	r9, ip
 8000c00:	d362      	bcc.n	8000cc8 <__udivmoddi4+0x2a8>
 8000c02:	d05f      	beq.n	8000cc4 <__udivmoddi4+0x2a4>
 8000c04:	b15d      	cbz	r5, 8000c1e <__udivmoddi4+0x1fe>
 8000c06:	ebb8 0203 	subs.w	r2, r8, r3
 8000c0a:	eb64 0409 	sbc.w	r4, r4, r9
 8000c0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c12:	fa22 f301 	lsr.w	r3, r2, r1
 8000c16:	431e      	orrs	r6, r3
 8000c18:	40cc      	lsrs	r4, r1
 8000c1a:	e9c5 6400 	strd	r6, r4, [r5]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	e74f      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000c22:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c26:	0c01      	lsrs	r1, r0, #16
 8000c28:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c2c:	b280      	uxth	r0, r0
 8000c2e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c32:	463b      	mov	r3, r7
 8000c34:	4638      	mov	r0, r7
 8000c36:	463c      	mov	r4, r7
 8000c38:	46b8      	mov	r8, r7
 8000c3a:	46be      	mov	lr, r7
 8000c3c:	2620      	movs	r6, #32
 8000c3e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c42:	eba2 0208 	sub.w	r2, r2, r8
 8000c46:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c4a:	e766      	b.n	8000b1a <__udivmoddi4+0xfa>
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	e718      	b.n	8000a82 <__udivmoddi4+0x62>
 8000c50:	4610      	mov	r0, r2
 8000c52:	e72c      	b.n	8000aae <__udivmoddi4+0x8e>
 8000c54:	f1c6 0220 	rsb	r2, r6, #32
 8000c58:	fa2e f302 	lsr.w	r3, lr, r2
 8000c5c:	40b7      	lsls	r7, r6
 8000c5e:	40b1      	lsls	r1, r6
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c6e:	b2bc      	uxth	r4, r7
 8000c70:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c74:	0c11      	lsrs	r1, r2, #16
 8000c76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7a:	fb08 f904 	mul.w	r9, r8, r4
 8000c7e:	40b0      	lsls	r0, r6
 8000c80:	4589      	cmp	r9, r1
 8000c82:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c86:	b280      	uxth	r0, r0
 8000c88:	d93e      	bls.n	8000d08 <__udivmoddi4+0x2e8>
 8000c8a:	1879      	adds	r1, r7, r1
 8000c8c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c90:	d201      	bcs.n	8000c96 <__udivmoddi4+0x276>
 8000c92:	4589      	cmp	r9, r1
 8000c94:	d81f      	bhi.n	8000cd6 <__udivmoddi4+0x2b6>
 8000c96:	eba1 0109 	sub.w	r1, r1, r9
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fb09 f804 	mul.w	r8, r9, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cac:	4542      	cmp	r2, r8
 8000cae:	d229      	bcs.n	8000d04 <__udivmoddi4+0x2e4>
 8000cb0:	18ba      	adds	r2, r7, r2
 8000cb2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cb6:	d2c4      	bcs.n	8000c42 <__udivmoddi4+0x222>
 8000cb8:	4542      	cmp	r2, r8
 8000cba:	d2c2      	bcs.n	8000c42 <__udivmoddi4+0x222>
 8000cbc:	f1a9 0102 	sub.w	r1, r9, #2
 8000cc0:	443a      	add	r2, r7
 8000cc2:	e7be      	b.n	8000c42 <__udivmoddi4+0x222>
 8000cc4:	45f0      	cmp	r8, lr
 8000cc6:	d29d      	bcs.n	8000c04 <__udivmoddi4+0x1e4>
 8000cc8:	ebbe 0302 	subs.w	r3, lr, r2
 8000ccc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	46e1      	mov	r9, ip
 8000cd4:	e796      	b.n	8000c04 <__udivmoddi4+0x1e4>
 8000cd6:	eba7 0909 	sub.w	r9, r7, r9
 8000cda:	4449      	add	r1, r9
 8000cdc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ce0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce4:	fb09 f804 	mul.w	r8, r9, r4
 8000ce8:	e7db      	b.n	8000ca2 <__udivmoddi4+0x282>
 8000cea:	4673      	mov	r3, lr
 8000cec:	e77f      	b.n	8000bee <__udivmoddi4+0x1ce>
 8000cee:	4650      	mov	r0, sl
 8000cf0:	e766      	b.n	8000bc0 <__udivmoddi4+0x1a0>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e6fd      	b.n	8000af2 <__udivmoddi4+0xd2>
 8000cf6:	443b      	add	r3, r7
 8000cf8:	3a02      	subs	r2, #2
 8000cfa:	e733      	b.n	8000b64 <__udivmoddi4+0x144>
 8000cfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d00:	443b      	add	r3, r7
 8000d02:	e71c      	b.n	8000b3e <__udivmoddi4+0x11e>
 8000d04:	4649      	mov	r1, r9
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x222>
 8000d08:	eba1 0109 	sub.w	r1, r1, r9
 8000d0c:	46c4      	mov	ip, r8
 8000d0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d12:	fb09 f804 	mul.w	r8, r9, r4
 8000d16:	e7c4      	b.n	8000ca2 <__udivmoddi4+0x282>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	f5ad 6d0c 	sub.w	sp, sp, #2240	@ 0x8c0
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f003 f826 	bl	8003d74 <HAL_Init>
  motor_t motor2;
  motor_t motor3;
  motor_t motor4;
  motor_t motor5;

  motors[0] = &motor1;
 8000d28:	4a32      	ldr	r2, [pc, #200]	@ (8000df4 <main+0xd8>)
 8000d2a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000d2e:	6013      	str	r3, [r2, #0]
  motors[1] = &motor2;
 8000d30:	4a30      	ldr	r2, [pc, #192]	@ (8000df4 <main+0xd8>)
 8000d32:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000d36:	6053      	str	r3, [r2, #4]
  motors[2] = &motor3;
 8000d38:	4a2e      	ldr	r2, [pc, #184]	@ (8000df4 <main+0xd8>)
 8000d3a:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8000d3e:	6093      	str	r3, [r2, #8]
  motors[3] = &motor4;
 8000d40:	4a2c      	ldr	r2, [pc, #176]	@ (8000df4 <main+0xd8>)
 8000d42:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d46:	60d3      	str	r3, [r2, #12]
  motors[4] = &motor5;
 8000d48:	4a2a      	ldr	r2, [pc, #168]	@ (8000df4 <main+0xd8>)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	6113      	str	r3, [r2, #16]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f853 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fd33 	bl	80017bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 fcb3 	bl	80016c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d5a:	f000 fc87 	bl	800166c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000d5e:	f000 f8b9 	bl	8000ed4 <MX_I2C1_Init>
  MX_UART4_Init();
 8000d62:	f000 fc2f 	bl	80015c4 <MX_UART4_Init>
  MX_UART5_Init();
 8000d66:	f000 fc57 	bl	8001618 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000d6a:	f000 fcd3 	bl	8001714 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000d6e:	f000 fcfb 	bl	8001768 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000d72:	f000 f92d 	bl	8000fd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d76:	f000 f99f 	bl	80010b8 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000d7a:	f000 fb1b 	bl	80013b4 <MX_TIM9_Init>
  MX_TIM8_Init();
 8000d7e:	f000 fa7b 	bl	8001278 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000d82:	f000 fb75 	bl	8001470 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000d86:	f000 fbd3 	bl	8001530 <MX_TIM13_Init>
  MX_TIM1_Init();
 8000d8a:	f000 f8d1 	bl	8000f30 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000d8e:	f000 fa07 	bl	80011a0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d92:	f000 fa3b 	bl	800120c <MX_TIM7_Init>
  MX_TIM10_Init();
 8000d96:	f000 fb47 	bl	8001428 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_motor_1(&motor1, &driver1);
 8000d9a:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8000d9e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fbdf 	bl	8003568 <init_motor_1>
  init_motor_2(&motor2, &driver2);
 8000daa:	f507 62fc 	add.w	r2, r7, #2016	@ 0x7e0
 8000dae:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 fc89 	bl	80036cc <init_motor_2>
  init_motor_3(&motor3, &driver3);
 8000dba:	f507 62ee 	add.w	r2, r7, #1904	@ 0x770
 8000dbe:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fd4f 	bl	8003868 <init_motor_3>
  init_motor_4(&motor4, &driver4);
 8000dca:	f507 62e0 	add.w	r2, r7, #1792	@ 0x700
 8000dce:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fe03 	bl	80039e0 <init_motor_4>
  init_motor_5(&motor5, &driver5);
 8000dda:	f507 62d2 	add.w	r2, r7, #1680	@ 0x690
 8000dde:	463b      	mov	r3, r7
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 feb0 	bl	8003b48 <init_motor_5>
//
//  HAL_Delay(2000);
//  moveDegrees(90, &motor2);
//  moveDegrees(90, &motor4);

  goHome();
 8000de8:	f002 fa1c 	bl	8003224 <goHome>
  grip();
 8000dec:	f002 f9be 	bl	800316c <grip>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <main+0xd4>
 8000df4:	2000054c 	.word	0x2000054c

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	@ 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2234      	movs	r2, #52	@ 0x34
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f006 f865 	bl	8006ed6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	4a29      	ldr	r2, [pc, #164]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <SystemClock_Config+0xd8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e44:	4a22      	ldr	r2, [pc, #136]	@ (8000ed0 <SystemClock_Config+0xd8>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <SystemClock_Config+0xd8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e60:	2310      	movs	r3, #16
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e76:	2304      	movs	r3, #4
 8000e78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 ff7e 	bl	8004d88 <HAL_RCC_OscConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e92:	f000 fd6d 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fc1e 	bl	80046f4 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ebe:	f000 fd57 	bl	8001970 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	@ 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <MX_I2C1_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f12:	f003 faab 	bl	800446c <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 fd28 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000078 	.word	0x20000078
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	000186a0 	.word	0x000186a0

08000f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <MX_TIM1_Init+0x9c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f54:	2253      	movs	r2, #83	@ 0x53
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f78:	4813      	ldr	r0, [pc, #76]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f7a:	f004 f9a3 	bl	80052c4 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f84:	f000 fcf4 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000f96:	f004 fdfd 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fa0:	f000 fce6 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_TIM1_Init+0x98>)
 8000fb2:	f005 f9eb 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 fcd8 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000cc 	.word	0x200000cc
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	@ 0x38
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001000:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001002:	4a2c      	ldr	r2, [pc, #176]	@ (80010b4 <MX_TIM3_Init+0xe4>)
 8001004:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001006:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001008:	2229      	movs	r2, #41	@ 0x29
 800100a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001012:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001018:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b25      	ldr	r3, [pc, #148]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001026:	4822      	ldr	r0, [pc, #136]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001028:	f004 f94c 	bl	80052c4 <HAL_TIM_Base_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001032:	f000 fc9d 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001036:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800103c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001040:	4619      	mov	r1, r3
 8001042:	481b      	ldr	r0, [pc, #108]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001044:	f004 fda6 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800104e:	f000 fc8f 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001052:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001054:	f004 fa25 	bl	80054a2 <HAL_TIM_OC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800105e:	f000 fc87 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	4619      	mov	r1, r3
 8001070:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001072:	f005 f98b 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800107c:	f000 fc78 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <MX_TIM3_Init+0xe0>)
 8001098:	f004 fd20 	bl	8005adc <HAL_TIM_OC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010a2:	f000 fc65 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3738      	adds	r7, #56	@ 0x38
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000114 	.word	0x20000114
 80010b4:	40000400 	.word	0x40000400

080010b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	@ 0x38
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <MX_TIM4_Init+0xe0>)
 80010ea:	4a2c      	ldr	r2, [pc, #176]	@ (800119c <MX_TIM4_Init+0xe4>)
 80010ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <MX_TIM4_Init+0xe0>)
 80010f0:	2229      	movs	r2, #41	@ 0x29
 80010f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <MX_TIM4_Init+0xe0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010fa:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <MX_TIM4_Init+0xe0>)
 80010fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001100:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <MX_TIM4_Init+0xe0>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_TIM4_Init+0xe0>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800110e:	4822      	ldr	r0, [pc, #136]	@ (8001198 <MX_TIM4_Init+0xe0>)
 8001110:	f004 f8d8 	bl	80052c4 <HAL_TIM_Base_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800111a:	f000 fc29 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001124:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001128:	4619      	mov	r1, r3
 800112a:	481b      	ldr	r0, [pc, #108]	@ (8001198 <MX_TIM4_Init+0xe0>)
 800112c:	f004 fd32 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001136:	f000 fc1b 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800113a:	4817      	ldr	r0, [pc, #92]	@ (8001198 <MX_TIM4_Init+0xe0>)
 800113c:	f004 f9b1 	bl	80054a2 <HAL_TIM_OC_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001146:	f000 fc13 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	4619      	mov	r1, r3
 8001158:	480f      	ldr	r0, [pc, #60]	@ (8001198 <MX_TIM4_Init+0xe0>)
 800115a:	f005 f917 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001164:	f000 fc04 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	@ (8001198 <MX_TIM4_Init+0xe0>)
 8001180:	f004 fcac 	bl	8005adc <HAL_TIM_OC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800118a:	f000 fbf1 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	@ 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000015c 	.word	0x2000015c
 800119c:	40000800 	.word	0x40000800

080011a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <MX_TIM6_Init+0x64>)
 80011b0:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <MX_TIM6_Init+0x68>)
 80011b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 839;
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_TIM6_Init+0x64>)
 80011b6:	f240 3247 	movw	r2, #839	@ 0x347
 80011ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_TIM6_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_TIM6_Init+0x64>)
 80011c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_TIM6_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d0:	480c      	ldr	r0, [pc, #48]	@ (8001204 <MX_TIM6_Init+0x64>)
 80011d2:	f004 f877 	bl	80052c4 <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011dc:	f000 fbc8 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_TIM6_Init+0x64>)
 80011ee:	f005 f8cd 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011f8:	f000 fbba 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001a4 	.word	0x200001a4
 8001208:	40001000 	.word	0x40001000

0800120c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_TIM7_Init+0x64>)
 800121c:	4a15      	ldr	r2, [pc, #84]	@ (8001274 <MX_TIM7_Init+0x68>)
 800121e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 839;
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <MX_TIM7_Init+0x64>)
 8001222:	f240 3247 	movw	r2, #839	@ 0x347
 8001226:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_TIM7_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <MX_TIM7_Init+0x64>)
 8001230:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001234:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <MX_TIM7_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <MX_TIM7_Init+0x64>)
 800123e:	f004 f841 	bl	80052c4 <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001248:	f000 fb92 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_TIM7_Init+0x64>)
 800125a:	f005 f897 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001264:	f000 fb84 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200001ec 	.word	0x200001ec
 8001274:	40001400 	.word	0x40001400

08001278 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b096      	sub	sp, #88	@ 0x58
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2220      	movs	r2, #32
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 fe10 	bl	8006ed6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012b6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <MX_TIM8_Init+0x134>)
 80012b8:	4a3d      	ldr	r2, [pc, #244]	@ (80013b0 <MX_TIM8_Init+0x138>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 80012bc:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <MX_TIM8_Init+0x134>)
 80012be:	2229      	movs	r2, #41	@ 0x29
 80012c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b3a      	ldr	r3, [pc, #232]	@ (80013ac <MX_TIM8_Init+0x134>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012c8:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <MX_TIM8_Init+0x134>)
 80012ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b36      	ldr	r3, [pc, #216]	@ (80013ac <MX_TIM8_Init+0x134>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012d6:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <MX_TIM8_Init+0x134>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <MX_TIM8_Init+0x134>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012e2:	4832      	ldr	r0, [pc, #200]	@ (80013ac <MX_TIM8_Init+0x134>)
 80012e4:	f003 ffee 	bl	80052c4 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80012ee:	f000 fb3f 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012fc:	4619      	mov	r1, r3
 80012fe:	482b      	ldr	r0, [pc, #172]	@ (80013ac <MX_TIM8_Init+0x134>)
 8001300:	f004 fc48 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800130a:	f000 fb31 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800130e:	4827      	ldr	r0, [pc, #156]	@ (80013ac <MX_TIM8_Init+0x134>)
 8001310:	f004 f8c7 	bl	80054a2 <HAL_TIM_OC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800131a:	f000 fb29 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001326:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800132a:	4619      	mov	r1, r3
 800132c:	481f      	ldr	r0, [pc, #124]	@ (80013ac <MX_TIM8_Init+0x134>)
 800132e:	f005 f82d 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001338:	f000 fb1a 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	4812      	ldr	r0, [pc, #72]	@ (80013ac <MX_TIM8_Init+0x134>)
 8001362:	f004 fbbb 	bl	8005adc <HAL_TIM_OC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800136c:	f000 fb00 	bl	8001970 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001384:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001388:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <MX_TIM8_Init+0x134>)
 8001394:	f005 f876 	bl	8006484 <HAL_TIMEx_ConfigBreakDeadTime>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800139e:	f000 fae7 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3758      	adds	r7, #88	@ 0x58
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000234 	.word	0x20000234
 80013b0:	40010400 	.word	0x40010400

080013b4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <MX_TIM9_Init+0x6c>)
 80013c8:	4a16      	ldr	r2, [pc, #88]	@ (8001424 <MX_TIM9_Init+0x70>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_TIM9_Init+0x6c>)
 80013ce:	f240 3247 	movw	r2, #839	@ 0x347
 80013d2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_TIM9_Init+0x6c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <MX_TIM9_Init+0x6c>)
 80013dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013e0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MX_TIM9_Init+0x6c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <MX_TIM9_Init+0x6c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013ee:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_TIM9_Init+0x6c>)
 80013f0:	f003 ff68 	bl	80052c4 <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80013fa:	f000 fab9 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001402:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_TIM9_Init+0x6c>)
 800140a:	f004 fbc3 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001414:	f000 faac 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000027c 	.word	0x2000027c
 8001424:	40014000 	.word	0x40014000

08001428 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <MX_TIM10_Init+0x40>)
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <MX_TIM10_Init+0x44>)
 8001430:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <MX_TIM10_Init+0x40>)
 8001434:	f240 3247 	movw	r2, #839	@ 0x347
 8001438:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <MX_TIM10_Init+0x40>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_TIM10_Init+0x40>)
 8001442:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001446:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <MX_TIM10_Init+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_TIM10_Init+0x40>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_TIM10_Init+0x40>)
 8001456:	f003 ff35 	bl	80052c4 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001460:	f000 fa86 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002c4 	.word	0x200002c4
 800146c:	40014400 	.word	0x40014400

08001470 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <MX_TIM12_Init+0xb8>)
 8001498:	4a24      	ldr	r2, [pc, #144]	@ (800152c <MX_TIM12_Init+0xbc>)
 800149a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 800149c:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <MX_TIM12_Init+0xb8>)
 800149e:	2229      	movs	r2, #41	@ 0x29
 80014a0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <MX_TIM12_Init+0xb8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <MX_TIM12_Init+0xb8>)
 80014aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <MX_TIM12_Init+0xb8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <MX_TIM12_Init+0xb8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80014bc:	481a      	ldr	r0, [pc, #104]	@ (8001528 <MX_TIM12_Init+0xb8>)
 80014be:	f003 ff01 	bl	80052c4 <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80014c8:	f000 fa52 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	4619      	mov	r1, r3
 80014d8:	4813      	ldr	r0, [pc, #76]	@ (8001528 <MX_TIM12_Init+0xb8>)
 80014da:	f004 fb5b 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80014e4:	f000 fa44 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 80014e8:	480f      	ldr	r0, [pc, #60]	@ (8001528 <MX_TIM12_Init+0xb8>)
 80014ea:	f003 ffda 	bl	80054a2 <HAL_TIM_OC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80014f4:	f000 fa3c 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	@ (8001528 <MX_TIM12_Init+0xb8>)
 8001510:	f004 fae4 	bl	8005adc <HAL_TIM_OC_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800151a:	f000 fa29 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3730      	adds	r7, #48	@ 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000030c 	.word	0x2000030c
 800152c:	40001800 	.word	0x40001800

08001530 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_TIM13_Init+0x8c>)
 800154a:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <MX_TIM13_Init+0x90>)
 800154c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_TIM13_Init+0x8c>)
 8001550:	2229      	movs	r2, #41	@ 0x29
 8001552:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_TIM13_Init+0x8c>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800155a:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <MX_TIM13_Init+0x8c>)
 800155c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001560:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_TIM13_Init+0x8c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_TIM13_Init+0x8c>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800156e:	4813      	ldr	r0, [pc, #76]	@ (80015bc <MX_TIM13_Init+0x8c>)
 8001570:	f003 fea8 	bl	80052c4 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800157a:	f000 f9f9 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 800157e:	480f      	ldr	r0, [pc, #60]	@ (80015bc <MX_TIM13_Init+0x8c>)
 8001580:	f003 ff8f 	bl	80054a2 <HAL_TIM_OC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800158a:	f000 f9f1 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_TIM13_Init+0x8c>)
 80015a6:	f004 fa99 	bl	8005adc <HAL_TIM_OC_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80015b0:	f000 f9de 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000354 	.word	0x20000354
 80015c0:	40001c00 	.word	0x40001c00

080015c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_UART4_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_UART4_Init+0x4c>)
 80015fc:	f004 ffa8 	bl	8006550 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001606:	f000 f9b3 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000039c 	.word	0x2000039c
 8001614:	40004c00 	.word	0x40004c00

08001618 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_UART5_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <MX_UART5_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_UART5_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_UART5_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_UART5_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <MX_UART5_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_UART5_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <MX_UART5_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_UART5_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_UART5_Init+0x4c>)
 8001650:	f004 ff7e 	bl	8006550 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f989 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003e4 	.word	0x200003e4
 8001668:	40005000 	.word	0x40005000

0800166c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <MX_USART1_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 80016a4:	f004 ff54 	bl	8006550 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f95f 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000042c 	.word	0x2000042c
 80016bc:	40011000 	.word	0x40011000

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <MX_USART2_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f8:	f004 ff2a 	bl	8006550 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f935 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000474 	.word	0x20000474
 8001710:	40004400 	.word	0x40004400

08001714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 800171a:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <MX_USART3_UART_Init+0x50>)
 800171c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_USART3_UART_Init+0x4c>)
 800174c:	f004 ff00 	bl	8006550 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001756:	f000 f90b 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200004bc 	.word	0x200004bc
 8001764:	40004800 	.word	0x40004800

08001768 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <MX_USART6_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_USART6_UART_Init+0x4c>)
 80017a0:	f004 fed6 	bl	8006550 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f000 f8e1 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000504 	.word	0x20000504
 80017b8:	40011400 	.word	0x40011400

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b62      	ldr	r3, [pc, #392]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a61      	ldr	r2, [pc, #388]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b58      	ldr	r3, [pc, #352]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b54      	ldr	r3, [pc, #336]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a53      	ldr	r2, [pc, #332]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b51      	ldr	r3, [pc, #324]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b4d      	ldr	r3, [pc, #308]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a4c      	ldr	r2, [pc, #304]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b46      	ldr	r3, [pc, #280]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a45      	ldr	r2, [pc, #276]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b43      	ldr	r3, [pc, #268]	@ (8001960 <MX_GPIO_Init+0x1a4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 800185e:	2200      	movs	r2, #0
 8001860:	f640 311f 	movw	r1, #2847	@ 0xb1f
 8001864:	483f      	ldr	r0, [pc, #252]	@ (8001964 <MX_GPIO_Init+0x1a8>)
 8001866:	f002 fdb5 	bl	80043d4 <HAL_GPIO_WritePin>
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001870:	483d      	ldr	r0, [pc, #244]	@ (8001968 <MX_GPIO_Init+0x1ac>)
 8001872:	f002 fdaf 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001876:	2200      	movs	r2, #0
 8001878:	f247 0117 	movw	r1, #28695	@ 0x7017
 800187c:	483b      	ldr	r0, [pc, #236]	@ (800196c <MX_GPIO_Init+0x1b0>)
 800187e:	f002 fda9 	bl	80043d4 <HAL_GPIO_WritePin>
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001882:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001888:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4832      	ldr	r0, [pc, #200]	@ (8001964 <MX_GPIO_Init+0x1a8>)
 800189a:	f002 fbef 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_yellow_Pin LED_green_Pin MOT_EN_3_Pin STEP_3_Pin
                           MOT_EN_5_Pin STEP_5_Pin DIR_5_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 800189e:	f640 331f 	movw	r3, #2847	@ 0xb1f
 80018a2:	617b      	str	r3, [r7, #20]
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	482b      	ldr	r0, [pc, #172]	@ (8001964 <MX_GPIO_Init+0x1a8>)
 80018b8:	f002 fbe0 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 80018bc:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4825      	ldr	r0, [pc, #148]	@ (8001968 <MX_GPIO_Init+0x1ac>)
 80018d2:	f002 fbd3 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_EN_2_Pin STEP_2_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin;
 80018d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	481e      	ldr	r0, [pc, #120]	@ (8001968 <MX_GPIO_Init+0x1ac>)
 80018f0:	f002 fbc4 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin MOT_EN_4_Pin STEP_4_Pin MOT_EN_1_Pin
                           STEP_1_Pin DIR_1_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 80018f4:	f247 0317 	movw	r3, #28695	@ 0x7017
 80018f8:	617b      	str	r3, [r7, #20]
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4817      	ldr	r0, [pc, #92]	@ (800196c <MX_GPIO_Init+0x1b0>)
 800190e:	f002 fbb5 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB5 DIAG_3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|DIAG_3_Pin;
 8001912:	f248 2320 	movw	r3, #33312	@ 0x8220
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4811      	ldr	r0, [pc, #68]	@ (800196c <MX_GPIO_Init+0x1b0>)
 8001928:	f002 fba8 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800192c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4808      	ldr	r0, [pc, #32]	@ (8001964 <MX_GPIO_Init+0x1a8>)
 8001942:	f002 fb9b 	bl	800407c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2028      	movs	r0, #40	@ 0x28
 800194c:	f002 fb5f 	bl	800400e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001950:	2028      	movs	r0, #40	@ 0x28
 8001952:	f002 fb78 	bl	8004046 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	@ 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020800 	.word	0x40020800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <Error_Handler+0x8>

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <HAL_MspInit+0x4c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <HAL_MspInit+0x4c>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001990:	6453      	str	r3, [r2, #68]	@ 0x44
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ba:	2007      	movs	r0, #7
 80019bc:	f002 fb1c 	bl	8003ff8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800

080019cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	@ 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	@ (8001a50 <HAL_I2C_MspInit+0x84>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12b      	bne.n	8001a46 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_I2C_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <HAL_I2C_MspInit+0x88>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_I2C_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a0a:	23c0      	movs	r3, #192	@ 0xc0
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0e:	2312      	movs	r3, #18
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	480c      	ldr	r0, [pc, #48]	@ (8001a58 <HAL_I2C_MspInit+0x8c>)
 8001a26:	f002 fb29 	bl	800407c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_I2C_MspInit+0x88>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <HAL_I2C_MspInit+0x88>)
 8001a34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_I2C_MspInit+0x88>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40005400 	.word	0x40005400
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020400 	.word	0x40020400

08001a5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	@ 0x30
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a98      	ldr	r2, [pc, #608]	@ (8001ccc <HAL_TIM_Base_MspInit+0x270>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d11e      	bne.n	8001aac <HAL_TIM_Base_MspInit+0x50>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a72:	4b97      	ldr	r3, [pc, #604]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a96      	ldr	r2, [pc, #600]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b94      	ldr	r3, [pc, #592]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2018      	movs	r0, #24
 8001a90:	f002 fabd 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a94:	2018      	movs	r0, #24
 8001a96:	f002 fad6 	bl	8004046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2019      	movs	r0, #25
 8001aa0:	f002 fab5 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001aa4:	2019      	movs	r0, #25
 8001aa6:	f002 face 	bl	8004046 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001aaa:	e10a      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a88      	ldr	r2, [pc, #544]	@ (8001cd4 <HAL_TIM_Base_MspInit+0x278>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d116      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aba:	4b85      	ldr	r3, [pc, #532]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a84      	ldr	r2, [pc, #528]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b82      	ldr	r3, [pc, #520]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	201d      	movs	r0, #29
 8001ad8:	f002 fa99 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001adc:	201d      	movs	r0, #29
 8001ade:	f002 fab2 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001ae2:	e0ee      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM4)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a7b      	ldr	r2, [pc, #492]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x27c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d116      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af2:	4b77      	ldr	r3, [pc, #476]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	4a76      	ldr	r2, [pc, #472]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afe:	4b74      	ldr	r3, [pc, #464]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	201e      	movs	r0, #30
 8001b10:	f002 fa7d 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b14:	201e      	movs	r0, #30
 8001b16:	f002 fa96 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001b1a:	e0d2      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM6)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6e      	ldr	r2, [pc, #440]	@ (8001cdc <HAL_TIM_Base_MspInit+0x280>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d116      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
 8001b2a:	4b69      	ldr	r3, [pc, #420]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a68      	ldr	r2, [pc, #416]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b66      	ldr	r3, [pc, #408]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	623b      	str	r3, [r7, #32]
 8001b40:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2036      	movs	r0, #54	@ 0x36
 8001b48:	f002 fa61 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b4c:	2036      	movs	r0, #54	@ 0x36
 8001b4e:	f002 fa7a 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001b52:	e0b6      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM7)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a61      	ldr	r2, [pc, #388]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x284>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d116      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	4b5b      	ldr	r3, [pc, #364]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	4a5a      	ldr	r2, [pc, #360]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001b68:	f043 0320 	orr.w	r3, r3, #32
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6e:	4b58      	ldr	r3, [pc, #352]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2037      	movs	r0, #55	@ 0x37
 8001b80:	f002 fa45 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b84:	2037      	movs	r0, #55	@ 0x37
 8001b86:	f002 fa5e 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001b8a:	e09a      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM8)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a54      	ldr	r2, [pc, #336]	@ (8001ce4 <HAL_TIM_Base_MspInit+0x288>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d126      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	202b      	movs	r0, #43	@ 0x2b
 8001bb8:	f002 fa29 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001bbc:	202b      	movs	r0, #43	@ 0x2b
 8001bbe:	f002 fa42 	bl	8004046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	202c      	movs	r0, #44	@ 0x2c
 8001bc8:	f002 fa21 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bcc:	202c      	movs	r0, #44	@ 0x2c
 8001bce:	f002 fa3a 	bl	8004046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	202e      	movs	r0, #46	@ 0x2e
 8001bd8:	f002 fa19 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001bdc:	202e      	movs	r0, #46	@ 0x2e
 8001bde:	f002 fa32 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001be2:	e06e      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM9)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x28c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d116      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	4a36      	ldr	r2, [pc, #216]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2018      	movs	r0, #24
 8001c10:	f002 f9fd 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c14:	2018      	movs	r0, #24
 8001c16:	f002 fa16 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001c1a:	e052      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM10)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a32      	ldr	r2, [pc, #200]	@ (8001cec <HAL_TIM_Base_MspInit+0x290>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d116      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a28      	ldr	r2, [pc, #160]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2019      	movs	r0, #25
 8001c48:	f002 f9e1 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c4c:	2019      	movs	r0, #25
 8001c4e:	f002 f9fa 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001c52:	e036      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM12)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a25      	ldr	r2, [pc, #148]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x294>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d116      	bne.n	8001c8c <HAL_TIM_Base_MspInit+0x230>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	202b      	movs	r0, #43	@ 0x2b
 8001c80:	f002 f9c5 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001c84:	202b      	movs	r0, #43	@ 0x2b
 8001c86:	f002 f9de 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001c8a:	e01a      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM13)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x298>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d115      	bne.n	8001cc2 <HAL_TIM_Base_MspInit+0x266>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x274>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	202c      	movs	r0, #44	@ 0x2c
 8001cb8:	f002 f9a9 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001cbc:	202c      	movs	r0, #44	@ 0x2c
 8001cbe:	f002 f9c2 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3730      	adds	r7, #48	@ 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	40001000 	.word	0x40001000
 8001ce0:	40001400 	.word	0x40001400
 8001ce4:	40010400 	.word	0x40010400
 8001ce8:	40014000 	.word	0x40014000
 8001cec:	40014400 	.word	0x40014400
 8001cf0:	40001800 	.word	0x40001800
 8001cf4:	40001c00 	.word	0x40001c00

08001cf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b096      	sub	sp, #88	@ 0x58
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a9b      	ldr	r2, [pc, #620]	@ (8001f84 <HAL_UART_MspInit+0x28c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12c      	bne.n	8001d74 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d1e:	4b9a      	ldr	r3, [pc, #616]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a99      	ldr	r2, [pc, #612]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b97      	ldr	r3, [pc, #604]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d3a:	4b93      	ldr	r3, [pc, #588]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a92      	ldr	r2, [pc, #584]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b90      	ldr	r3, [pc, #576]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d52:	2303      	movs	r3, #3
 8001d54:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d62:	2308      	movs	r3, #8
 8001d64:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4887      	ldr	r0, [pc, #540]	@ (8001f8c <HAL_UART_MspInit+0x294>)
 8001d6e:	f002 f985 	bl	800407c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d72:	e14c      	b.n	800200e <HAL_UART_MspInit+0x316>
  else if(huart->Instance==UART5)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a85      	ldr	r2, [pc, #532]	@ (8001f90 <HAL_UART_MspInit+0x298>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d14b      	bne.n	8001e16 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d82:	4b81      	ldr	r3, [pc, #516]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a80      	ldr	r2, [pc, #512]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a79      	ldr	r2, [pc, #484]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b77      	ldr	r3, [pc, #476]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dba:	4b73      	ldr	r3, [pc, #460]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a72      	ldr	r2, [pc, #456]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b70      	ldr	r3, [pc, #448]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001dd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001de4:	2308      	movs	r3, #8
 8001de6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001dec:	4619      	mov	r1, r3
 8001dee:	4869      	ldr	r0, [pc, #420]	@ (8001f94 <HAL_UART_MspInit+0x29c>)
 8001df0:	f002 f944 	bl	800407c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001df4:	2304      	movs	r3, #4
 8001df6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e04:	2308      	movs	r3, #8
 8001e06:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e08:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4862      	ldr	r0, [pc, #392]	@ (8001f98 <HAL_UART_MspInit+0x2a0>)
 8001e10:	f002 f934 	bl	800407c <HAL_GPIO_Init>
}
 8001e14:	e0fb      	b.n	800200e <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a60      	ldr	r2, [pc, #384]	@ (8001f9c <HAL_UART_MspInit+0x2a4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d12d      	bne.n	8001e7c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e24:	4b58      	ldr	r3, [pc, #352]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e28:	4a57      	ldr	r2, [pc, #348]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e30:	4b55      	ldr	r3, [pc, #340]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e40:	4b51      	ldr	r3, [pc, #324]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	4a50      	ldr	r2, [pc, #320]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e5c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e72:	4619      	mov	r1, r3
 8001e74:	4845      	ldr	r0, [pc, #276]	@ (8001f8c <HAL_UART_MspInit+0x294>)
 8001e76:	f002 f901 	bl	800407c <HAL_GPIO_Init>
}
 8001e7a:	e0c8      	b.n	800200e <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a47      	ldr	r2, [pc, #284]	@ (8001fa0 <HAL_UART_MspInit+0x2a8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12c      	bne.n	8001ee0 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b3c      	ldr	r3, [pc, #240]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	4b38      	ldr	r3, [pc, #224]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a37      	ldr	r2, [pc, #220]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b35      	ldr	r3, [pc, #212]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	482c      	ldr	r0, [pc, #176]	@ (8001f8c <HAL_UART_MspInit+0x294>)
 8001eda:	f002 f8cf 	bl	800407c <HAL_GPIO_Init>
}
 8001ede:	e096      	b.n	800200e <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART3)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa4 <HAL_UART_MspInit+0x2ac>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d160      	bne.n	8001fac <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a25      	ldr	r2, [pc, #148]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <HAL_UART_MspInit+0x290>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f52:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f56:	4619      	mov	r1, r3
 8001f58:	480e      	ldr	r0, [pc, #56]	@ (8001f94 <HAL_UART_MspInit+0x29c>)
 8001f5a:	f002 f88f 	bl	800407c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f62:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f70:	2307      	movs	r3, #7
 8001f72:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480b      	ldr	r0, [pc, #44]	@ (8001fa8 <HAL_UART_MspInit+0x2b0>)
 8001f7c:	f002 f87e 	bl	800407c <HAL_GPIO_Init>
}
 8001f80:	e045      	b.n	800200e <HAL_UART_MspInit+0x316>
 8001f82:	bf00      	nop
 8001f84:	40004c00 	.word	0x40004c00
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40005000 	.word	0x40005000
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40011000 	.word	0x40011000
 8001fa0:	40004400 	.word	0x40004400
 8001fa4:	40004800 	.word	0x40004800
 8001fa8:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <HAL_UART_MspInit+0x320>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d12b      	bne.n	800200e <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_UART_MspInit+0x324>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	4a17      	ldr	r2, [pc, #92]	@ (800201c <HAL_UART_MspInit+0x324>)
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <HAL_UART_MspInit+0x324>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_UART_MspInit+0x324>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a10      	ldr	r2, [pc, #64]	@ (800201c <HAL_UART_MspInit+0x324>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <HAL_UART_MspInit+0x324>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fee:	23c0      	movs	r3, #192	@ 0xc0
 8001ff0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ffe:	2308      	movs	r3, #8
 8002000:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	@ (8002020 <HAL_UART_MspInit+0x328>)
 800200a:	f002 f837 	bl	800407c <HAL_GPIO_Init>
}
 800200e:	bf00      	nop
 8002010:	3758      	adds	r7, #88	@ 0x58
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40011400 	.word	0x40011400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020800 	.word	0x40020800

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <NMI_Handler+0x4>

0800202c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <MemManage_Handler+0x4>

0800203c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <UsageFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207a:	f001 fecd 	bl	8003e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002088:	4803      	ldr	r0, [pc, #12]	@ (8002098 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800208a:	f003 fc37 	bl	80058fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800208e:	4803      	ldr	r0, [pc, #12]	@ (800209c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002090:	f003 fc34 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200000cc 	.word	0x200000cc
 800209c:	2000027c 	.word	0x2000027c

080020a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a4:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80020a6:	f003 fc29 	bl	80058fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80020ac:	f003 fc26 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200000cc 	.word	0x200000cc
 80020b8:	200002c4 	.word	0x200002c4

080020bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <TIM3_IRQHandler+0x10>)
 80020c2:	f003 fc1b 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000114 	.word	0x20000114

080020d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020d4:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <TIM4_IRQHandler+0x10>)
 80020d6:	f003 fc11 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000015c 	.word	0x2000015c

080020e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020ec:	f002 f9a6 	bl	800443c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80020f8:	4803      	ldr	r0, [pc, #12]	@ (8002108 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80020fa:	f003 fbff 	bl	80058fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80020fe:	4803      	ldr	r0, [pc, #12]	@ (800210c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002100:	f003 fbfc 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000234 	.word	0x20000234
 800210c:	2000030c 	.word	0x2000030c

08002110 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002116:	f003 fbf1 	bl	80058fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800211a:	4803      	ldr	r0, [pc, #12]	@ (8002128 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800211c:	f003 fbee 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000234 	.word	0x20000234
 8002128:	20000354 	.word	0x20000354

0800212c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <TIM8_CC_IRQHandler+0x10>)
 8002132:	f003 fbe3 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000234 	.word	0x20000234

08002140 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <TIM6_DAC_IRQHandler+0x10>)
 8002146:	f003 fbd9 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200001a4 	.word	0x200001a4

08002154 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <TIM7_IRQHandler+0x10>)
 800215a:	f003 fbcf 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200001ec 	.word	0x200001ec

08002168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <tmc2209_setup>:
#include "tmc2209.h"


void tmc2209_setup(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_  = serial_baud_rate;
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]
  stepper_driver->serial_address_    = serial_address;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	79fa      	ldrb	r2, [r7, #7]
 80021a4:	711a      	strb	r2, [r3, #4]
  stepper_driver->cool_step_enabled_ = false;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

  tmc2209_initialize(stepper_driver, serial_baud_rate, serial_address);
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	461a      	mov	r2, r3
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f9b2 	bl	800251e <tmc2209_initialize>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <map>:

// unidirectional methods

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	1a8a      	subs	r2, r1, r2
 80021dc:	fb03 f202 	mul.w	r2, r3, r2
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1acb      	subs	r3, r1, r3
 80021e6:	fb92 f2f3 	sdiv	r2, r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	4413      	add	r3, r2
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <constrain>:

long constrain(long x, long a, long b)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
  if (x < a)
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	429a      	cmp	r2, r3
 800220c:	da01      	bge.n	8002212 <constrain+0x18>
  {
    return a;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	e006      	b.n	8002220 <constrain+0x26>
  }
  else if (b < x)
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	429a      	cmp	r2, r3
 8002218:	da01      	bge.n	800221e <constrain+0x24>
  {
    return b;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	e000      	b.n	8002220 <constrain+0x26>
  }
  else
  {
    return x;
 800221e:	68fb      	ldr	r3, [r7, #12]
  }
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <set_micro_steps_per_step>:

void set_micro_steps_per_step(tmc2209_stepper_driver_t *stepper_driver, uint16_t microsteps_per_step)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
  uint16_t microsteps_per_step_shifted = constrain(microsteps_per_step, MICROSTEPS_PER_STEP_MIN, MICROSTEPS_PER_STEP_MAX);
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800223e:	2101      	movs	r1, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ffda 	bl	80021fa <constrain>
 8002246:	4603      	mov	r3, r0
 8002248:	81fb      	strh	r3, [r7, #14]
  microsteps_per_step_shifted          = microsteps_per_step >> 1;
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	81fb      	strh	r3, [r7, #14]
  uint16_t exponent                    = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8002254:	e005      	b.n	8002262 <set_micro_steps_per_step+0x36>
  {
    microsteps_per_step_shifted = microsteps_per_step_shifted >> 1;
 8002256:	89fb      	ldrh	r3, [r7, #14]
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	81fb      	strh	r3, [r7, #14]
    ++exponent;
 800225c:	89bb      	ldrh	r3, [r7, #12]
 800225e:	3301      	adds	r3, #1
 8002260:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8002262:	89fb      	ldrh	r3, [r7, #14]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f6      	bne.n	8002256 <set_micro_steps_per_step+0x2a>
  }
  set_micro_steps_per_step_power_of_two(stepper_driver, exponent);
 8002268:	89bb      	ldrh	r3, [r7, #12]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f804 	bl	800227c <set_micro_steps_per_step_power_of_two>
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <set_micro_steps_per_step_power_of_two>:

void set_micro_steps_per_step_power_of_two(tmc2209_stepper_driver_t *stepper_driver, uint8_t exponent)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
  switch (exponent)
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	2b07      	cmp	r3, #7
 800228c:	d85a      	bhi.n	8002344 <set_micro_steps_per_step_power_of_two+0xc8>
 800228e:	a201      	add	r2, pc, #4	@ (adr r2, 8002294 <set_micro_steps_per_step_power_of_two+0x18>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080022b5 	.word	0x080022b5
 8002298:	080022c7 	.word	0x080022c7
 800229c:	080022d9 	.word	0x080022d9
 80022a0:	080022eb 	.word	0x080022eb
 80022a4:	080022fd 	.word	0x080022fd
 80022a8:	0800230f 	.word	0x0800230f
 80022ac:	08002321 	.word	0x08002321
 80022b0:	08002333 	.word	0x08002333
  {
    case 0: {
      stepper_driver->chopper_config_.mres = MRES_001;
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80022ba:	2108      	movs	r1, #8
 80022bc:	f361 0303 	bfi	r3, r1, #0, #4
 80022c0:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80022c4:	e046      	b.n	8002354 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 1: {
      stepper_driver->chopper_config_.mres = MRES_002;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80022cc:	2107      	movs	r1, #7
 80022ce:	f361 0303 	bfi	r3, r1, #0, #4
 80022d2:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80022d6:	e03d      	b.n	8002354 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 2: {
      stepper_driver->chopper_config_.mres = MRES_004;
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80022de:	2106      	movs	r1, #6
 80022e0:	f361 0303 	bfi	r3, r1, #0, #4
 80022e4:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80022e8:	e034      	b.n	8002354 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 3: {
      stepper_driver->chopper_config_.mres = MRES_008;
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80022f0:	2105      	movs	r1, #5
 80022f2:	f361 0303 	bfi	r3, r1, #0, #4
 80022f6:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80022fa:	e02b      	b.n	8002354 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 4: {
      stepper_driver->chopper_config_.mres = MRES_016;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002302:	2104      	movs	r1, #4
 8002304:	f361 0303 	bfi	r3, r1, #0, #4
 8002308:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800230c:	e022      	b.n	8002354 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 5: {
      stepper_driver->chopper_config_.mres = MRES_032;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002314:	2103      	movs	r1, #3
 8002316:	f361 0303 	bfi	r3, r1, #0, #4
 800231a:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800231e:	e019      	b.n	8002354 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 6: {
      stepper_driver->chopper_config_.mres = MRES_064;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002326:	2102      	movs	r1, #2
 8002328:	f361 0303 	bfi	r3, r1, #0, #4
 800232c:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002330:	e010      	b.n	8002354 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 7: {
      stepper_driver->chopper_config_.mres = MRES_128;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002338:	2101      	movs	r1, #1
 800233a:	f361 0303 	bfi	r3, r1, #0, #4
 800233e:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002342:	e007      	b.n	8002354 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 8:
    default: {
      stepper_driver->chopper_config_.mres = MRES_256;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800234a:	f023 030f 	bic.w	r3, r3, #15
 800234e:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002352:	bf00      	nop
    }
  }
  write_stored_chopper_config(stepper_driver);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fb34 	bl	80029c2 <write_stored_chopper_config>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop

08002364 <set_all_current_percent_values>:

void set_all_current_percent_values(tmc2209_stepper_driver_t *stepper_driver,
                                    uint8_t                   run_current_percent,
                                    uint8_t                   hold_current_percent,
                                    uint8_t                   hold_delay_percent)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	4608      	mov	r0, r1
 800236e:	4611      	mov	r1, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4603      	mov	r3, r0
 8002374:	70fb      	strb	r3, [r7, #3]
 8002376:	460b      	mov	r3, r1
 8002378:	70bb      	strb	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	707b      	strb	r3, [r7, #1]
  uint8_t run_current  = percent_to_current_settings(stepper_driver, run_current_percent);
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 faa2 	bl	80028cc <percent_to_current_settings>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_current = percent_to_current_settings(stepper_driver, hold_current_percent);
 800238c:	78bb      	ldrb	r3, [r7, #2]
 800238e:	4619      	mov	r1, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fa9b 	bl	80028cc <percent_to_current_settings>
 8002396:	4603      	mov	r3, r0
 8002398:	73bb      	strb	r3, [r7, #14]
  uint8_t hold_delay   = percent_to_hold_delay_setting(stepper_driver, hold_delay_percent);
 800239a:	787b      	ldrb	r3, [r7, #1]
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fab1 	bl	8002906 <percent_to_hold_delay_setting>
 80023a4:	4603      	mov	r3, r0
 80023a6:	737b      	strb	r3, [r7, #13]

  stepper_driver->driver_current_.irun       = run_current;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	b2d9      	uxtb	r1, r3
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80023b6:	f361 0304 	bfi	r3, r1, #0, #5
 80023ba:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold      = hold_current;
 80023be:	7bbb      	ldrb	r3, [r7, #14]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	b2d9      	uxtb	r1, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80023cc:	f361 0304 	bfi	r3, r1, #0, #5
 80023d0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.iholddelay = hold_delay;
 80023d4:	7b7b      	ldrb	r3, [r7, #13]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	b2d9      	uxtb	r1, r3
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80023e2:	f361 0303 	bfi	r3, r1, #0, #4
 80023e6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  write_stored_driver_current(stepper_driver);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fab7 	bl	800295e <write_stored_driver_current>
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <enable_inverse_motor_direction>:

void enable_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 1;
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fa96 	bl	8002940 <write_stored_global_config>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <disable_inverse_motor_direction>:

void disable_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 0;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800242a:	f023 0308 	bic.w	r3, r3, #8
 800242e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa84 	bl	8002940 <write_stored_global_config>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <enable_automatic_current_scaling>:
  stepper_driver->pwm_config_.freewheel = mode;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_current_scaling(tmc2209_stepper_driver_t *stepper_driver)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fac2 	bl	80029e0 <write_stored_pwm_config>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <enable_automatic_gradient_adaptation>:
  stepper_driver->pwm_config_.pwm_freq = pwm_freq;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_gradient_adaptation(tmc2209_stepper_driver_t *stepper_driver)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fab0 	bl	80029e0 <write_stored_pwm_config>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <enable_cool_step>:
{
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, stall_guard_threshold);
}

void enable_cool_step(tmc2209_stepper_driver_t *stepper_driver, uint8_t lower_threshold, uint8_t upper_threshold)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
 8002494:	4613      	mov	r3, r2
 8002496:	70bb      	strb	r3, [r7, #2]
  lower_threshold                    = constrain(lower_threshold, SEMIN_MIN, SEMIN_MAX);
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	220f      	movs	r2, #15
 800249c:	2101      	movs	r1, #1
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff feab 	bl	80021fa <constrain>
 80024a4:	4603      	mov	r3, r0
 80024a6:	70fb      	strb	r3, [r7, #3]
  stepper_driver->cool_config_.semin = lower_threshold;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	b2d9      	uxtb	r1, r3
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 80024b6:	f361 0303 	bfi	r3, r1, #0, #4
 80024ba:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
  upper_threshold                    = constrain(upper_threshold, SEMAX_MIN, SEMAX_MAX);
 80024be:	78bb      	ldrb	r3, [r7, #2]
 80024c0:	220f      	movs	r2, #15
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fe98 	bl	80021fa <constrain>
 80024ca:	4603      	mov	r3, r0
 80024cc:	70bb      	strb	r3, [r7, #2]
  stepper_driver->cool_config_.semax = upper_threshold;
 80024ce:	78bb      	ldrb	r3, [r7, #2]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	b2d9      	uxtb	r1, r3
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 80024dc:	f361 0303 	bfi	r3, r1, #0, #4
 80024e0:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e8:	461a      	mov	r2, r3
 80024ea:	2142      	movs	r1, #66	@ 0x42
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 faee 	bl	8002ace <tmc2209_write>
  stepper_driver->cool_step_enabled_ = true;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <get_stall_guard_result>:
{
  return tmc2209_read(stepper_driver, ADDRESS_TSTEP);
}

uint16_t get_stall_guard_result(tmc2209_stepper_driver_t *stepper_driver)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  return tmc2209_read(stepper_driver, ADDRESS_SG_RESULT);
 800250a:	2141      	movs	r1, #65	@ 0x41
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fb3c 	bl	8002b8a <tmc2209_read>
 8002512:	4603      	mov	r3, r0
 8002514:	b29b      	uxth	r3, r3
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <tmc2209_initialize>:
{
  return tmc2209_read(stepper_driver, ADDRESS_MSCNT);
}

void tmc2209_initialize(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	4613      	mov	r3, r2
 800252a:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_ = serial_baud_rate;
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	601a      	str	r2, [r3, #0]

  set_operation_mode_to_serial(stepper_driver, serial_address);
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	4619      	mov	r1, r3
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f813 	bl	8002562 <set_operation_mode_to_serial>
  set_registers_to_default(stepper_driver);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f83f 	bl	80025c0 <set_registers_to_default>

  minimize_motor_current(stepper_driver);
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f8c2 	bl	80026cc <minimize_motor_current>
  tmc2209_disable(stepper_driver);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 faa6 	bl	8002a9a <tmc2209_disable>
  enable_automatic_current_scaling(stepper_driver);
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff ff76 	bl	8002440 <enable_automatic_current_scaling>
  enable_automatic_gradient_adaptation(stepper_driver);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff ff85 	bl	8002464 <enable_automatic_gradient_adaptation>
//  disable_automatic_current_scaling(stepper_driver);
//  disable_automatic_gradient_adaptation(stepper_driver);
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <set_operation_mode_to_serial>:

void set_operation_mode_to_serial(tmc2209_stepper_driver_t *stepper_driver, tmc2209_serial_address_t serial_address)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
  stepper_driver->serial_address_ = serial_address;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	711a      	strb	r2, [r3, #4]

  stepper_driver->global_config_.bytes            = 0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	66da      	str	r2, [r3, #108]	@ 0x6c
  stepper_driver->global_config_.i_scale_analog   = 1;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.pdn_disable      = 1;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800258e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002592:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.mstep_reg_select = 1;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800259c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025a0:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.multistep_filt   = 1;
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

  write_stored_global_config(stepper_driver);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f9c4 	bl	8002940 <write_stored_global_config>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <set_registers_to_default>:

void set_registers_to_default(tmc2209_stepper_driver_t *stepper_driver)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.bytes      = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	669a      	str	r2, [r3, #104]	@ 0x68
  stepper_driver->driver_current_.ihold      = IHOLD_DEFAULT;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80025d4:	2110      	movs	r1, #16
 80025d6:	f361 0304 	bfi	r3, r1, #0, #5
 80025da:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.irun       = IRUN_DEFAULT;
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80025e4:	f043 031f 	orr.w	r3, r3, #31
 80025e8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80025f2:	2101      	movs	r1, #1
 80025f4:	f361 0303 	bfi	r3, r1, #0, #4
 80025f8:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002600:	461a      	mov	r2, r3
 8002602:	2110      	movs	r1, #16
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fa62 	bl	8002ace <tmc2209_write>

  stepper_driver->chopper_config_.bytes  = CHOPPER_CONFIG_DEFAULT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2d      	ldr	r2, [pc, #180]	@ (80026c4 <set_registers_to_default+0x104>)
 800260e:	659a      	str	r2, [r3, #88]	@ 0x58
  stepper_driver->chopper_config_.tbl    = TBL_DEFAULT;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002614:	2102      	movs	r1, #2
 8002616:	f361 33d0 	bfi	r3, r1, #15, #2
 800261a:	6593      	str	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hend   = HEND_DEFAULT;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 8002622:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 8002626:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hstart = HSTART_DEFAULT;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002630:	2105      	movs	r1, #5
 8002632:	f361 1306 	bfi	r3, r1, #4, #3
 8002636:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.toff   = TOFF_DEFAULT;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002640:	2103      	movs	r1, #3
 8002642:	f361 0303 	bfi	r3, r1, #0, #4
 8002646:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	461a      	mov	r2, r3
 8002650:	216c      	movs	r1, #108	@ 0x6c
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa3b 	bl	8002ace <tmc2209_write>

  stepper_driver->pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <set_registers_to_default+0x108>)
 800265c:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	461a      	mov	r2, r3
 8002664:	2170      	movs	r1, #112	@ 0x70
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa31 	bl	8002ace <tmc2209_write>

  stepper_driver->cool_config_.bytes = COOLCONF_DEFAULT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	661a      	str	r2, [r3, #96]	@ 0x60
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	461a      	mov	r2, r3
 8002678:	2142      	movs	r1, #66	@ 0x42
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa27 	bl	8002ace <tmc2209_write>

  tmc2209_write(stepper_driver, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002680:	2214      	movs	r2, #20
 8002682:	2111      	movs	r1, #17
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fa22 	bl	8002ace <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 800268a:	2200      	movs	r2, #0
 800268c:	2113      	movs	r1, #19
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa1d 	bl	8002ace <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002694:	2200      	movs	r2, #0
 8002696:	2122      	movs	r1, #34	@ 0x22
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa18 	bl	8002ace <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 800269e:	2200      	movs	r2, #0
 80026a0:	2114      	movs	r1, #20
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa13 	bl	8002ace <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2140      	movs	r1, #64	@ 0x40
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fa0e 	bl	8002ace <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2142      	movs	r1, #66	@ 0x42
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fa09 	bl	8002ace <tmc2209_write>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	10000053 	.word	0x10000053
 80026c8:	c10d0024 	.word	0xc10d0024

080026cc <minimize_motor_current>:

  return global_config.pdn_disable;
}

void minimize_motor_current(tmc2209_stepper_driver_t *stepper_driver)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.irun  = CURRENT_SETTING_MIN;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80026da:	f023 031f 	bic.w	r3, r3, #31
 80026de:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold = CURRENT_SETTING_MIN;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80026e8:	f023 031f 	bic.w	r3, r3, #31
 80026ec:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  write_stored_driver_current(stepper_driver);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f934 	bl	800295e <write_stored_driver_current>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <reverse_data>:

uint32_t reverse_data(uint32_t data)
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
  uint8_t  right_shift;
  uint8_t  left_shift;
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 800270a:	2300      	movs	r3, #0
 800270c:	72fb      	strb	r3, [r7, #11]
 800270e:	e016      	b.n	800273e <reverse_data+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	f1c3 0303 	rsb	r3, r3, #3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	72bb      	strb	r3, [r7, #10]
    left_shift  = i * BITS_PER_BYTE;
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8002722:	7abb      	ldrb	r3, [r7, #10]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	7a7b      	ldrb	r3, [r7, #9]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002738:	7afb      	ldrb	r3, [r7, #11]
 800273a:	3301      	adds	r3, #1
 800273c:	72fb      	strb	r3, [r7, #11]
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d9e5      	bls.n	8002710 <reverse_data+0x12>
  }
  return reversed_data;
 8002744:	68fb      	ldr	r3, [r7, #12]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <calculate_crc_write>:

uint8_t calculate_crc_write(write_read_reply_datagram_t *datagram, uint8_t datagram_size)
{
 8002752:	b4f0      	push	{r4, r5, r6, r7}
 8002754:	b088      	sub	sp, #32
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	70f9      	strb	r1, [r7, #3]
  uint8_t crc = 0;
 800275c:	2100      	movs	r1, #0
 800275e:	77f9      	strb	r1, [r7, #31]
  uint8_t byte;
  uint8_t datagram_bytes[7];
  for (int i = 0; i < datagram_size - 1; i++)
 8002760:	2100      	movs	r1, #0
 8002762:	61b9      	str	r1, [r7, #24]
 8002764:	e01c      	b.n	80027a0 <calculate_crc_write+0x4e>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800276c:	69bc      	ldr	r4, [r7, #24]
 800276e:	00e4      	lsls	r4, r4, #3
 8002770:	f1c4 0620 	rsb	r6, r4, #32
 8002774:	f1a4 0520 	sub.w	r5, r4, #32
 8002778:	fa20 f204 	lsr.w	r2, r0, r4
 800277c:	fa01 f606 	lsl.w	r6, r1, r6
 8002780:	4332      	orrs	r2, r6
 8002782:	fa21 f505 	lsr.w	r5, r1, r5
 8002786:	432a      	orrs	r2, r5
 8002788:	fa21 f304 	lsr.w	r3, r1, r4
 800278c:	b2d4      	uxtb	r4, r2
 800278e:	f107 000c 	add.w	r0, r7, #12
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	4401      	add	r1, r0
 8002796:	4620      	mov	r0, r4
 8002798:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < datagram_size - 1; i++)
 800279a:	69b9      	ldr	r1, [r7, #24]
 800279c:	3101      	adds	r1, #1
 800279e:	61b9      	str	r1, [r7, #24]
 80027a0:	78f9      	ldrb	r1, [r7, #3]
 80027a2:	3901      	subs	r1, #1
 80027a4:	69b8      	ldr	r0, [r7, #24]
 80027a6:	4288      	cmp	r0, r1
 80027a8:	dbdd      	blt.n	8002766 <calculate_crc_write+0x14>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
 80027ae:	e029      	b.n	8002804 <calculate_crc_write+0xb2>
  {
    byte = datagram_bytes[i];
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	3320      	adds	r3, #32
 80027b4:	443b      	add	r3, r7
 80027b6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80027ba:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 80027bc:	2300      	movs	r3, #0
 80027be:	75bb      	strb	r3, [r7, #22]
 80027c0:	e01a      	b.n	80027f8 <calculate_crc_write+0xa6>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
 80027c4:	09db      	lsrs	r3, r3, #7
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	7fbb      	ldrb	r3, [r7, #30]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d008      	beq.n	80027e6 <calculate_crc_write+0x94>
      {
        crc = (crc << 1) ^ 0x07;
 80027d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	f083 0307 	eor.w	r3, r3, #7
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e002      	b.n	80027ec <calculate_crc_write+0x9a>
      }
      else
      {
        crc = crc << 1;
 80027e6:	7ffb      	ldrb	r3, [r7, #31]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	77fb      	strb	r3, [r7, #31]
      }
      byte = byte >> 1;
 80027ec:	7fbb      	ldrb	r3, [r7, #30]
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 80027f2:	7dbb      	ldrb	r3, [r7, #22]
 80027f4:	3301      	adds	r3, #1
 80027f6:	75bb      	strb	r3, [r7, #22]
 80027f8:	7dbb      	ldrb	r3, [r7, #22]
 80027fa:	2b07      	cmp	r3, #7
 80027fc:	d9e1      	bls.n	80027c2 <calculate_crc_write+0x70>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	3301      	adds	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
 8002804:	7dfa      	ldrb	r2, [r7, #23]
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	3b01      	subs	r3, #1
 800280a:	429a      	cmp	r2, r3
 800280c:	dbd0      	blt.n	80027b0 <calculate_crc_write+0x5e>
    }
  }
  return crc;
 800280e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bcf0      	pop	{r4, r5, r6, r7}
 8002818:	4770      	bx	lr

0800281a <calculate_crc_read>:

uint8_t calculate_crc_read(read_request_datagram_t *datagram, uint8_t datagram_size)
{
 800281a:	b480      	push	{r7}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  uint8_t datagram_bytes[4];
  for (int i = 0; i < (datagram_size - 1); i++)
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e00f      	b.n	8002850 <calculate_crc_read+0x36>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
 800283c:	b2d9      	uxtb	r1, r3
 800283e:	f107 0208 	add.w	r2, r7, #8
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	460a      	mov	r2, r1
 8002848:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < (datagram_size - 1); i++)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	3301      	adds	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	3b01      	subs	r3, #1
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	429a      	cmp	r2, r3
 8002858:	dbea      	blt.n	8002830 <calculate_crc_read+0x16>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e029      	b.n	80028b4 <calculate_crc_read+0x9a>
  {
    byte = datagram_bytes[i];
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	3318      	adds	r3, #24
 8002864:	443b      	add	r3, r7
 8002866:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800286a:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 800286c:	2300      	movs	r3, #0
 800286e:	73bb      	strb	r3, [r7, #14]
 8002870:	e01a      	b.n	80028a8 <calculate_crc_read+0x8e>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	09db      	lsrs	r3, r3, #7
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	7dbb      	ldrb	r3, [r7, #22]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	429a      	cmp	r2, r3
 8002882:	d008      	beq.n	8002896 <calculate_crc_read+0x7c>
      {
        crc = (crc << 1) ^ 0x07;
 8002884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	b25b      	sxtb	r3, r3
 800288c:	f083 0307 	eor.w	r3, r3, #7
 8002890:	b25b      	sxtb	r3, r3
 8002892:	75fb      	strb	r3, [r7, #23]
 8002894:	e002      	b.n	800289c <calculate_crc_read+0x82>
      }
      else
      {
        crc = crc << 1;
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 800289c:	7dbb      	ldrb	r3, [r7, #22]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	3301      	adds	r3, #1
 80028a6:	73bb      	strb	r3, [r7, #14]
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	2b07      	cmp	r3, #7
 80028ac:	d9e1      	bls.n	8002872 <calculate_crc_read+0x58>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	3301      	adds	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	429a      	cmp	r2, r3
 80028bc:	dbd0      	blt.n	8002860 <calculate_crc_read+0x46>
    }
  }
  return crc;
 80028be:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <percent_to_current_settings>:

uint8_t percent_to_current_settings(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	2264      	movs	r2, #100	@ 0x64
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fc8b 	bl	80021fa <constrain>
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint8_t current_setting     = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
 80028e8:	7bf8      	ldrb	r0, [r7, #15]
 80028ea:	231f      	movs	r3, #31
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	2264      	movs	r2, #100	@ 0x64
 80028f2:	2100      	movs	r1, #0
 80028f4:	f7ff fc65 	bl	80021c2 <map>
 80028f8:	4603      	mov	r3, r0
 80028fa:	73bb      	strb	r3, [r7, #14]
  return current_setting;
 80028fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <percent_to_hold_delay_setting>:
  uint8_t percent = map(current_setting, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

uint8_t percent_to_hold_delay_setting(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af02      	add	r7, sp, #8
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	2264      	movs	r2, #100	@ 0x64
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fc6e 	bl	80021fa <constrain>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_delay_setting  = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
 8002922:	7bf8      	ldrb	r0, [r7, #15]
 8002924:	230f      	movs	r3, #15
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2300      	movs	r3, #0
 800292a:	2264      	movs	r2, #100	@ 0x64
 800292c:	2100      	movs	r1, #0
 800292e:	f7ff fc48 	bl	80021c2 <map>
 8002932:	4603      	mov	r3, r0
 8002934:	73bb      	strb	r3, [r7, #14]
  return hold_delay_setting;
 8002936:	7bbb      	ldrb	r3, [r7, #14]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <write_stored_global_config>:
  uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

void write_stored_global_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_GCONF, stepper_driver->global_config_.bytes);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800294c:	461a      	mov	r2, r3
 800294e:	2100      	movs	r1, #0
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8bc 	bl	8002ace <tmc2209_write>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <write_stored_driver_current>:
{
  return tmc2209_read(stepper_driver, ADDRESS_GCONF);
}

void write_stored_driver_current(tmc2209_stepper_driver_t *stepper_driver)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800296a:	461a      	mov	r2, r3
 800296c:	2110      	movs	r1, #16
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8ad 	bl	8002ace <tmc2209_write>

  if (stepper_driver->driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800297a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b13      	cmp	r3, #19
 8002982:	d907      	bls.n	8002994 <write_stored_driver_current+0x36>
  {
    stepper_driver->cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 800298a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800298e:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
 8002992:	e006      	b.n	80029a2 <write_stored_driver_current+0x44>
  }
  else
  {
    stepper_driver->cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 800299a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800299e:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  }
  if (stepper_driver->cool_step_enabled_)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <write_stored_driver_current+0x5c>
  {
    tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b0:	461a      	mov	r2, r3
 80029b2:	2142      	movs	r1, #66	@ 0x42
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f88a 	bl	8002ace <tmc2209_write>
  }
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <write_stored_chopper_config>:

void write_stored_chopper_config(tmc2209_stepper_driver_t *stepper_driver)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ce:	461a      	mov	r2, r3
 80029d0:	216c      	movs	r1, #108	@ 0x6c
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f87b 	bl	8002ace <tmc2209_write>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <write_stored_pwm_config>:
{
  return tmc2209_read(stepper_driver, ADDRESS_CHOPCONF);
}

void write_stored_pwm_config(tmc2209_stepper_driver_t *stepper_driver)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	461a      	mov	r2, r3
 80029ee:	2170      	movs	r1, #112	@ 0x70
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f86c 	bl	8002ace <tmc2209_write>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <tmc2209_set_uart>:

// /* Private function code -----------------------------------------------------*/

extern UART_HandleTypeDef huart1;
void tmc2209_set_uart(tmc2209_stepper_driver_t *stepper_driver, UART_HandleTypeDef uart)
{
 80029fe:	b084      	sub	sp, #16
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	f107 0014 	add.w	r0, r7, #20
 8002a0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	stepper_driver->uart_ = uart;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3308      	adds	r3, #8
 8002a14:	f107 0114 	add.w	r1, r7, #20
 8002a18:	2248      	movs	r2, #72	@ 0x48
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fa8e 	bl	8006f3c <memcpy>
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a2a:	b004      	add	sp, #16
 8002a2c:	4770      	bx	lr

08002a2e <tmc2209_set_hardware_enable_pin>:

void tmc2209_set_hardware_enable_pin(tmc2209_stepper_driver_t *stepper_driver, uint16_t hardware_enable_pin, GPIO_TypeDef* hardware_enable_gpio_port)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	460b      	mov	r3, r1
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	817b      	strh	r3, [r7, #10]
   stepper_driver->hardware_enable_pin_ = hardware_enable_pin;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	897a      	ldrh	r2, [r7, #10]
 8002a40:	80da      	strh	r2, [r3, #6]
   stepper_driver->hardware_enable_gpio_port_ = hardware_enable_gpio_port;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	651a      	str	r2, [r3, #80]	@ 0x50

   HAL_GPIO_WritePin(hardware_enable_gpio_port, hardware_enable_pin, GPIO_PIN_SET);
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f001 fcc0 	bl	80043d4 <HAL_GPIO_WritePin>
 }
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <tmc2209_enable>:

 void tmc2209_enable(tmc2209_stepper_driver_t *stepper_driver)
 {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
     HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_RESET);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	88db      	ldrh	r3, [r3, #6]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f001 fcb0 	bl	80043d4 <HAL_GPIO_WritePin>
   }
   stepper_driver->toff_                = TOFF_DEFAULT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2203      	movs	r2, #3
 8002a78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
   stepper_driver->chopper_config_.toff = TOFF_DEFAULT;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002a82:	2103      	movs	r1, #3
 8002a84:	f361 0303 	bfi	r3, r1, #0, #4
 8002a88:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff98 	bl	80029c2 <write_stored_chopper_config>
 }
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <tmc2209_disable>:

 void tmc2209_disable(tmc2209_stepper_driver_t* stepper_driver)
 {
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
   HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_SET);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	88db      	ldrh	r3, [r3, #6]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4619      	mov	r1, r3
 8002aae:	f001 fc91 	bl	80043d4 <HAL_GPIO_WritePin>
   }
   stepper_driver->chopper_config_.toff = TOFF_DISABLE;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002ab8:	f023 030f 	bic.w	r3, r3, #15
 8002abc:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff7e 	bl	80029c2 <write_stored_chopper_config>
 }
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <tmc2209_write>:

 void tmc2209_write(tmc2209_stepper_driver_t *stepper_driver, uint8_t register_address, uint32_t data)
 {
 8002ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad0:	b08b      	sub	sp, #44	@ 0x2c
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	72fb      	strb	r3, [r7, #11]
   write_read_reply_datagram_t write_datagram;
   write_datagram.bytes            = 0;
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9c7 2306 	strd	r2, r3, [r7, #24]
   write_datagram.sync             = SYNC;
 8002ae8:	7e3b      	ldrb	r3, [r7, #24]
 8002aea:	2205      	movs	r2, #5
 8002aec:	f362 0303 	bfi	r3, r2, #0, #4
 8002af0:	763b      	strb	r3, [r7, #24]
   write_datagram.serial_address   = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	767b      	strb	r3, [r7, #25]
   write_datagram.register_address = register_address;
 8002af6:	7afb      	ldrb	r3, [r7, #11]
 8002af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	7ebb      	ldrb	r3, [r7, #26]
 8002b00:	f362 0306 	bfi	r3, r2, #0, #7
 8002b04:	76bb      	strb	r3, [r7, #26]
   write_datagram.rw               = RW_WRITE;
 8002b06:	7ebb      	ldrb	r3, [r7, #26]
 8002b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b0c:	76bb      	strb	r3, [r7, #26]
   write_datagram.data             = reverse_data(data);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fdf5 	bl	80026fe <reverse_data>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f8c7 301b 	str.w	r3, [r7, #27]
   write_datagram.crc              = calculate_crc_write(&write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002b1a:	f107 0318 	add.w	r3, r7, #24
 8002b1e:	2108      	movs	r1, #8
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fe16 	bl	8002752 <calculate_crc_write>
 8002b26:	4603      	mov	r3, r0
 8002b28:	77fb      	strb	r3, [r7, #31]

   uint8_t datagram_bytes[8];
   for (int i = 0; i < 8; i++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2e:	e01b      	b.n	8002b68 <tmc2209_write+0x9a>
   {
     datagram_bytes[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b36:	00c9      	lsls	r1, r1, #3
 8002b38:	f1c1 0620 	rsb	r6, r1, #32
 8002b3c:	f1a1 0020 	sub.w	r0, r1, #32
 8002b40:	fa22 f401 	lsr.w	r4, r2, r1
 8002b44:	fa03 f606 	lsl.w	r6, r3, r6
 8002b48:	4334      	orrs	r4, r6
 8002b4a:	fa23 f000 	lsr.w	r0, r3, r0
 8002b4e:	4304      	orrs	r4, r0
 8002b50:	fa23 f501 	lsr.w	r5, r3, r1
 8002b54:	b2e1      	uxtb	r1, r4
 8002b56:	f107 0210 	add.w	r2, r7, #16
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	4413      	add	r3, r2
 8002b5e:	460a      	mov	r2, r1
 8002b60:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	2b07      	cmp	r3, #7
 8002b6c:	dde0      	ble.n	8002b30 <tmc2209_write+0x62>
   }
   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, WRITE_READ_REPLY_DATAGRAM_SIZE, 0XFFFF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f103 0008 	add.w	r0, r3, #8
 8002b74:	f107 0110 	add.w	r1, r7, #16
 8002b78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	f003 fd37 	bl	80065f0 <HAL_UART_Transmit>
   //   printf("Write Data Request: %s", datagram_bytes);
 }
 8002b82:	bf00      	nop
 8002b84:	372c      	adds	r7, #44	@ 0x2c
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b8a <tmc2209_read>:

 uint32_t tmc2209_read(tmc2209_stepper_driver_t * stepper_driver, uint8_t register_address)
 {
 8002b8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8e:	b090      	sub	sp, #64	@ 0x40
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
   read_request_datagram_t read_request_datagram;
   read_request_datagram.bytes            = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   read_request_datagram.sync             = SYNC;
 8002b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	f362 0303 	bfi	r3, r2, #0, #4
 8002ba6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
   read_request_datagram.serial_address   = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
   read_request_datagram.register_address = register_address;
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002bbc:	f362 0306 	bfi	r3, r2, #0, #7
 8002bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.rw               = RW_READ;
 8002bc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.crc              = calculate_crc_read(&read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 8002bd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fe1f 	bl	800281a <calculate_crc_read>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

   uint8_t datagram_bytes[WRITE_READ_REPLY_DATAGRAM_SIZE];
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8002be2:	2300      	movs	r3, #0
 8002be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be6:	e00e      	b.n	8002c06 <tmc2209_read+0x7c>
   {
     datagram_bytes[i] = (read_request_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002be8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	b2d9      	uxtb	r1, r3
 8002bf4:	f107 0220 	add.w	r2, r7, #32
 8002bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfa:	4413      	add	r3, r2
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8002c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c02:	3301      	adds	r3, #1
 8002c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	dded      	ble.n	8002be8 <tmc2209_read+0x5e>
   }

   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, READ_REQUEST_DATAGRAM_SIZE, 0XFFFF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0008 	add.w	r0, r3, #8
 8002c12:	f107 0120 	add.w	r1, r7, #32
 8002c16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	f003 fce8 	bl	80065f0 <HAL_UART_Transmit>
//   printf("Write Data Request: %s", datagram_bytes);


   uint8_t                     byte_count = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
   write_read_reply_datagram_t read_reply_datagram;
   read_reply_datagram.bytes = 0;
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
//   {
//     HAL_UART_Receive(&huart1, (uint8_t *)&byte, 1, 100);
//     datagram_bytes[i] = byte;
//   }
   uint8_t uart_reply[WRITE_READ_REPLY_DATAGRAM_SIZE + 1];
   HAL_UART_Receive(&stepper_driver->uart_, uart_reply, 9, 100);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f103 0008 	add.w	r0, r3, #8
 8002c38:	f107 010c 	add.w	r1, r7, #12
 8002c3c:	2364      	movs	r3, #100	@ 0x64
 8002c3e:	2209      	movs	r2, #9
 8002c40:	f003 fd61 	bl	8006706 <HAL_UART_Receive>
   uint8_t* datagram = uart_reply + sizeof(uint8_t);
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	3301      	adds	r3, #1
 8002c4a:	637b      	str	r3, [r7, #52]	@ 0x34

   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002c52:	e029      	b.n	8002ca8 <tmc2209_read+0x11e>
   {
     read_reply_datagram.bytes |= ((uint64_t)datagram[i] << (byte_count++ * BITS_PER_BYTE));
 8002c54:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002c58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2200      	movs	r2, #0
 8002c62:	4698      	mov	r8, r3
 8002c64:	4691      	mov	r9, r2
 8002c66:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	f1a3 0120 	sub.w	r1, r3, #32
 8002c76:	f1c3 0220 	rsb	r2, r3, #32
 8002c7a:	fa09 f503 	lsl.w	r5, r9, r3
 8002c7e:	fa08 f101 	lsl.w	r1, r8, r1
 8002c82:	430d      	orrs	r5, r1
 8002c84:	fa28 f202 	lsr.w	r2, r8, r2
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	fa08 f403 	lsl.w	r4, r8, r3
 8002c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c92:	ea44 0a02 	orr.w	sl, r4, r2
 8002c96:	ea45 0b03 	orr.w	fp, r5, r3
 8002c9a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8002c9e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002ca8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002cac:	2b07      	cmp	r3, #7
 8002cae:	d9d1      	bls.n	8002c54 <tmc2209_read+0xca>
   }
   uint32_t reversed_data = reverse_data(read_reply_datagram.data);
 8002cb0:	f8d7 301b 	ldr.w	r3, [r7, #27]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fd22 	bl	80026fe <reverse_data>
 8002cba:	6338      	str	r0, [r7, #48]	@ 0x30
   uint8_t  crc           = calculate_crc_write(&read_reply_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002cbc:	f107 0318 	add.w	r3, r7, #24
 8002cc0:	2108      	movs	r1, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fd45 	bl	8002752 <calculate_crc_write>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   if (crc != read_reply_datagram.crc)
   {
   }
   return reversed_data;
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 }
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3740      	adds	r7, #64	@ 0x40
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002cdc <toSteps>:

/*
 * Calculates the steps needed to rotate the amount stated in the variable degrees.
 */
int32_t toSteps(float degrees, motor_t* motor)
{
 8002cdc:	b5b0      	push	{r4, r5, r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ce6:	6038      	str	r0, [r7, #0]
	int32_t steps;
	steps = ((200.0 * (float)(motor->microsteps)/360.0)*degrees) * motor->gear_ratio;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf4:	ee17 0a90 	vmov	r0, s15
 8002cf8:	f7fd fbe8 	bl	80004cc <__aeabi_f2d>
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <toSteps+0x90>)
 8002d02:	f7fd fc3b 	bl	800057c <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <toSteps+0x94>)
 8002d14:	f7fd fd5c 	bl	80007d0 <__aeabi_ddiv>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	461d      	mov	r5, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7fd fbd3 	bl	80004cc <__aeabi_f2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f7fd fc25 	bl	800057c <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4614      	mov	r4, r2
 8002d38:	461d      	mov	r5, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fbc4 	bl	80004cc <__aeabi_f2d>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	f7fd fc16 	bl	800057c <__aeabi_dmul>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	f7fd fe22 	bl	80009a0 <__aeabi_d2iz>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60fb      	str	r3, [r7, #12]
	return steps;
 8002d60:	68fb      	ldr	r3, [r7, #12]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40690000 	.word	0x40690000
 8002d70:	40768000 	.word	0x40768000

08002d74 <stopMotorMovement>:

static inline void stopMotorMovement(motor_t * motor)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	333c      	adds	r3, #60	@ 0x3c
 8002d80:	2100      	movs	r1, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fcfc 	bl	8005780 <HAL_TIM_OC_Stop_IT>
	motor->active_movement_flag = 0;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	731a      	strb	r2, [r3, #12]
	initializeDefaults(motor);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 ff8c 	bl	8003cac <initializeDefaults>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <trapezMove>:

static inline void trapezMove(motion_t* mt)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	if (mt->step >= 0 && mt->step < mt->acc_steps)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db1b      	blt.n	8002de4 <trapezMove+0x48>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	da15      	bge.n	8002de4 <trapezMove+0x48>
	{
		mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6a12      	ldr	r2, [r2, #32]
 8002dc0:	3201      	adds	r2, #1
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd4:	f004 f85e 	bl	8006e94 <sqrtf>
 8002dd8:	eef0 7a40 	vmov.f32	s15, s0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edc3 7a03 	vstr	s15, [r3, #12]
 8002de2:	e043      	b.n	8002e6c <trapezMove+0xd0>
		// motion.v = acc_ramp[motion.step]
	}
	else if (mt->const_steps != 0 && mt->step >= mt->acc_steps && mt->step < (mt->total_steps - mt->dec_steps))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d018      	beq.n	8002e1e <trapezMove+0x82>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	db12      	blt.n	8002e1e <trapezMove+0x82>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6919      	ldr	r1, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	1acb      	subs	r3, r1, r3
 8002e06:	429a      	cmp	r2, r3
 8002e08:	da09      	bge.n	8002e1e <trapezMove+0x82>
		mt->v = mt->V_MAX;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	edc3 7a03 	vstr	s15, [r3, #12]
 8002e1c:	e026      	b.n	8002e6c <trapezMove+0xd0>
	else if (mt->step >= (mt->total_steps - mt->dec_steps) && mt->step < mt->total_steps)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	1acb      	subs	r3, r1, r3
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	db1d      	blt.n	8002e6c <trapezMove+0xd0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	da17      	bge.n	8002e6c <trapezMove+0xd0>
	{
		mt->v = sqrtf(2 * mt->DEC_MAX * (mt->total_steps - mt->step));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6911      	ldr	r1, [r2, #16]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6a12      	ldr	r2, [r2, #32]
 8002e48:	1a8a      	subs	r2, r1, r2
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e58:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5c:	f004 f81a 	bl	8006e94 <sqrtf>
 8002e60:	eef0 7a40 	vmov.f32	s15, s0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edc3 7a03 	vstr	s15, [r3, #12]
		// motion.v = acc_ramp[motion.total_steps - motion.step]
	}
}
 8002e6a:	e7ff      	b.n	8002e6c <trapezMove+0xd0>
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_OC_DelayElapsedCallback>:
 * Every other motion.cycle, as motion.step only triggers on rising edge,
 * the velocity and the compare value is changed depending on current state of velocity ramp.
 *
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	int8_t index;
	motor_t* motor;

	//To know which timer and thus which motor caused the interrupt
	if (htim->Instance == motors[0]->motion.motor_control_timer.Instance){ index = 0; }
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b5a      	ldr	r3, [pc, #360]	@ (8002fec <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d102      	bne.n	8002e90 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e026      	b.n	8002ede <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[1]->motion.motor_control_timer.Instance){ index = 1; }
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b55      	ldr	r3, [pc, #340]	@ (8002fec <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d102      	bne.n	8002ea4 <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	77fb      	strb	r3, [r7, #31]
 8002ea2:	e01c      	b.n	8002ede <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[2]->motion.motor_control_timer.Instance){ index = 2; }
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b50      	ldr	r3, [pc, #320]	@ (8002fec <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d102      	bne.n	8002eb8 <HAL_TIM_OC_DelayElapsedCallback+0x44>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e012      	b.n	8002ede <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[3]->motion.motor_control_timer.Instance){ index = 3; }
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8002fec <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d102      	bne.n	8002ecc <HAL_TIM_OC_DelayElapsedCallback+0x58>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e008      	b.n	8002ede <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[4]->motion.motor_control_timer.Instance){ index = 4; }
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b46      	ldr	r3, [pc, #280]	@ (8002fec <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 8002eda:	2304      	movs	r3, #4
 8002edc:	77fb      	strb	r3, [r7, #31]

	motor = motors[index];
 8002ede:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ee2:	4a42      	ldr	r2, [pc, #264]	@ (8002fec <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8002ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee8:	61bb      	str	r3, [r7, #24]
	motion_t* mt = &motor->motion;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	3310      	adds	r3, #16
 8002eee:	617b      	str	r3, [r7, #20]

	//Stop timer and movement if the robot reaches its destination
	if (mt->motion_mode == MOTION_TRAPEZ && mt->step >= mt->total_steps)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_TIM_OC_DelayElapsedCallback+0x9a>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	db03      	blt.n	8002f0e <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	{
		stopMotorMovement(motor);
 8002f06:	69b8      	ldr	r0, [r7, #24]
 8002f08:	f7ff ff34 	bl	8002d74 <stopMotorMovement>
		return;
 8002f0c:	e06a      	b.n	8002fe4 <HAL_TIM_OC_DelayElapsedCallback+0x170>
	}

	if (mt->cycle % 2 == 0) //Change velocity only every other cycle because step only triggers on rising edge
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d13d      	bne.n	8002f96 <HAL_TIM_OC_DelayElapsedCallback+0x122>
	{
		switch(mt->motion_mode)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_TIM_OC_DelayElapsedCallback+0xbc>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db31      	blt.n	8002f8c <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d82e      	bhi.n	8002f8c <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8002f2e:	e003      	b.n	8002f38 <HAL_TIM_OC_DelayElapsedCallback+0xc4>
		{
		case MOTION_TRAPEZ:
			trapezMove(mt);
 8002f30:	6978      	ldr	r0, [r7, #20]
 8002f32:	f7ff ff33 	bl	8002d9c <trapezMove>
			break;
 8002f36:	e029      	b.n	8002f8c <HAL_TIM_OC_DelayElapsedCallback+0x118>
		case MOTION_HOME:
		case MOTION_GRIP:
			if (mt->step >= 0 && mt->step < mt->acc_steps)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db1b      	blt.n	8002f78 <HAL_TIM_OC_DelayElapsedCallback+0x104>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	da15      	bge.n	8002f78 <HAL_TIM_OC_DelayElapsedCallback+0x104>
				mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	6a12      	ldr	r2, [r2, #32]
 8002f54:	3201      	adds	r2, #1
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f64:	eeb0 0a67 	vmov.f32	s0, s15
 8002f68:	f003 ff94 	bl	8006e94 <sqrtf>
 8002f6c:	eef0 7a40 	vmov.f32	s15, s0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	edc3 7a03 	vstr	s15, [r3, #12]
			else
				mt->v = mt->V_MAX;

			break;
 8002f76:	e008      	b.n	8002f8a <HAL_TIM_OC_DelayElapsedCallback+0x116>
				mt->v = mt->V_MAX;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8002f8a:	bf00      	nop
		}
		mt->step++;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	621a      	str	r2, [r3, #32]
	}

	mt->cycle++;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_GPIO_TogglePin(motor->gpio_ports.step, motor->gpio_pins.step);
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f001 fa29 	bl	8004406 <HAL_GPIO_TogglePin>
	 *	But this is not the answer since the time has to be converted into timer ticks.
	 *	The timer runs at 2 MHz so we need to divide our current period duration by 1 / 2000000 s or 0.5 µs.
	 *	-> delay in ticks = 1/(2*v)/0.0000005 = 2000000/(2*v)
	 */

	int32_t delay = 2000000 / (2 * motor->motion.v);
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002fbe:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002ff0 <HAL_TIM_OC_DelayElapsedCallback+0x17c>
 8002fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fca:	ee17 3a90 	vmov	r3, s15
 8002fce:	613b      	str	r3, [r7, #16]
	//Add delay to current compare value in register
	int32_t total_delay = __HAL_TIM_GET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1) + delay;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1, total_delay);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000054c 	.word	0x2000054c
 8002ff0:	49f42400 	.word	0x49f42400

08002ff4 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupt service routine for timer 9, which periodically invokes status checks.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e024      	b.n	800304c <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if (htim->Instance == motors[i]->status_check_timer.Instance)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4915      	ldr	r1, [pc, #84]	@ (800305c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	429a      	cmp	r2, r3
 8003014:	d117      	bne.n	8003046 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if (motors[i]->active_movement_flag)
 8003016:	4a11      	ldr	r2, [pc, #68]	@ (800305c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	7b1b      	ldrb	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <HAL_TIM_PeriodElapsedCallback+0x40>
				motors[i]->status_flag = 1;
 8003024:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			else
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);

			break;
 8003032:	e00f      	b.n	8003054 <HAL_TIM_PeriodElapsedCallback+0x60>
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);
 8003034:	4a09      	ldr	r2, [pc, #36]	@ (800305c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	3388      	adds	r3, #136	@ 0x88
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fa00 	bl	8005444 <HAL_TIM_Base_Stop_IT>
			break;
 8003044:	e006      	b.n	8003054 <HAL_TIM_PeriodElapsedCallback+0x60>
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b04      	cmp	r3, #4
 8003050:	ddd7      	ble.n	8003002 <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
//	writeDisplay("HAHA");
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	2000054c 	.word	0x2000054c

08003060 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)  // Prüfen ob User Button
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003070:	d106      	bne.n	8003080 <HAL_GPIO_EXTI_Callback+0x20>
	{
		toggle_inverse_motor_direction(motors[4]->driver);
 8003072:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_GPIO_EXTI_Callback+0x28>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fa56 	bl	800352c <toggle_inverse_motor_direction>
	}
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	2000054c 	.word	0x2000054c

0800308c <moveDegrees>:

/*
 * Initiates motor movement by starting the timer and calculating the steps
 */
void moveDegrees(float degrees, motor_t* motor)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	ed87 0a01 	vstr	s0, [r7, #4]
 8003096:	6038      	str	r0, [r7, #0]
	if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f001 f97c 	bl	80043a4 <HAL_GPIO_ReadPin>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d105      	bne.n	80030be <moveDegrees+0x32>
		tmc2209_enable(motor->driver);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fccf 	bl	8002a5c <tmc2209_enable>

	motor->motion.total_steps = toSteps(degrees, motor); //Convert degrees to steps
 80030be:	6838      	ldr	r0, [r7, #0]
 80030c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80030c4:	f7ff fe0a 	bl	8002cdc <toSteps>
 80030c8:	4602      	mov	r2, r0
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	621a      	str	r2, [r3, #32]
	motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration and deceleration steps
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	6912      	ldr	r2, [r2, #16]
 80030d6:	fb03 f202 	mul.w	r2, r3, r2
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.DEC_MAX);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	6912      	ldr	r2, [r2, #16]
 80030f2:	fb03 f202 	mul.w	r2, r3, r2
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	461a      	mov	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.const_steps = motor->motion.total_steps - (motor->motion.acc_steps + motor->motion.dec_steps);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6a1a      	ldr	r2, [r3, #32]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	440b      	add	r3, r1
 8003114:	1ad2      	subs	r2, r2, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

	motion_mode_t motion_mode = MOTION_TRAPEZ;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]

	initMovementVars(motor, motion_mode);
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	4619      	mov	r1, r3
 8003122:	6838      	ldr	r0, [r7, #0]
 8003124:	f000 f91e 	bl	8003364 <initMovementVars>

	if (motor->motion.const_steps < 0)	//If acceleration steps + deceleration steps are bigger than total steps
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	da12      	bge.n	8003156 <moveDegrees+0xca>
	{
		motor->motion.acc_steps = motor->motion.total_steps / 2;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	0fda      	lsrs	r2, r3, #31
 8003136:	4413      	add	r3, r2
 8003138:	105b      	asrs	r3, r3, #1
 800313a:	461a      	mov	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	629a      	str	r2, [r3, #40]	@ 0x28
		motor->motion.dec_steps = motor->motion.total_steps / 2;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	0fda      	lsrs	r2, r3, #31
 8003146:	4413      	add	r3, r2
 8003148:	105b      	asrs	r3, r3, #1
 800314a:	461a      	mov	r2, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	62da      	str	r2, [r3, #44]	@ 0x2c
		motor->motion.const_steps = 0;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	//Start timer in output compare with interrupt
	startMovement(motor);
 8003156:	6838      	ldr	r0, [r7, #0]
 8003158:	f000 f91e 	bl	8003398 <startMovement>

	startStatusChecks(motor);
 800315c:	6838      	ldr	r0, [r7, #0]
 800315e:	f000 f93a 	bl	80033d6 <startStatusChecks>
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <grip>:

void grip()
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
	motor_t * motor5 = motors[4];
 8003172:	4b2a      	ldr	r3, [pc, #168]	@ (800321c <grip+0xb0>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	607b      	str	r3, [r7, #4]

	disable_inverse_motor_direction(motor5->driver);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f94c 	bl	800241c <disable_inverse_motor_direction>
	moveDegrees(10000, motor5);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8003220 <grip+0xb4>
 800318a:	f7ff ff7f 	bl	800308c <moveDegrees>
	while(motor5->active_movement_flag);
 800318e:	bf00      	nop
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7b1b      	ldrb	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1fb      	bne.n	8003190 <grip+0x24>

	enable_inverse_motor_direction(motor5->driver);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f92a 	bl	80023f8 <enable_inverse_motor_direction>

	if (HAL_GPIO_ReadPin(motor5->gpio_ports.mot_en, motor5->gpio_pins.mot_en) == GPIO_PIN_SET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f001 f8f6 	bl	80043a4 <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <grip+0x5e>
		tmc2209_enable(motor5->driver);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fc49 	bl	8002a5c <tmc2209_enable>

	motor5->motion.acc_steps = (motor5->motion.V_MAX * motor5->motion.V_MAX) / (2 * motor5->motion.ACC_MAX); //Calculate total acceleration and deceleration steps
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6912      	ldr	r2, [r2, #16]
 80031d2:	fb03 f202 	mul.w	r2, r3, r2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	629a      	str	r2, [r3, #40]	@ 0x28

	motion_mode_t motion_mode = MOTION_GRIP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	70fb      	strb	r3, [r7, #3]
	initMovementVars(motor5, motion_mode);
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	4619      	mov	r1, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8b8 	bl	8003364 <initMovementVars>

	startMovement(motor5);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8cf 	bl	8003398 <startMovement>
	startStatusChecks(motor5);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8eb 	bl	80033d6 <startStatusChecks>
	while (motor5->stallguard.stall_flag == 0)
 8003200:	e002      	b.n	8003208 <grip+0x9c>
	{
		checkDriverStatus(motor5);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f974 	bl	80034f0 <checkDriverStatus>
	while (motor5->stallguard.stall_flag == 0)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f7      	beq.n	8003202 <grip+0x96>
	}
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	2000054c 	.word	0x2000054c
 8003220:	461c4000 	.word	0x461c4000

08003224 <goHome>:

void goHome()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_MOTOR; i++)
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e03e      	b.n	80032ae <goHome+0x8a>
	{
		motor_t * motor = motors[i];
 8003230:	4a4b      	ldr	r2, [pc, #300]	@ (8003360 <goHome+0x13c>)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	60bb      	str	r3, [r7, #8]
//		if (i == 3)
//			continue;
		if (i == 4)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d105      	bne.n	800324c <goHome+0x28>
		{
			enable_inverse_motor_direction(motor->driver);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff f8d6 	bl	80023f8 <enable_inverse_motor_direction>
		}

		motion_mode_t motion_mode = MOTION_HOME;
 800324c:	2301      	movs	r3, #1
 800324e:	71fb      	strb	r3, [r7, #7]

		if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f001 f8a0 	bl	80043a4 <HAL_GPIO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <goHome+0x52>
			tmc2209_enable(motor->driver);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fbf3 	bl	8002a5c <tmc2209_enable>

		motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration and deceleration steps
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	6912      	ldr	r2, [r2, #16]
 800327e:	fb03 f202 	mul.w	r2, r3, r2
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	461a      	mov	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	629a      	str	r2, [r3, #40]	@ 0x28

		initMovementVars(motor, motion_mode);
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	4619      	mov	r1, r3
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	f000 f864 	bl	8003364 <initMovementVars>

		startMovement(motor);
 800329c:	68b8      	ldr	r0, [r7, #8]
 800329e:	f000 f87b 	bl	8003398 <startMovement>
		startStatusChecks(motor);
 80032a2:	68b8      	ldr	r0, [r7, #8]
 80032a4:	f000 f897 	bl	80033d6 <startStatusChecks>
	for (int i = 0; i < NUMBER_OF_MOTOR; i++)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3301      	adds	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	ddbd      	ble.n	8003230 <goHome+0xc>
	}

	while(motors[0]->stallguard.stall_flag == 0
 80032b4:	e018      	b.n	80032e8 <goHome+0xc4>
			|| motors[1]->stallguard.stall_flag == 0
			|| motors[2]->stallguard.stall_flag == 0
			|| motors[3]->stallguard.stall_flag == 0
			|| motors[4]->stallguard.stall_flag == 0)
	{
		checkDriverStatus(motors[0]);
 80032b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003360 <goHome+0x13c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f918 	bl	80034f0 <checkDriverStatus>
		checkDriverStatus(motors[1]);
 80032c0:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <goHome+0x13c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f913 	bl	80034f0 <checkDriverStatus>
		checkDriverStatus(motors[2]);
 80032ca:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <goHome+0x13c>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f90e 	bl	80034f0 <checkDriverStatus>
		checkDriverStatus(motors[3]);
 80032d4:	4b22      	ldr	r3, [pc, #136]	@ (8003360 <goHome+0x13c>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f909 	bl	80034f0 <checkDriverStatus>
		checkDriverStatus(motors[4]);
 80032de:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <goHome+0x13c>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f904 	bl	80034f0 <checkDriverStatus>
	while(motors[0]->stallguard.stall_flag == 0
 80032e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <goHome+0x13c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
			|| motors[4]->stallguard.stall_flag == 0)
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0e0      	beq.n	80032b6 <goHome+0x92>
			|| motors[1]->stallguard.stall_flag == 0
 80032f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <goHome+0x13c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0da      	beq.n	80032b6 <goHome+0x92>
			|| motors[2]->stallguard.stall_flag == 0
 8003300:	4b17      	ldr	r3, [pc, #92]	@ (8003360 <goHome+0x13c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0d4      	beq.n	80032b6 <goHome+0x92>
			|| motors[3]->stallguard.stall_flag == 0
 800330c:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <goHome+0x13c>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ce      	beq.n	80032b6 <goHome+0x92>
			|| motors[4]->stallguard.stall_flag == 0)
 8003318:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <goHome+0x13c>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0c8      	beq.n	80032b6 <goHome+0x92>
	}

	motors[0]->stallguard.stall_flag = 0;
 8003324:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <goHome+0x13c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	motors[1]->stallguard.stall_flag = 0;
 800332e:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <goHome+0x13c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	motors[2]->stallguard.stall_flag = 0;
 8003338:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <goHome+0x13c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	motors[3]->stallguard.stall_flag = 0;
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <goHome+0x13c>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	motors[4]->stallguard.stall_flag = 0;
 800334c:	4b04      	ldr	r3, [pc, #16]	@ (8003360 <goHome+0x13c>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2000054c 	.word	0x2000054c

08003364 <initMovementVars>:

void initMovementVars(motor_t * motor, motion_mode_t motion_mode)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
	motor->motion.v = 0;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	61da      	str	r2, [r3, #28]
	motor->motion.step = 0;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->motion.motion_mode = motion_mode;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <startMovement>:

void startMovement(motor_t * motor)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_ports.step, motor->gpio_pins.step, GPIO_PIN_RESET);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80033ac:	2200      	movs	r2, #0
 80033ae:	4619      	mov	r1, r3
 80033b0:	f001 f810 	bl	80043d4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&motor->motion.motor_control_timer, TIM_CHANNEL_1, 1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b8:	2201      	movs	r2, #1
 80033ba:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_OC_Start_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	333c      	adds	r3, #60	@ 0x3c
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 f8c6 	bl	8005554 <HAL_TIM_OC_Start_IT>

	motor->active_movement_flag = 1;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	731a      	strb	r2, [r3, #12]
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <startStatusChecks>:

void startStatusChecks(motor_t * motor)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&motor->status_check_timer);  //Timer for periodical status checks
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3388      	adds	r3, #136	@ 0x88
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 ffbe 	bl	8005364 <HAL_TIM_Base_Start_IT>

	motor->status_flag = 0;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	motor->stallguard.previous_smoothed_result = 0;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

//	while(motor->active_movement_flag)		//While motor is moving, periodically check driver status
//	{
//		checkDriverStatus(motor);
//	}
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <checkStall>:

/*
 * Also work in progress, now simply outputs stallguard result to monitor.
 */
void checkStall(uint16_t stallguard_result, motor_t* motor)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	6039      	str	r1, [r7, #0]
 800340c:	80fb      	strh	r3, [r7, #6]
	stallguard_t* sg = &motor->stallguard;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	33d0      	adds	r3, #208	@ 0xd0
 8003412:	613b      	str	r3, [r7, #16]
	uint16_t result = stallguard_result;
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	82fb      	strh	r3, [r7, #22]
//	float diff;

	sg->smoothed_result = ALPHA * stallguard_result + (1-ALPHA) * sg->previous_smoothed_result;
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003422:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8003426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003430:	eef6 6a08 	vmov.f32	s13, #104	@ 0x3f400000  0.750
 8003434:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	edc3 7a04 	vstr	s15, [r3, #16]
//	smoothed_result_g = sg->smoothed_result;
//	stallguard_result_g = stallguard_result;
//	v_g = motor->motion.v;

//	diff = sg->smoothed_result - sg->previous_smoothed_result;
	float k = sg->MAX_STALLGUARD_VALUE / (float) motor->motion.V_MAX;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	edd3 6a02 	vldr	s13, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003458:	edc7 7a03 	vstr	s15, [r7, #12]

	float dynamic_stall_threshold = k * motor->motion.v - sg->STALL_BUFFER;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003462:	edd7 7a03 	vldr	s15, [r7, #12]
 8003466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	899b      	ldrh	r3, [r3, #12]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800347a:	edc7 7a02 	vstr	s15, [r7, #8]

	if (motor->ID == '5')
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b35      	cmp	r3, #53	@ 0x35
 8003484:	d107      	bne.n	8003496 <checkStall+0x94>
	{
		result = sg->smoothed_result;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	edd3 7a04 	vldr	s15, [r3, #16]
 800348c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003490:	ee17 3a90 	vmov	r3, s15
 8003494:	82fb      	strh	r3, [r7, #22]
	}

	if (result < dynamic_stall_threshold)
 8003496:	8afb      	ldrh	r3, [r7, #22]
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80034a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ac:	dd15      	ble.n	80034da <checkStall+0xd8>
	{
		sg->consecutive_low_counter++;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	8b1b      	ldrh	r3, [r3, #24]
 80034b2:	3301      	adds	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	831a      	strh	r2, [r3, #24]
		if (sg->consecutive_low_counter >= sg->MAX_CONSECUTIVE_LOW)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	8b1a      	ldrh	r2, [r3, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	889b      	ldrh	r3, [r3, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d30c      	bcc.n	80034e0 <checkStall+0xde>
		{
			stopMotorMovement(motor);
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	f7ff fc54 	bl	8002d74 <stopMotorMovement>
			sg->stall_flag = 1;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2201      	movs	r2, #1
 80034d0:	739a      	strb	r2, [r3, #14]
			sg->consecutive_low_counter = 0;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2200      	movs	r2, #0
 80034d6:	831a      	strh	r2, [r3, #24]
 80034d8:	e002      	b.n	80034e0 <checkStall+0xde>
		}
	}
	else
	{
		sg->consecutive_low_counter = 0;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2200      	movs	r2, #0
 80034de:	831a      	strh	r2, [r3, #24]
	}

	sg->previous_smoothed_result = sg->smoothed_result;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	615a      	str	r2, [r3, #20]

}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <checkDriverStatus>:
 * This function is continuously called while a motor is active.
 * It only does something when status_flag has been set to 1.
 * Then it calls the checkOverheat and Load functions.
 */
void checkDriverStatus(motor_t* motor)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	if (motor->status_flag)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <checkDriverStatus+0x34>
	{
//		tmc2209_status_t status;
		uint16_t stallguard_result;

		motor->status_flag = 0;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
//		status = get_status(motor->driver);
//
//		checkOverheating(status);

		stallguard_result = get_stall_guard_result(motor->driver);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fff6 	bl	8002502 <get_stall_guard_result>
 8003516:	4603      	mov	r3, r0
 8003518:	81fb      	strh	r3, [r7, #14]
		checkStall(stallguard_result, motor);
 800351a:	89fb      	ldrh	r3, [r7, #14]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff6f 	bl	8003402 <checkStall>
	}
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <toggle_inverse_motor_direction>:

void toggle_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 1 - stepper_driver->global_config_.shaft;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800353a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f1c3 0301 	rsb	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	b2d9      	uxtb	r1, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8003552:	f361 03c3 	bfi	r3, r1, #3, #1
 8003556:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff f9f0 	bl	8002940 <write_stored_global_config>
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <init_motor_1>:
extern UART_HandleTypeDef huart5;

void initializeDefaults(motor_t * motor);

void init_motor_1(motor_t *motor1, tmc2209_stepper_driver_t *driver1)
{
 8003568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356a:	b093      	sub	sp, #76	@ 0x4c
 800356c:	af10      	add	r7, sp, #64	@ 0x40
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor1);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fb9a 	bl	8003cac <initializeDefaults>
	motor1->ID = '1';
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2231      	movs	r2, #49	@ 0x31
 800357c:	701a      	strb	r2, [r3, #0]

	motor1->gear_ratio = GEAR_RATIO_M_1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4c      	ldr	r2, [pc, #304]	@ (80036b4 <init_motor_1+0x14c>)
 8003582:	605a      	str	r2, [r3, #4]
	motor1->microsteps = MICROSTEPS_M_1;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	609a      	str	r2, [r3, #8]
	motor1->motion.V_MAX 	= V_MAX_M_1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8003590:	611a      	str	r2, [r3, #16]
	motor1->motion.ACC_MAX = ACC_MAX_M_1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003598:	615a      	str	r2, [r3, #20]
	motor1->motion.DEC_MAX = DEC_MAX_M_1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80035a0:	619a      	str	r2, [r3, #24]

	motor1->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2214      	movs	r2, #20
 80035a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor1->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2246      	movs	r2, #70	@ 0x46
 80035ae:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor1->gpio_pins.step 		= STEP_1_Pin;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035b8:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
	motor1->gpio_pins.dir 		= DIR_1_Pin;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035c2:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
	motor1->gpio_pins.mot_en 	= MOT_EN_1_Pin;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035cc:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
//	motor1->gpio_pins.diag 		= DIAG_1_Pin;
	motor1->gpio_ports.step 	= STEP_1_GPIO_Port;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a39      	ldr	r2, [pc, #228]	@ (80036b8 <init_motor_1+0x150>)
 80035d4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	motor1->gpio_ports.dir 		= DIR_1_GPIO_Port;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a37      	ldr	r2, [pc, #220]	@ (80036b8 <init_motor_1+0x150>)
 80035dc:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor1->gpio_ports.mot_en 	= MOT_EN_1_GPIO_Port;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a35      	ldr	r2, [pc, #212]	@ (80036b8 <init_motor_1+0x150>)
 80035e4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
//	motor1->gpio_ports.diag		= DIAG_1_GPIO_Port;

	motor1->motion.motor_control_timer = htim12;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a34      	ldr	r2, [pc, #208]	@ (80036bc <init_motor_1+0x154>)
 80035ec:	333c      	adds	r3, #60	@ 0x3c
 80035ee:	4611      	mov	r1, r2
 80035f0:	2248      	movs	r2, #72	@ 0x48
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fca2 	bl	8006f3c <memcpy>
	motor1->status_check_timer = htim1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a31      	ldr	r2, [pc, #196]	@ (80036c0 <init_motor_1+0x158>)
 80035fc:	3388      	adds	r3, #136	@ 0x88
 80035fe:	4611      	mov	r1, r2
 8003600:	2248      	movs	r2, #72	@ 0x48
 8003602:	4618      	mov	r0, r3
 8003604:	f003 fc9a 	bl	8006f3c <memcpy>
	motor1->uart = huart1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a2e      	ldr	r2, [pc, #184]	@ (80036c4 <init_motor_1+0x15c>)
 800360c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003610:	4611      	mov	r1, r2
 8003612:	2248      	movs	r2, #72	@ 0x48
 8003614:	4618      	mov	r0, r3
 8003616:	f003 fc91 	bl	8006f3c <memcpy>

	motor1->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f64e 7295 	movw	r2, #61333	@ 0xef95
 8003620:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor1->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_1;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor1->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_1;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a26      	ldr	r2, [pc, #152]	@ (80036c8 <init_motor_1+0x160>)
 8003630:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor1->stallguard.STALL_BUFFER = STALL_BUFFER_M_1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2214      	movs	r2, #20
 8003638:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver1, huart1);
 800363c:	4e21      	ldr	r6, [pc, #132]	@ (80036c4 <init_motor_1+0x15c>)
 800363e:	466d      	mov	r5, sp
 8003640:	f106 040c 	add.w	r4, r6, #12
 8003644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003650:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003654:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003658:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	f7ff f9ce 	bl	80029fe <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver1, motor1->gpio_pins.mot_en, motor1->gpio_ports.mot_en);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8b3 10f0 	ldrh.w	r1, [r3, #240]	@ 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800366e:	461a      	mov	r2, r3
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f7ff f9dc 	bl	8002a2e <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 8003676:	2200      	movs	r2, #0
 8003678:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	f7fe fd85 	bl	800218c <tmc2209_setup>
	set_micro_steps_per_step(driver1, motor1->microsteps);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	b29b      	uxth	r3, r3
 8003688:	4619      	mov	r1, r3
 800368a:	6838      	ldr	r0, [r7, #0]
 800368c:	f7fe fdce 	bl	800222c <set_micro_steps_per_step>
	set_all_current_percent_values(driver1, motor1->current_settings.RUN_CURRENT_PERCENT, motor1->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 800369c:	2300      	movs	r3, #0
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f7fe fe60 	bl	8002364 <set_all_current_percent_values>

	motor1->driver = driver1;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b4:	41200000 	.word	0x41200000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	2000030c 	.word	0x2000030c
 80036c0:	200000cc 	.word	0x200000cc
 80036c4:	2000042c 	.word	0x2000042c
 80036c8:	43280000 	.word	0x43280000

080036cc <init_motor_2>:

void init_motor_2(motor_t *motor2, tmc2209_stepper_driver_t *driver2)
{
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ce:	b093      	sub	sp, #76	@ 0x4c
 80036d0:	af10      	add	r7, sp, #64	@ 0x40
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor2);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fae8 	bl	8003cac <initializeDefaults>
	motor2->ID = '2';
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2232      	movs	r2, #50	@ 0x32
 80036e0:	701a      	strb	r2, [r3, #0]

	motor2->gear_ratio = GEAR_RATIO_M_2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003850 <init_motor_2+0x184>)
 80036e6:	605a      	str	r2, [r3, #4]
	motor2->microsteps = MICROSTEPS_M_2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	609a      	str	r2, [r3, #8]
	motor2->motion.V_MAX 	= V_MAX_M_2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80036f4:	611a      	str	r2, [r3, #16]
	motor2->motion.ACC_MAX = ACC_MAX_M_2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80036fc:	615a      	str	r2, [r3, #20]
	motor2->motion.DEC_MAX = DEC_MAX_M_2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8003704:	619a      	str	r2, [r3, #24]

	motor2->motion.v = 0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	61da      	str	r2, [r3, #28]
	motor2->motion.total_steps = 0;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	621a      	str	r2, [r3, #32]
	motor2->motion.const_steps = 0;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24
	motor2->motion.acc_steps = 0;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	629a      	str	r2, [r3, #40]	@ 0x28
	motor2->motion.dec_steps = 0;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor2->motion.step = 0;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
	motor2->motion.cycle = 0;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	635a      	str	r2, [r3, #52]	@ 0x34

	motor2->active_movement_flag = 0;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	731a      	strb	r2, [r3, #12]

	motor2->status_flag = 0;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

	motor2->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	225a      	movs	r2, #90	@ 0x5a
 8003744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor2->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2264      	movs	r2, #100	@ 0x64
 800374c:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor2->gpio_pins.step 		= STEP_2_Pin;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2280      	movs	r2, #128	@ 0x80
 8003754:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
	motor2->gpio_pins.dir 		= DIR_2_Pin;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800375e:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
	motor2->gpio_pins.mot_en 	= MOT_EN_2_Pin;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2240      	movs	r2, #64	@ 0x40
 8003766:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
//	motor2->gpio_pins.diag 		= DIAG_2_Pin;
	motor2->gpio_ports.step 	= STEP_2_GPIO_Port;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a39      	ldr	r2, [pc, #228]	@ (8003854 <init_motor_2+0x188>)
 800376e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	motor2->gpio_ports.dir 		= DIR_2_GPIO_Port;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a37      	ldr	r2, [pc, #220]	@ (8003854 <init_motor_2+0x188>)
 8003776:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor2->gpio_ports.mot_en 	= MOT_EN_2_GPIO_Port;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a35      	ldr	r2, [pc, #212]	@ (8003854 <init_motor_2+0x188>)
 800377e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
//	motor2->gpio_ports.diag 	= DIAG_2_GPIO_Port;

	motor2->motion.motor_control_timer = htim13;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a34      	ldr	r2, [pc, #208]	@ (8003858 <init_motor_2+0x18c>)
 8003786:	333c      	adds	r3, #60	@ 0x3c
 8003788:	4611      	mov	r1, r2
 800378a:	2248      	movs	r2, #72	@ 0x48
 800378c:	4618      	mov	r0, r3
 800378e:	f003 fbd5 	bl	8006f3c <memcpy>
	motor2->status_check_timer = htim6;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a31      	ldr	r2, [pc, #196]	@ (800385c <init_motor_2+0x190>)
 8003796:	3388      	adds	r3, #136	@ 0x88
 8003798:	4611      	mov	r1, r2
 800379a:	2248      	movs	r2, #72	@ 0x48
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fbcd 	bl	8006f3c <memcpy>

	motor2->uart = huart6;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <init_motor_2+0x194>)
 80037a6:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80037aa:	4611      	mov	r1, r2
 80037ac:	2248      	movs	r2, #72	@ 0x48
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 fbc4 	bl	8006f3c <memcpy>

	motor2->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 80037ba:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor2->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor2->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a26      	ldr	r2, [pc, #152]	@ (8003864 <init_motor_2+0x198>)
 80037ca:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor2->stallguard.STALL_BUFFER = STALL_BUFFER_M_2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2228      	movs	r2, #40	@ 0x28
 80037d2:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver2, motor2->uart);
 80037d6:	687e      	ldr	r6, [r7, #4]
 80037d8:	466d      	mov	r5, sp
 80037da:	f506 7488 	add.w	r4, r6, #272	@ 0x110
 80037de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80037ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80037f2:	f506 7382 	add.w	r3, r6, #260	@ 0x104
 80037f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f8:	6838      	ldr	r0, [r7, #0]
 80037fa:	f7ff f900 	bl	80029fe <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver2, motor2->gpio_pins.mot_en, motor2->gpio_ports.mot_en);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8b3 10f0 	ldrh.w	r1, [r3, #240]	@ 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800380a:	461a      	mov	r2, r3
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	f7ff f90e 	bl	8002a2e <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_0);
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003818:	6838      	ldr	r0, [r7, #0]
 800381a:	f7fe fcb7 	bl	800218c <tmc2209_setup>
//	disable_stealth_chop(motor2->driver);
	set_micro_steps_per_step(driver2, motor2->microsteps);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	b29b      	uxth	r3, r3
 8003824:	4619      	mov	r1, r3
 8003826:	6838      	ldr	r0, [r7, #0]
 8003828:	f7fe fd00 	bl	800222c <set_micro_steps_per_step>
	set_all_current_percent_values(driver2, motor2->current_settings.RUN_CURRENT_PERCENT, motor2->current_settings.HOLD_CURRENT_PERCENT, 0);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8003838:	2300      	movs	r3, #0
 800383a:	6838      	ldr	r0, [r7, #0]
 800383c:	f7fe fd92 	bl	8002364 <set_all_current_percent_values>

	motor2->driver = driver2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003850:	40f00000 	.word	0x40f00000
 8003854:	40020000 	.word	0x40020000
 8003858:	20000354 	.word	0x20000354
 800385c:	200001a4 	.word	0x200001a4
 8003860:	20000504 	.word	0x20000504
 8003864:	42a4cccd 	.word	0x42a4cccd

08003868 <init_motor_3>:

void init_motor_3(motor_t *motor3, tmc2209_stepper_driver_t *driver3)
{
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386a:	b093      	sub	sp, #76	@ 0x4c
 800386c:	af10      	add	r7, sp, #64	@ 0x40
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor3);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa1a 	bl	8003cac <initializeDefaults>

	motor3->ID = '3';
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2233      	movs	r2, #51	@ 0x33
 800387c:	701a      	strb	r2, [r3, #0]

	motor3->gear_ratio = GEAR_RATIO_M_3;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a50      	ldr	r2, [pc, #320]	@ (80039c4 <init_motor_3+0x15c>)
 8003882:	605a      	str	r2, [r3, #4]
	motor3->microsteps = MICROSTEPS_M_3;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	609a      	str	r2, [r3, #8]
	motor3->motion.V_MAX 	= V_MAX_M_3;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8003890:	611a      	str	r2, [r3, #16]
	motor3->motion.ACC_MAX = ACC_MAX_M_3;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003898:	615a      	str	r2, [r3, #20]
	motor3->motion.DEC_MAX = DEC_MAX_M_3;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 80038a0:	619a      	str	r2, [r3, #24]

	motor3->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_3;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2228      	movs	r2, #40	@ 0x28
 80038a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor3->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	223c      	movs	r2, #60	@ 0x3c
 80038ae:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor3->gpio_pins.step 		= STEP_3_Pin;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2208      	movs	r2, #8
 80038b6:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
	motor3->gpio_pins.dir 		= DIR_3_Pin;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038c0:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
	motor3->gpio_pins.mot_en 	= MOT_EN_3_Pin;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2204      	movs	r2, #4
 80038c8:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor3->gpio_pins.diag 		= DIAG_3_Pin;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d2:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor3->gpio_ports.step 	= STEP_3_GPIO_Port;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a3b      	ldr	r2, [pc, #236]	@ (80039c8 <init_motor_3+0x160>)
 80038da:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	motor3->gpio_ports.dir 		= DIR_3_GPIO_Port;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a39      	ldr	r2, [pc, #228]	@ (80039c8 <init_motor_3+0x160>)
 80038e2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor3->gpio_ports.mot_en 	= MOT_EN_3_GPIO_Port;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a37      	ldr	r2, [pc, #220]	@ (80039c8 <init_motor_3+0x160>)
 80038ea:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor3->gpio_ports.diag 	= DIAG_3_GPIO_Port;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a36      	ldr	r2, [pc, #216]	@ (80039cc <init_motor_3+0x164>)
 80038f2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	motor3->motion.motor_control_timer = htim3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a35      	ldr	r2, [pc, #212]	@ (80039d0 <init_motor_3+0x168>)
 80038fa:	333c      	adds	r3, #60	@ 0x3c
 80038fc:	4611      	mov	r1, r2
 80038fe:	2248      	movs	r2, #72	@ 0x48
 8003900:	4618      	mov	r0, r3
 8003902:	f003 fb1b 	bl	8006f3c <memcpy>
	motor3->status_check_timer = htim7;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a32      	ldr	r2, [pc, #200]	@ (80039d4 <init_motor_3+0x16c>)
 800390a:	3388      	adds	r3, #136	@ 0x88
 800390c:	4611      	mov	r1, r2
 800390e:	2248      	movs	r2, #72	@ 0x48
 8003910:	4618      	mov	r0, r3
 8003912:	f003 fb13 	bl	8006f3c <memcpy>

	motor3->uart = huart3;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2f      	ldr	r2, [pc, #188]	@ (80039d8 <init_motor_3+0x170>)
 800391a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800391e:	4611      	mov	r1, r2
 8003920:	2248      	movs	r2, #72	@ 0x48
 8003922:	4618      	mov	r0, r3
 8003924:	f003 fb0a 	bl	8006f3c <memcpy>

	motor3->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_3;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 800392e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor3->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_3;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor3->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_3;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a27      	ldr	r2, [pc, #156]	@ (80039dc <init_motor_3+0x174>)
 800393e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor3->stallguard.STALL_BUFFER = STALL_BUFFER_M_3;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2219      	movs	r2, #25
 8003946:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver3, huart3);
 800394a:	4e23      	ldr	r6, [pc, #140]	@ (80039d8 <init_motor_3+0x170>)
 800394c:	466d      	mov	r5, sp
 800394e:	f106 040c 	add.w	r4, r6, #12
 8003952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800395a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800395c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800395e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003962:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003966:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800396a:	6838      	ldr	r0, [r7, #0]
 800396c:	f7ff f847 	bl	80029fe <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver3, motor3->gpio_pins.mot_en, motor3->gpio_ports.mot_en);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8b3 10f0 	ldrh.w	r1, [r3, #240]	@ 0xf0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800397c:	461a      	mov	r2, r3
 800397e:	6838      	ldr	r0, [r7, #0]
 8003980:	f7ff f855 	bl	8002a2e <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_0);
 8003984:	2200      	movs	r2, #0
 8003986:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800398a:	6838      	ldr	r0, [r7, #0]
 800398c:	f7fe fbfe 	bl	800218c <tmc2209_setup>
	set_micro_steps_per_step(driver3, motor3->microsteps);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4619      	mov	r1, r3
 8003998:	6838      	ldr	r0, [r7, #0]
 800399a:	f7fe fc47 	bl	800222c <set_micro_steps_per_step>
	set_all_current_percent_values(driver3, motor3->current_settings.RUN_CURRENT_PERCENT, motor3->current_settings.HOLD_CURRENT_PERCENT, 0);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 80039aa:	2300      	movs	r3, #0
 80039ac:	6838      	ldr	r0, [r7, #0]
 80039ae:	f7fe fcd9 	bl	8002364 <set_all_current_percent_values>

	motor3->driver = driver3;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40f00000 	.word	0x40f00000
 80039c8:	40020800 	.word	0x40020800
 80039cc:	40020400 	.word	0x40020400
 80039d0:	20000114 	.word	0x20000114
 80039d4:	200001ec 	.word	0x200001ec
 80039d8:	200004bc 	.word	0x200004bc
 80039dc:	430c0000 	.word	0x430c0000

080039e0 <init_motor_4>:

void init_motor_4(motor_t *motor4, tmc2209_stepper_driver_t *driver4)
{
 80039e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e2:	b093      	sub	sp, #76	@ 0x4c
 80039e4:	af10      	add	r7, sp, #64	@ 0x40
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor4);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f95e 	bl	8003cac <initializeDefaults>

	motor4->ID = '4';
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2234      	movs	r2, #52	@ 0x34
 80039f4:	701a      	strb	r2, [r3, #0]

	motor4->gear_ratio = GEAR_RATIO_M_4;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b30 <init_motor_4+0x150>)
 80039fa:	605a      	str	r2, [r3, #4]
	motor4->microsteps = MICROSTEPS_M_4;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2208      	movs	r2, #8
 8003a00:	609a      	str	r2, [r3, #8]
	motor4->motion.V_MAX 	= V_MAX_M_4;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003a08:	611a      	str	r2, [r3, #16]
	motor4->motion.ACC_MAX = ACC_MAX_M_4;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8003a10:	615a      	str	r2, [r3, #20]
	motor4->motion.DEC_MAX = DEC_MAX_M_4;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8003a18:	619a      	str	r2, [r3, #24]

	motor4->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_4;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2232      	movs	r2, #50	@ 0x32
 8003a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor4->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_4;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2246      	movs	r2, #70	@ 0x46
 8003a26:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor4->gpio_pins.step 		= STEP_4_Pin;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
	motor4->gpio_pins.dir 		= DIR_4_Pin;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2210      	movs	r2, #16
 8003a36:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
	motor4->gpio_pins.mot_en 	= MOT_EN_4_Pin;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
//	motor4->gpio_pins.diag 		= DIAG_4_Pin;
	motor4->gpio_ports.step 	= STEP_4_GPIO_Port;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a3b      	ldr	r2, [pc, #236]	@ (8003b34 <init_motor_4+0x154>)
 8003a46:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	motor4->gpio_ports.dir 		= DIR_4_GPIO_Port;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a39      	ldr	r2, [pc, #228]	@ (8003b34 <init_motor_4+0x154>)
 8003a4e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor4->gpio_ports.mot_en 	= MOT_EN_4_GPIO_Port;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a37      	ldr	r2, [pc, #220]	@ (8003b34 <init_motor_4+0x154>)
 8003a56:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
//	motor4->gpio_ports.diag 		= DIAG_4_GPIO_Port;

	motor4->motion.motor_control_timer = htim4;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a36      	ldr	r2, [pc, #216]	@ (8003b38 <init_motor_4+0x158>)
 8003a5e:	333c      	adds	r3, #60	@ 0x3c
 8003a60:	4611      	mov	r1, r2
 8003a62:	2248      	movs	r2, #72	@ 0x48
 8003a64:	4618      	mov	r0, r3
 8003a66:	f003 fa69 	bl	8006f3c <memcpy>
	motor4->status_check_timer = htim9;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a33      	ldr	r2, [pc, #204]	@ (8003b3c <init_motor_4+0x15c>)
 8003a6e:	3388      	adds	r3, #136	@ 0x88
 8003a70:	4611      	mov	r1, r2
 8003a72:	2248      	movs	r2, #72	@ 0x48
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 fa61 	bl	8006f3c <memcpy>

	motor4->uart = huart4;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	@ (8003b40 <init_motor_4+0x160>)
 8003a7e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003a82:	4611      	mov	r1, r2
 8003a84:	2248      	movs	r2, #72	@ 0x48
 8003a86:	4618      	mov	r0, r3
 8003a88:	f003 fa58 	bl	8006f3c <memcpy>

	motor4->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_4;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003a92:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor4->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_4;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor4->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_4;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a28      	ldr	r2, [pc, #160]	@ (8003b44 <init_motor_4+0x164>)
 8003aa2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor4->stallguard.STALL_BUFFER = STALL_BUFFER_M_4;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	220c      	movs	r2, #12
 8003aaa:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver4, huart4);
 8003aae:	4e24      	ldr	r6, [pc, #144]	@ (8003b40 <init_motor_4+0x160>)
 8003ab0:	466d      	mov	r5, sp
 8003ab2:	f106 040c 	add.w	r4, r6, #12
 8003ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003ac6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003aca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003ace:	6838      	ldr	r0, [r7, #0]
 8003ad0:	f7fe ff95 	bl	80029fe <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver4, motor4->gpio_pins.mot_en, motor4->gpio_ports.mot_en);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8b3 10f0 	ldrh.w	r1, [r3, #240]	@ 0xf0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6838      	ldr	r0, [r7, #0]
 8003ae4:	f7fe ffa3 	bl	8002a2e <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003aee:	6838      	ldr	r0, [r7, #0]
 8003af0:	f7fe fb4c 	bl	800218c <tmc2209_setup>
	enable_cool_step(driver4, 0, 1);
 8003af4:	2201      	movs	r2, #1
 8003af6:	2100      	movs	r1, #0
 8003af8:	6838      	ldr	r0, [r7, #0]
 8003afa:	f7fe fcc5 	bl	8002488 <enable_cool_step>
	set_micro_steps_per_step(driver4, motor4->microsteps);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f7fe fb90 	bl	800222c <set_micro_steps_per_step>
	set_all_current_percent_values(driver4, motor4->current_settings.RUN_CURRENT_PERCENT, motor4->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6838      	ldr	r0, [r7, #0]
 8003b1c:	f7fe fc22 	bl	8002364 <set_all_current_percent_values>

	motor4->driver = driver4;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b30:	40f00000 	.word	0x40f00000
 8003b34:	40020400 	.word	0x40020400
 8003b38:	2000015c 	.word	0x2000015c
 8003b3c:	2000027c 	.word	0x2000027c
 8003b40:	2000039c 	.word	0x2000039c
 8003b44:	421c0000 	.word	0x421c0000

08003b48 <init_motor_5>:

void init_motor_5(motor_t *motor5, tmc2209_stepper_driver_t *driver5)
{
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4a:	b093      	sub	sp, #76	@ 0x4c
 8003b4c:	af10      	add	r7, sp, #64	@ 0x40
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor5);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8aa 	bl	8003cac <initializeDefaults>

	motor5->ID = '5';
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2235      	movs	r2, #53	@ 0x35
 8003b5c:	701a      	strb	r2, [r3, #0]

	motor5->gear_ratio = GEAR_RATIO_M_5;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003b64:	605a      	str	r2, [r3, #4]
	motor5->microsteps = MICROSTEPS_M_5;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	609a      	str	r2, [r3, #8]
	motor5->motion.V_MAX 	= V_MAX_M_5;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b72:	611a      	str	r2, [r3, #16]
	motor5->motion.ACC_MAX = ACC_MAX_M_5;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003b7a:	615a      	str	r2, [r3, #20]
	motor5->motion.DEC_MAX = DEC_MAX_M_5;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003b82:	619a      	str	r2, [r3, #24]

	motor5->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_5;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2264      	movs	r2, #100	@ 0x64
 8003b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor5->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_5;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2264      	movs	r2, #100	@ 0x64
 8003b90:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor5->gpio_pins.step 		= STEP_5_Pin;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b9a:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
	motor5->gpio_pins.dir 		= DIR_5_Pin;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba4:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
	motor5->gpio_pins.mot_en 	= MOT_EN_5_Pin;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2210      	movs	r2, #16
 8003bac:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor5->gpio_ports.step 	= STEP_5_GPIO_Port;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a38      	ldr	r2, [pc, #224]	@ (8003c94 <init_motor_5+0x14c>)
 8003bb4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
//	motor5->gpio_pins.diag 		= DIAG_5_Pin;
	motor5->gpio_ports.dir 		= DIR_5_GPIO_Port;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a36      	ldr	r2, [pc, #216]	@ (8003c94 <init_motor_5+0x14c>)
 8003bbc:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor5->gpio_ports.mot_en 	= MOT_EN_5_GPIO_Port;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a34      	ldr	r2, [pc, #208]	@ (8003c94 <init_motor_5+0x14c>)
 8003bc4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
//	motor5->gpio_ports.diag 		= DIAG_5_GPIO_Port;

	motor5->motion.motor_control_timer = htim8;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a33      	ldr	r2, [pc, #204]	@ (8003c98 <init_motor_5+0x150>)
 8003bcc:	333c      	adds	r3, #60	@ 0x3c
 8003bce:	4611      	mov	r1, r2
 8003bd0:	2248      	movs	r2, #72	@ 0x48
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f003 f9b2 	bl	8006f3c <memcpy>
	motor5->status_check_timer = htim10;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a30      	ldr	r2, [pc, #192]	@ (8003c9c <init_motor_5+0x154>)
 8003bdc:	3388      	adds	r3, #136	@ 0x88
 8003bde:	4611      	mov	r1, r2
 8003be0:	2248      	movs	r2, #72	@ 0x48
 8003be2:	4618      	mov	r0, r3
 8003be4:	f003 f9aa 	bl	8006f3c <memcpy>

	motor5->uart = huart5;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <init_motor_5+0x158>)
 8003bec:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	2248      	movs	r2, #72	@ 0x48
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f003 f9a1 	bl	8006f3c <memcpy>

	motor5->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_5;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a29      	ldr	r2, [pc, #164]	@ (8003ca4 <init_motor_5+0x15c>)
 8003bfe:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor5->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_5;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	220a      	movs	r2, #10
 8003c06:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor5->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_5;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ca8 <init_motor_5+0x160>)
 8003c0e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor5->stallguard.STALL_BUFFER = STALL_BUFFER_M_5;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2228      	movs	r2, #40	@ 0x28
 8003c16:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver5, huart5);
 8003c1a:	4e21      	ldr	r6, [pc, #132]	@ (8003ca0 <init_motor_5+0x158>)
 8003c1c:	466d      	mov	r5, sp
 8003c1e:	f106 040c 	add.w	r4, r6, #12
 8003c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003c32:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003c36:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003c3a:	6838      	ldr	r0, [r7, #0]
 8003c3c:	f7fe fedf 	bl	80029fe <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver5, motor5->gpio_pins.mot_en, motor5->gpio_ports.mot_en);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b3 10f0 	ldrh.w	r1, [r3, #240]	@ 0xf0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	f7fe feed 	bl	8002a2e <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003c5a:	6838      	ldr	r0, [r7, #0]
 8003c5c:	f7fe fa96 	bl	800218c <tmc2209_setup>
	set_micro_steps_per_step(driver5, motor5->microsteps);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f7fe fadf 	bl	800222c <set_micro_steps_per_step>
	set_all_current_percent_values(driver5, motor5->current_settings.RUN_CURRENT_PERCENT, motor5->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	6838      	ldr	r0, [r7, #0]
 8003c7e:	f7fe fb71 	bl	8002364 <set_all_current_percent_values>

	motor5->driver = driver5;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40020800 	.word	0x40020800
 8003c98:	20000234 	.word	0x20000234
 8003c9c:	200002c4 	.word	0x200002c4
 8003ca0:	200003e4 	.word	0x200003e4
 8003ca4:	00027100 	.word	0x00027100
 8003ca8:	43480000 	.word	0x43480000

08003cac <initializeDefaults>:

void initializeDefaults(motor_t * motor)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	motor->motion.v = 0;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	61da      	str	r2, [r3, #28]
	motor->motion.total_steps = 0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	621a      	str	r2, [r3, #32]
	motor->motion.const_steps = 0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->motion.acc_steps = 0;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = 0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.step = 0;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	635a      	str	r2, [r3, #52]	@ 0x34

	motor->active_movement_flag = 0;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	731a      	strb	r2, [r3, #12]

	motor->status_flag = 0;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

	motor->stallguard.smoothed_result = 0;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	motor->stallguard.previous_smoothed_result = 0;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor->stallguard.consecutive_low_counter = 0;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
	motor->stallguard.stall_flag = 0;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d24:	f7fe fa20 	bl	8002168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d28:	480c      	ldr	r0, [pc, #48]	@ (8003d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d2a:	490d      	ldr	r1, [pc, #52]	@ (8003d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d30:	e002      	b.n	8003d38 <LoopCopyDataInit>

08003d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d36:	3304      	adds	r3, #4

08003d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d3c:	d3f9      	bcc.n	8003d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d40:	4c0a      	ldr	r4, [pc, #40]	@ (8003d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d44:	e001      	b.n	8003d4a <LoopFillZerobss>

08003d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d48:	3204      	adds	r2, #4

08003d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d4c:	d3fb      	bcc.n	8003d46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003d4e:	f003 f8d1 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d52:	f7fc ffe3 	bl	8000d1c <main>
  bx  lr    
 8003d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003d64:	08006f98 	.word	0x08006f98
  ldr r2, =_sbss
 8003d68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003d6c:	2000069c 	.word	0x2000069c

08003d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d70:	e7fe      	b.n	8003d70 <ADC_IRQHandler>
	...

08003d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d78:	4b0e      	ldr	r3, [pc, #56]	@ (8003db4 <HAL_Init+0x40>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003db4 <HAL_Init+0x40>)
 8003d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_Init+0x40>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <HAL_Init+0x40>)
 8003d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d90:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <HAL_Init+0x40>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a07      	ldr	r2, [pc, #28]	@ (8003db4 <HAL_Init+0x40>)
 8003d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d9c:	2003      	movs	r0, #3
 8003d9e:	f000 f92b 	bl	8003ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003da2:	2000      	movs	r0, #0
 8003da4:	f000 f808 	bl	8003db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003da8:	f7fd fde8 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023c00 	.word	0x40023c00

08003db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dc0:	4b12      	ldr	r3, [pc, #72]	@ (8003e0c <HAL_InitTick+0x54>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <HAL_InitTick+0x58>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f943 	bl	8004062 <HAL_SYSTICK_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e00e      	b.n	8003e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b0f      	cmp	r3, #15
 8003dea:	d80a      	bhi.n	8003e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dec:	2200      	movs	r2, #0
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	f000 f90b 	bl	800400e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003df8:	4a06      	ldr	r2, [pc, #24]	@ (8003e14 <HAL_InitTick+0x5c>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	20000008 	.word	0x20000008
 8003e14:	20000004 	.word	0x20000004

08003e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	@ (8003e38 <HAL_IncTick+0x20>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_IncTick+0x24>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	4a04      	ldr	r2, [pc, #16]	@ (8003e3c <HAL_IncTick+0x24>)
 8003e2a:	6013      	str	r3, [r2, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000008 	.word	0x20000008
 8003e3c:	20000560 	.word	0x20000560

08003e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return uwTick;
 8003e44:	4b03      	ldr	r3, [pc, #12]	@ (8003e54 <HAL_GetTick+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000560 	.word	0x20000560

08003e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e68:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <__NVIC_SetPriorityGrouping+0x44>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e74:	4013      	ands	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8a:	4a04      	ldr	r2, [pc, #16]	@ (8003e9c <__NVIC_SetPriorityGrouping+0x44>)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	60d3      	str	r3, [r2, #12]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea4:	4b04      	ldr	r3, [pc, #16]	@ (8003eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 0307 	and.w	r3, r3, #7
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	db0b      	blt.n	8003ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	4907      	ldr	r1, [pc, #28]	@ (8003ef4 <__NVIC_EnableIRQ+0x38>)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2001      	movs	r0, #1
 8003ede:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	e000e100 	.word	0xe000e100

08003ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	6039      	str	r1, [r7, #0]
 8003f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	db0a      	blt.n	8003f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	490c      	ldr	r1, [pc, #48]	@ (8003f44 <__NVIC_SetPriority+0x4c>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	0112      	lsls	r2, r2, #4
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f20:	e00a      	b.n	8003f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4908      	ldr	r1, [pc, #32]	@ (8003f48 <__NVIC_SetPriority+0x50>)
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	3b04      	subs	r3, #4
 8003f30:	0112      	lsls	r2, r2, #4
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	440b      	add	r3, r1
 8003f36:	761a      	strb	r2, [r3, #24]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000e100 	.word	0xe000e100
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	@ 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f1c3 0307 	rsb	r3, r3, #7
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	bf28      	it	cs
 8003f6a:	2304      	movcs	r3, #4
 8003f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3304      	adds	r3, #4
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d902      	bls.n	8003f7c <NVIC_EncodePriority+0x30>
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3b03      	subs	r3, #3
 8003f7a:	e000      	b.n	8003f7e <NVIC_EncodePriority+0x32>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	401a      	ands	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f94:	f04f 31ff 	mov.w	r1, #4294967295
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	43d9      	mvns	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	4313      	orrs	r3, r2
         );
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3724      	adds	r7, #36	@ 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fc4:	d301      	bcc.n	8003fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00f      	b.n	8003fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <SysTick_Config+0x40>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd2:	210f      	movs	r1, #15
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	f7ff ff8e 	bl	8003ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <SysTick_Config+0x40>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe2:	4b04      	ldr	r3, [pc, #16]	@ (8003ff4 <SysTick_Config+0x40>)
 8003fe4:	2207      	movs	r2, #7
 8003fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	e000e010 	.word	0xe000e010

08003ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff29 	bl	8003e58 <__NVIC_SetPriorityGrouping>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800400e:	b580      	push	{r7, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	4603      	mov	r3, r0
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004020:	f7ff ff3e 	bl	8003ea0 <__NVIC_GetPriorityGrouping>
 8004024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	6978      	ldr	r0, [r7, #20]
 800402c:	f7ff ff8e 	bl	8003f4c <NVIC_EncodePriority>
 8004030:	4602      	mov	r2, r0
 8004032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff5d 	bl	8003ef8 <__NVIC_SetPriority>
}
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff31 	bl	8003ebc <__NVIC_EnableIRQ>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffa2 	bl	8003fb4 <SysTick_Config>
 8004070:	4603      	mov	r3, r0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	@ 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e165      	b.n	8004364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	f040 8154 	bne.w	800435e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d005      	beq.n	80040ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d130      	bne.n	8004130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004104:	2201      	movs	r2, #1
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 0201 	and.w	r2, r3, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b03      	cmp	r3, #3
 800413a:	d017      	beq.n	800416c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d123      	bne.n	80041c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	08da      	lsrs	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3208      	adds	r2, #8
 8004180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	220f      	movs	r2, #15
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	08da      	lsrs	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3208      	adds	r2, #8
 80041ba:	69b9      	ldr	r1, [r7, #24]
 80041bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2203      	movs	r2, #3
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0203 	and.w	r2, r3, #3
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80ae 	beq.w	800435e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4b5d      	ldr	r3, [pc, #372]	@ (800437c <HAL_GPIO_Init+0x300>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	4a5c      	ldr	r2, [pc, #368]	@ (800437c <HAL_GPIO_Init+0x300>)
 800420c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004210:	6453      	str	r3, [r2, #68]	@ 0x44
 8004212:	4b5a      	ldr	r3, [pc, #360]	@ (800437c <HAL_GPIO_Init+0x300>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800421e:	4a58      	ldr	r2, [pc, #352]	@ (8004380 <HAL_GPIO_Init+0x304>)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a4f      	ldr	r2, [pc, #316]	@ (8004384 <HAL_GPIO_Init+0x308>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d025      	beq.n	8004296 <HAL_GPIO_Init+0x21a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a4e      	ldr	r2, [pc, #312]	@ (8004388 <HAL_GPIO_Init+0x30c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01f      	beq.n	8004292 <HAL_GPIO_Init+0x216>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a4d      	ldr	r2, [pc, #308]	@ (800438c <HAL_GPIO_Init+0x310>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d019      	beq.n	800428e <HAL_GPIO_Init+0x212>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a4c      	ldr	r2, [pc, #304]	@ (8004390 <HAL_GPIO_Init+0x314>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_GPIO_Init+0x20e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a4b      	ldr	r2, [pc, #300]	@ (8004394 <HAL_GPIO_Init+0x318>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00d      	beq.n	8004286 <HAL_GPIO_Init+0x20a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a4a      	ldr	r2, [pc, #296]	@ (8004398 <HAL_GPIO_Init+0x31c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <HAL_GPIO_Init+0x206>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a49      	ldr	r2, [pc, #292]	@ (800439c <HAL_GPIO_Init+0x320>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_GPIO_Init+0x202>
 800427a:	2306      	movs	r3, #6
 800427c:	e00c      	b.n	8004298 <HAL_GPIO_Init+0x21c>
 800427e:	2307      	movs	r3, #7
 8004280:	e00a      	b.n	8004298 <HAL_GPIO_Init+0x21c>
 8004282:	2305      	movs	r3, #5
 8004284:	e008      	b.n	8004298 <HAL_GPIO_Init+0x21c>
 8004286:	2304      	movs	r3, #4
 8004288:	e006      	b.n	8004298 <HAL_GPIO_Init+0x21c>
 800428a:	2303      	movs	r3, #3
 800428c:	e004      	b.n	8004298 <HAL_GPIO_Init+0x21c>
 800428e:	2302      	movs	r3, #2
 8004290:	e002      	b.n	8004298 <HAL_GPIO_Init+0x21c>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_GPIO_Init+0x21c>
 8004296:	2300      	movs	r3, #0
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f002 0203 	and.w	r2, r2, #3
 800429e:	0092      	lsls	r2, r2, #2
 80042a0:	4093      	lsls	r3, r2
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042a8:	4935      	ldr	r1, [pc, #212]	@ (8004380 <HAL_GPIO_Init+0x304>)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	3302      	adds	r3, #2
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042b6:	4b3a      	ldr	r3, [pc, #232]	@ (80043a0 <HAL_GPIO_Init+0x324>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042da:	4a31      	ldr	r2, [pc, #196]	@ (80043a0 <HAL_GPIO_Init+0x324>)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e0:	4b2f      	ldr	r3, [pc, #188]	@ (80043a0 <HAL_GPIO_Init+0x324>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004304:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <HAL_GPIO_Init+0x324>)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800430a:	4b25      	ldr	r3, [pc, #148]	@ (80043a0 <HAL_GPIO_Init+0x324>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800432e:	4a1c      	ldr	r2, [pc, #112]	@ (80043a0 <HAL_GPIO_Init+0x324>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <HAL_GPIO_Init+0x324>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004358:	4a11      	ldr	r2, [pc, #68]	@ (80043a0 <HAL_GPIO_Init+0x324>)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3301      	adds	r3, #1
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	f67f ae96 	bls.w	8004098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3724      	adds	r7, #36	@ 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	40013800 	.word	0x40013800
 8004384:	40020000 	.word	0x40020000
 8004388:	40020400 	.word	0x40020400
 800438c:	40020800 	.word	0x40020800
 8004390:	40020c00 	.word	0x40020c00
 8004394:	40021000 	.word	0x40021000
 8004398:	40021400 	.word	0x40021400
 800439c:	40021800 	.word	0x40021800
 80043a0:	40013c00 	.word	0x40013c00

080043a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	887b      	ldrh	r3, [r7, #2]
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	e001      	b.n	80043c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	807b      	strh	r3, [r7, #2]
 80043e0:	4613      	mov	r3, r2
 80043e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e4:	787b      	ldrb	r3, [r7, #1]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043f0:	e003      	b.n	80043fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043f2:	887b      	ldrh	r3, [r7, #2]
 80043f4:	041a      	lsls	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	619a      	str	r2, [r3, #24]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004418:	887a      	ldrh	r2, [r7, #2]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4013      	ands	r3, r2
 800441e:	041a      	lsls	r2, r3, #16
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	43d9      	mvns	r1, r3
 8004424:	887b      	ldrh	r3, [r7, #2]
 8004426:	400b      	ands	r3, r1
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	619a      	str	r2, [r3, #24]
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004446:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d006      	beq.n	8004460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004452:	4a05      	ldr	r2, [pc, #20]	@ (8004468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fe00 	bl	8003060 <HAL_GPIO_EXTI_Callback>
  }
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40013c00 	.word	0x40013c00

0800446c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e12b      	b.n	80046d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd fa9a 	bl	80019cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	@ 0x24
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044d0:	f000 fa02 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 80044d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4a81      	ldr	r2, [pc, #516]	@ (80046e0 <HAL_I2C_Init+0x274>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d807      	bhi.n	80044f0 <HAL_I2C_Init+0x84>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a80      	ldr	r2, [pc, #512]	@ (80046e4 <HAL_I2C_Init+0x278>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	bf94      	ite	ls
 80044e8:	2301      	movls	r3, #1
 80044ea:	2300      	movhi	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e006      	b.n	80044fe <HAL_I2C_Init+0x92>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a7d      	ldr	r2, [pc, #500]	@ (80046e8 <HAL_I2C_Init+0x27c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	bf94      	ite	ls
 80044f8:	2301      	movls	r3, #1
 80044fa:	2300      	movhi	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0e7      	b.n	80046d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a78      	ldr	r2, [pc, #480]	@ (80046ec <HAL_I2C_Init+0x280>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	0c9b      	lsrs	r3, r3, #18
 8004510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4a6a      	ldr	r2, [pc, #424]	@ (80046e0 <HAL_I2C_Init+0x274>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d802      	bhi.n	8004540 <HAL_I2C_Init+0xd4>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	3301      	adds	r3, #1
 800453e:	e009      	b.n	8004554 <HAL_I2C_Init+0xe8>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	4a69      	ldr	r2, [pc, #420]	@ (80046f0 <HAL_I2C_Init+0x284>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	3301      	adds	r3, #1
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	430b      	orrs	r3, r1
 800455a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004566:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	495c      	ldr	r1, [pc, #368]	@ (80046e0 <HAL_I2C_Init+0x274>)
 8004570:	428b      	cmp	r3, r1
 8004572:	d819      	bhi.n	80045a8 <HAL_I2C_Init+0x13c>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1e59      	subs	r1, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004582:	1c59      	adds	r1, r3, #1
 8004584:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004588:	400b      	ands	r3, r1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_I2C_Init+0x138>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1e59      	subs	r1, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fbb1 f3f3 	udiv	r3, r1, r3
 800459c:	3301      	adds	r3, #1
 800459e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a2:	e051      	b.n	8004648 <HAL_I2C_Init+0x1dc>
 80045a4:	2304      	movs	r3, #4
 80045a6:	e04f      	b.n	8004648 <HAL_I2C_Init+0x1dc>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d111      	bne.n	80045d4 <HAL_I2C_Init+0x168>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1e58      	subs	r0, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	440b      	add	r3, r1
 80045be:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e012      	b.n	80045fa <HAL_I2C_Init+0x18e>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1e58      	subs	r0, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	0099      	lsls	r1, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ea:	3301      	adds	r3, #1
 80045ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Init+0x196>
 80045fe:	2301      	movs	r3, #1
 8004600:	e022      	b.n	8004648 <HAL_I2C_Init+0x1dc>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10e      	bne.n	8004628 <HAL_I2C_Init+0x1bc>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1e58      	subs	r0, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	440b      	add	r3, r1
 8004618:	fbb0 f3f3 	udiv	r3, r0, r3
 800461c:	3301      	adds	r3, #1
 800461e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004626:	e00f      	b.n	8004648 <HAL_I2C_Init+0x1dc>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1e58      	subs	r0, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	0099      	lsls	r1, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	fbb0 f3f3 	udiv	r3, r0, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	6809      	ldr	r1, [r1, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6911      	ldr	r1, [r2, #16]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68d2      	ldr	r2, [r2, #12]
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	430b      	orrs	r3, r1
 800468a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	000186a0 	.word	0x000186a0
 80046e4:	001e847f 	.word	0x001e847f
 80046e8:	003d08ff 	.word	0x003d08ff
 80046ec:	431bde83 	.word	0x431bde83
 80046f0:	10624dd3 	.word	0x10624dd3

080046f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0cc      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b68      	ldr	r3, [pc, #416]	@ (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d90c      	bls.n	8004730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b65      	ldr	r3, [pc, #404]	@ (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b63      	ldr	r3, [pc, #396]	@ (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0b8      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004748:	4b59      	ldr	r3, [pc, #356]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a58      	ldr	r2, [pc, #352]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004752:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004760:	4b53      	ldr	r3, [pc, #332]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4a52      	ldr	r2, [pc, #328]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800476a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476c:	4b50      	ldr	r3, [pc, #320]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	494d      	ldr	r1, [pc, #308]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d044      	beq.n	8004814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	4b47      	ldr	r3, [pc, #284]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d119      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e07f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	4b3f      	ldr	r3, [pc, #252]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c2:	4b3b      	ldr	r3, [pc, #236]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e067      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d2:	4b37      	ldr	r3, [pc, #220]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 0203 	bic.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4934      	ldr	r1, [pc, #208]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e4:	f7ff fb2c 	bl	8003e40 <HAL_GetTick>
 80047e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ec:	f7ff fb28 	bl	8003e40 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e04f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	4b2b      	ldr	r3, [pc, #172]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 020c 	and.w	r2, r3, #12
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	429a      	cmp	r2, r3
 8004812:	d1eb      	bne.n	80047ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004814:	4b25      	ldr	r3, [pc, #148]	@ (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d20c      	bcs.n	800483c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e032      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004848:	4b19      	ldr	r3, [pc, #100]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4916      	ldr	r1, [pc, #88]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004866:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	490e      	ldr	r1, [pc, #56]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800487a:	f000 f855 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 800487e:	4602      	mov	r2, r0
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	490a      	ldr	r1, [pc, #40]	@ (80048b4 <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	5ccb      	ldrb	r3, [r1, r3]
 800488e:	fa22 f303 	lsr.w	r3, r2, r3
 8004892:	4a09      	ldr	r2, [pc, #36]	@ (80048b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004896:	4b09      	ldr	r3, [pc, #36]	@ (80048bc <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fa8c 	bl	8003db8 <HAL_InitTick>

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023c00 	.word	0x40023c00
 80048b0:	40023800 	.word	0x40023800
 80048b4:	08006f70 	.word	0x08006f70
 80048b8:	20000000 	.word	0x20000000
 80048bc:	20000004 	.word	0x20000004

080048c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c4:	4b03      	ldr	r3, [pc, #12]	@ (80048d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000000 	.word	0x20000000

080048d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048dc:	f7ff fff0 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0a9b      	lsrs	r3, r3, #10
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4903      	ldr	r1, [pc, #12]	@ (80048fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	08006f80 	.word	0x08006f80

08004900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004904:	f7ff ffdc 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0b5b      	lsrs	r3, r3, #13
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4903      	ldr	r1, [pc, #12]	@ (8004924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	08006f80 	.word	0x08006f80

08004928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800492c:	b0ae      	sub	sp, #184	@ 0xb8
 800492e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800494e:	4bcb      	ldr	r3, [pc, #812]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b0c      	cmp	r3, #12
 8004958:	f200 8206 	bhi.w	8004d68 <HAL_RCC_GetSysClockFreq+0x440>
 800495c:	a201      	add	r2, pc, #4	@ (adr r2, 8004964 <HAL_RCC_GetSysClockFreq+0x3c>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004999 	.word	0x08004999
 8004968:	08004d69 	.word	0x08004d69
 800496c:	08004d69 	.word	0x08004d69
 8004970:	08004d69 	.word	0x08004d69
 8004974:	080049a1 	.word	0x080049a1
 8004978:	08004d69 	.word	0x08004d69
 800497c:	08004d69 	.word	0x08004d69
 8004980:	08004d69 	.word	0x08004d69
 8004984:	080049a9 	.word	0x080049a9
 8004988:	08004d69 	.word	0x08004d69
 800498c:	08004d69 	.word	0x08004d69
 8004990:	08004d69 	.word	0x08004d69
 8004994:	08004b99 	.word	0x08004b99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4bb9      	ldr	r3, [pc, #740]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x358>)
 800499a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800499e:	e1e7      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a0:	4bb8      	ldr	r3, [pc, #736]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x35c>)
 80049a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049a6:	e1e3      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a8:	4bb4      	ldr	r3, [pc, #720]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049b4:	4bb1      	ldr	r3, [pc, #708]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d071      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c0:	4bae      	ldr	r3, [pc, #696]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	099b      	lsrs	r3, r3, #6
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80049d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049e6:	4622      	mov	r2, r4
 80049e8:	462b      	mov	r3, r5
 80049ea:	f04f 0000 	mov.w	r0, #0
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	0159      	lsls	r1, r3, #5
 80049f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f8:	0150      	lsls	r0, r2, #5
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4621      	mov	r1, r4
 8004a00:	1a51      	subs	r1, r2, r1
 8004a02:	6439      	str	r1, [r7, #64]	@ 0x40
 8004a04:	4629      	mov	r1, r5
 8004a06:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004a18:	4649      	mov	r1, r9
 8004a1a:	018b      	lsls	r3, r1, #6
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a22:	4641      	mov	r1, r8
 8004a24:	018a      	lsls	r2, r1, #6
 8004a26:	4641      	mov	r1, r8
 8004a28:	1a51      	subs	r1, r2, r1
 8004a2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004a40:	4649      	mov	r1, r9
 8004a42:	00cb      	lsls	r3, r1, #3
 8004a44:	4641      	mov	r1, r8
 8004a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	00ca      	lsls	r2, r1, #3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	4622      	mov	r2, r4
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	eb42 0303 	adc.w	r3, r2, r3
 8004a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a70:	4629      	mov	r1, r5
 8004a72:	024b      	lsls	r3, r1, #9
 8004a74:	4621      	mov	r1, r4
 8004a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	024a      	lsls	r2, r1, #9
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004a94:	f7fb ffac 	bl	80009f0 <__aeabi_uldivmod>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aa2:	e067      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa4:	4b75      	ldr	r3, [pc, #468]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	099b      	lsrs	r3, r3, #6
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ab0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004abe:	2300      	movs	r3, #0
 8004ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ac2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	462b      	mov	r3, r5
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	0159      	lsls	r1, r3, #5
 8004ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad8:	0150      	lsls	r0, r2, #5
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4621      	mov	r1, r4
 8004ae0:	1a51      	subs	r1, r2, r1
 8004ae2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004af8:	4649      	mov	r1, r9
 8004afa:	018b      	lsls	r3, r1, #6
 8004afc:	4641      	mov	r1, r8
 8004afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b02:	4641      	mov	r1, r8
 8004b04:	018a      	lsls	r2, r1, #6
 8004b06:	4641      	mov	r1, r8
 8004b08:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b26:	4692      	mov	sl, r2
 8004b28:	469b      	mov	fp, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	eb1a 0303 	adds.w	r3, sl, r3
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	462b      	mov	r3, r5
 8004b34:	eb4b 0303 	adc.w	r3, fp, r3
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b46:	4629      	mov	r1, r5
 8004b48:	028b      	lsls	r3, r1, #10
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b50:	4621      	mov	r1, r4
 8004b52:	028a      	lsls	r2, r1, #10
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b60:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004b66:	f7fb ff43 	bl	80009f0 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4613      	mov	r3, r2
 8004b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b74:	4b41      	ldr	r3, [pc, #260]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b96:	e0eb      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b98:	4b38      	ldr	r3, [pc, #224]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba4:	4b35      	ldr	r3, [pc, #212]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d06b      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb0:	4b32      	ldr	r3, [pc, #200]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004bcc:	4622      	mov	r2, r4
 8004bce:	462b      	mov	r3, r5
 8004bd0:	f04f 0000 	mov.w	r0, #0
 8004bd4:	f04f 0100 	mov.w	r1, #0
 8004bd8:	0159      	lsls	r1, r3, #5
 8004bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bde:	0150      	lsls	r0, r2, #5
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4621      	mov	r1, r4
 8004be6:	1a51      	subs	r1, r2, r1
 8004be8:	61b9      	str	r1, [r7, #24]
 8004bea:	4629      	mov	r1, r5
 8004bec:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004bfe:	4659      	mov	r1, fp
 8004c00:	018b      	lsls	r3, r1, #6
 8004c02:	4651      	mov	r1, sl
 8004c04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c08:	4651      	mov	r1, sl
 8004c0a:	018a      	lsls	r2, r1, #6
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ebb2 0801 	subs.w	r8, r2, r1
 8004c12:	4659      	mov	r1, fp
 8004c14:	eb63 0901 	sbc.w	r9, r3, r1
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2c:	4690      	mov	r8, r2
 8004c2e:	4699      	mov	r9, r3
 8004c30:	4623      	mov	r3, r4
 8004c32:	eb18 0303 	adds.w	r3, r8, r3
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	462b      	mov	r3, r5
 8004c3a:	eb49 0303 	adc.w	r3, r9, r3
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	024b      	lsls	r3, r1, #9
 8004c50:	4621      	mov	r1, r4
 8004c52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c56:	4621      	mov	r1, r4
 8004c58:	024a      	lsls	r2, r1, #9
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c62:	2200      	movs	r2, #0
 8004c64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004c68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c6c:	f7fb fec0 	bl	80009f0 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4613      	mov	r3, r2
 8004c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c7a:	e065      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x420>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c88:	4b3d      	ldr	r3, [pc, #244]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	099b      	lsrs	r3, r3, #6
 8004c8e:	2200      	movs	r2, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	4611      	mov	r1, r2
 8004c94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c98:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004ca2:	4642      	mov	r2, r8
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	f04f 0000 	mov.w	r0, #0
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	0159      	lsls	r1, r3, #5
 8004cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb4:	0150      	lsls	r0, r2, #5
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4641      	mov	r1, r8
 8004cbc:	1a51      	subs	r1, r2, r1
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	018b      	lsls	r3, r1, #6
 8004cd8:	4651      	mov	r1, sl
 8004cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cde:	4651      	mov	r1, sl
 8004ce0:	018a      	lsls	r2, r1, #6
 8004ce2:	4651      	mov	r1, sl
 8004ce4:	1a54      	subs	r4, r2, r1
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	eb63 0501 	sbc.w	r5, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	00eb      	lsls	r3, r5, #3
 8004cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cfa:	00e2      	lsls	r2, r4, #3
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	461d      	mov	r5, r3
 8004d00:	4643      	mov	r3, r8
 8004d02:	18e3      	adds	r3, r4, r3
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	464b      	mov	r3, r9
 8004d08:	eb45 0303 	adc.w	r3, r5, r3
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	028b      	lsls	r3, r1, #10
 8004d1e:	4621      	mov	r1, r4
 8004d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d24:	4621      	mov	r1, r4
 8004d26:	028a      	lsls	r2, r1, #10
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d30:	2200      	movs	r2, #0
 8004d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004d36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d3a:	f7fb fe59 	bl	80009f0 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4613      	mov	r3, r2
 8004d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d48:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	0f1b      	lsrs	r3, r3, #28
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d66:	e003      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	37b8      	adds	r7, #184	@ 0xb8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	00f42400 	.word	0x00f42400

08004d88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e28d      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8083 	beq.w	8004eae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004da8:	4b94      	ldr	r3, [pc, #592]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d019      	beq.n	8004de8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004db4:	4b91      	ldr	r3, [pc, #580]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
        || \
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004dc0:	4b8e      	ldr	r3, [pc, #568]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dcc:	d00c      	beq.n	8004de8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dce:	4b8b      	ldr	r3, [pc, #556]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d112      	bne.n	8004e00 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dda:	4b88      	ldr	r3, [pc, #544]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de6:	d10b      	bne.n	8004e00 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	4b84      	ldr	r3, [pc, #528]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d05b      	beq.n	8004eac <HAL_RCC_OscConfig+0x124>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d157      	bne.n	8004eac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e25a      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e08:	d106      	bne.n	8004e18 <HAL_RCC_OscConfig+0x90>
 8004e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e01d      	b.n	8004e54 <HAL_RCC_OscConfig+0xcc>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0xb4>
 8004e22:	4b76      	ldr	r3, [pc, #472]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a75      	ldr	r2, [pc, #468]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	4b73      	ldr	r3, [pc, #460]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a72      	ldr	r2, [pc, #456]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e00b      	b.n	8004e54 <HAL_RCC_OscConfig+0xcc>
 8004e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a6e      	ldr	r2, [pc, #440]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4b6c      	ldr	r3, [pc, #432]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d013      	beq.n	8004e84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fe fff0 	bl	8003e40 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e64:	f7fe ffec 	bl	8003e40 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	@ 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e21f      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e76:	4b61      	ldr	r3, [pc, #388]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0xdc>
 8004e82:	e014      	b.n	8004eae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fe ffdc 	bl	8003e40 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e8c:	f7fe ffd8 	bl	8003e40 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	@ 0x64
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e20b      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9e:	4b57      	ldr	r3, [pc, #348]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x104>
 8004eaa:	e000      	b.n	8004eae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d06f      	beq.n	8004f9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004eba:	4b50      	ldr	r3, [pc, #320]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
        || \
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d105      	bne.n	8004ede <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ede:	4b47      	ldr	r3, [pc, #284]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ee6:	2b0c      	cmp	r3, #12
 8004ee8:	d11c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eea:	4b44      	ldr	r3, [pc, #272]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d116      	bne.n	8004f24 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef6:	4b41      	ldr	r3, [pc, #260]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_RCC_OscConfig+0x186>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d001      	beq.n	8004f0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e1d3      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4937      	ldr	r1, [pc, #220]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f22:	e03a      	b.n	8004f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d020      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f2c:	4b34      	ldr	r3, [pc, #208]	@ (8005000 <HAL_RCC_OscConfig+0x278>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fe ff85 	bl	8003e40 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3a:	f7fe ff81 	bl	8003e40 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e1b4      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f58:	4b28      	ldr	r3, [pc, #160]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4925      	ldr	r1, [pc, #148]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]
 8004f6c:	e015      	b.n	8004f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f6e:	4b24      	ldr	r3, [pc, #144]	@ (8005000 <HAL_RCC_OscConfig+0x278>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fe ff64 	bl	8003e40 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7c:	f7fe ff60 	bl	8003e40 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e193      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d036      	beq.n	8005014 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fae:	4b15      	ldr	r3, [pc, #84]	@ (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fe ff44 	bl	8003e40 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fbc:	f7fe ff40 	bl	8003e40 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e173      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fce:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x234>
 8004fda:	e01b      	b.n	8005014 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fdc:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe2:	f7fe ff2d 	bl	8003e40 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe8:	e00e      	b.n	8005008 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fea:	f7fe ff29 	bl	8003e40 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d907      	bls.n	8005008 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e15c      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
 8004ffc:	40023800 	.word	0x40023800
 8005000:	42470000 	.word	0x42470000
 8005004:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005008:	4b8a      	ldr	r3, [pc, #552]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 800500a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ea      	bne.n	8004fea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8097 	beq.w	8005150 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005026:	4b83      	ldr	r3, [pc, #524]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	4b7f      	ldr	r3, [pc, #508]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	4a7e      	ldr	r2, [pc, #504]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 800503c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005040:	6413      	str	r3, [r2, #64]	@ 0x40
 8005042:	4b7c      	ldr	r3, [pc, #496]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005052:	4b79      	ldr	r3, [pc, #484]	@ (8005238 <HAL_RCC_OscConfig+0x4b0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d118      	bne.n	8005090 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800505e:	4b76      	ldr	r3, [pc, #472]	@ (8005238 <HAL_RCC_OscConfig+0x4b0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a75      	ldr	r2, [pc, #468]	@ (8005238 <HAL_RCC_OscConfig+0x4b0>)
 8005064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506a:	f7fe fee9 	bl	8003e40 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005072:	f7fe fee5 	bl	8003e40 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e118      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005084:	4b6c      	ldr	r3, [pc, #432]	@ (8005238 <HAL_RCC_OscConfig+0x4b0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d106      	bne.n	80050a6 <HAL_RCC_OscConfig+0x31e>
 8005098:	4b66      	ldr	r3, [pc, #408]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509c:	4a65      	ldr	r2, [pc, #404]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a4:	e01c      	b.n	80050e0 <HAL_RCC_OscConfig+0x358>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x340>
 80050ae:	4b61      	ldr	r3, [pc, #388]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b2:	4a60      	ldr	r2, [pc, #384]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80050b4:	f043 0304 	orr.w	r3, r3, #4
 80050b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ba:	4b5e      	ldr	r3, [pc, #376]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050be:	4a5d      	ldr	r2, [pc, #372]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c6:	e00b      	b.n	80050e0 <HAL_RCC_OscConfig+0x358>
 80050c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80050ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050cc:	4a59      	ldr	r2, [pc, #356]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d4:	4b57      	ldr	r3, [pc, #348]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d8:	4a56      	ldr	r2, [pc, #344]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80050da:	f023 0304 	bic.w	r3, r3, #4
 80050de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d015      	beq.n	8005114 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fe feaa 	bl	8003e40 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fe fea6 	bl	8003e40 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e0d7      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005106:	4b4b      	ldr	r3, [pc, #300]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ee      	beq.n	80050f0 <HAL_RCC_OscConfig+0x368>
 8005112:	e014      	b.n	800513e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fe fe94 	bl	8003e40 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511a:	e00a      	b.n	8005132 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fe fe90 	bl	8003e40 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e0c1      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005132:	4b40      	ldr	r3, [pc, #256]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1ee      	bne.n	800511c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d105      	bne.n	8005150 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005144:	4b3b      	ldr	r3, [pc, #236]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	4a3a      	ldr	r2, [pc, #232]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 800514a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800514e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80ad 	beq.w	80052b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800515a:	4b36      	ldr	r3, [pc, #216]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	2b08      	cmp	r3, #8
 8005164:	d060      	beq.n	8005228 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d145      	bne.n	80051fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516e:	4b33      	ldr	r3, [pc, #204]	@ (800523c <HAL_RCC_OscConfig+0x4b4>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fe fe64 	bl	8003e40 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517c:	f7fe fe60 	bl	8003e40 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e093      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518e:	4b29      	ldr	r3, [pc, #164]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69da      	ldr	r2, [r3, #28]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	019b      	lsls	r3, r3, #6
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	3b01      	subs	r3, #1
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	061b      	lsls	r3, r3, #24
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c4:	071b      	lsls	r3, r3, #28
 80051c6:	491b      	ldr	r1, [pc, #108]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051cc:	4b1b      	ldr	r3, [pc, #108]	@ (800523c <HAL_RCC_OscConfig+0x4b4>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fe fe35 	bl	8003e40 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051da:	f7fe fe31 	bl	8003e40 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e064      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ec:	4b11      	ldr	r3, [pc, #68]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x452>
 80051f8:	e05c      	b.n	80052b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	4b10      	ldr	r3, [pc, #64]	@ (800523c <HAL_RCC_OscConfig+0x4b4>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fe fe1e 	bl	8003e40 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005208:	f7fe fe1a 	bl	8003e40 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e04d      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <HAL_RCC_OscConfig+0x4ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x480>
 8005226:	e045      	b.n	80052b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d107      	bne.n	8005240 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e040      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
 8005234:	40023800 	.word	0x40023800
 8005238:	40007000 	.word	0x40007000
 800523c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005240:	4b1f      	ldr	r3, [pc, #124]	@ (80052c0 <HAL_RCC_OscConfig+0x538>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d030      	beq.n	80052b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005258:	429a      	cmp	r2, r3
 800525a:	d129      	bne.n	80052b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d122      	bne.n	80052b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005270:	4013      	ands	r3, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005278:	4293      	cmp	r3, r2
 800527a:	d119      	bne.n	80052b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	3b01      	subs	r3, #1
 800528a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d10f      	bne.n	80052b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800529c:	429a      	cmp	r2, r3
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800

080052c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e041      	b.n	800535a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc fbb6 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 fd2c 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	d001      	beq.n	800537c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e04e      	b.n	800541a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a23      	ldr	r2, [pc, #140]	@ (8005428 <HAL_TIM_Base_Start_IT+0xc4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d022      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a6:	d01d      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1f      	ldr	r2, [pc, #124]	@ (800542c <HAL_TIM_Base_Start_IT+0xc8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d018      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005430 <HAL_TIM_Base_Start_IT+0xcc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <HAL_TIM_Base_Start_IT+0xd0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00e      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005438 <HAL_TIM_Base_Start_IT+0xd4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a19      	ldr	r2, [pc, #100]	@ (800543c <HAL_TIM_Base_Start_IT+0xd8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a18      	ldr	r2, [pc, #96]	@ (8005440 <HAL_TIM_Base_Start_IT+0xdc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d111      	bne.n	8005408 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d010      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0201 	orr.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005406:	e007      	b.n	8005418 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40010000 	.word	0x40010000
 800542c:	40000400 	.word	0x40000400
 8005430:	40000800 	.word	0x40000800
 8005434:	40000c00 	.word	0x40000c00
 8005438:	40010400 	.word	0x40010400
 800543c:	40014000 	.word	0x40014000
 8005440:	40001800 	.word	0x40001800

08005444 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <HAL_TIM_Base_Stop_IT+0x48>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	f240 4344 	movw	r3, #1092	@ 0x444
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <HAL_TIM_Base_Stop_IT+0x48>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e041      	b.n	8005538 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f839 	bl	8005540 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f000 fc3d 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d109      	bne.n	800557c <HAL_TIM_OC_Start_IT+0x28>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e022      	b.n	80055c2 <HAL_TIM_OC_Start_IT+0x6e>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b04      	cmp	r3, #4
 8005580:	d109      	bne.n	8005596 <HAL_TIM_OC_Start_IT+0x42>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e015      	b.n	80055c2 <HAL_TIM_OC_Start_IT+0x6e>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d109      	bne.n	80055b0 <HAL_TIM_OC_Start_IT+0x5c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e008      	b.n	80055c2 <HAL_TIM_OC_Start_IT+0x6e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	bf14      	ite	ne
 80055bc:	2301      	movne	r3, #1
 80055be:	2300      	moveq	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e0c7      	b.n	800575a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <HAL_TIM_OC_Start_IT+0x86>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d8:	e013      	b.n	8005602 <HAL_TIM_OC_Start_IT+0xae>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d104      	bne.n	80055ea <HAL_TIM_OC_Start_IT+0x96>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e8:	e00b      	b.n	8005602 <HAL_TIM_OC_Start_IT+0xae>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d104      	bne.n	80055fa <HAL_TIM_OC_Start_IT+0xa6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055f8:	e003      	b.n	8005602 <HAL_TIM_OC_Start_IT+0xae>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	d841      	bhi.n	800568c <HAL_TIM_OC_Start_IT+0x138>
 8005608:	a201      	add	r2, pc, #4	@ (adr r2, 8005610 <HAL_TIM_OC_Start_IT+0xbc>)
 800560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560e:	bf00      	nop
 8005610:	08005645 	.word	0x08005645
 8005614:	0800568d 	.word	0x0800568d
 8005618:	0800568d 	.word	0x0800568d
 800561c:	0800568d 	.word	0x0800568d
 8005620:	08005657 	.word	0x08005657
 8005624:	0800568d 	.word	0x0800568d
 8005628:	0800568d 	.word	0x0800568d
 800562c:	0800568d 	.word	0x0800568d
 8005630:	08005669 	.word	0x08005669
 8005634:	0800568d 	.word	0x0800568d
 8005638:	0800568d 	.word	0x0800568d
 800563c:	0800568d 	.word	0x0800568d
 8005640:	0800567b 	.word	0x0800567b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0202 	orr.w	r2, r2, #2
 8005652:	60da      	str	r2, [r3, #12]
      break;
 8005654:	e01d      	b.n	8005692 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0204 	orr.w	r2, r2, #4
 8005664:	60da      	str	r2, [r3, #12]
      break;
 8005666:	e014      	b.n	8005692 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0208 	orr.w	r2, r2, #8
 8005676:	60da      	str	r2, [r3, #12]
      break;
 8005678:	e00b      	b.n	8005692 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0210 	orr.w	r2, r2, #16
 8005688:	60da      	str	r2, [r3, #12]
      break;
 800568a:	e002      	b.n	8005692 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
      break;
 8005690:	bf00      	nop
  }

  if (status == HAL_OK)
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d15f      	bne.n	8005758 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2201      	movs	r2, #1
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fe4d 	bl	8006340 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005764 <HAL_TIM_OC_Start_IT+0x210>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_TIM_OC_Start_IT+0x166>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005768 <HAL_TIM_OC_Start_IT+0x214>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <HAL_TIM_OC_Start_IT+0x16a>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_TIM_OC_Start_IT+0x16c>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a22      	ldr	r2, [pc, #136]	@ (8005764 <HAL_TIM_OC_Start_IT+0x210>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d022      	beq.n	8005724 <HAL_TIM_OC_Start_IT+0x1d0>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e6:	d01d      	beq.n	8005724 <HAL_TIM_OC_Start_IT+0x1d0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1f      	ldr	r2, [pc, #124]	@ (800576c <HAL_TIM_OC_Start_IT+0x218>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d018      	beq.n	8005724 <HAL_TIM_OC_Start_IT+0x1d0>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005770 <HAL_TIM_OC_Start_IT+0x21c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d013      	beq.n	8005724 <HAL_TIM_OC_Start_IT+0x1d0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1c      	ldr	r2, [pc, #112]	@ (8005774 <HAL_TIM_OC_Start_IT+0x220>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00e      	beq.n	8005724 <HAL_TIM_OC_Start_IT+0x1d0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a17      	ldr	r2, [pc, #92]	@ (8005768 <HAL_TIM_OC_Start_IT+0x214>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d009      	beq.n	8005724 <HAL_TIM_OC_Start_IT+0x1d0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a18      	ldr	r2, [pc, #96]	@ (8005778 <HAL_TIM_OC_Start_IT+0x224>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_TIM_OC_Start_IT+0x1d0>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a17      	ldr	r2, [pc, #92]	@ (800577c <HAL_TIM_OC_Start_IT+0x228>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d111      	bne.n	8005748 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b06      	cmp	r3, #6
 8005734:	d010      	beq.n	8005758 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	e007      	b.n	8005758 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40010000 	.word	0x40010000
 8005768:	40010400 	.word	0x40010400
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40014000 	.word	0x40014000
 800577c:	40001800 	.word	0x40001800

08005780 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b0c      	cmp	r3, #12
 8005792:	d841      	bhi.n	8005818 <HAL_TIM_OC_Stop_IT+0x98>
 8005794:	a201      	add	r2, pc, #4	@ (adr r2, 800579c <HAL_TIM_OC_Stop_IT+0x1c>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057d1 	.word	0x080057d1
 80057a0:	08005819 	.word	0x08005819
 80057a4:	08005819 	.word	0x08005819
 80057a8:	08005819 	.word	0x08005819
 80057ac:	080057e3 	.word	0x080057e3
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005819 	.word	0x08005819
 80057b8:	08005819 	.word	0x08005819
 80057bc:	080057f5 	.word	0x080057f5
 80057c0:	08005819 	.word	0x08005819
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005807 	.word	0x08005807
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0202 	bic.w	r2, r2, #2
 80057de:	60da      	str	r2, [r3, #12]
      break;
 80057e0:	e01d      	b.n	800581e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0204 	bic.w	r2, r2, #4
 80057f0:	60da      	str	r2, [r3, #12]
      break;
 80057f2:	e014      	b.n	800581e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0208 	bic.w	r2, r2, #8
 8005802:	60da      	str	r2, [r3, #12]
      break;
 8005804:	e00b      	b.n	800581e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0210 	bic.w	r2, r2, #16
 8005814:	60da      	str	r2, [r3, #12]
      break;
 8005816:	e002      	b.n	800581e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	bf00      	nop
  }

  if (status == HAL_OK)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d161      	bne.n	80058e8 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2200      	movs	r2, #0
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fd87 	bl	8006340 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2f      	ldr	r2, [pc, #188]	@ (80058f4 <HAL_TIM_OC_Stop_IT+0x174>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_TIM_OC_Stop_IT+0xc6>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a2d      	ldr	r2, [pc, #180]	@ (80058f8 <HAL_TIM_OC_Stop_IT+0x178>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d101      	bne.n	800584a <HAL_TIM_OC_Stop_IT+0xca>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_TIM_OC_Stop_IT+0xcc>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d017      	beq.n	8005880 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	f241 1311 	movw	r3, #4369	@ 0x1111
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10f      	bne.n	8005880 <HAL_TIM_OC_Stop_IT+0x100>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	f240 4344 	movw	r3, #1092	@ 0x444
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <HAL_TIM_OC_Stop_IT+0x100>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800587e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	f241 1311 	movw	r3, #4369	@ 0x1111
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10f      	bne.n	80058b0 <HAL_TIM_OC_Stop_IT+0x130>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a1a      	ldr	r2, [r3, #32]
 8005896:	f240 4344 	movw	r3, #1092	@ 0x444
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <HAL_TIM_OC_Stop_IT+0x130>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0201 	bic.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <HAL_TIM_OC_Stop_IT+0x140>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058be:	e013      	b.n	80058e8 <HAL_TIM_OC_Stop_IT+0x168>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d104      	bne.n	80058d0 <HAL_TIM_OC_Stop_IT+0x150>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ce:	e00b      	b.n	80058e8 <HAL_TIM_OC_Stop_IT+0x168>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d104      	bne.n	80058e0 <HAL_TIM_OC_Stop_IT+0x160>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058de:	e003      	b.n	80058e8 <HAL_TIM_OC_Stop_IT+0x168>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400

080058fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d020      	beq.n	8005960 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0202 	mvn.w	r2, #2
 8005930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f9eb 	bl	8005d22 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fd fa90 	bl	8002e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f9ee 	bl	8005d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0204 	mvn.w	r2, #4
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9c5 	bl	8005d22 <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fd fa6a 	bl	8002e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f9c8 	bl	8005d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d020      	beq.n	80059f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0208 	mvn.w	r2, #8
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2204      	movs	r2, #4
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f99f 	bl	8005d22 <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fd fa44 	bl	8002e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f9a2 	bl	8005d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d020      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01b      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0210 	mvn.w	r2, #16
 8005a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f979 	bl	8005d22 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fd fa1e 	bl	8002e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f97c 	bl	8005d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0201 	mvn.w	r2, #1
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fd fac6 	bl	8002ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fd58 	bl	800653c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00c      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f94d 	bl	8005d4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00c      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0220 	mvn.w	r2, #32
 8005acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fd2a 	bl	8006528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_OC_ConfigChannel+0x1e>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e048      	b.n	8005b8c <HAL_TIM_OC_ConfigChannel+0xb0>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d839      	bhi.n	8005b7c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005b08:	a201      	add	r2, pc, #4	@ (adr r2, 8005b10 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005b7d 	.word	0x08005b7d
 8005b1c:	08005b7d 	.word	0x08005b7d
 8005b20:	08005b53 	.word	0x08005b53
 8005b24:	08005b7d 	.word	0x08005b7d
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005b7d 	.word	0x08005b7d
 8005b30:	08005b61 	.word	0x08005b61
 8005b34:	08005b7d 	.word	0x08005b7d
 8005b38:	08005b7d 	.word	0x08005b7d
 8005b3c:	08005b7d 	.word	0x08005b7d
 8005b40:	08005b6f 	.word	0x08005b6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f9ae 	bl	8005eac <TIM_OC1_SetConfig>
      break;
 8005b50:	e017      	b.n	8005b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fa17 	bl	8005f8c <TIM_OC2_SetConfig>
      break;
 8005b5e:	e010      	b.n	8005b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fa86 	bl	8006078 <TIM_OC3_SetConfig>
      break;
 8005b6c:	e009      	b.n	8005b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 faf3 	bl	8006160 <TIM_OC4_SetConfig>
      break;
 8005b7a:	e002      	b.n	8005b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e0b4      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x186>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be8:	d03e      	beq.n	8005c68 <HAL_TIM_ConfigClockSource+0xd4>
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bee:	f200 8087 	bhi.w	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bf6:	f000 8086 	beq.w	8005d06 <HAL_TIM_ConfigClockSource+0x172>
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bfe:	d87f      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c00:	2b70      	cmp	r3, #112	@ 0x70
 8005c02:	d01a      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0xa6>
 8005c04:	2b70      	cmp	r3, #112	@ 0x70
 8005c06:	d87b      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c08:	2b60      	cmp	r3, #96	@ 0x60
 8005c0a:	d050      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x11a>
 8005c0c:	2b60      	cmp	r3, #96	@ 0x60
 8005c0e:	d877      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c10:	2b50      	cmp	r3, #80	@ 0x50
 8005c12:	d03c      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0xfa>
 8005c14:	2b50      	cmp	r3, #80	@ 0x50
 8005c16:	d873      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c18:	2b40      	cmp	r3, #64	@ 0x40
 8005c1a:	d058      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x13a>
 8005c1c:	2b40      	cmp	r3, #64	@ 0x40
 8005c1e:	d86f      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b30      	cmp	r3, #48	@ 0x30
 8005c22:	d064      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c24:	2b30      	cmp	r3, #48	@ 0x30
 8005c26:	d86b      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d060      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d867      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d05c      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d05a      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c38:	e062      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c4a:	f000 fb59 	bl	8006300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	609a      	str	r2, [r3, #8]
      break;
 8005c66:	e04f      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c78:	f000 fb42 	bl	8006300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c8a:	609a      	str	r2, [r3, #8]
      break;
 8005c8c:	e03c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f000 fab6 	bl	800620c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2150      	movs	r1, #80	@ 0x50
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fb0f 	bl	80062ca <TIM_ITRx_SetConfig>
      break;
 8005cac:	e02c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f000 fad5 	bl	800626a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2160      	movs	r1, #96	@ 0x60
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 faff 	bl	80062ca <TIM_ITRx_SetConfig>
      break;
 8005ccc:	e01c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 fa96 	bl	800620c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2140      	movs	r1, #64	@ 0x40
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 faef 	bl	80062ca <TIM_ITRx_SetConfig>
      break;
 8005cec:	e00c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f000 fae6 	bl	80062ca <TIM_ITRx_SetConfig>
      break;
 8005cfe:	e003      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      break;
 8005d04:	e000      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a43      	ldr	r2, [pc, #268]	@ (8005e80 <TIM_Base_SetConfig+0x120>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7e:	d00f      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a40      	ldr	r2, [pc, #256]	@ (8005e84 <TIM_Base_SetConfig+0x124>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e88 <TIM_Base_SetConfig+0x128>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a3e      	ldr	r2, [pc, #248]	@ (8005e8c <TIM_Base_SetConfig+0x12c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e90 <TIM_Base_SetConfig+0x130>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d108      	bne.n	8005db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <TIM_Base_SetConfig+0x120>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d02b      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc0:	d027      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8005e84 <TIM_Base_SetConfig+0x124>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d023      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8005e88 <TIM_Base_SetConfig+0x128>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01f      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e8c <TIM_Base_SetConfig+0x12c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01b      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8005e90 <TIM_Base_SetConfig+0x130>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d017      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e94 <TIM_Base_SetConfig+0x134>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <TIM_Base_SetConfig+0x138>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00f      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a29      	ldr	r2, [pc, #164]	@ (8005e9c <TIM_Base_SetConfig+0x13c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00b      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a28      	ldr	r2, [pc, #160]	@ (8005ea0 <TIM_Base_SetConfig+0x140>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a27      	ldr	r2, [pc, #156]	@ (8005ea4 <TIM_Base_SetConfig+0x144>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a26      	ldr	r2, [pc, #152]	@ (8005ea8 <TIM_Base_SetConfig+0x148>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a0e      	ldr	r2, [pc, #56]	@ (8005e80 <TIM_Base_SetConfig+0x120>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_Base_SetConfig+0xf2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a10      	ldr	r2, [pc, #64]	@ (8005e90 <TIM_Base_SetConfig+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d103      	bne.n	8005e5a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691a      	ldr	r2, [r3, #16]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f043 0204 	orr.w	r2, r3, #4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]
}
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40010000 	.word	0x40010000
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	40000c00 	.word	0x40000c00
 8005e90:	40010400 	.word	0x40010400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40014400 	.word	0x40014400
 8005e9c:	40014800 	.word	0x40014800
 8005ea0:	40001800 	.word	0x40001800
 8005ea4:	40001c00 	.word	0x40001c00
 8005ea8:	40002000 	.word	0x40002000

08005eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	f023 0201 	bic.w	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0302 	bic.w	r3, r3, #2
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a20      	ldr	r2, [pc, #128]	@ (8005f84 <TIM_OC1_SetConfig+0xd8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC1_SetConfig+0x64>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <TIM_OC1_SetConfig+0xdc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10c      	bne.n	8005f2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0308 	bic.w	r3, r3, #8
 8005f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 0304 	bic.w	r3, r3, #4
 8005f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a15      	ldr	r2, [pc, #84]	@ (8005f84 <TIM_OC1_SetConfig+0xd8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_OC1_SetConfig+0x8e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a14      	ldr	r2, [pc, #80]	@ (8005f88 <TIM_OC1_SetConfig+0xdc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d111      	bne.n	8005f5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40010400 	.word	0x40010400

08005f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f023 0210 	bic.w	r2, r3, #16
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 0320 	bic.w	r3, r3, #32
 8005fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a22      	ldr	r2, [pc, #136]	@ (8006070 <TIM_OC2_SetConfig+0xe4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC2_SetConfig+0x68>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a21      	ldr	r2, [pc, #132]	@ (8006074 <TIM_OC2_SetConfig+0xe8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d10d      	bne.n	8006010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800600e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a17      	ldr	r2, [pc, #92]	@ (8006070 <TIM_OC2_SetConfig+0xe4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_OC2_SetConfig+0x94>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a16      	ldr	r2, [pc, #88]	@ (8006074 <TIM_OC2_SetConfig+0xe8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d113      	bne.n	8006048 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800602e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40010400 	.word	0x40010400

08006078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0303 	bic.w	r3, r3, #3
 80060ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a21      	ldr	r2, [pc, #132]	@ (8006158 <TIM_OC3_SetConfig+0xe0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d003      	beq.n	80060de <TIM_OC3_SetConfig+0x66>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a20      	ldr	r2, [pc, #128]	@ (800615c <TIM_OC3_SetConfig+0xe4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d10d      	bne.n	80060fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a16      	ldr	r2, [pc, #88]	@ (8006158 <TIM_OC3_SetConfig+0xe0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_OC3_SetConfig+0x92>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a15      	ldr	r2, [pc, #84]	@ (800615c <TIM_OC3_SetConfig+0xe4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d113      	bne.n	8006132 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40010000 	.word	0x40010000
 800615c:	40010400 	.word	0x40010400

08006160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	031b      	lsls	r3, r3, #12
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a12      	ldr	r2, [pc, #72]	@ (8006204 <TIM_OC4_SetConfig+0xa4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC4_SetConfig+0x68>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a11      	ldr	r2, [pc, #68]	@ (8006208 <TIM_OC4_SetConfig+0xa8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d109      	bne.n	80061dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010000 	.word	0x40010000
 8006208:	40010400 	.word	0x40010400

0800620c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0201 	bic.w	r2, r3, #1
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f023 030a 	bic.w	r3, r3, #10
 8006248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626a:	b480      	push	{r7}
 800626c:	b087      	sub	sp, #28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	f023 0210 	bic.w	r2, r3, #16
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	031b      	lsls	r3, r3, #12
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f043 0307 	orr.w	r3, r3, #7
 80062ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	609a      	str	r2, [r3, #8]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800631a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	021a      	lsls	r2, r3, #8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	431a      	orrs	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4313      	orrs	r3, r2
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2201      	movs	r2, #1
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a1a      	ldr	r2, [r3, #32]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	43db      	mvns	r3, r3
 8006362:	401a      	ands	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	431a      	orrs	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e05a      	b.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a21      	ldr	r2, [pc, #132]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d022      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f0:	d01d      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1d      	ldr	r2, [pc, #116]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d018      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1b      	ldr	r2, [pc, #108]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1a      	ldr	r2, [pc, #104]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00e      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d009      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a17      	ldr	r2, [pc, #92]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a15      	ldr	r2, [pc, #84]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10c      	bne.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4313      	orrs	r3, r2
 800643e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00
 8006478:	40010400 	.word	0x40010400
 800647c:	40014000 	.word	0x40014000
 8006480:	40001800 	.word	0x40001800

08006484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800649c:	2302      	movs	r3, #2
 800649e:	e03d      	b.n	800651c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e042      	b.n	80065e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fb fbbe 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2224      	movs	r2, #36	@ 0x24
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fa09 	bl	80069ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695a      	ldr	r2, [r3, #20]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	@ 0x28
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b20      	cmp	r3, #32
 800660e:	d175      	bne.n	80066fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <HAL_UART_Transmit+0x2c>
 8006616:	88fb      	ldrh	r3, [r7, #6]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e06e      	b.n	80066fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2221      	movs	r2, #33	@ 0x21
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800662e:	f7fd fc07 	bl	8003e40 <HAL_GetTick>
 8006632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006648:	d108      	bne.n	800665c <HAL_UART_Transmit+0x6c>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	e003      	b.n	8006664 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006660:	2300      	movs	r3, #0
 8006662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006664:	e02e      	b.n	80066c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	2180      	movs	r1, #128	@ 0x80
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f8df 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e03a      	b.n	80066fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10b      	bne.n	80066a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800669c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	3302      	adds	r3, #2
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e007      	b.n	80066b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	3301      	adds	r3, #1
 80066b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1cb      	bne.n	8006666 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2200      	movs	r2, #0
 80066d6:	2140      	movs	r1, #64	@ 0x40
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f8ab 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e006      	b.n	80066fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e000      	b.n	80066fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066fc:	2302      	movs	r3, #2
  }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b08a      	sub	sp, #40	@ 0x28
 800670a:	af02      	add	r7, sp, #8
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	603b      	str	r3, [r7, #0]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b20      	cmp	r3, #32
 8006724:	f040 8081 	bne.w	800682a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_UART_Receive+0x2e>
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e079      	b.n	800682c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2222      	movs	r2, #34	@ 0x22
 8006742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800674c:	f7fd fb78 	bl	8003e40 <HAL_GetTick>
 8006750:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006766:	d108      	bne.n	800677a <HAL_UART_Receive+0x74>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	e003      	b.n	8006782 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006782:	e047      	b.n	8006814 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2200      	movs	r2, #0
 800678c:	2120      	movs	r1, #32
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f850 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e042      	b.n	800682c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10c      	bne.n	80067c6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	3302      	adds	r3, #2
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e01f      	b.n	8006806 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ce:	d007      	beq.n	80067e0 <HAL_UART_Receive+0xda>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <HAL_UART_Receive+0xe8>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	e008      	b.n	8006800 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1b2      	bne.n	8006784 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e000      	b.n	800682c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800682a:	2302      	movs	r3, #2
  }
}
 800682c:	4618      	mov	r0, r3
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006844:	e03b      	b.n	80068be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d037      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684e:	f7fd faf7 	bl	8003e40 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	6a3a      	ldr	r2, [r7, #32]
 800685a:	429a      	cmp	r2, r3
 800685c:	d302      	bcc.n	8006864 <UART_WaitOnFlagUntilTimeout+0x30>
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e03a      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d023      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x8a>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b80      	cmp	r3, #128	@ 0x80
 800687a:	d020      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x8a>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b40      	cmp	r3, #64	@ 0x40
 8006880:	d01d      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b08      	cmp	r3, #8
 800688e:	d116      	bne.n	80068be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 f81d 	bl	80068e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2208      	movs	r2, #8
 80068b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e00f      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4013      	ands	r3, r2
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	bf0c      	ite	eq
 80068ce:	2301      	moveq	r3, #1
 80068d0:	2300      	movne	r3, #0
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	79fb      	ldrb	r3, [r7, #7]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d0b4      	beq.n	8006846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b095      	sub	sp, #84	@ 0x54
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800690e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e5      	bne.n	80068ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3314      	adds	r3, #20
 8006928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	61fb      	str	r3, [r7, #28]
   return(result);
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3314      	adds	r3, #20
 8006940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695a:	2b01      	cmp	r3, #1
 800695c:	d119      	bne.n	8006992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	330c      	adds	r3, #12
 8006964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60bb      	str	r3, [r7, #8]
   return(result);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f023 0310 	bic.w	r3, r3, #16
 8006974:	647b      	str	r3, [r7, #68]	@ 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800697e:	61ba      	str	r2, [r7, #24]
 8006980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	6979      	ldr	r1, [r7, #20]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	613b      	str	r3, [r7, #16]
   return(result);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069a0:	bf00      	nop
 80069a2:	3754      	adds	r7, #84	@ 0x54
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b0:	b0c0      	sub	sp, #256	@ 0x100
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c8:	68d9      	ldr	r1, [r3, #12]
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	ea40 0301 	orr.w	r3, r0, r1
 80069d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a04:	f021 010c 	bic.w	r1, r1, #12
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a12:	430b      	orrs	r3, r1
 8006a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a26:	6999      	ldr	r1, [r3, #24]
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	ea40 0301 	orr.w	r3, r0, r1
 8006a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b8f      	ldr	r3, [pc, #572]	@ (8006c78 <UART_SetConfig+0x2cc>)
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d005      	beq.n	8006a4c <UART_SetConfig+0xa0>
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b8d      	ldr	r3, [pc, #564]	@ (8006c7c <UART_SetConfig+0x2d0>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d104      	bne.n	8006a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a4c:	f7fd ff58 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8006a50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a54:	e003      	b.n	8006a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a56:	f7fd ff3f 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8006a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a68:	f040 810c 	bne.w	8006c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	1891      	adds	r1, r2, r2
 8006a84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a86:	415b      	adcs	r3, r3
 8006a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a8e:	4621      	mov	r1, r4
 8006a90:	eb12 0801 	adds.w	r8, r2, r1
 8006a94:	4629      	mov	r1, r5
 8006a96:	eb43 0901 	adc.w	r9, r3, r1
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aae:	4690      	mov	r8, r2
 8006ab0:	4699      	mov	r9, r3
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	eb18 0303 	adds.w	r3, r8, r3
 8006ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006abc:	462b      	mov	r3, r5
 8006abe:	eb49 0303 	adc.w	r3, r9, r3
 8006ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ada:	460b      	mov	r3, r1
 8006adc:	18db      	adds	r3, r3, r3
 8006ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	eb42 0303 	adc.w	r3, r2, r3
 8006ae6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006af0:	f7f9 ff7e 	bl	80009f0 <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4b61      	ldr	r3, [pc, #388]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006afa:	fba3 2302 	umull	r2, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	011c      	lsls	r4, r3, #4
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	1891      	adds	r1, r2, r2
 8006b1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b1c:	415b      	adcs	r3, r3
 8006b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b24:	4641      	mov	r1, r8
 8006b26:	eb12 0a01 	adds.w	sl, r2, r1
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b44:	4692      	mov	sl, r2
 8006b46:	469b      	mov	fp, r3
 8006b48:	4643      	mov	r3, r8
 8006b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b52:	464b      	mov	r3, r9
 8006b54:	eb4b 0303 	adc.w	r3, fp, r3
 8006b58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b70:	460b      	mov	r3, r1
 8006b72:	18db      	adds	r3, r3, r3
 8006b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b76:	4613      	mov	r3, r2
 8006b78:	eb42 0303 	adc.w	r3, r2, r3
 8006b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b86:	f7f9 ff33 	bl	80009f0 <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4b3b      	ldr	r3, [pc, #236]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006b92:	fba3 2301 	umull	r2, r3, r3, r1
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	2264      	movs	r2, #100	@ 0x64
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
 8006b9e:	1acb      	subs	r3, r1, r3
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ba6:	4b36      	ldr	r3, [pc, #216]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bb4:	441c      	add	r4, r3
 8006bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	1891      	adds	r1, r2, r2
 8006bce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bd0:	415b      	adcs	r3, r3
 8006bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bd8:	4641      	mov	r1, r8
 8006bda:	1851      	adds	r1, r2, r1
 8006bdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bde:	4649      	mov	r1, r9
 8006be0:	414b      	adcs	r3, r1
 8006be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	00cb      	lsls	r3, r1, #3
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	00ca      	lsls	r2, r1, #3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	4642      	mov	r2, r8
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	460a      	mov	r2, r1
 8006c10:	eb42 0303 	adc.w	r3, r2, r3
 8006c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	18db      	adds	r3, r3, r3
 8006c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c32:	4613      	mov	r3, r2
 8006c34:	eb42 0303 	adc.w	r3, r2, r3
 8006c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c42:	f7f9 fed5 	bl	80009f0 <__aeabi_uldivmod>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	2164      	movs	r1, #100	@ 0x64
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	3332      	adds	r3, #50	@ 0x32
 8006c5e:	4a08      	ldr	r2, [pc, #32]	@ (8006c80 <UART_SetConfig+0x2d4>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f003 0207 	and.w	r2, r3, #7
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4422      	add	r2, r4
 8006c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c74:	e106      	b.n	8006e84 <UART_SetConfig+0x4d8>
 8006c76:	bf00      	nop
 8006c78:	40011000 	.word	0x40011000
 8006c7c:	40011400 	.word	0x40011400
 8006c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c96:	4642      	mov	r2, r8
 8006c98:	464b      	mov	r3, r9
 8006c9a:	1891      	adds	r1, r2, r2
 8006c9c:	6239      	str	r1, [r7, #32]
 8006c9e:	415b      	adcs	r3, r3
 8006ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	1854      	adds	r4, r2, r1
 8006caa:	4649      	mov	r1, r9
 8006cac:	eb43 0501 	adc.w	r5, r3, r1
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	00eb      	lsls	r3, r5, #3
 8006cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cbe:	00e2      	lsls	r2, r4, #3
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	4643      	mov	r3, r8
 8006cc6:	18e3      	adds	r3, r4, r3
 8006cc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ccc:	464b      	mov	r3, r9
 8006cce:	eb45 0303 	adc.w	r3, r5, r3
 8006cd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ce2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	008b      	lsls	r3, r1, #2
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	008a      	lsls	r2, r1, #2
 8006d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d04:	f7f9 fe74 	bl	80009f0 <__aeabi_uldivmod>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4b60      	ldr	r3, [pc, #384]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	011c      	lsls	r4, r3, #4
 8006d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	1891      	adds	r1, r2, r2
 8006d2e:	61b9      	str	r1, [r7, #24]
 8006d30:	415b      	adcs	r3, r3
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d38:	4641      	mov	r1, r8
 8006d3a:	1851      	adds	r1, r2, r1
 8006d3c:	6139      	str	r1, [r7, #16]
 8006d3e:	4649      	mov	r1, r9
 8006d40:	414b      	adcs	r3, r1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d50:	4659      	mov	r1, fp
 8006d52:	00cb      	lsls	r3, r1, #3
 8006d54:	4651      	mov	r1, sl
 8006d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	00ca      	lsls	r2, r1, #3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	4642      	mov	r2, r8
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	460a      	mov	r2, r1
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d90:	4649      	mov	r1, r9
 8006d92:	008b      	lsls	r3, r1, #2
 8006d94:	4641      	mov	r1, r8
 8006d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	008a      	lsls	r2, r1, #2
 8006d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006da2:	f7f9 fe25 	bl	80009f0 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	4b38      	ldr	r3, [pc, #224]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006dae:	fba3 2301 	umull	r2, r3, r3, r1
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	2264      	movs	r2, #100	@ 0x64
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	1acb      	subs	r3, r1, r3
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	3332      	adds	r3, #50	@ 0x32
 8006dc0:	4a33      	ldr	r2, [pc, #204]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dcc:	441c      	add	r4, r3
 8006dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ddc:	4642      	mov	r2, r8
 8006dde:	464b      	mov	r3, r9
 8006de0:	1891      	adds	r1, r2, r2
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	415b      	adcs	r3, r3
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dec:	4641      	mov	r1, r8
 8006dee:	1851      	adds	r1, r2, r1
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	4649      	mov	r1, r9
 8006df4:	414b      	adcs	r3, r1
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e04:	4659      	mov	r1, fp
 8006e06:	00cb      	lsls	r3, r1, #3
 8006e08:	4651      	mov	r1, sl
 8006e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e0e:	4651      	mov	r1, sl
 8006e10:	00ca      	lsls	r2, r1, #3
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	4603      	mov	r3, r0
 8006e18:	4642      	mov	r2, r8
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e1e:	464b      	mov	r3, r9
 8006e20:	460a      	mov	r2, r1
 8006e22:	eb42 0303 	adc.w	r3, r2, r3
 8006e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e32:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e40:	4649      	mov	r1, r9
 8006e42:	008b      	lsls	r3, r1, #2
 8006e44:	4641      	mov	r1, r8
 8006e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	008a      	lsls	r2, r1, #2
 8006e4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e52:	f7f9 fdcd 	bl	80009f0 <__aeabi_uldivmod>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	2164      	movs	r1, #100	@ 0x64
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	3332      	adds	r3, #50	@ 0x32
 8006e6e:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <UART_SetConfig+0x4e4>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f003 020f 	and.w	r2, r3, #15
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4422      	add	r2, r4
 8006e82:	609a      	str	r2, [r3, #8]
}
 8006e84:	bf00      	nop
 8006e86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e90:	51eb851f 	.word	0x51eb851f

08006e94 <sqrtf>:
 8006e94:	b508      	push	{r3, lr}
 8006e96:	ed2d 8b02 	vpush	{d8}
 8006e9a:	eeb0 8a40 	vmov.f32	s16, s0
 8006e9e:	f000 f817 	bl	8006ed0 <__ieee754_sqrtf>
 8006ea2:	eeb4 8a48 	vcmp.f32	s16, s16
 8006ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eaa:	d60c      	bvs.n	8006ec6 <sqrtf+0x32>
 8006eac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006ecc <sqrtf+0x38>
 8006eb0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb8:	d505      	bpl.n	8006ec6 <sqrtf+0x32>
 8006eba:	f000 f815 	bl	8006ee8 <__errno>
 8006ebe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006ec2:	2321      	movs	r3, #33	@ 0x21
 8006ec4:	6003      	str	r3, [r0, #0]
 8006ec6:	ecbd 8b02 	vpop	{d8}
 8006eca:	bd08      	pop	{r3, pc}
 8006ecc:	00000000 	.word	0x00000000

08006ed0 <__ieee754_sqrtf>:
 8006ed0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006ed4:	4770      	bx	lr

08006ed6 <memset>:
 8006ed6:	4402      	add	r2, r0
 8006ed8:	4603      	mov	r3, r0
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d100      	bne.n	8006ee0 <memset+0xa>
 8006ede:	4770      	bx	lr
 8006ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee4:	e7f9      	b.n	8006eda <memset+0x4>
	...

08006ee8 <__errno>:
 8006ee8:	4b01      	ldr	r3, [pc, #4]	@ (8006ef0 <__errno+0x8>)
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	2000000c 	.word	0x2000000c

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2600      	movs	r6, #0
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4d0b      	ldr	r5, [pc, #44]	@ (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	@ (8006f38 <__libc_init_array+0x44>)
 8006f08:	f000 f826 	bl	8006f58 <_init>
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2600      	movs	r6, #0
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1c:	4798      	blx	r3
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f26:	4798      	blx	r3
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	08006f90 	.word	0x08006f90
 8006f30:	08006f90 	.word	0x08006f90
 8006f34:	08006f90 	.word	0x08006f90
 8006f38:	08006f94 	.word	0x08006f94

08006f3c <memcpy>:
 8006f3c:	440a      	add	r2, r1
 8006f3e:	4291      	cmp	r1, r2
 8006f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f44:	d100      	bne.n	8006f48 <memcpy+0xc>
 8006f46:	4770      	bx	lr
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f52:	4291      	cmp	r1, r2
 8006f54:	d1f9      	bne.n	8006f4a <memcpy+0xe>
 8006f56:	bd10      	pop	{r4, pc}

08006f58 <_init>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	bf00      	nop
 8006f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5e:	bc08      	pop	{r3}
 8006f60:	469e      	mov	lr, r3
 8006f62:	4770      	bx	lr

08006f64 <_fini>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	bf00      	nop
 8006f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6a:	bc08      	pop	{r3}
 8006f6c:	469e      	mov	lr, r3
 8006f6e:	4770      	bx	lr
