
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e6c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006048  08006048  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006048  08006048  00007048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006050  08006050  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006050  08006050  00007050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006054  08006054  00007054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006058  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  2000005c  080060b4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  080060b4  00008580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016374  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd4  00000000  00000000  0001e400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00020fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  00022260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000365f  00000000  00000000  000230f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e65  00000000  00000000  00026753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d641b  00000000  00000000  0003d5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001139d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  00113a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00118c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006018 	.word	0x08006018

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08006018 	.word	0x08006018

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2iz>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a8:	d215      	bcs.n	80009d6 <__aeabi_d2iz+0x36>
 80009aa:	d511      	bpl.n	80009d0 <__aeabi_d2iz+0x30>
 80009ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d912      	bls.n	80009dc <__aeabi_d2iz+0x3c>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009da:	d105      	bne.n	80009e8 <__aeabi_d2iz+0x48>
 80009dc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	bf08      	it	eq
 80009e2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_uldivmod>:
 80009f0:	b953      	cbnz	r3, 8000a08 <__aeabi_uldivmod+0x18>
 80009f2:	b94a      	cbnz	r2, 8000a08 <__aeabi_uldivmod+0x18>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	bf08      	it	eq
 80009f8:	2800      	cmpeq	r0, #0
 80009fa:	bf1c      	itt	ne
 80009fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000a00:	f04f 30ff 	movne.w	r0, #4294967295
 8000a04:	f000 b988 	b.w	8000d18 <__aeabi_idiv0>
 8000a08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a10:	f000 f806 	bl	8000a20 <__udivmoddi4>
 8000a14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1c:	b004      	add	sp, #16
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9d08      	ldr	r5, [sp, #32]
 8000a26:	468e      	mov	lr, r1
 8000a28:	4604      	mov	r4, r0
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14a      	bne.n	8000ac6 <__udivmoddi4+0xa6>
 8000a30:	428a      	cmp	r2, r1
 8000a32:	4617      	mov	r7, r2
 8000a34:	d962      	bls.n	8000afc <__udivmoddi4+0xdc>
 8000a36:	fab2 f682 	clz	r6, r2
 8000a3a:	b14e      	cbz	r6, 8000a50 <__udivmoddi4+0x30>
 8000a3c:	f1c6 0320 	rsb	r3, r6, #32
 8000a40:	fa01 f806 	lsl.w	r8, r1, r6
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	40b7      	lsls	r7, r6
 8000a4a:	ea43 0808 	orr.w	r8, r3, r8
 8000a4e:	40b4      	lsls	r4, r6
 8000a50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a5c:	0c23      	lsrs	r3, r4, #16
 8000a5e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a66:	fb01 f20c 	mul.w	r2, r1, ip
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d909      	bls.n	8000a82 <__udivmoddi4+0x62>
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a74:	f080 80ea 	bcs.w	8000c4c <__udivmoddi4+0x22c>
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	f240 80e7 	bls.w	8000c4c <__udivmoddi4+0x22c>
 8000a7e:	3902      	subs	r1, #2
 8000a80:	443b      	add	r3, r7
 8000a82:	1a9a      	subs	r2, r3, r2
 8000a84:	b2a3      	uxth	r3, r4
 8000a86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a92:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a96:	459c      	cmp	ip, r3
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0x8e>
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa0:	f080 80d6 	bcs.w	8000c50 <__udivmoddi4+0x230>
 8000aa4:	459c      	cmp	ip, r3
 8000aa6:	f240 80d3 	bls.w	8000c50 <__udivmoddi4+0x230>
 8000aaa:	443b      	add	r3, r7
 8000aac:	3802      	subs	r0, #2
 8000aae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab2:	eba3 030c 	sub.w	r3, r3, ip
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	b11d      	cbz	r5, 8000ac2 <__udivmoddi4+0xa2>
 8000aba:	40f3      	lsrs	r3, r6
 8000abc:	2200      	movs	r2, #0
 8000abe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d905      	bls.n	8000ad6 <__udivmoddi4+0xb6>
 8000aca:	b10d      	cbz	r5, 8000ad0 <__udivmoddi4+0xb0>
 8000acc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e7f5      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000ad6:	fab3 f183 	clz	r1, r3
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d146      	bne.n	8000b6c <__udivmoddi4+0x14c>
 8000ade:	4573      	cmp	r3, lr
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xc8>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 8105 	bhi.w	8000cf2 <__udivmoddi4+0x2d2>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	4690      	mov	r8, r2
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e5      	beq.n	8000ac2 <__udivmoddi4+0xa2>
 8000af6:	e9c5 4800 	strd	r4, r8, [r5]
 8000afa:	e7e2      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	f000 8090 	beq.w	8000c22 <__udivmoddi4+0x202>
 8000b02:	fab2 f682 	clz	r6, r2
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f040 80a4 	bne.w	8000c54 <__udivmoddi4+0x234>
 8000b0c:	1a8a      	subs	r2, r1, r2
 8000b0e:	0c03      	lsrs	r3, r0, #16
 8000b10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b14:	b280      	uxth	r0, r0
 8000b16:	b2bc      	uxth	r4, r7
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b1e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b26:	fb04 f20c 	mul.w	r2, r4, ip
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d907      	bls.n	8000b3e <__udivmoddi4+0x11e>
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b34:	d202      	bcs.n	8000b3c <__udivmoddi4+0x11c>
 8000b36:	429a      	cmp	r2, r3
 8000b38:	f200 80e0 	bhi.w	8000cfc <__udivmoddi4+0x2dc>
 8000b3c:	46c4      	mov	ip, r8
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b44:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b48:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b4c:	fb02 f404 	mul.w	r4, r2, r4
 8000b50:	429c      	cmp	r4, r3
 8000b52:	d907      	bls.n	8000b64 <__udivmoddi4+0x144>
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b5a:	d202      	bcs.n	8000b62 <__udivmoddi4+0x142>
 8000b5c:	429c      	cmp	r4, r3
 8000b5e:	f200 80ca 	bhi.w	8000cf6 <__udivmoddi4+0x2d6>
 8000b62:	4602      	mov	r2, r0
 8000b64:	1b1b      	subs	r3, r3, r4
 8000b66:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b6a:	e7a5      	b.n	8000ab8 <__udivmoddi4+0x98>
 8000b6c:	f1c1 0620 	rsb	r6, r1, #32
 8000b70:	408b      	lsls	r3, r1
 8000b72:	fa22 f706 	lsr.w	r7, r2, r6
 8000b76:	431f      	orrs	r7, r3
 8000b78:	fa0e f401 	lsl.w	r4, lr, r1
 8000b7c:	fa20 f306 	lsr.w	r3, r0, r6
 8000b80:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b84:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b8e:	fa1f fc87 	uxth.w	ip, r7
 8000b92:	fbbe f0f9 	udiv	r0, lr, r9
 8000b96:	0c1c      	lsrs	r4, r3, #16
 8000b98:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b9c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ba0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	fa02 f201 	lsl.w	r2, r2, r1
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x1a0>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bb2:	f080 809c 	bcs.w	8000cee <__udivmoddi4+0x2ce>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8099 	bls.w	8000cee <__udivmoddi4+0x2ce>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	eba4 040e 	sub.w	r4, r4, lr
 8000bc4:	fa1f fe83 	uxth.w	lr, r3
 8000bc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bd4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bd8:	45a4      	cmp	ip, r4
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x1ce>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f103 3eff 	add.w	lr, r3, #4294967295
 8000be2:	f080 8082 	bcs.w	8000cea <__udivmoddi4+0x2ca>
 8000be6:	45a4      	cmp	ip, r4
 8000be8:	d97f      	bls.n	8000cea <__udivmoddi4+0x2ca>
 8000bea:	3b02      	subs	r3, #2
 8000bec:	443c      	add	r4, r7
 8000bee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bf2:	eba4 040c 	sub.w	r4, r4, ip
 8000bf6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bfa:	4564      	cmp	r4, ip
 8000bfc:	4673      	mov	r3, lr
 8000bfe:	46e1      	mov	r9, ip
 8000c00:	d362      	bcc.n	8000cc8 <__udivmoddi4+0x2a8>
 8000c02:	d05f      	beq.n	8000cc4 <__udivmoddi4+0x2a4>
 8000c04:	b15d      	cbz	r5, 8000c1e <__udivmoddi4+0x1fe>
 8000c06:	ebb8 0203 	subs.w	r2, r8, r3
 8000c0a:	eb64 0409 	sbc.w	r4, r4, r9
 8000c0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c12:	fa22 f301 	lsr.w	r3, r2, r1
 8000c16:	431e      	orrs	r6, r3
 8000c18:	40cc      	lsrs	r4, r1
 8000c1a:	e9c5 6400 	strd	r6, r4, [r5]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	e74f      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000c22:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c26:	0c01      	lsrs	r1, r0, #16
 8000c28:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c2c:	b280      	uxth	r0, r0
 8000c2e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c32:	463b      	mov	r3, r7
 8000c34:	4638      	mov	r0, r7
 8000c36:	463c      	mov	r4, r7
 8000c38:	46b8      	mov	r8, r7
 8000c3a:	46be      	mov	lr, r7
 8000c3c:	2620      	movs	r6, #32
 8000c3e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c42:	eba2 0208 	sub.w	r2, r2, r8
 8000c46:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c4a:	e766      	b.n	8000b1a <__udivmoddi4+0xfa>
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	e718      	b.n	8000a82 <__udivmoddi4+0x62>
 8000c50:	4610      	mov	r0, r2
 8000c52:	e72c      	b.n	8000aae <__udivmoddi4+0x8e>
 8000c54:	f1c6 0220 	rsb	r2, r6, #32
 8000c58:	fa2e f302 	lsr.w	r3, lr, r2
 8000c5c:	40b7      	lsls	r7, r6
 8000c5e:	40b1      	lsls	r1, r6
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c6e:	b2bc      	uxth	r4, r7
 8000c70:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c74:	0c11      	lsrs	r1, r2, #16
 8000c76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7a:	fb08 f904 	mul.w	r9, r8, r4
 8000c7e:	40b0      	lsls	r0, r6
 8000c80:	4589      	cmp	r9, r1
 8000c82:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c86:	b280      	uxth	r0, r0
 8000c88:	d93e      	bls.n	8000d08 <__udivmoddi4+0x2e8>
 8000c8a:	1879      	adds	r1, r7, r1
 8000c8c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c90:	d201      	bcs.n	8000c96 <__udivmoddi4+0x276>
 8000c92:	4589      	cmp	r9, r1
 8000c94:	d81f      	bhi.n	8000cd6 <__udivmoddi4+0x2b6>
 8000c96:	eba1 0109 	sub.w	r1, r1, r9
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fb09 f804 	mul.w	r8, r9, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cac:	4542      	cmp	r2, r8
 8000cae:	d229      	bcs.n	8000d04 <__udivmoddi4+0x2e4>
 8000cb0:	18ba      	adds	r2, r7, r2
 8000cb2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cb6:	d2c4      	bcs.n	8000c42 <__udivmoddi4+0x222>
 8000cb8:	4542      	cmp	r2, r8
 8000cba:	d2c2      	bcs.n	8000c42 <__udivmoddi4+0x222>
 8000cbc:	f1a9 0102 	sub.w	r1, r9, #2
 8000cc0:	443a      	add	r2, r7
 8000cc2:	e7be      	b.n	8000c42 <__udivmoddi4+0x222>
 8000cc4:	45f0      	cmp	r8, lr
 8000cc6:	d29d      	bcs.n	8000c04 <__udivmoddi4+0x1e4>
 8000cc8:	ebbe 0302 	subs.w	r3, lr, r2
 8000ccc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	46e1      	mov	r9, ip
 8000cd4:	e796      	b.n	8000c04 <__udivmoddi4+0x1e4>
 8000cd6:	eba7 0909 	sub.w	r9, r7, r9
 8000cda:	4449      	add	r1, r9
 8000cdc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ce0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce4:	fb09 f804 	mul.w	r8, r9, r4
 8000ce8:	e7db      	b.n	8000ca2 <__udivmoddi4+0x282>
 8000cea:	4673      	mov	r3, lr
 8000cec:	e77f      	b.n	8000bee <__udivmoddi4+0x1ce>
 8000cee:	4650      	mov	r0, sl
 8000cf0:	e766      	b.n	8000bc0 <__udivmoddi4+0x1a0>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e6fd      	b.n	8000af2 <__udivmoddi4+0xd2>
 8000cf6:	443b      	add	r3, r7
 8000cf8:	3a02      	subs	r2, #2
 8000cfa:	e733      	b.n	8000b64 <__udivmoddi4+0x144>
 8000cfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d00:	443b      	add	r3, r7
 8000d02:	e71c      	b.n	8000b3e <__udivmoddi4+0x11e>
 8000d04:	4649      	mov	r1, r9
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x222>
 8000d08:	eba1 0109 	sub.w	r1, r1, r9
 8000d0c:	46c4      	mov	ip, r8
 8000d0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d12:	fb09 f804 	mul.w	r8, r9, r4
 8000d16:	e7c4      	b.n	8000ca2 <__udivmoddi4+0x282>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	f5ad 6dd5 	sub.w	sp, sp, #1704	@ 0x6a8
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f002 f9ec 	bl	8003100 <HAL_Init>
  motor_t motor2;
  motor_t motor3;
  motor_t motor4;
  motor_t motor5;

  motors[0] = &motor1;
 8000d28:	4a34      	ldr	r2, [pc, #208]	@ (8000dfc <main+0xe0>)
 8000d2a:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8000d2e:	6013      	str	r3, [r2, #0]
  motors[1] = &motor2;
 8000d30:	4a32      	ldr	r2, [pc, #200]	@ (8000dfc <main+0xe0>)
 8000d32:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000d36:	6053      	str	r3, [r2, #4]
  motors[2] = &motor3;
 8000d38:	4a30      	ldr	r2, [pc, #192]	@ (8000dfc <main+0xe0>)
 8000d3a:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8000d3e:	6093      	str	r3, [r2, #8]
  motors[3] = &motor4;
 8000d40:	4a2e      	ldr	r2, [pc, #184]	@ (8000dfc <main+0xe0>)
 8000d42:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000d46:	60d3      	str	r3, [r2, #12]
  motors[4] = &motor5;
 8000d48:	4a2c      	ldr	r2, [pc, #176]	@ (8000dfc <main+0xe0>)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	6113      	str	r3, [r2, #16]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f85d 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fc5d 	bl	8001610 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 fbdd 	bl	8001514 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d5a:	f000 fbb1 	bl	80014c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000d5e:	f000 f8c3 	bl	8000ee8 <MX_I2C1_Init>
  MX_UART4_Init();
 8000d62:	f000 fb59 	bl	8001418 <MX_UART4_Init>
  MX_UART5_Init();
 8000d66:	f000 fb81 	bl	800146c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000d6a:	f000 fbfd 	bl	8001568 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000d6e:	f000 fc25 	bl	80015bc <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000d72:	f000 f8e7 	bl	8000f44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d76:	f000 f959 	bl	800102c <MX_TIM4_Init>
  MX_TIM9_Init();
 8000d7a:	f000 fa69 	bl	8001250 <MX_TIM9_Init>
  MX_TIM8_Init();
 8000d7e:	f000 f9c9 	bl	8001114 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000d82:	f000 fa9f 	bl	80012c4 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000d86:	f000 fafd 	bl	8001384 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  active_movement_flag = 0;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <main+0xe4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
  init_motor_1(&motor1, &driver1);
 8000d90:	f507 62c7 	add.w	r2, r7, #1592	@ 0x638
 8000d94:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fea4 	bl	8002ae8 <init_motor_1>
  init_motor_2(&motor2, &driver2);
 8000da0:	f507 62b9 	add.w	r2, r7, #1480	@ 0x5c8
 8000da4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 ff2c 	bl	8002c08 <init_motor_2>
  init_motor_3(&motor3, &driver3);
 8000db0:	f507 62ab 	add.w	r2, r7, #1368	@ 0x558
 8000db4:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 ffb2 	bl	8002d24 <init_motor_3>
  init_motor_4(&motor4, &driver4);
 8000dc0:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8000dc4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 f838 	bl	8002e40 <init_motor_4>
  init_motor_5(&motor5, &driver5);
 8000dd0:	f507 628f 	add.w	r2, r7, #1144	@ 0x478
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 f8bd 	bl	8002f58 <init_motor_5>

  moveDegrees(300, &motor1);
 8000dde:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8000de2:	4618      	mov	r0, r3
 8000de4:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8000e04 <main+0xe8>
 8000de8:	f001 fe0a 	bl	8002a00 <moveDegrees>
  moveDegrees(180, &motor5);
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4618      	mov	r0, r3
 8000df0:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8000e08 <main+0xec>
 8000df4:	f001 fe04 	bl	8002a00 <moveDegrees>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <main+0xdc>
 8000dfc:	2000042c 	.word	0x2000042c
 8000e00:	20000440 	.word	0x20000440
 8000e04:	43960000 	.word	0x43960000
 8000e08:	43340000 	.word	0x43340000

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	@ 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2234      	movs	r2, #52	@ 0x34
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 f8bb 	bl	8005f96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a29      	ldr	r2, [pc, #164]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e58:	4a22      	ldr	r2, [pc, #136]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e80:	2310      	movs	r3, #16
 8000e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e84:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 f90a 	bl	80040b4 <HAL_RCC_OscConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ea6:	f000 fc5d 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fdaa 	bl	8003a20 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ed2:	f000 fc47 	bl	8001764 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3750      	adds	r7, #80	@ 0x50
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000eee:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <MX_I2C1_Init+0x54>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000ef4:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <MX_I2C1_Init+0x58>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000f06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <MX_I2C1_Init+0x50>)
 8000f26:	f002 fc37 	bl	8003798 <HAL_I2C_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f30:	f000 fc18 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000078 	.word	0x20000078
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	000186a0 	.word	0x000186a0

08000f44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	@ 0x38
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f74:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000f76:	4a2c      	ldr	r2, [pc, #176]	@ (8001028 <MX_TIM3_Init+0xe4>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000f7c:	2229      	movs	r2, #41	@ 0x29
 8000f7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f86:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000f88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f9a:	4822      	ldr	r0, [pc, #136]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000f9c:	f003 fb28 	bl	80045f0 <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fa6:	f000 fbdd 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481b      	ldr	r0, [pc, #108]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000fb8:	f003 fee2 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fc2:	f000 fbcf 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000fc6:	4817      	ldr	r0, [pc, #92]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000fc8:	f003 fb61 	bl	800468e <HAL_TIM_OC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fd2:	f000 fbc7 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480f      	ldr	r0, [pc, #60]	@ (8001024 <MX_TIM3_Init+0xe0>)
 8000fe6:	f004 fac7 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ff0:	f000 fbb8 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <MX_TIM3_Init+0xe0>)
 800100c:	f003 fe5c 	bl	8004cc8 <HAL_TIM_OC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001016:	f000 fba5 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3738      	adds	r7, #56	@ 0x38
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000cc 	.word	0x200000cc
 8001028:	40000400 	.word	0x40000400

0800102c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105c:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <MX_TIM4_Init+0xe0>)
 800105e:	4a2c      	ldr	r2, [pc, #176]	@ (8001110 <MX_TIM4_Init+0xe4>)
 8001060:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 8001062:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <MX_TIM4_Init+0xe0>)
 8001064:	2229      	movs	r2, #41	@ 0x29
 8001066:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b28      	ldr	r3, [pc, #160]	@ (800110c <MX_TIM4_Init+0xe0>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800106e:	4b27      	ldr	r3, [pc, #156]	@ (800110c <MX_TIM4_Init+0xe0>)
 8001070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001074:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <MX_TIM4_Init+0xe0>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <MX_TIM4_Init+0xe0>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001082:	4822      	ldr	r0, [pc, #136]	@ (800110c <MX_TIM4_Init+0xe0>)
 8001084:	f003 fab4 	bl	80045f0 <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800108e:	f000 fb69 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109c:	4619      	mov	r1, r3
 800109e:	481b      	ldr	r0, [pc, #108]	@ (800110c <MX_TIM4_Init+0xe0>)
 80010a0:	f003 fe6e 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80010aa:	f000 fb5b 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80010ae:	4817      	ldr	r0, [pc, #92]	@ (800110c <MX_TIM4_Init+0xe0>)
 80010b0:	f003 faed 	bl	800468e <HAL_TIM_OC_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010ba:	f000 fb53 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4619      	mov	r1, r3
 80010cc:	480f      	ldr	r0, [pc, #60]	@ (800110c <MX_TIM4_Init+0xe0>)
 80010ce:	f004 fa53 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80010d8:	f000 fb44 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <MX_TIM4_Init+0xe0>)
 80010f4:	f003 fde8 	bl	8004cc8 <HAL_TIM_OC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80010fe:	f000 fb31 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	@ 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000114 	.word	0x20000114
 8001110:	40000800 	.word	0x40000800

08001114 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b096      	sub	sp, #88	@ 0x58
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	615a      	str	r2, [r3, #20]
 8001144:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2220      	movs	r2, #32
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f004 ff22 	bl	8005f96 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001152:	4b3d      	ldr	r3, [pc, #244]	@ (8001248 <MX_TIM8_Init+0x134>)
 8001154:	4a3d      	ldr	r2, [pc, #244]	@ (800124c <MX_TIM8_Init+0x138>)
 8001156:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 8001158:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <MX_TIM8_Init+0x134>)
 800115a:	2229      	movs	r2, #41	@ 0x29
 800115c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b3a      	ldr	r3, [pc, #232]	@ (8001248 <MX_TIM8_Init+0x134>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001164:	4b38      	ldr	r3, [pc, #224]	@ (8001248 <MX_TIM8_Init+0x134>)
 8001166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800116a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b36      	ldr	r3, [pc, #216]	@ (8001248 <MX_TIM8_Init+0x134>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001172:	4b35      	ldr	r3, [pc, #212]	@ (8001248 <MX_TIM8_Init+0x134>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b33      	ldr	r3, [pc, #204]	@ (8001248 <MX_TIM8_Init+0x134>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800117e:	4832      	ldr	r0, [pc, #200]	@ (8001248 <MX_TIM8_Init+0x134>)
 8001180:	f003 fa36 	bl	80045f0 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800118a:	f000 faeb 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001192:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001198:	4619      	mov	r1, r3
 800119a:	482b      	ldr	r0, [pc, #172]	@ (8001248 <MX_TIM8_Init+0x134>)
 800119c:	f003 fdf0 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011a6:	f000 fadd 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80011aa:	4827      	ldr	r0, [pc, #156]	@ (8001248 <MX_TIM8_Init+0x134>)
 80011ac:	f003 fa6f 	bl	800468e <HAL_TIM_OC_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80011b6:	f000 fad5 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011c6:	4619      	mov	r1, r3
 80011c8:	481f      	ldr	r0, [pc, #124]	@ (8001248 <MX_TIM8_Init+0x134>)
 80011ca:	f004 f9d5 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80011d4:	f000 fac6 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <MX_TIM8_Init+0x134>)
 80011fe:	f003 fd63 	bl	8004cc8 <HAL_TIM_OC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001208:	f000 faac 	bl	8001764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001224:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	@ (8001248 <MX_TIM8_Init+0x134>)
 8001230:	f004 fa1e 	bl	8005670 <HAL_TIMEx_ConfigBreakDeadTime>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800123a:	f000 fa93 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3758      	adds	r7, #88	@ 0x58
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000015c 	.word	0x2000015c
 800124c:	40010400 	.word	0x40010400

08001250 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001262:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <MX_TIM9_Init+0x6c>)
 8001264:	4a16      	ldr	r2, [pc, #88]	@ (80012c0 <MX_TIM9_Init+0x70>)
 8001266:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 840;
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_TIM9_Init+0x6c>)
 800126a:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800126e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <MX_TIM9_Init+0x6c>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_TIM9_Init+0x6c>)
 8001278:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800127c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_TIM9_Init+0x6c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <MX_TIM9_Init+0x6c>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800128a:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_TIM9_Init+0x6c>)
 800128c:	f003 f9b0 	bl	80045f0 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001296:	f000 fa65 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_TIM9_Init+0x6c>)
 80012a6:	f003 fd6b 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80012b0:	f000 fa58 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001a4 	.word	0x200001a4
 80012c0:	40014000 	.word	0x40014000

080012c4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	@ 0x30
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <MX_TIM12_Init+0xb8>)
 80012ec:	4a24      	ldr	r2, [pc, #144]	@ (8001380 <MX_TIM12_Init+0xbc>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 80012f0:	4b22      	ldr	r3, [pc, #136]	@ (800137c <MX_TIM12_Init+0xb8>)
 80012f2:	2229      	movs	r2, #41	@ 0x29
 80012f4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <MX_TIM12_Init+0xb8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <MX_TIM12_Init+0xb8>)
 80012fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001302:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <MX_TIM12_Init+0xb8>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <MX_TIM12_Init+0xb8>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001310:	481a      	ldr	r0, [pc, #104]	@ (800137c <MX_TIM12_Init+0xb8>)
 8001312:	f003 f96d 	bl	80045f0 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800131c:	f000 fa22 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001324:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	4619      	mov	r1, r3
 800132c:	4813      	ldr	r0, [pc, #76]	@ (800137c <MX_TIM12_Init+0xb8>)
 800132e:	f003 fd27 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001338:	f000 fa14 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 800133c:	480f      	ldr	r0, [pc, #60]	@ (800137c <MX_TIM12_Init+0xb8>)
 800133e:	f003 f9a6 	bl	800468e <HAL_TIM_OC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001348:	f000 fa0c 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	@ (800137c <MX_TIM12_Init+0xb8>)
 8001364:	f003 fcb0 	bl	8004cc8 <HAL_TIM_OC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800136e:	f000 f9f9 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3730      	adds	r7, #48	@ 0x30
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001ec 	.word	0x200001ec
 8001380:	40001800 	.word	0x40001800

08001384 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800139c:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <MX_TIM13_Init+0x8c>)
 800139e:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <MX_TIM13_Init+0x90>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <MX_TIM13_Init+0x8c>)
 80013a4:	2229      	movs	r2, #41	@ 0x29
 80013a6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_TIM13_Init+0x8c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <MX_TIM13_Init+0x8c>)
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <MX_TIM13_Init+0x8c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_TIM13_Init+0x8c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013c2:	4813      	ldr	r0, [pc, #76]	@ (8001410 <MX_TIM13_Init+0x8c>)
 80013c4:	f003 f914 	bl	80045f0 <HAL_TIM_Base_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80013ce:	f000 f9c9 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 80013d2:	480f      	ldr	r0, [pc, #60]	@ (8001410 <MX_TIM13_Init+0x8c>)
 80013d4:	f003 f95b 	bl	800468e <HAL_TIM_OC_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80013de:	f000 f9c1 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_TIM13_Init+0x8c>)
 80013fa:	f003 fc65 	bl	8004cc8 <HAL_TIM_OC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001404:	f000 f9ae 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000234 	.word	0x20000234
 8001414:	40001c00 	.word	0x40001c00

08001418 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_UART4_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <MX_UART4_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <MX_UART4_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_UART4_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_UART4_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_UART4_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_UART4_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_UART4_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_UART4_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_UART4_Init+0x4c>)
 8001450:	f004 f974 	bl	800573c <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f983 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000027c 	.word	0x2000027c
 8001468:	40004c00 	.word	0x40004c00

0800146c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_UART5_Init+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <MX_UART5_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <MX_UART5_Init+0x4c>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_UART5_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_UART5_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_UART5_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_UART5_Init+0x4c>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_UART5_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_UART5_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_UART5_Init+0x4c>)
 80014a4:	f004 f94a 	bl	800573c <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80014ae:	f000 f959 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002c4 	.word	0x200002c4
 80014bc:	40005000 	.word	0x40005000

080014c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <MX_USART1_UART_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_USART1_UART_Init+0x4c>)
 80014f8:	f004 f920 	bl	800573c <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001502:	f000 f92f 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000030c 	.word	0x2000030c
 8001510:	40011000 	.word	0x40011000

08001514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <MX_USART2_UART_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800154c:	f004 f8f6 	bl	800573c <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001556:	f000 f905 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000354 	.word	0x20000354
 8001564:	40004400 	.word	0x40004400

08001568 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_USART3_UART_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_USART3_UART_Init+0x4c>)
 80015a0:	f004 f8cc 	bl	800573c <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015aa:	f000 f8db 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000039c 	.word	0x2000039c
 80015b8:	40004800 	.word	0x40004800

080015bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <MX_USART6_UART_Init+0x50>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_USART6_UART_Init+0x4c>)
 80015f4:	f004 f8a2 	bl	800573c <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015fe:	f000 f8b1 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200003e4 	.word	0x200003e4
 800160c:	40011400 	.word	0x40011400

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b4a      	ldr	r3, [pc, #296]	@ (8001754 <MX_GPIO_Init+0x144>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a49      	ldr	r2, [pc, #292]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b47      	ldr	r3, [pc, #284]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a42      	ldr	r2, [pc, #264]	@ (8001754 <MX_GPIO_Init+0x144>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b40      	ldr	r3, [pc, #256]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a3b      	ldr	r2, [pc, #236]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b35      	ldr	r3, [pc, #212]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a34      	ldr	r2, [pc, #208]	@ (8001754 <MX_GPIO_Init+0x144>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b32      	ldr	r3, [pc, #200]	@ (8001754 <MX_GPIO_Init+0x144>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4b2e      	ldr	r3, [pc, #184]	@ (8001754 <MX_GPIO_Init+0x144>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a2d      	ldr	r2, [pc, #180]	@ (8001754 <MX_GPIO_Init+0x144>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <MX_GPIO_Init+0x144>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 80016b2:	2200      	movs	r2, #0
 80016b4:	f640 311f 	movw	r1, #2847	@ 0xb1f
 80016b8:	4827      	ldr	r0, [pc, #156]	@ (8001758 <MX_GPIO_Init+0x148>)
 80016ba:	f002 f839 	bl	8003730 <HAL_GPIO_WritePin>
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80016c4:	4825      	ldr	r0, [pc, #148]	@ (800175c <MX_GPIO_Init+0x14c>)
 80016c6:	f002 f833 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 80016ca:	2200      	movs	r2, #0
 80016cc:	f247 0117 	movw	r1, #28695	@ 0x7017
 80016d0:	4823      	ldr	r0, [pc, #140]	@ (8001760 <MX_GPIO_Init+0x150>)
 80016d2:	f002 f82d 	bl	8003730 <HAL_GPIO_WritePin>
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	481a      	ldr	r0, [pc, #104]	@ (8001758 <MX_GPIO_Init+0x148>)
 80016ee:	f001 fe8b 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_yellow_Pin LED_green_Pin MOT_EN_3_Pin STEP_3_Pin
                           MOT_EN_5_Pin STEP_5_Pin DIR_5_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 80016f2:	f640 331f 	movw	r3, #2847	@ 0xb1f
 80016f6:	617b      	str	r3, [r7, #20]
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4813      	ldr	r0, [pc, #76]	@ (8001758 <MX_GPIO_Init+0x148>)
 800170c:	f001 fe7c 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_EN_2_Pin STEP_2_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin;
 8001710:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <MX_GPIO_Init+0x14c>)
 800172a:	f001 fe6d 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin MOT_EN_4_Pin STEP_4_Pin MOT_EN_1_Pin
                           STEP_1_Pin DIR_1_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 800172e:	f247 0317 	movw	r3, #28695	@ 0x7017
 8001732:	617b      	str	r3, [r7, #20]
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	@ (8001760 <MX_GPIO_Init+0x150>)
 8001748:	f001 fe5e 	bl	8003408 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	@ 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40020800 	.word	0x40020800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <Error_Handler+0x8>

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	4a0f      	ldr	r2, [pc, #60]	@ (80017bc <HAL_MspInit+0x4c>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001784:	6453      	str	r3, [r2, #68]	@ 0x44
 8001786:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_MspInit+0x4c>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ae:	2007      	movs	r0, #7
 80017b0:	f001 fde8 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a19      	ldr	r2, [pc, #100]	@ (8001844 <HAL_I2C_MspInit+0x84>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d12b      	bne.n	800183a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_I2C_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <HAL_I2C_MspInit+0x88>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_I2C_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fe:	23c0      	movs	r3, #192	@ 0xc0
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180e:	2304      	movs	r3, #4
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <HAL_I2C_MspInit+0x8c>)
 800181a:	f001 fdf5 	bl	8003408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_I2C_MspInit+0x88>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <HAL_I2C_MspInit+0x88>)
 8001828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800182c:	6413      	str	r3, [r2, #64]	@ 0x40
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_I2C_MspInit+0x88>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	@ 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40005400 	.word	0x40005400
 8001848:	40023800 	.word	0x40023800
 800184c:	40020400 	.word	0x40020400

08001850 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a5c      	ldr	r2, [pc, #368]	@ (80019d0 <HAL_TIM_Base_MspInit+0x180>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d116      	bne.n	8001890 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	4b5b      	ldr	r3, [pc, #364]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a5a      	ldr	r2, [pc, #360]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b58      	ldr	r3, [pc, #352]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	201d      	movs	r0, #29
 8001884:	f001 fd89 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001888:	201d      	movs	r0, #29
 800188a:	f001 fda2 	bl	80033d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 800188e:	e09a      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a50      	ldr	r2, [pc, #320]	@ (80019d8 <HAL_TIM_Base_MspInit+0x188>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d116      	bne.n	80018c8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	4b4d      	ldr	r3, [pc, #308]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a4c      	ldr	r2, [pc, #304]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	201e      	movs	r0, #30
 80018bc:	f001 fd6d 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018c0:	201e      	movs	r0, #30
 80018c2:	f001 fd86 	bl	80033d2 <HAL_NVIC_EnableIRQ>
}
 80018c6:	e07e      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a43      	ldr	r2, [pc, #268]	@ (80019dc <HAL_TIM_Base_MspInit+0x18c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d126      	bne.n	8001920 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	4b3f      	ldr	r3, [pc, #252]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a3e      	ldr	r2, [pc, #248]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b3c      	ldr	r3, [pc, #240]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	202b      	movs	r0, #43	@ 0x2b
 80018f4:	f001 fd51 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80018f8:	202b      	movs	r0, #43	@ 0x2b
 80018fa:	f001 fd6a 	bl	80033d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	202c      	movs	r0, #44	@ 0x2c
 8001904:	f001 fd49 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001908:	202c      	movs	r0, #44	@ 0x2c
 800190a:	f001 fd62 	bl	80033d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	202e      	movs	r0, #46	@ 0x2e
 8001914:	f001 fd41 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001918:	202e      	movs	r0, #46	@ 0x2e
 800191a:	f001 fd5a 	bl	80033d2 <HAL_NVIC_EnableIRQ>
}
 800191e:	e052      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM9)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2e      	ldr	r2, [pc, #184]	@ (80019e0 <HAL_TIM_Base_MspInit+0x190>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d116      	bne.n	8001958 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a28      	ldr	r2, [pc, #160]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2018      	movs	r0, #24
 800194c:	f001 fd25 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001950:	2018      	movs	r0, #24
 8001952:	f001 fd3e 	bl	80033d2 <HAL_NVIC_EnableIRQ>
}
 8001956:	e036      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM12)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a21      	ldr	r2, [pc, #132]	@ (80019e4 <HAL_TIM_Base_MspInit+0x194>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d116      	bne.n	8001990 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 800196c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	202b      	movs	r0, #43	@ 0x2b
 8001984:	f001 fd09 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001988:	202b      	movs	r0, #43	@ 0x2b
 800198a:	f001 fd22 	bl	80033d2 <HAL_NVIC_EnableIRQ>
}
 800198e:	e01a      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM13)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <HAL_TIM_Base_MspInit+0x198>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d115      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a0c      	ldr	r2, [pc, #48]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_TIM_Base_MspInit+0x184>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	202c      	movs	r0, #44	@ 0x2c
 80019bc:	f001 fced 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80019c0:	202c      	movs	r0, #44	@ 0x2c
 80019c2:	f001 fd06 	bl	80033d2 <HAL_NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40000800 	.word	0x40000800
 80019dc:	40010400 	.word	0x40010400
 80019e0:	40014000 	.word	0x40014000
 80019e4:	40001800 	.word	0x40001800
 80019e8:	40001c00 	.word	0x40001c00

080019ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b096      	sub	sp, #88	@ 0x58
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a9b      	ldr	r2, [pc, #620]	@ (8001c78 <HAL_UART_MspInit+0x28c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12c      	bne.n	8001a68 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a12:	4b9a      	ldr	r3, [pc, #616]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	4a99      	ldr	r2, [pc, #612]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1e:	4b97      	ldr	r3, [pc, #604]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a2e:	4b93      	ldr	r3, [pc, #588]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a92      	ldr	r2, [pc, #584]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b90      	ldr	r3, [pc, #576]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a46:	2303      	movs	r3, #3
 8001a48:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a56:	2308      	movs	r3, #8
 8001a58:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4887      	ldr	r0, [pc, #540]	@ (8001c80 <HAL_UART_MspInit+0x294>)
 8001a62:	f001 fcd1 	bl	8003408 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a66:	e14c      	b.n	8001d02 <HAL_UART_MspInit+0x316>
  else if(huart->Instance==UART5)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a85      	ldr	r2, [pc, #532]	@ (8001c84 <HAL_UART_MspInit+0x298>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d14b      	bne.n	8001b0a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a76:	4b81      	ldr	r3, [pc, #516]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	4a80      	ldr	r2, [pc, #512]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a82:	4b7e      	ldr	r3, [pc, #504]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a92:	4b7a      	ldr	r3, [pc, #488]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a79      	ldr	r2, [pc, #484]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b77      	ldr	r3, [pc, #476]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aae:	4b73      	ldr	r3, [pc, #460]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a72      	ldr	r2, [pc, #456]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b70      	ldr	r3, [pc, #448]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aca:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4869      	ldr	r0, [pc, #420]	@ (8001c88 <HAL_UART_MspInit+0x29c>)
 8001ae4:	f001 fc90 	bl	8003408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001af8:	2308      	movs	r3, #8
 8001afa:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b00:	4619      	mov	r1, r3
 8001b02:	4862      	ldr	r0, [pc, #392]	@ (8001c8c <HAL_UART_MspInit+0x2a0>)
 8001b04:	f001 fc80 	bl	8003408 <HAL_GPIO_Init>
}
 8001b08:	e0fb      	b.n	8001d02 <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a60      	ldr	r2, [pc, #384]	@ (8001c90 <HAL_UART_MspInit+0x2a4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d12d      	bne.n	8001b70 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b18:	4b58      	ldr	r3, [pc, #352]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1c:	4a57      	ldr	r2, [pc, #348]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b24:	4b55      	ldr	r3, [pc, #340]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b34:	4b51      	ldr	r3, [pc, #324]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	4a50      	ldr	r2, [pc, #320]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b40:	4b4e      	ldr	r3, [pc, #312]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b4c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b50:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b66:	4619      	mov	r1, r3
 8001b68:	4845      	ldr	r0, [pc, #276]	@ (8001c80 <HAL_UART_MspInit+0x294>)
 8001b6a:	f001 fc4d 	bl	8003408 <HAL_GPIO_Init>
}
 8001b6e:	e0c8      	b.n	8001d02 <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a47      	ldr	r2, [pc, #284]	@ (8001c94 <HAL_UART_MspInit+0x2a8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12c      	bne.n	8001bd4 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	4a3e      	ldr	r2, [pc, #248]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	4b38      	ldr	r3, [pc, #224]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a37      	ldr	r2, [pc, #220]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b35      	ldr	r3, [pc, #212]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001bca:	4619      	mov	r1, r3
 8001bcc:	482c      	ldr	r0, [pc, #176]	@ (8001c80 <HAL_UART_MspInit+0x294>)
 8001bce:	f001 fc1b 	bl	8003408 <HAL_GPIO_Init>
}
 8001bd2:	e096      	b.n	8001d02 <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART3)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001c98 <HAL_UART_MspInit+0x2ac>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d160      	bne.n	8001ca0 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a25      	ldr	r2, [pc, #148]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b23      	ldr	r3, [pc, #140]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_UART_MspInit+0x290>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c32:	2320      	movs	r3, #32
 8001c34:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c42:	2307      	movs	r3, #7
 8001c44:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <HAL_UART_MspInit+0x29c>)
 8001c4e:	f001 fbdb 	bl	8003408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c56:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c64:	2307      	movs	r3, #7
 8001c66:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480b      	ldr	r0, [pc, #44]	@ (8001c9c <HAL_UART_MspInit+0x2b0>)
 8001c70:	f001 fbca 	bl	8003408 <HAL_GPIO_Init>
}
 8001c74:	e045      	b.n	8001d02 <HAL_UART_MspInit+0x316>
 8001c76:	bf00      	nop
 8001c78:	40004c00 	.word	0x40004c00
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40005000 	.word	0x40005000
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40011000 	.word	0x40011000
 8001c94:	40004400 	.word	0x40004400
 8001c98:	40004800 	.word	0x40004800
 8001c9c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_UART_MspInit+0x320>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12b      	bne.n	8001d02 <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_UART_MspInit+0x324>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <HAL_UART_MspInit+0x324>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_UART_MspInit+0x324>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_UART_MspInit+0x324>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <HAL_UART_MspInit+0x324>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_UART_MspInit+0x324>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ce2:	23c0      	movs	r3, #192	@ 0xc0
 8001ce4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HAL_UART_MspInit+0x328>)
 8001cfe:	f001 fb83 	bl	8003408 <HAL_GPIO_Init>
}
 8001d02:	bf00      	nop
 8001d04:	3758      	adds	r7, #88	@ 0x58
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40011400 	.word	0x40011400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020800 	.word	0x40020800

08001d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <NMI_Handler+0x4>

08001d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <HardFault_Handler+0x4>

08001d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <MemManage_Handler+0x4>

08001d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6e:	f001 fa19 	bl	80031a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001d7e:	f002 feb3 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200001a4 	.word	0x200001a4

08001d8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <TIM3_IRQHandler+0x10>)
 8001d92:	f002 fea9 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200000cc 	.word	0x200000cc

08001da0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <TIM4_IRQHandler+0x10>)
 8001da6:	f002 fe9f 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000114 	.word	0x20000114

08001db4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001db8:	4803      	ldr	r0, [pc, #12]	@ (8001dc8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001dba:	f002 fe95 	bl	8004ae8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8001dbe:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8001dc0:	f002 fe92 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000015c 	.word	0x2000015c
 8001dcc:	200001ec 	.word	0x200001ec

08001dd0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001dd4:	4803      	ldr	r0, [pc, #12]	@ (8001de4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8001dd6:	f002 fe87 	bl	8004ae8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8001dda:	4803      	ldr	r0, [pc, #12]	@ (8001de8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001ddc:	f002 fe84 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000015c 	.word	0x2000015c
 8001de8:	20000234 	.word	0x20000234

08001dec <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <TIM8_CC_IRQHandler+0x10>)
 8001df2:	f002 fe79 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000015c 	.word	0x2000015c

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <tmc2209_setup>:
#include "tmc2209.h"


void tmc2209_setup(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_  = serial_baud_rate;
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]
  stepper_driver->serial_address_    = serial_address;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	711a      	strb	r2, [r3, #4]
  stepper_driver->cool_step_enabled_ = false;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

  tmc2209_initialize(stepper_driver, serial_baud_rate, serial_address);
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f943 	bl	80020d8 <tmc2209_initialize>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <map>:

// unidirectional methods

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	1a8a      	subs	r2, r1, r2
 8001e74:	fb03 f202 	mul.w	r2, r3, r2
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1acb      	subs	r3, r1, r3
 8001e7e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4413      	add	r3, r2
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <constrain>:

long constrain(long x, long a, long b)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  if (x < a)
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	da01      	bge.n	8001eaa <constrain+0x18>
  {
    return a;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	e006      	b.n	8001eb8 <constrain+0x26>
  }
  else if (b < x)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	da01      	bge.n	8001eb6 <constrain+0x24>
  {
    return b;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	e000      	b.n	8001eb8 <constrain+0x26>
  }
  else
  {
    return x;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <set_micro_steps_per_step>:

void set_micro_steps_per_step(tmc2209_stepper_driver_t *stepper_driver, uint16_t microsteps_per_step)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
  uint16_t microsteps_per_step_shifted = constrain(microsteps_per_step, MICROSTEPS_PER_STEP_MIN, MICROSTEPS_PER_STEP_MAX);
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ffda 	bl	8001e92 <constrain>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	81fb      	strh	r3, [r7, #14]
  microsteps_per_step_shifted          = microsteps_per_step >> 1;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	81fb      	strh	r3, [r7, #14]
  uint16_t exponent                    = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8001eec:	e005      	b.n	8001efa <set_micro_steps_per_step+0x36>
  {
    microsteps_per_step_shifted = microsteps_per_step_shifted >> 1;
 8001eee:	89fb      	ldrh	r3, [r7, #14]
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	81fb      	strh	r3, [r7, #14]
    ++exponent;
 8001ef4:	89bb      	ldrh	r3, [r7, #12]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f6      	bne.n	8001eee <set_micro_steps_per_step+0x2a>
  }
  set_micro_steps_per_step_power_of_two(stepper_driver, exponent);
 8001f00:	89bb      	ldrh	r3, [r7, #12]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f804 	bl	8001f14 <set_micro_steps_per_step_power_of_two>
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <set_micro_steps_per_step_power_of_two>:

void set_micro_steps_per_step_power_of_two(tmc2209_stepper_driver_t *stepper_driver, uint8_t exponent)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
  switch (exponent)
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	2b07      	cmp	r3, #7
 8001f24:	d85a      	bhi.n	8001fdc <set_micro_steps_per_step_power_of_two+0xc8>
 8001f26:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <set_micro_steps_per_step_power_of_two+0x18>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001f4d 	.word	0x08001f4d
 8001f30:	08001f5f 	.word	0x08001f5f
 8001f34:	08001f71 	.word	0x08001f71
 8001f38:	08001f83 	.word	0x08001f83
 8001f3c:	08001f95 	.word	0x08001f95
 8001f40:	08001fa7 	.word	0x08001fa7
 8001f44:	08001fb9 	.word	0x08001fb9
 8001f48:	08001fcb 	.word	0x08001fcb
  {
    case 0: {
      stepper_driver->chopper_config_.mres = MRES_001;
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001f52:	2108      	movs	r1, #8
 8001f54:	f361 0303 	bfi	r3, r1, #0, #4
 8001f58:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001f5c:	e046      	b.n	8001fec <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 1: {
      stepper_driver->chopper_config_.mres = MRES_002;
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001f64:	2107      	movs	r1, #7
 8001f66:	f361 0303 	bfi	r3, r1, #0, #4
 8001f6a:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001f6e:	e03d      	b.n	8001fec <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 2: {
      stepper_driver->chopper_config_.mres = MRES_004;
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001f76:	2106      	movs	r1, #6
 8001f78:	f361 0303 	bfi	r3, r1, #0, #4
 8001f7c:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001f80:	e034      	b.n	8001fec <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 3: {
      stepper_driver->chopper_config_.mres = MRES_008;
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001f88:	2105      	movs	r1, #5
 8001f8a:	f361 0303 	bfi	r3, r1, #0, #4
 8001f8e:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001f92:	e02b      	b.n	8001fec <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 4: {
      stepper_driver->chopper_config_.mres = MRES_016;
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	f361 0303 	bfi	r3, r1, #0, #4
 8001fa0:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001fa4:	e022      	b.n	8001fec <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 5: {
      stepper_driver->chopper_config_.mres = MRES_032;
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001fac:	2103      	movs	r1, #3
 8001fae:	f361 0303 	bfi	r3, r1, #0, #4
 8001fb2:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001fb6:	e019      	b.n	8001fec <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 6: {
      stepper_driver->chopper_config_.mres = MRES_064;
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	f361 0303 	bfi	r3, r1, #0, #4
 8001fc4:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001fc8:	e010      	b.n	8001fec <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 7: {
      stepper_driver->chopper_config_.mres = MRES_128;
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	f361 0303 	bfi	r3, r1, #0, #4
 8001fd6:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001fda:	e007      	b.n	8001fec <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 8:
    default: {
      stepper_driver->chopper_config_.mres = MRES_256;
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8001fe2:	f023 030f 	bic.w	r3, r3, #15
 8001fe6:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8001fea:	bf00      	nop
    }
  }
  write_stored_chopper_config(stepper_driver);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fa6d 	bl	80024cc <write_stored_chopper_config>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop

08001ffc <set_all_current_percent_values>:

void set_all_current_percent_values(tmc2209_stepper_driver_t *stepper_driver,
                                    uint8_t                   run_current_percent,
                                    uint8_t                   hold_current_percent,
                                    uint8_t                   hold_delay_percent)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	70fb      	strb	r3, [r7, #3]
 800200e:	460b      	mov	r3, r1
 8002010:	70bb      	strb	r3, [r7, #2]
 8002012:	4613      	mov	r3, r2
 8002014:	707b      	strb	r3, [r7, #1]
  uint8_t run_current  = percent_to_current_settings(stepper_driver, run_current_percent);
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f9db 	bl	80023d6 <percent_to_current_settings>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_current = percent_to_current_settings(stepper_driver, hold_current_percent);
 8002024:	78bb      	ldrb	r3, [r7, #2]
 8002026:	4619      	mov	r1, r3
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f9d4 	bl	80023d6 <percent_to_current_settings>
 800202e:	4603      	mov	r3, r0
 8002030:	73bb      	strb	r3, [r7, #14]
  uint8_t hold_delay   = percent_to_hold_delay_setting(stepper_driver, hold_delay_percent);
 8002032:	787b      	ldrb	r3, [r7, #1]
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f9ea 	bl	8002410 <percent_to_hold_delay_setting>
 800203c:	4603      	mov	r3, r0
 800203e:	737b      	strb	r3, [r7, #13]

  stepper_driver->driver_current_.irun       = run_current;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	b2d9      	uxtb	r1, r3
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800204e:	f361 0304 	bfi	r3, r1, #0, #5
 8002052:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold      = hold_current;
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	b2d9      	uxtb	r1, r3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002064:	f361 0304 	bfi	r3, r1, #0, #5
 8002068:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.iholddelay = hold_delay;
 800206c:	7b7b      	ldrb	r3, [r7, #13]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2d9      	uxtb	r1, r3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800207a:	f361 0303 	bfi	r3, r1, #0, #4
 800207e:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  write_stored_driver_current(stepper_driver);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f9f0 	bl	8002468 <write_stored_driver_current>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <disable_automatic_current_scaling>:
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
  write_stored_pwm_config(stepper_driver);
}

void disable_automatic_current_scaling(tmc2209_stepper_driver_t *stepper_driver)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 800209e:	f023 0304 	bic.w	r3, r3, #4
 80020a2:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fa1f 	bl	80024ea <write_stored_pwm_config>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <disable_automatic_gradient_adaptation>:
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
  write_stored_pwm_config(stepper_driver);
}

void disable_automatic_gradient_adaptation(tmc2209_stepper_driver_t *stepper_driver)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 80020c2:	f023 0308 	bic.w	r3, r3, #8
 80020c6:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa0d 	bl	80024ea <write_stored_pwm_config>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <tmc2209_initialize>:
{
  return tmc2209_read(stepper_driver, ADDRESS_MSCNT);
}

void tmc2209_initialize(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_ = serial_baud_rate;
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	601a      	str	r2, [r3, #0]

  set_operation_mode_to_serial(stepper_driver, serial_address);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4619      	mov	r1, r3
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f813 	bl	800211c <set_operation_mode_to_serial>
  set_registers_to_default(stepper_driver);
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f840 	bl	800217c <set_registers_to_default>

  minimize_motor_current(stepper_driver);
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f8c3 	bl	8002288 <minimize_motor_current>
  tmc2209_disable(stepper_driver);
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fa4e 	bl	80025a4 <tmc2209_disable>
  disable_automatic_current_scaling(stepper_driver);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7ff ffc1 	bl	8002090 <disable_automatic_current_scaling>
  disable_automatic_gradient_adaptation(stepper_driver);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff ffd0 	bl	80020b4 <disable_automatic_gradient_adaptation>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <set_operation_mode_to_serial>:

void set_operation_mode_to_serial(tmc2209_stepper_driver_t *stepper_driver, tmc2209_serial_address_t serial_address)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
  stepper_driver->serial_address_ = serial_address;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	711a      	strb	r2, [r3, #4]

  stepper_driver->global_config_.bytes            = 0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	66da      	str	r2, [r3, #108]	@ 0x6c
  stepper_driver->global_config_.i_scale_analog   = 1;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.pdn_disable      = 1;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800214c:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.mstep_reg_select = 1;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800215a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.multistep_filt   = 1;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

  write_stored_global_config(stepper_driver);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f96c 	bl	800244a <write_stored_global_config>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <set_registers_to_default>:

void set_registers_to_default(tmc2209_stepper_driver_t *stepper_driver)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.bytes      = 0;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	669a      	str	r2, [r3, #104]	@ 0x68
  stepper_driver->driver_current_.ihold      = IHOLD_DEFAULT;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002190:	2110      	movs	r1, #16
 8002192:	f361 0304 	bfi	r3, r1, #0, #5
 8002196:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.irun       = IRUN_DEFAULT;
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80021a0:	f043 031f 	orr.w	r3, r3, #31
 80021a4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80021ae:	2101      	movs	r1, #1
 80021b0:	f361 0303 	bfi	r3, r1, #0, #4
 80021b4:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021bc:	461a      	mov	r2, r3
 80021be:	2110      	movs	r1, #16
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fa09 	bl	80025d8 <tmc2209_write>

  stepper_driver->chopper_config_.bytes  = CHOPPER_CONFIG_DEFAULT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002280 <set_registers_to_default+0x104>)
 80021ca:	659a      	str	r2, [r3, #88]	@ 0x58
  stepper_driver->chopper_config_.tbl    = TBL_DEFAULT;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80021d0:	2102      	movs	r1, #2
 80021d2:	f361 33d0 	bfi	r3, r1, #15, #2
 80021d6:	6593      	str	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hend   = HEND_DEFAULT;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 80021de:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 80021e2:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hstart = HSTART_DEFAULT;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80021ec:	2105      	movs	r1, #5
 80021ee:	f361 1306 	bfi	r3, r1, #4, #3
 80021f2:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.toff   = TOFF_DEFAULT;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80021fc:	2103      	movs	r1, #3
 80021fe:	f361 0303 	bfi	r3, r1, #0, #4
 8002202:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	461a      	mov	r2, r3
 800220c:	216c      	movs	r1, #108	@ 0x6c
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9e2 	bl	80025d8 <tmc2209_write>

  stepper_driver->pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a1b      	ldr	r2, [pc, #108]	@ (8002284 <set_registers_to_default+0x108>)
 8002218:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	461a      	mov	r2, r3
 8002220:	2170      	movs	r1, #112	@ 0x70
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f9d8 	bl	80025d8 <tmc2209_write>

  stepper_driver->cool_config_.bytes = COOLCONF_DEFAULT;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	661a      	str	r2, [r3, #96]	@ 0x60
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	461a      	mov	r2, r3
 8002234:	2142      	movs	r1, #66	@ 0x42
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f9ce 	bl	80025d8 <tmc2209_write>

  tmc2209_write(stepper_driver, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 800223c:	2214      	movs	r2, #20
 800223e:	2111      	movs	r1, #17
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f9c9 	bl	80025d8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002246:	2200      	movs	r2, #0
 8002248:	2113      	movs	r1, #19
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f9c4 	bl	80025d8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002250:	2200      	movs	r2, #0
 8002252:	2122      	movs	r1, #34	@ 0x22
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f9bf 	bl	80025d8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 800225a:	2200      	movs	r2, #0
 800225c:	2114      	movs	r1, #20
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f9ba 	bl	80025d8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002264:	2200      	movs	r2, #0
 8002266:	2140      	movs	r1, #64	@ 0x40
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f9b5 	bl	80025d8 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 800226e:	2200      	movs	r2, #0
 8002270:	2142      	movs	r1, #66	@ 0x42
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9b0 	bl	80025d8 <tmc2209_write>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	10000053 	.word	0x10000053
 8002284:	c10d0024 	.word	0xc10d0024

08002288 <minimize_motor_current>:

  return global_config.pdn_disable;
}

void minimize_motor_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.irun  = CURRENT_SETTING_MIN;
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002296:	f023 031f 	bic.w	r3, r3, #31
 800229a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold = CURRENT_SETTING_MIN;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80022a4:	f023 031f 	bic.w	r3, r3, #31
 80022a8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  write_stored_driver_current(stepper_driver);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8db 	bl	8002468 <write_stored_driver_current>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <reverse_data>:

uint32_t reverse_data(uint32_t data)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  uint8_t  right_shift;
  uint8_t  left_shift;
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 80022c6:	2300      	movs	r3, #0
 80022c8:	72fb      	strb	r3, [r7, #11]
 80022ca:	e016      	b.n	80022fa <reverse_data+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	f1c3 0303 	rsb	r3, r3, #3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	72bb      	strb	r3, [r7, #10]
    left_shift  = i * BITS_PER_BYTE;
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 80022de:	7abb      	ldrb	r3, [r7, #10]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	7a7b      	ldrb	r3, [r7, #9]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	3301      	adds	r3, #1
 80022f8:	72fb      	strb	r3, [r7, #11]
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d9e5      	bls.n	80022cc <reverse_data+0x12>
  }
  return reversed_data;
 8002300:	68fb      	ldr	r3, [r7, #12]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <calculate_crc_write>:

uint8_t calculate_crc_write(write_read_reply_datagram_t *datagram, uint8_t datagram_size)
{
 800230e:	b4f0      	push	{r4, r5, r6, r7}
 8002310:	b088      	sub	sp, #32
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	70f9      	strb	r1, [r7, #3]
  uint8_t crc = 0;
 8002318:	2100      	movs	r1, #0
 800231a:	77f9      	strb	r1, [r7, #31]
  uint8_t byte;
  uint8_t datagram_bytes[7];
  for (int i = 0; i < datagram_size - 1; i++)
 800231c:	2100      	movs	r1, #0
 800231e:	61b9      	str	r1, [r7, #24]
 8002320:	e01c      	b.n	800235c <calculate_crc_write+0x4e>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002328:	69bc      	ldr	r4, [r7, #24]
 800232a:	00e4      	lsls	r4, r4, #3
 800232c:	f1c4 0620 	rsb	r6, r4, #32
 8002330:	f1a4 0520 	sub.w	r5, r4, #32
 8002334:	fa20 f204 	lsr.w	r2, r0, r4
 8002338:	fa01 f606 	lsl.w	r6, r1, r6
 800233c:	4332      	orrs	r2, r6
 800233e:	fa21 f505 	lsr.w	r5, r1, r5
 8002342:	432a      	orrs	r2, r5
 8002344:	fa21 f304 	lsr.w	r3, r1, r4
 8002348:	b2d4      	uxtb	r4, r2
 800234a:	f107 000c 	add.w	r0, r7, #12
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	4401      	add	r1, r0
 8002352:	4620      	mov	r0, r4
 8002354:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < datagram_size - 1; i++)
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	3101      	adds	r1, #1
 800235a:	61b9      	str	r1, [r7, #24]
 800235c:	78f9      	ldrb	r1, [r7, #3]
 800235e:	3901      	subs	r1, #1
 8002360:	69b8      	ldr	r0, [r7, #24]
 8002362:	4288      	cmp	r0, r1
 8002364:	dbdd      	blt.n	8002322 <calculate_crc_write+0x14>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
 800236a:	e029      	b.n	80023c0 <calculate_crc_write+0xb2>
  {
    byte = datagram_bytes[i];
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	3320      	adds	r3, #32
 8002370:	443b      	add	r3, r7
 8002372:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002376:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002378:	2300      	movs	r3, #0
 800237a:	75bb      	strb	r3, [r7, #22]
 800237c:	e01a      	b.n	80023b4 <calculate_crc_write+0xa6>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 800237e:	7ffb      	ldrb	r3, [r7, #31]
 8002380:	09db      	lsrs	r3, r3, #7
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	7fbb      	ldrb	r3, [r7, #30]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	429a      	cmp	r2, r3
 800238e:	d008      	beq.n	80023a2 <calculate_crc_write+0x94>
      {
        crc = (crc << 1) ^ 0x07;
 8002390:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	b25b      	sxtb	r3, r3
 8002398:	f083 0307 	eor.w	r3, r3, #7
 800239c:	b25b      	sxtb	r3, r3
 800239e:	77fb      	strb	r3, [r7, #31]
 80023a0:	e002      	b.n	80023a8 <calculate_crc_write+0x9a>
      }
      else
      {
        crc = crc << 1;
 80023a2:	7ffb      	ldrb	r3, [r7, #31]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	77fb      	strb	r3, [r7, #31]
      }
      byte = byte >> 1;
 80023a8:	7fbb      	ldrb	r3, [r7, #30]
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 80023ae:	7dbb      	ldrb	r3, [r7, #22]
 80023b0:	3301      	adds	r3, #1
 80023b2:	75bb      	strb	r3, [r7, #22]
 80023b4:	7dbb      	ldrb	r3, [r7, #22]
 80023b6:	2b07      	cmp	r3, #7
 80023b8:	d9e1      	bls.n	800237e <calculate_crc_write+0x70>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	3301      	adds	r3, #1
 80023be:	75fb      	strb	r3, [r7, #23]
 80023c0:	7dfa      	ldrb	r2, [r7, #23]
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbd0      	blt.n	800236c <calculate_crc_write+0x5e>
    }
  }
  return crc;
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bcf0      	pop	{r4, r5, r6, r7}
 80023d4:	4770      	bx	lr

080023d6 <percent_to_current_settings>:
  }
  return crc;
}

uint8_t percent_to_current_settings(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af02      	add	r7, sp, #8
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	2264      	movs	r2, #100	@ 0x64
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fd52 	bl	8001e92 <constrain>
 80023ee:	4603      	mov	r3, r0
 80023f0:	73fb      	strb	r3, [r7, #15]
  uint8_t current_setting     = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
 80023f2:	7bf8      	ldrb	r0, [r7, #15]
 80023f4:	231f      	movs	r3, #31
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	2264      	movs	r2, #100	@ 0x64
 80023fc:	2100      	movs	r1, #0
 80023fe:	f7ff fd2c 	bl	8001e5a <map>
 8002402:	4603      	mov	r3, r0
 8002404:	73bb      	strb	r3, [r7, #14]
  return current_setting;
 8002406:	7bbb      	ldrb	r3, [r7, #14]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <percent_to_hold_delay_setting>:
  uint8_t percent = map(current_setting, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

uint8_t percent_to_hold_delay_setting(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af02      	add	r7, sp, #8
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	2264      	movs	r2, #100	@ 0x64
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fd35 	bl	8001e92 <constrain>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_delay_setting  = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
 800242c:	7bf8      	ldrb	r0, [r7, #15]
 800242e:	230f      	movs	r3, #15
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2300      	movs	r3, #0
 8002434:	2264      	movs	r2, #100	@ 0x64
 8002436:	2100      	movs	r1, #0
 8002438:	f7ff fd0f 	bl	8001e5a <map>
 800243c:	4603      	mov	r3, r0
 800243e:	73bb      	strb	r3, [r7, #14]
  return hold_delay_setting;
 8002440:	7bbb      	ldrb	r3, [r7, #14]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <write_stored_global_config>:
  uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

void write_stored_global_config(tmc2209_stepper_driver_t *stepper_driver)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_GCONF, stepper_driver->global_config_.bytes);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002456:	461a      	mov	r2, r3
 8002458:	2100      	movs	r1, #0
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8bc 	bl	80025d8 <tmc2209_write>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <write_stored_driver_current>:
{
  return tmc2209_read(stepper_driver, ADDRESS_GCONF);
}

void write_stored_driver_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002474:	461a      	mov	r2, r3
 8002476:	2110      	movs	r1, #16
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8ad 	bl	80025d8 <tmc2209_write>

  if (stepper_driver->driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8002484:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b13      	cmp	r3, #19
 800248c:	d907      	bls.n	800249e <write_stored_driver_current+0x36>
  {
    stepper_driver->cool_config_.seimin = SEIMIN_UPPER_SETTING;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002498:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
 800249c:	e006      	b.n	80024ac <write_stored_driver_current+0x44>
  }
  else
  {
    stepper_driver->cool_config_.seimin = SEIMIN_LOWER_SETTING;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 80024a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024a8:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  }
  if (stepper_driver->cool_step_enabled_)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <write_stored_driver_current+0x5c>
  {
    tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ba:	461a      	mov	r2, r3
 80024bc:	2142      	movs	r1, #66	@ 0x42
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f88a 	bl	80025d8 <tmc2209_write>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <write_stored_chopper_config>:

void write_stored_chopper_config(tmc2209_stepper_driver_t *stepper_driver)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d8:	461a      	mov	r2, r3
 80024da:	216c      	movs	r1, #108	@ 0x6c
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f87b 	bl	80025d8 <tmc2209_write>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <write_stored_pwm_config>:
{
  return tmc2209_read(stepper_driver, ADDRESS_CHOPCONF);
}

void write_stored_pwm_config(tmc2209_stepper_driver_t *stepper_driver)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	461a      	mov	r2, r3
 80024f8:	2170      	movs	r1, #112	@ 0x70
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f86c 	bl	80025d8 <tmc2209_write>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <tmc2209_set_uart>:

// /* Private function code -----------------------------------------------------*/

extern UART_HandleTypeDef huart1;
void tmc2209_set_uart(tmc2209_stepper_driver_t *stepper_driver, UART_HandleTypeDef uart)
{
 8002508:	b084      	sub	sp, #16
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	f107 0014 	add.w	r0, r7, #20
 8002516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	stepper_driver->uart_ = uart;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3308      	adds	r3, #8
 800251e:	f107 0114 	add.w	r1, r7, #20
 8002522:	2248      	movs	r2, #72	@ 0x48
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fd69 	bl	8005ffc <memcpy>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002534:	b004      	add	sp, #16
 8002536:	4770      	bx	lr

08002538 <tmc2209_set_hardware_enable_pin>:

void tmc2209_set_hardware_enable_pin(tmc2209_stepper_driver_t *stepper_driver, uint16_t hardware_enable_pin, GPIO_TypeDef* hardware_enable_gpio_port)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	460b      	mov	r3, r1
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	817b      	strh	r3, [r7, #10]
   stepper_driver->hardware_enable_pin_ = hardware_enable_pin;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	897a      	ldrh	r2, [r7, #10]
 800254a:	80da      	strh	r2, [r3, #6]
   stepper_driver->hardware_enable_gpio_port_ = hardware_enable_gpio_port;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	651a      	str	r2, [r3, #80]	@ 0x50

   HAL_GPIO_WritePin(hardware_enable_gpio_port, hardware_enable_pin, GPIO_PIN_SET);
 8002552:	897b      	ldrh	r3, [r7, #10]
 8002554:	2201      	movs	r2, #1
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f001 f8e9 	bl	8003730 <HAL_GPIO_WritePin>
 }
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <tmc2209_enable>:

 void tmc2209_enable(tmc2209_stepper_driver_t *stepper_driver)
 {
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
     HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_RESET);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	88db      	ldrh	r3, [r3, #6]
 8002576:	2200      	movs	r2, #0
 8002578:	4619      	mov	r1, r3
 800257a:	f001 f8d9 	bl	8003730 <HAL_GPIO_WritePin>
   }
   stepper_driver->toff_                = TOFF_DEFAULT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
   stepper_driver->chopper_config_.toff = TOFF_DEFAULT;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800258c:	2103      	movs	r1, #3
 800258e:	f361 0303 	bfi	r3, r1, #0, #4
 8002592:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff98 	bl	80024cc <write_stored_chopper_config>
 }
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <tmc2209_disable>:

 void tmc2209_disable(tmc2209_stepper_driver_t* stepper_driver)
 {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
   HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_SET);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	88db      	ldrh	r3, [r3, #6]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4619      	mov	r1, r3
 80025b8:	f001 f8ba 	bl	8003730 <HAL_GPIO_WritePin>
   }
   stepper_driver->chopper_config_.toff = TOFF_DISABLE;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80025c2:	f023 030f 	bic.w	r3, r3, #15
 80025c6:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff7e 	bl	80024cc <write_stored_chopper_config>
 }
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <tmc2209_write>:

 void tmc2209_write(tmc2209_stepper_driver_t *stepper_driver, uint8_t register_address, uint32_t data)
 {
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	b08b      	sub	sp, #44	@ 0x2c
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	460b      	mov	r3, r1
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	72fb      	strb	r3, [r7, #11]
   write_read_reply_datagram_t write_datagram;
   write_datagram.bytes            = 0;
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
   write_datagram.sync             = SYNC;
 80025f2:	7e3b      	ldrb	r3, [r7, #24]
 80025f4:	2205      	movs	r2, #5
 80025f6:	f362 0303 	bfi	r3, r2, #0, #4
 80025fa:	763b      	strb	r3, [r7, #24]
   write_datagram.serial_address   = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	767b      	strb	r3, [r7, #25]
   write_datagram.register_address = register_address;
 8002600:	7afb      	ldrb	r3, [r7, #11]
 8002602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002606:	b2da      	uxtb	r2, r3
 8002608:	7ebb      	ldrb	r3, [r7, #26]
 800260a:	f362 0306 	bfi	r3, r2, #0, #7
 800260e:	76bb      	strb	r3, [r7, #26]
   write_datagram.rw               = RW_WRITE;
 8002610:	7ebb      	ldrb	r3, [r7, #26]
 8002612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002616:	76bb      	strb	r3, [r7, #26]
   write_datagram.data             = reverse_data(data);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff fe4e 	bl	80022ba <reverse_data>
 800261e:	4603      	mov	r3, r0
 8002620:	f8c7 301b 	str.w	r3, [r7, #27]
   write_datagram.crc              = calculate_crc_write(&write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002624:	f107 0318 	add.w	r3, r7, #24
 8002628:	2108      	movs	r1, #8
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fe6f 	bl	800230e <calculate_crc_write>
 8002630:	4603      	mov	r3, r0
 8002632:	77fb      	strb	r3, [r7, #31]

   uint8_t datagram_bytes[8];
   for (int i = 0; i < 8; i++)
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
 8002638:	e01b      	b.n	8002672 <tmc2209_write+0x9a>
   {
     datagram_bytes[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 800263a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002640:	00c9      	lsls	r1, r1, #3
 8002642:	f1c1 0620 	rsb	r6, r1, #32
 8002646:	f1a1 0020 	sub.w	r0, r1, #32
 800264a:	fa22 f401 	lsr.w	r4, r2, r1
 800264e:	fa03 f606 	lsl.w	r6, r3, r6
 8002652:	4334      	orrs	r4, r6
 8002654:	fa23 f000 	lsr.w	r0, r3, r0
 8002658:	4304      	orrs	r4, r0
 800265a:	fa23 f501 	lsr.w	r5, r3, r1
 800265e:	b2e1      	uxtb	r1, r4
 8002660:	f107 0210 	add.w	r2, r7, #16
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	4413      	add	r3, r2
 8002668:	460a      	mov	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	3301      	adds	r3, #1
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	2b07      	cmp	r3, #7
 8002676:	dde0      	ble.n	800263a <tmc2209_write+0x62>
   }
   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, WRITE_READ_REPLY_DATAGRAM_SIZE, 0XFFFF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f103 0008 	add.w	r0, r3, #8
 800267e:	f107 0110 	add.w	r1, r7, #16
 8002682:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002686:	2208      	movs	r2, #8
 8002688:	f003 f8a8 	bl	80057dc <HAL_UART_Transmit>
   //   printf("Write Data Request: %s", datagram_bytes);
 }
 800268c:	bf00      	nop
 800268e:	372c      	adds	r7, #44	@ 0x2c
 8002690:	46bd      	mov	sp, r7
 8002692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002694 <toSteps>:

/*
 * Calculates the steps needed to rotate the amount stated in the variable degrees.
 */
int32_t toSteps(float degrees, motor_t* motor)
{
 8002694:	b5b0      	push	{r4, r5, r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	ed87 0a01 	vstr	s0, [r7, #4]
 800269e:	6038      	str	r0, [r7, #0]
	int32_t steps;
	steps = ((200.0 * (float)(motor->microsteps)/360.0)*degrees) * motor->gear_ratio;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ac:	ee17 0a90 	vmov	r0, s15
 80026b0:	f7fd ff0c 	bl	80004cc <__aeabi_f2d>
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <toSteps+0x90>)
 80026ba:	f7fd ff5f 	bl	800057c <__aeabi_dmul>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <toSteps+0x94>)
 80026cc:	f7fe f880 	bl	80007d0 <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4614      	mov	r4, r2
 80026d6:	461d      	mov	r5, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7fd fef7 	bl	80004cc <__aeabi_f2d>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fd ff49 	bl	800057c <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4614      	mov	r4, r2
 80026f0:	461d      	mov	r5, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fee8 	bl	80004cc <__aeabi_f2d>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4620      	mov	r0, r4
 8002702:	4629      	mov	r1, r5
 8002704:	f7fd ff3a 	bl	800057c <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe f946 	bl	80009a0 <__aeabi_d2iz>
 8002714:	4603      	mov	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]
	return steps;
 8002718:	68fb      	ldr	r3, [r7, #12]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	bf00      	nop
 8002724:	40690000 	.word	0x40690000
 8002728:	40768000 	.word	0x40768000

0800272c <HAL_TIM_OC_DelayElapsedCallback>:
 * Every other cycle, as step only triggers on rising edge,
 * the velocity and the compare value is changed depending on current state of velocity ramp.
 *
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	int8_t index;

	//To know which timer and thus which motor caused the interrupt
	if (htim->Instance == motors[0]->tim.Instance){ index = 0; }
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4baf      	ldr	r3, [pc, #700]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273e:	429a      	cmp	r2, r3
 8002740:	d102      	bne.n	8002748 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 8002742:	2300      	movs	r3, #0
 8002744:	75fb      	strb	r3, [r7, #23]
 8002746:	e026      	b.n	8002796 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[1]->tim.Instance){ index = 1; }
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4baa      	ldr	r3, [pc, #680]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	429a      	cmp	r2, r3
 8002754:	d102      	bne.n	800275c <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
 800275a:	e01c      	b.n	8002796 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[2]->tim.Instance){ index = 2; }
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4ba5      	ldr	r3, [pc, #660]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002766:	429a      	cmp	r2, r3
 8002768:	d102      	bne.n	8002770 <HAL_TIM_OC_DelayElapsedCallback+0x44>
 800276a:	2302      	movs	r3, #2
 800276c:	75fb      	strb	r3, [r7, #23]
 800276e:	e012      	b.n	8002796 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[3]->tim.Instance){ index = 3; }
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4ba0      	ldr	r3, [pc, #640]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	429a      	cmp	r2, r3
 800277c:	d102      	bne.n	8002784 <HAL_TIM_OC_DelayElapsedCallback+0x58>
 800277e:	2303      	movs	r3, #3
 8002780:	75fb      	strb	r3, [r7, #23]
 8002782:	e008      	b.n	8002796 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[4]->tim.Instance){ index = 4; }
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b9b      	ldr	r3, [pc, #620]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278e:	429a      	cmp	r2, r3
 8002790:	d101      	bne.n	8002796 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 8002792:	2304      	movs	r3, #4
 8002794:	75fb      	strb	r3, [r7, #23]

	//Stop timer and movement if the roboter reaches its destination
	if (motors[index]->step >= motors[index]->total_steps)
 8002796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800279a:	4a97      	ldr	r2, [pc, #604]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800279c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027a6:	4994      	ldr	r1, [pc, #592]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80027a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	db11      	blt.n	80027d6 <HAL_TIM_OC_DelayElapsedCallback+0xaa>
	{
		HAL_TIM_OC_Stop_IT(&motors[index]->tim, TIM_CHANNEL_1);
 80027b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027b6:	4a90      	ldr	r2, [pc, #576]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	3348      	adds	r3, #72	@ 0x48
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 f8d3 	bl	800496c <HAL_TIM_OC_Stop_IT>
		motors[index]->active_movement_flag = 0;
 80027c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027ca:	4a8b      	ldr	r2, [pc, #556]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80027cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d0:	2200      	movs	r2, #0
 80027d2:	751a      	strb	r2, [r3, #20]
		return;
 80027d4:	e10d      	b.n	80029f2 <HAL_TIM_OC_DelayElapsedCallback+0x2c6>
	}

	if (motors[index]->cycle % 2 == 0) //Change velocity only every other cycle because step only triggers on rising edge
 80027d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027da:	4a87      	ldr	r2, [pc, #540]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80027dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80c7 	bne.w	800297a <HAL_TIM_OC_DelayElapsedCallback+0x24e>
	{
		if (motors[index]->step >= 0 && motors[index]->step < motors[index]->acc_steps)
 80027ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027f0:	4a81      	ldr	r2, [pc, #516]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db2f      	blt.n	800285c <HAL_TIM_OC_DelayElapsedCallback+0x130>
 80027fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002800:	4a7d      	ldr	r2, [pc, #500]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800280c:	497a      	ldr	r1, [pc, #488]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800280e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	429a      	cmp	r2, r3
 8002816:	da21      	bge.n	800285c <HAL_TIM_OC_DelayElapsedCallback+0x130>
		{
			motors[index]->v = sqrtf(2 * motors[index]->acc_max * (motors[index]->step + 1));
 8002818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800281c:	4a76      	ldr	r2, [pc, #472]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002828:	4973      	ldr	r1, [pc, #460]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800282a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800282e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002830:	3201      	adds	r2, #1
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002844:	4a6c      	ldr	r2, [pc, #432]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002846:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800284a:	eeb0 0a67 	vmov.f32	s0, s15
 800284e:	f003 fb81 	bl	8005f54 <sqrtf>
 8002852:	eef0 7a40 	vmov.f32	s15, s0
 8002856:	edc4 7a06 	vstr	s15, [r4, #24]
 800285a:	e086      	b.n	800296a <HAL_TIM_OC_DelayElapsedCallback+0x23e>
			// v = acc_ramp[step]
		}
		else if (motors[index]->const_steps != 0 && motors[index]->step >= motors[index]->acc_steps && motors[index]->step < (motors[index]->total_steps - motors[index]->dec_steps))
 800285c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002860:	4a65      	ldr	r2, [pc, #404]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d034      	beq.n	80028d6 <HAL_TIM_OC_DelayElapsedCallback+0x1aa>
 800286c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002870:	4a61      	ldr	r2, [pc, #388]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800287c:	495e      	ldr	r1, [pc, #376]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800287e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	429a      	cmp	r2, r3
 8002886:	db26      	blt.n	80028d6 <HAL_TIM_OC_DelayElapsedCallback+0x1aa>
 8002888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800288c:	4a5a      	ldr	r2, [pc, #360]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002898:	4957      	ldr	r1, [pc, #348]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800289a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800289e:	69d9      	ldr	r1, [r3, #28]
 80028a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028a4:	4854      	ldr	r0, [pc, #336]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80028a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	1acb      	subs	r3, r1, r3
 80028ae:	429a      	cmp	r2, r3
 80028b0:	da11      	bge.n	80028d6 <HAL_TIM_OC_DelayElapsedCallback+0x1aa>
			motors[index]->v = motors[index]->v_max;
 80028b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028b6:	4a50      	ldr	r2, [pc, #320]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028c2:	4a4d      	ldr	r2, [pc, #308]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80028c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c8:	ee07 1a90 	vmov	s15, r1
 80028cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d0:	edc3 7a06 	vstr	s15, [r3, #24]
 80028d4:	e049      	b.n	800296a <HAL_TIM_OC_DelayElapsedCallback+0x23e>
		else if (motors[index]->step >= (motors[index]->total_steps - motors[index]->dec_steps) && motors[index]->step < motors[index]->total_steps)
 80028d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028da:	4a47      	ldr	r2, [pc, #284]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028e6:	4944      	ldr	r1, [pc, #272]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80028e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028ec:	69d9      	ldr	r1, [r3, #28]
 80028ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028f2:	4841      	ldr	r0, [pc, #260]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80028f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fa:	1acb      	subs	r3, r1, r3
 80028fc:	429a      	cmp	r2, r3
 80028fe:	db34      	blt.n	800296a <HAL_TIM_OC_DelayElapsedCallback+0x23e>
 8002900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002904:	4a3c      	ldr	r2, [pc, #240]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800290c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002910:	4939      	ldr	r1, [pc, #228]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002912:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	429a      	cmp	r2, r3
 800291a:	da26      	bge.n	800296a <HAL_TIM_OC_DelayElapsedCallback+0x23e>
		{
			motors[index]->v = sqrtf(2 * motors[index]->dec_max * (motors[index]->total_steps - motors[index]->step));
 800291c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002920:	4a35      	ldr	r2, [pc, #212]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800292c:	4932      	ldr	r1, [pc, #200]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800292e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002932:	69d1      	ldr	r1, [r2, #28]
 8002934:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002938:	482f      	ldr	r0, [pc, #188]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800293a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800293e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002940:	1a8a      	subs	r2, r1, r2
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002954:	4a28      	ldr	r2, [pc, #160]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	f003 faf9 	bl	8005f54 <sqrtf>
 8002962:	eef0 7a40 	vmov.f32	s15, s0
 8002966:	edc4 7a06 	vstr	s15, [r4, #24]
			// v = acc_ramp[total_steps - step]
		}

		motors[index]->step++;
 800296a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800296e:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002976:	3201      	adds	r2, #1
 8002978:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	motors[index]->cycle++;
 800297a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800297e:	4a1e      	ldr	r2, [pc, #120]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002986:	3201      	adds	r2, #1
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30

	HAL_GPIO_TogglePin(motors[index]->gpio_ports.step, motors[index]->gpio_pins.step);
 800298a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800298e:	4a1a      	ldr	r2, [pc, #104]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800299a:	4917      	ldr	r1, [pc, #92]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800299c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 fedc 	bl	8003762 <HAL_GPIO_TogglePin>
	 *	But this is not the answer since the time has to be converted into timer ticks.
	 *	The timer runs at 2 MHz so we need to divide our current period duration by 1 / 2000000 s or 0.5 µs.
	 *	-> delay in ticks = 1/(2*v)/0.0000005 = 2000000/(2*v)
	 */

	int32_t delay = 2000000 / (2 * motors[index]->v);
 80029aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029ae:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80029b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029bc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80029fc <HAL_TIM_OC_DelayElapsedCallback+0x2d0>
 80029c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c8:	ee17 3a90 	vmov	r3, s15
 80029cc:	613b      	str	r3, [r7, #16]
	//Add delay to current compare value in register
	int32_t total_delay = __HAL_TIM_GET_COMPARE(&motors[index]->tim, TIM_CHANNEL_1) + delay;
 80029ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029d2:	4a09      	ldr	r2, [pc, #36]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&motors[index]->tim, TIM_CHANNEL_1, total_delay);
 80029e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029e6:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	2000042c 	.word	0x2000042c
 80029fc:	49f42400 	.word	0x49f42400

08002a00 <moveDegrees>:

/*
 * Initiates motor movement by starting the timer and calculating the steps
 */
void moveDegrees(float degrees, motor_t* motor)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a0a:	6038      	str	r0, [r7, #0]
	tmc2209_enable(motor->driver);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fda7 	bl	8002566 <tmc2209_enable>
	motor->total_steps = toSteps(degrees, motor); //Convert degrees to steps
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a1e:	f7ff fe39 	bl	8002694 <toSteps>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	61da      	str	r2, [r3, #28]
	motor->acc_steps = (motor->v_max * motor->v_max) / (2 * motor->acc_max); //Calculate total acceleration and deceleration steps
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	fb03 f202 	mul.w	r2, r3, r2
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->dec_steps = (motor->v_max * motor->v_max) / (2 * motor->dec_max);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	6892      	ldr	r2, [r2, #8]
 8002a4c:	fb03 f202 	mul.w	r2, r3, r2
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->const_steps = motor->total_steps - (motor->acc_steps + motor->dec_steps);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	440b      	add	r3, r1
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	621a      	str	r2, [r3, #32]

	motor->v = 0;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
	motor->step = 0;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->cycle = 0;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30


	if (motor->const_steps < 0)	//If acceleration steps + deceleration steps are bigger than total steps
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da12      	bge.n	8002ab6 <moveDegrees+0xb6>
	{
		motor->acc_steps = motor->total_steps / 2;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	0fda      	lsrs	r2, r3, #31
 8002a96:	4413      	add	r3, r2
 8002a98:	105b      	asrs	r3, r3, #1
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24
		motor->dec_steps = motor->total_steps / 2;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	0fda      	lsrs	r2, r3, #31
 8002aa6:	4413      	add	r3, r2
 8002aa8:	105b      	asrs	r3, r3, #1
 8002aaa:	461a      	mov	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28
		motor->const_steps = 0;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	621a      	str	r2, [r3, #32]
*		acc_ramp[i] = sqrtf(2 * motor->acc_max * step); //Calculate acc and dec ramp beforehand
*	}
*/

	//Start timer in output compare with interrupt
	HAL_GPIO_WritePin(motor->gpio_ports.step, motor->gpio_pins.step, GPIO_PIN_RESET);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f000 fe35 	bl	8003730 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&motor->tim, TIM_CHANNEL_1, 1);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aca:	2201      	movs	r2, #1
 8002acc:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_OC_Start_IT(&motor->tim, TIM_CHANNEL_1);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3348      	adds	r3, #72	@ 0x48
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fe33 	bl	8004740 <HAL_TIM_OC_Start_IT>

	motor->active_movement_flag = 1;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	751a      	strb	r2, [r3, #20]
//
//	while(active_movement_flag)		//While motor is moving, periodically check driver status
//	{
//		checkDriverStatus(motor->driver);
//	}
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <init_motor_1>:
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart5;


void init_motor_1(motor_t *motor1, tmc2209_stepper_driver_t *driver1)
{
 8002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aea:	b093      	sub	sp, #76	@ 0x4c
 8002aec:	af10      	add	r7, sp, #64	@ 0x40
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	motor1->gear_ratio = GEAR_RATIO_M_1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a40      	ldr	r2, [pc, #256]	@ (8002bf8 <init_motor_1+0x110>)
 8002af6:	601a      	str	r2, [r3, #0]
	motor1->microsteps = MICROSTEPS_M_1;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	605a      	str	r2, [r3, #4]
	motor1->v_max 	= V_MAX_M_1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8002b04:	609a      	str	r2, [r3, #8]
	motor1->acc_max = ACC_MAX_M_1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002b0c:	60da      	str	r2, [r3, #12]
	motor1->dec_max = DEC_MAX_M_1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002b14:	611a      	str	r2, [r3, #16]

	motor1->hold_current_percent = HOLD_CURRENT_PERCENT_M_1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2228      	movs	r2, #40	@ 0x28
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	motor1->run_current_percent = RUN_CURRENT_PERCENT_M_1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2246      	movs	r2, #70	@ 0x46
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	motor1->gpio_pins.step 		= STEP_1_Pin;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
	motor1->gpio_pins.dir 		= DIR_1_Pin;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b34:	871a      	strh	r2, [r3, #56]	@ 0x38
	motor1->gpio_pins.mot_en 	= MOT_EN_1_Pin;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b3c:	875a      	strh	r2, [r3, #58]	@ 0x3a
	motor1->gpio_ports.step 	= STEP_1_GPIO_Port;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a2e      	ldr	r2, [pc, #184]	@ (8002bfc <init_motor_1+0x114>)
 8002b42:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor1->gpio_ports.dir 		= DIR_1_GPIO_Port;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a2d      	ldr	r2, [pc, #180]	@ (8002bfc <init_motor_1+0x114>)
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40
	motor1->gpio_ports.mot_en 	= MOT_EN_1_GPIO_Port;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bfc <init_motor_1+0x114>)
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44

	motor1->tim = htim12;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a2b      	ldr	r2, [pc, #172]	@ (8002c00 <init_motor_1+0x118>)
 8002b54:	3348      	adds	r3, #72	@ 0x48
 8002b56:	4611      	mov	r1, r2
 8002b58:	2248      	movs	r2, #72	@ 0x48
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fa4e 	bl	8005ffc <memcpy>
	motor1->uart = huart1;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a28      	ldr	r2, [pc, #160]	@ (8002c04 <init_motor_1+0x11c>)
 8002b64:	3390      	adds	r3, #144	@ 0x90
 8002b66:	4611      	mov	r1, r2
 8002b68:	2248      	movs	r2, #72	@ 0x48
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fa46 	bl	8005ffc <memcpy>

	motor1->position_limit = POSITION_LIMIT_M_1;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f64e 7295 	movw	r2, #61333	@ 0xef95
 8002b76:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor1->stallGuard_threshold = STALLGUARD_THRESHOLD_M_1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	220a      	movs	r2, #10
 8002b7e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver1, huart1);
 8002b82:	4e20      	ldr	r6, [pc, #128]	@ (8002c04 <init_motor_1+0x11c>)
 8002b84:	466d      	mov	r5, sp
 8002b86:	f106 040c 	add.w	r4, r6, #12
 8002b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b96:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b9a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002b9e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	f7ff fcb0 	bl	8002508 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver1, motor1->gpio_pins.mot_en, motor1->gpio_ports.mot_en);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f7ff fcc0 	bl	8002538 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002bbe:	6838      	ldr	r0, [r7, #0]
 8002bc0:	f7ff f930 	bl	8001e24 <tmc2209_setup>
	set_micro_steps_per_step(driver1, motor1->microsteps);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6838      	ldr	r0, [r7, #0]
 8002bce:	f7ff f979 	bl	8001ec4 <set_micro_steps_per_step>
	set_all_current_percent_values(driver1, motor1->run_current_percent, motor1->hold_current_percent, 0);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8002bde:	2300      	movs	r3, #0
 8002be0:	6838      	ldr	r0, [r7, #0]
 8002be2:	f7ff fa0b 	bl	8001ffc <set_all_current_percent_values>

	motor1->driver = driver1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	41200000 	.word	0x41200000
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	200001ec 	.word	0x200001ec
 8002c04:	2000030c 	.word	0x2000030c

08002c08 <init_motor_2>:

void init_motor_2(motor_t *motor2, tmc2209_stepper_driver_t *driver2)
{
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b093      	sub	sp, #76	@ 0x4c
 8002c0c:	af10      	add	r7, sp, #64	@ 0x40
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
	motor2->gear_ratio = GEAR_RATIO_M_2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a3f      	ldr	r2, [pc, #252]	@ (8002d14 <init_motor_2+0x10c>)
 8002c16:	601a      	str	r2, [r3, #0]
	motor2->microsteps = MICROSTEPS_M_2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	605a      	str	r2, [r3, #4]
	motor2->v_max 	= V_MAX_M_2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002c24:	609a      	str	r2, [r3, #8]
	motor2->acc_max = ACC_MAX_M_2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002c2c:	60da      	str	r2, [r3, #12]
	motor2->dec_max = DEC_MAX_M_2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002c34:	611a      	str	r2, [r3, #16]

	motor2->hold_current_percent = HOLD_CURRENT_PERCENT_M_2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2228      	movs	r2, #40	@ 0x28
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	motor2->run_current_percent = RUN_CURRENT_PERCENT_M_2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2237      	movs	r2, #55	@ 0x37
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	motor2->gpio_pins.step 		= STEP_2_Pin;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2280      	movs	r2, #128	@ 0x80
 8002c4a:	86da      	strh	r2, [r3, #54]	@ 0x36
	motor2->gpio_pins.dir 		= DIR_2_Pin;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c52:	871a      	strh	r2, [r3, #56]	@ 0x38
	motor2->gpio_pins.mot_en 	= MOT_EN_2_Pin;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	875a      	strh	r2, [r3, #58]	@ 0x3a
	motor2->gpio_ports.step 	= STEP_2_GPIO_Port;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d18 <init_motor_2+0x110>)
 8002c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor2->gpio_ports.dir 		= DIR_2_GPIO_Port;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <init_motor_2+0x110>)
 8002c64:	641a      	str	r2, [r3, #64]	@ 0x40
	motor2->gpio_ports.mot_en 	= MOT_EN_2_GPIO_Port;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2b      	ldr	r2, [pc, #172]	@ (8002d18 <init_motor_2+0x110>)
 8002c6a:	645a      	str	r2, [r3, #68]	@ 0x44

	motor2->tim = htim13;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d1c <init_motor_2+0x114>)
 8002c70:	3348      	adds	r3, #72	@ 0x48
 8002c72:	4611      	mov	r1, r2
 8002c74:	2248      	movs	r2, #72	@ 0x48
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 f9c0 	bl	8005ffc <memcpy>
	motor2->uart = huart6;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	@ (8002d20 <init_motor_2+0x118>)
 8002c80:	3390      	adds	r3, #144	@ 0x90
 8002c82:	4611      	mov	r1, r2
 8002c84:	2248      	movs	r2, #72	@ 0x48
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 f9b8 	bl	8005ffc <memcpy>

	motor2->position_limit = POSITION_LIMIT_M_2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8002c92:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor2->stallGuard_threshold = STALLGUARD_THRESHOLD_M_2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	220a      	movs	r2, #10
 8002c9a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver2, motor2->uart);
 8002c9e:	687e      	ldr	r6, [r7, #4]
 8002ca0:	466d      	mov	r5, sp
 8002ca2:	f106 049c 	add.w	r4, r6, #156	@ 0x9c
 8002ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002cb6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002cba:	f106 0390 	add.w	r3, r6, #144	@ 0x90
 8002cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f7ff fc21 	bl	8002508 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver2, motor2->gpio_pins.mot_en, motor2->gpio_ports.mot_en);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6838      	ldr	r0, [r7, #0]
 8002cd2:	f7ff fc31 	bl	8002538 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002cdc:	6838      	ldr	r0, [r7, #0]
 8002cde:	f7ff f8a1 	bl	8001e24 <tmc2209_setup>
	set_micro_steps_per_step(driver2, motor2->microsteps);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	f7ff f8ea 	bl	8001ec4 <set_micro_steps_per_step>
	set_all_current_percent_values(driver2, motor2->run_current_percent, motor2->hold_current_percent, 0);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	6838      	ldr	r0, [r7, #0]
 8002d00:	f7ff f97c 	bl	8001ffc <set_all_current_percent_values>

	motor2->driver = driver2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d14:	40f00000 	.word	0x40f00000
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	20000234 	.word	0x20000234
 8002d20:	200003e4 	.word	0x200003e4

08002d24 <init_motor_3>:

void init_motor_3(motor_t *motor3, tmc2209_stepper_driver_t *driver3)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b093      	sub	sp, #76	@ 0x4c
 8002d28:	af10      	add	r7, sp, #64	@ 0x40
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
	motor3->gear_ratio = GEAR_RATIO_M_3;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a3f      	ldr	r2, [pc, #252]	@ (8002e30 <init_motor_3+0x10c>)
 8002d32:	601a      	str	r2, [r3, #0]
	motor3->microsteps = MICROSTEPS_M_3;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	605a      	str	r2, [r3, #4]
	motor3->v_max 	= V_MAX_M_3;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002d40:	609a      	str	r2, [r3, #8]
	motor3->acc_max = ACC_MAX_M_3;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8002d48:	60da      	str	r2, [r3, #12]
	motor3->dec_max = DEC_MAX_M_3;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8002d50:	611a      	str	r2, [r3, #16]

	motor3->hold_current_percent = HOLD_CURRENT_PERCENT_M_3;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	221e      	movs	r2, #30
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	motor3->run_current_percent = RUN_CURRENT_PERCENT_M_3;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2246      	movs	r2, #70	@ 0x46
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	motor3->gpio_pins.step 		= STEP_3_Pin;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2208      	movs	r2, #8
 8002d66:	86da      	strh	r2, [r3, #54]	@ 0x36
	motor3->gpio_pins.dir 		= DIR_3_Pin;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d6e:	871a      	strh	r2, [r3, #56]	@ 0x38
	motor3->gpio_pins.mot_en 	= MOT_EN_3_Pin;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2204      	movs	r2, #4
 8002d74:	875a      	strh	r2, [r3, #58]	@ 0x3a
	motor3->gpio_ports.step 	= STEP_3_GPIO_Port;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2e      	ldr	r2, [pc, #184]	@ (8002e34 <init_motor_3+0x110>)
 8002d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor3->gpio_ports.dir 		= DIR_3_GPIO_Port;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e34 <init_motor_3+0x110>)
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40
	motor3->gpio_ports.mot_en 	= MOT_EN_3_GPIO_Port;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2b      	ldr	r2, [pc, #172]	@ (8002e34 <init_motor_3+0x110>)
 8002d86:	645a      	str	r2, [r3, #68]	@ 0x44

	motor3->tim = htim3;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002e38 <init_motor_3+0x114>)
 8002d8c:	3348      	adds	r3, #72	@ 0x48
 8002d8e:	4611      	mov	r1, r2
 8002d90:	2248      	movs	r2, #72	@ 0x48
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 f932 	bl	8005ffc <memcpy>
	motor3->uart = huart3;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a28      	ldr	r2, [pc, #160]	@ (8002e3c <init_motor_3+0x118>)
 8002d9c:	3390      	adds	r3, #144	@ 0x90
 8002d9e:	4611      	mov	r1, r2
 8002da0:	2248      	movs	r2, #72	@ 0x48
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 f92a 	bl	8005ffc <memcpy>

	motor3->position_limit = POSITION_LIMIT_M_3;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8002dae:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor3->stallGuard_threshold = STALLGUARD_THRESHOLD_M_3;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	220a      	movs	r2, #10
 8002db6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver3, huart3);
 8002dba:	4e20      	ldr	r6, [pc, #128]	@ (8002e3c <init_motor_3+0x118>)
 8002dbc:	466d      	mov	r5, sp
 8002dbe:	f106 040c 	add.w	r4, r6, #12
 8002dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002dd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002dd6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	f7ff fb94 	bl	8002508 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver3, motor3->gpio_pins.mot_en, motor3->gpio_ports.mot_en);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	461a      	mov	r2, r3
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f7ff fba4 	bl	8002538 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	f7ff f814 	bl	8001e24 <tmc2209_setup>
	set_micro_steps_per_step(driver3, motor3->microsteps);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4619      	mov	r1, r3
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	f7ff f85d 	bl	8001ec4 <set_micro_steps_per_step>
	set_all_current_percent_values(driver3, motor3->run_current_percent, motor3->hold_current_percent, 0);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8002e16:	2300      	movs	r3, #0
 8002e18:	6838      	ldr	r0, [r7, #0]
 8002e1a:	f7ff f8ef 	bl	8001ffc <set_all_current_percent_values>

	motor3->driver = driver3;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40f00000 	.word	0x40f00000
 8002e34:	40020800 	.word	0x40020800
 8002e38:	200000cc 	.word	0x200000cc
 8002e3c:	2000039c 	.word	0x2000039c

08002e40 <init_motor_4>:

void init_motor_4(motor_t *motor4, tmc2209_stepper_driver_t *driver4)
{
 8002e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e42:	b093      	sub	sp, #76	@ 0x4c
 8002e44:	af10      	add	r7, sp, #64	@ 0x40
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	motor4->gear_ratio = GEAR_RATIO_M_4;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f48 <init_motor_4+0x108>)
 8002e4e:	601a      	str	r2, [r3, #0]
	motor4->microsteps = MICROSTEPS_M_4;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2208      	movs	r2, #8
 8002e54:	605a      	str	r2, [r3, #4]
	motor4->v_max 	= V_MAX_M_4;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002e5c:	609a      	str	r2, [r3, #8]
	motor4->acc_max = ACC_MAX_M_4;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e64:	60da      	str	r2, [r3, #12]
	motor4->dec_max = DEC_MAX_M_4;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e6c:	611a      	str	r2, [r3, #16]

	motor4->hold_current_percent = HOLD_CURRENT_PERCENT_M_4;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2219      	movs	r2, #25
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	motor4->run_current_percent = RUN_CURRENT_PERCENT_M_4;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2214      	movs	r2, #20
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	motor4->gpio_pins.step 		= STEP_4_Pin;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2204      	movs	r2, #4
 8002e82:	86da      	strh	r2, [r3, #54]	@ 0x36
	motor4->gpio_pins.dir 		= DIR_4_Pin;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2210      	movs	r2, #16
 8002e88:	871a      	strh	r2, [r3, #56]	@ 0x38
	motor4->gpio_pins.mot_en 	= MOT_EN_4_Pin;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	875a      	strh	r2, [r3, #58]	@ 0x3a
	motor4->gpio_ports.step 	= STEP_4_GPIO_Port;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a2e      	ldr	r2, [pc, #184]	@ (8002f4c <init_motor_4+0x10c>)
 8002e94:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor4->gpio_ports.dir 		= DIR_4_GPIO_Port;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2c      	ldr	r2, [pc, #176]	@ (8002f4c <init_motor_4+0x10c>)
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40
	motor4->gpio_ports.mot_en 	= MOT_EN_4_GPIO_Port;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f4c <init_motor_4+0x10c>)
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44

	motor4->tim = htim4;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f50 <init_motor_4+0x110>)
 8002ea6:	3348      	adds	r3, #72	@ 0x48
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	2248      	movs	r2, #72	@ 0x48
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 f8a5 	bl	8005ffc <memcpy>
	motor4->uart = huart4;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a27      	ldr	r2, [pc, #156]	@ (8002f54 <init_motor_4+0x114>)
 8002eb6:	3390      	adds	r3, #144	@ 0x90
 8002eb8:	4611      	mov	r1, r2
 8002eba:	2248      	movs	r2, #72	@ 0x48
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 f89d 	bl	8005ffc <memcpy>

	motor4->position_limit = POSITION_LIMIT_M_4;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002ec8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor4->stallGuard_threshold = STALLGUARD_THRESHOLD_M_4;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	220a      	movs	r2, #10
 8002ed0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver4, huart4);
 8002ed4:	4e1f      	ldr	r6, [pc, #124]	@ (8002f54 <init_motor_4+0x114>)
 8002ed6:	466d      	mov	r5, sp
 8002ed8:	f106 040c 	add.w	r4, r6, #12
 8002edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002eec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002ef0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002ef4:	6838      	ldr	r0, [r7, #0]
 8002ef6:	f7ff fb07 	bl	8002508 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver4, motor4->gpio_pins.mot_en, motor4->gpio_ports.mot_en);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	461a      	mov	r2, r3
 8002f04:	6838      	ldr	r0, [r7, #0]
 8002f06:	f7ff fb17 	bl	8002538 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002f10:	6838      	ldr	r0, [r7, #0]
 8002f12:	f7fe ff87 	bl	8001e24 <tmc2209_setup>
	set_micro_steps_per_step(driver4, motor4->microsteps);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6838      	ldr	r0, [r7, #0]
 8002f20:	f7fe ffd0 	bl	8001ec4 <set_micro_steps_per_step>
	set_all_current_percent_values(driver4, motor4->run_current_percent, motor4->hold_current_percent, 0);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8002f30:	2300      	movs	r3, #0
 8002f32:	6838      	ldr	r0, [r7, #0]
 8002f34:	f7ff f862 	bl	8001ffc <set_all_current_percent_values>

	motor4->driver = driver4;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f48:	40f00000 	.word	0x40f00000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	20000114 	.word	0x20000114
 8002f54:	2000027c 	.word	0x2000027c

08002f58 <init_motor_5>:

void init_motor_5(motor_t *motor5, tmc2209_stepper_driver_t *driver5)
{
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	b093      	sub	sp, #76	@ 0x4c
 8002f5c:	af10      	add	r7, sp, #64	@ 0x40
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
	motor5->gear_ratio = GEAR_RATIO_M_5;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f68:	601a      	str	r2, [r3, #0]
	motor5->microsteps = MICROSTEPS_M_5;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	605a      	str	r2, [r3, #4]
	motor5->v_max 	= V_MAX_M_5;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002f76:	609a      	str	r2, [r3, #8]
	motor5->acc_max = ACC_MAX_M_5;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f7e:	60da      	str	r2, [r3, #12]
	motor5->dec_max = DEC_MAX_M_5;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f86:	611a      	str	r2, [r3, #16]

	motor5->hold_current_percent = HOLD_CURRENT_PERCENT_M_5;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	motor5->run_current_percent = RUN_CURRENT_PERCENT_M_5;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2246      	movs	r2, #70	@ 0x46
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	motor5->gpio_pins.step 		= STEP_5_Pin;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
	motor5->gpio_pins.dir 		= DIR_5_Pin;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa6:	871a      	strh	r2, [r3, #56]	@ 0x38
	motor5->gpio_pins.mot_en 	= MOT_EN_5_Pin;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2210      	movs	r2, #16
 8002fac:	875a      	strh	r2, [r3, #58]	@ 0x3a
	motor5->gpio_ports.step 	= STEP_5_GPIO_Port;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8003064 <init_motor_5+0x10c>)
 8002fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor5->gpio_ports.dir 		= DIR_5_GPIO_Port;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8003064 <init_motor_5+0x10c>)
 8002fb8:	641a      	str	r2, [r3, #64]	@ 0x40
	motor5->gpio_ports.mot_en 	= MOT_EN_5_GPIO_Port;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <init_motor_5+0x10c>)
 8002fbe:	645a      	str	r2, [r3, #68]	@ 0x44

	motor5->tim = htim8;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a29      	ldr	r2, [pc, #164]	@ (8003068 <init_motor_5+0x110>)
 8002fc4:	3348      	adds	r3, #72	@ 0x48
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	2248      	movs	r2, #72	@ 0x48
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 f816 	bl	8005ffc <memcpy>
	motor5->uart = huart5;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a26      	ldr	r2, [pc, #152]	@ (800306c <init_motor_5+0x114>)
 8002fd4:	3390      	adds	r3, #144	@ 0x90
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	2248      	movs	r2, #72	@ 0x48
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 f80e 	bl	8005ffc <memcpy>

	motor5->position_limit = POSITION_LIMIT_M_5;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <init_motor_5+0x118>)
 8002fe4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor5->stallGuard_threshold = STALLGUARD_THRESHOLD_M_5;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	220a      	movs	r2, #10
 8002fec:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver5, huart5);
 8002ff0:	4e1e      	ldr	r6, [pc, #120]	@ (800306c <init_motor_5+0x114>)
 8002ff2:	466d      	mov	r5, sp
 8002ff4:	f106 040c 	add.w	r4, r6, #12
 8002ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003004:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003008:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800300c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003010:	6838      	ldr	r0, [r7, #0]
 8003012:	f7ff fa79 	bl	8002508 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver5, motor5->gpio_pins.mot_en, motor5->gpio_ports.mot_en);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	461a      	mov	r2, r3
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f7ff fa89 	bl	8002538 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_0);
 8003026:	2200      	movs	r2, #0
 8003028:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800302c:	6838      	ldr	r0, [r7, #0]
 800302e:	f7fe fef9 	bl	8001e24 <tmc2209_setup>
	set_micro_steps_per_step(driver5, motor5->microsteps);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	b29b      	uxth	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	6838      	ldr	r0, [r7, #0]
 800303c:	f7fe ff42 	bl	8001ec4 <set_micro_steps_per_step>
	set_all_current_percent_values(driver5, motor5->run_current_percent, motor5->hold_current_percent, 0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800304c:	2300      	movs	r3, #0
 800304e:	6838      	ldr	r0, [r7, #0]
 8003050:	f7fe ffd4 	bl	8001ffc <set_all_current_percent_values>

	motor5->driver = driver5;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003064:	40020800 	.word	0x40020800
 8003068:	2000015c 	.word	0x2000015c
 800306c:	200002c4 	.word	0x200002c4
 8003070:	00027100 	.word	0x00027100

08003074 <HAL_TIM_PeriodElapsedCallback>:
/*
 * Interrupt service routine for timer 9, which periodically invokes status checks.
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM9)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a07      	ldr	r2, [pc, #28]	@ (80030a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d106      	bne.n	8003094 <HAL_TIM_PeriodElapsedCallback+0x20>
    {
    	if (active_movement_flag)
 8003086:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_TIM_PeriodElapsedCallback+0x20>
    	{
    		status_flag = 1;	//Set flag, to indicate an interrupt has happened
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
    	}
    }
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40014000 	.word	0x40014000
 80030a4:	20000440 	.word	0x20000440
 80030a8:	20000441 	.word	0x20000441

080030ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030b0:	f7fe fea6 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030b4:	480c      	ldr	r0, [pc, #48]	@ (80030e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030b6:	490d      	ldr	r1, [pc, #52]	@ (80030ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030b8:	4a0d      	ldr	r2, [pc, #52]	@ (80030f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030bc:	e002      	b.n	80030c4 <LoopCopyDataInit>

080030be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c2:	3304      	adds	r3, #4

080030c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c8:	d3f9      	bcc.n	80030be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ca:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030cc:	4c0a      	ldr	r4, [pc, #40]	@ (80030f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d0:	e001      	b.n	80030d6 <LoopFillZerobss>

080030d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d4:	3204      	adds	r2, #4

080030d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80030da:	f002 ff6b 	bl	8005fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030de:	f7fd fe1d 	bl	8000d1c <main>
  bx  lr    
 80030e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80030f0:	08006058 	.word	0x08006058
  ldr r2, =_sbss
 80030f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80030f8:	20000580 	.word	0x20000580

080030fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030fc:	e7fe      	b.n	80030fc <ADC_IRQHandler>
	...

08003100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003104:	4b0e      	ldr	r3, [pc, #56]	@ (8003140 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0d      	ldr	r2, [pc, #52]	@ (8003140 <HAL_Init+0x40>)
 800310a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800310e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_Init+0x40>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <HAL_Init+0x40>)
 8003116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800311a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800311c:	4b08      	ldr	r3, [pc, #32]	@ (8003140 <HAL_Init+0x40>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a07      	ldr	r2, [pc, #28]	@ (8003140 <HAL_Init+0x40>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003128:	2003      	movs	r0, #3
 800312a:	f000 f92b 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312e:	2000      	movs	r0, #0
 8003130:	f000 f808 	bl	8003144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003134:	f7fe fb1c 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023c00 	.word	0x40023c00

08003144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800314c:	4b12      	ldr	r3, [pc, #72]	@ (8003198 <HAL_InitTick+0x54>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_InitTick+0x58>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	4619      	mov	r1, r3
 8003156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800315a:	fbb3 f3f1 	udiv	r3, r3, r1
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f943 	bl	80033ee <HAL_SYSTICK_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e00e      	b.n	8003190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b0f      	cmp	r3, #15
 8003176:	d80a      	bhi.n	800318e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003178:	2200      	movs	r2, #0
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f000 f90b 	bl	800339a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003184:	4a06      	ldr	r2, [pc, #24]	@ (80031a0 <HAL_InitTick+0x5c>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	e000      	b.n	8003190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000000 	.word	0x20000000
 800319c:	20000008 	.word	0x20000008
 80031a0:	20000004 	.word	0x20000004

080031a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_IncTick+0x20>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_IncTick+0x24>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <HAL_IncTick+0x24>)
 80031b6:	6013      	str	r3, [r2, #0]
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000008 	.word	0x20000008
 80031c8:	20000444 	.word	0x20000444

080031cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return uwTick;
 80031d0:	4b03      	ldr	r3, [pc, #12]	@ (80031e0 <HAL_GetTick+0x14>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000444 	.word	0x20000444

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800320c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	@ (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	@ (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	db0a      	blt.n	80032ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	@ (80032d0 <__NVIC_SetPriority+0x4c>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	440b      	add	r3, r1
 80032a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ac:	e00a      	b.n	80032c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4908      	ldr	r1, [pc, #32]	@ (80032d4 <__NVIC_SetPriority+0x50>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3b04      	subs	r3, #4
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	440b      	add	r3, r1
 80032c2:	761a      	strb	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	@ 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf28      	it	cs
 80032f6:	2304      	movcs	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d902      	bls.n	8003308 <NVIC_EncodePriority+0x30>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3b03      	subs	r3, #3
 8003306:	e000      	b.n	800330a <NVIC_EncodePriority+0x32>
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003320:	f04f 31ff 	mov.w	r1, #4294967295
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43d9      	mvns	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	4313      	orrs	r3, r2
         );
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	@ 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003350:	d301      	bcc.n	8003356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003352:	2301      	movs	r3, #1
 8003354:	e00f      	b.n	8003376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003356:	4a0a      	ldr	r2, [pc, #40]	@ (8003380 <SysTick_Config+0x40>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335e:	210f      	movs	r1, #15
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	f7ff ff8e 	bl	8003284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <SysTick_Config+0x40>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336e:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <SysTick_Config+0x40>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010

08003384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff29 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ac:	f7ff ff3e 	bl	800322c <__NVIC_GetPriorityGrouping>
 80033b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff8e 	bl	80032d8 <NVIC_EncodePriority>
 80033bc:	4602      	mov	r2, r0
 80033be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff5d 	bl	8003284 <__NVIC_SetPriority>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff31 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffa2 	bl	8003340 <SysTick_Config>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e165      	b.n	80036f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 8154 	bne.w	80036ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d005      	beq.n	800345a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	2b02      	cmp	r3, #2
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d017      	beq.n	80034f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d123      	bne.n	800354c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	08da      	lsrs	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80ae 	beq.w	80036ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b5d      	ldr	r3, [pc, #372]	@ (8003708 <HAL_GPIO_Init+0x300>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	4a5c      	ldr	r2, [pc, #368]	@ (8003708 <HAL_GPIO_Init+0x300>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800359c:	6453      	str	r3, [r2, #68]	@ 0x44
 800359e:	4b5a      	ldr	r3, [pc, #360]	@ (8003708 <HAL_GPIO_Init+0x300>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_GPIO_Init+0x304>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003710 <HAL_GPIO_Init+0x308>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d025      	beq.n	8003622 <HAL_GPIO_Init+0x21a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003714 <HAL_GPIO_Init+0x30c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01f      	beq.n	800361e <HAL_GPIO_Init+0x216>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x212>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4c      	ldr	r2, [pc, #304]	@ (800371c <HAL_GPIO_Init+0x314>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x20e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003720 <HAL_GPIO_Init+0x318>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x20a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003724 <HAL_GPIO_Init+0x31c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x206>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a49      	ldr	r2, [pc, #292]	@ (8003728 <HAL_GPIO_Init+0x320>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x202>
 8003606:	2306      	movs	r3, #6
 8003608:	e00c      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800360a:	2307      	movs	r3, #7
 800360c:	e00a      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800360e:	2305      	movs	r3, #5
 8003610:	e008      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003612:	2304      	movs	r3, #4
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003622:	2300      	movs	r3, #0
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f002 0203 	and.w	r2, r2, #3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	4093      	lsls	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003634:	4935      	ldr	r1, [pc, #212]	@ (800370c <HAL_GPIO_Init+0x304>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b3a      	ldr	r3, [pc, #232]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a31      	ldr	r2, [pc, #196]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b2f      	ldr	r3, [pc, #188]	@ (800372c <HAL_GPIO_Init+0x324>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a26      	ldr	r2, [pc, #152]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003696:	4b25      	ldr	r3, [pc, #148]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ba:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e4:	4a11      	ldr	r2, [pc, #68]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	f67f ae96 	bls.w	8003424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	@ 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	40020000 	.word	0x40020000
 8003714:	40020400 	.word	0x40020400
 8003718:	40020800 	.word	0x40020800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40021400 	.word	0x40021400
 8003728:	40021800 	.word	0x40021800
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
 800373c:	4613      	mov	r3, r2
 800373e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003740:	787b      	ldrb	r3, [r7, #1]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800374c:	e003      	b.n	8003756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800374e:	887b      	ldrh	r3, [r7, #2]
 8003750:	041a      	lsls	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	619a      	str	r2, [r3, #24]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4013      	ands	r3, r2
 800377a:	041a      	lsls	r2, r3, #16
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43d9      	mvns	r1, r3
 8003780:	887b      	ldrh	r3, [r7, #2]
 8003782:	400b      	ands	r3, r1
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	619a      	str	r2, [r3, #24]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e12b      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fffe 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	@ 0x24
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037fc:	f000 fa02 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8003800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a81      	ldr	r2, [pc, #516]	@ (8003a0c <HAL_I2C_Init+0x274>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d807      	bhi.n	800381c <HAL_I2C_Init+0x84>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a80      	ldr	r2, [pc, #512]	@ (8003a10 <HAL_I2C_Init+0x278>)
 8003810:	4293      	cmp	r3, r2
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e006      	b.n	800382a <HAL_I2C_Init+0x92>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a14 <HAL_I2C_Init+0x27c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	bf94      	ite	ls
 8003824:	2301      	movls	r3, #1
 8003826:	2300      	movhi	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0e7      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a78      	ldr	r2, [pc, #480]	@ (8003a18 <HAL_I2C_Init+0x280>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0c9b      	lsrs	r3, r3, #18
 800383c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a6a      	ldr	r2, [pc, #424]	@ (8003a0c <HAL_I2C_Init+0x274>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d802      	bhi.n	800386c <HAL_I2C_Init+0xd4>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3301      	adds	r3, #1
 800386a:	e009      	b.n	8003880 <HAL_I2C_Init+0xe8>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	4a69      	ldr	r2, [pc, #420]	@ (8003a1c <HAL_I2C_Init+0x284>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	3301      	adds	r3, #1
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003892:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	495c      	ldr	r1, [pc, #368]	@ (8003a0c <HAL_I2C_Init+0x274>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d819      	bhi.n	80038d4 <HAL_I2C_Init+0x13c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e59      	subs	r1, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038b4:	400b      	ands	r3, r1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_I2C_Init+0x138>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e59      	subs	r1, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	e051      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d0:	2304      	movs	r3, #4
 80038d2:	e04f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d111      	bne.n	8003900 <HAL_I2C_Init+0x168>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e012      	b.n	8003926 <HAL_I2C_Init+0x18e>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Init+0x196>
 800392a:	2301      	movs	r3, #1
 800392c:	e022      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10e      	bne.n	8003954 <HAL_I2C_Init+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e58      	subs	r0, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	440b      	add	r3, r1
 8003944:	fbb0 f3f3 	udiv	r3, r0, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003952:	e00f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	0099      	lsls	r1, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	6809      	ldr	r1, [r1, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6911      	ldr	r1, [r2, #16]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	000186a0 	.word	0x000186a0
 8003a10:	001e847f 	.word	0x001e847f
 8003a14:	003d08ff 	.word	0x003d08ff
 8003a18:	431bde83 	.word	0x431bde83
 8003a1c:	10624dd3 	.word	0x10624dd3

08003a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0cc      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b68      	ldr	r3, [pc, #416]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d90c      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b65      	ldr	r3, [pc, #404]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a58      	ldr	r2, [pc, #352]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a52      	ldr	r2, [pc, #328]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d044      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d119      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b3f      	ldr	r3, [pc, #252]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e06f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	4b3b      	ldr	r3, [pc, #236]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e067      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b37      	ldr	r3, [pc, #220]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4934      	ldr	r1, [pc, #208]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7ff fb5c 	bl	80031cc <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7ff fb58 	bl	80031cc <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e04f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d20c      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b92:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f855 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	@ (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fabc 	bl	8003144 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	08006030 	.word	0x08006030
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000004 	.word	0x20000004

08003bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	@ (8003c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000000 	.word	0x20000000

08003c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c08:	f7ff fff0 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0a9b      	lsrs	r3, r3, #10
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	@ (8003c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	08006040 	.word	0x08006040

08003c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c30:	f7ff ffdc 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0b5b      	lsrs	r3, r3, #13
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4903      	ldr	r1, [pc, #12]	@ (8003c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08006040 	.word	0x08006040

08003c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c58:	b0ae      	sub	sp, #184	@ 0xb8
 8003c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c7a:	4bcb      	ldr	r3, [pc, #812]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	f200 8206 	bhi.w	8004094 <HAL_RCC_GetSysClockFreq+0x440>
 8003c88:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08004095 	.word	0x08004095
 8003c98:	08004095 	.word	0x08004095
 8003c9c:	08004095 	.word	0x08004095
 8003ca0:	08003ccd 	.word	0x08003ccd
 8003ca4:	08004095 	.word	0x08004095
 8003ca8:	08004095 	.word	0x08004095
 8003cac:	08004095 	.word	0x08004095
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08004095 	.word	0x08004095
 8003cb8:	08004095 	.word	0x08004095
 8003cbc:	08004095 	.word	0x08004095
 8003cc0:	08003ec5 	.word	0x08003ec5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4bb9      	ldr	r3, [pc, #740]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x358>)
 8003cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cca:	e1e7      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ccc:	4bb8      	ldr	r3, [pc, #736]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cd2:	e1e3      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd4:	4bb4      	ldr	r3, [pc, #720]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce0:	4bb1      	ldr	r3, [pc, #708]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d071      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cec:	4bae      	ldr	r3, [pc, #696]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cf8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d12:	4622      	mov	r2, r4
 8003d14:	462b      	mov	r3, r5
 8003d16:	f04f 0000 	mov.w	r0, #0
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	0159      	lsls	r1, r3, #5
 8003d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d24:	0150      	lsls	r0, r2, #5
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	1a51      	subs	r1, r2, r1
 8003d2e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d30:	4629      	mov	r1, r5
 8003d32:	eb63 0301 	sbc.w	r3, r3, r1
 8003d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d44:	4649      	mov	r1, r9
 8003d46:	018b      	lsls	r3, r1, #6
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d4e:	4641      	mov	r1, r8
 8003d50:	018a      	lsls	r2, r1, #6
 8003d52:	4641      	mov	r1, r8
 8003d54:	1a51      	subs	r1, r2, r1
 8003d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d58:	4649      	mov	r1, r9
 8003d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	00cb      	lsls	r3, r1, #3
 8003d70:	4641      	mov	r1, r8
 8003d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d76:	4641      	mov	r1, r8
 8003d78:	00ca      	lsls	r2, r1, #3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4622      	mov	r2, r4
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d86:	462b      	mov	r3, r5
 8003d88:	460a      	mov	r2, r1
 8003d8a:	eb42 0303 	adc.w	r3, r2, r3
 8003d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	024b      	lsls	r3, r1, #9
 8003da0:	4621      	mov	r1, r4
 8003da2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003da6:	4621      	mov	r1, r4
 8003da8:	024a      	lsls	r2, r1, #9
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003db8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003dbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003dc0:	f7fc fe16 	bl	80009f0 <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4613      	mov	r3, r2
 8003dca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dce:	e067      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd0:	4b75      	ldr	r3, [pc, #468]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ddc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dea:	2300      	movs	r3, #0
 8003dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	0159      	lsls	r1, r3, #5
 8003e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e04:	0150      	lsls	r0, r2, #5
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	1a51      	subs	r1, r2, r1
 8003e0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e10:	4629      	mov	r1, r5
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e24:	4649      	mov	r1, r9
 8003e26:	018b      	lsls	r3, r1, #6
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e2e:	4641      	mov	r1, r8
 8003e30:	018a      	lsls	r2, r1, #6
 8003e32:	4641      	mov	r1, r8
 8003e34:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e38:	4649      	mov	r1, r9
 8003e3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e52:	4692      	mov	sl, r2
 8003e54:	469b      	mov	fp, r3
 8003e56:	4623      	mov	r3, r4
 8003e58:	eb1a 0303 	adds.w	r3, sl, r3
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	462b      	mov	r3, r5
 8003e60:	eb4b 0303 	adc.w	r3, fp, r3
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e72:	4629      	mov	r1, r5
 8003e74:	028b      	lsls	r3, r1, #10
 8003e76:	4621      	mov	r1, r4
 8003e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	028a      	lsls	r2, r1, #10
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e88:	2200      	movs	r2, #0
 8003e8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e8c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e92:	f7fc fdad 	bl	80009f0 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ea0:	4b41      	ldr	r3, [pc, #260]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ec2:	e0eb      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec4:	4b38      	ldr	r3, [pc, #224]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed0:	4b35      	ldr	r3, [pc, #212]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d06b      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003edc:	4b32      	ldr	r3, [pc, #200]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	099b      	lsrs	r3, r3, #6
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ee6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eee:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ef4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003ef8:	4622      	mov	r2, r4
 8003efa:	462b      	mov	r3, r5
 8003efc:	f04f 0000 	mov.w	r0, #0
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	0159      	lsls	r1, r3, #5
 8003f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f0a:	0150      	lsls	r0, r2, #5
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4621      	mov	r1, r4
 8003f12:	1a51      	subs	r1, r2, r1
 8003f14:	61b9      	str	r1, [r7, #24]
 8003f16:	4629      	mov	r1, r5
 8003f18:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f2a:	4659      	mov	r1, fp
 8003f2c:	018b      	lsls	r3, r1, #6
 8003f2e:	4651      	mov	r1, sl
 8003f30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f34:	4651      	mov	r1, sl
 8003f36:	018a      	lsls	r2, r1, #6
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ebb2 0801 	subs.w	r8, r2, r1
 8003f3e:	4659      	mov	r1, fp
 8003f40:	eb63 0901 	sbc.w	r9, r3, r1
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f58:	4690      	mov	r8, r2
 8003f5a:	4699      	mov	r9, r3
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	eb18 0303 	adds.w	r3, r8, r3
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	462b      	mov	r3, r5
 8003f66:	eb49 0303 	adc.w	r3, r9, r3
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f78:	4629      	mov	r1, r5
 8003f7a:	024b      	lsls	r3, r1, #9
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f82:	4621      	mov	r1, r4
 8003f84:	024a      	lsls	r2, r1, #9
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f8e:	2200      	movs	r2, #0
 8003f90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f92:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003f94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f98:	f7fc fd2a 	bl	80009f0 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa6:	e065      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x420>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x458>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003fce:	4642      	mov	r2, r8
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	0159      	lsls	r1, r3, #5
 8003fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe0:	0150      	lsls	r0, r2, #5
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	1a51      	subs	r1, r2, r1
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	4649      	mov	r1, r9
 8003fee:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004000:	4659      	mov	r1, fp
 8004002:	018b      	lsls	r3, r1, #6
 8004004:	4651      	mov	r1, sl
 8004006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400a:	4651      	mov	r1, sl
 800400c:	018a      	lsls	r2, r1, #6
 800400e:	4651      	mov	r1, sl
 8004010:	1a54      	subs	r4, r2, r1
 8004012:	4659      	mov	r1, fp
 8004014:	eb63 0501 	sbc.w	r5, r3, r1
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	00eb      	lsls	r3, r5, #3
 8004022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004026:	00e2      	lsls	r2, r4, #3
 8004028:	4614      	mov	r4, r2
 800402a:	461d      	mov	r5, r3
 800402c:	4643      	mov	r3, r8
 800402e:	18e3      	adds	r3, r4, r3
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	464b      	mov	r3, r9
 8004034:	eb45 0303 	adc.w	r3, r5, r3
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004046:	4629      	mov	r1, r5
 8004048:	028b      	lsls	r3, r1, #10
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004050:	4621      	mov	r1, r4
 8004052:	028a      	lsls	r2, r1, #10
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800405c:	2200      	movs	r2, #0
 800405e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004060:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004062:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004066:	f7fc fcc3 	bl	80009f0 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4613      	mov	r3, r2
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004074:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x458>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0f1b      	lsrs	r3, r3, #28
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800408a:	fbb2 f3f3 	udiv	r3, r2, r3
 800408e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004092:	e003      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800409a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	37b8      	adds	r7, #184	@ 0xb8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400

080040b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e28d      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8083 	beq.w	80041da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040d4:	4b94      	ldr	r3, [pc, #592]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d019      	beq.n	8004114 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040e0:	4b91      	ldr	r3, [pc, #580]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d106      	bne.n	80040fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040ec:	4b8e      	ldr	r3, [pc, #568]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040f8:	d00c      	beq.n	8004114 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b88      	ldr	r3, [pc, #544]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b84      	ldr	r3, [pc, #528]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x124>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e25a      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x90>
 8004136:	4b7c      	ldr	r3, [pc, #496]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a7b      	ldr	r2, [pc, #492]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xcc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0xb4>
 800414e:	4b76      	ldr	r3, [pc, #472]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a75      	ldr	r2, [pc, #468]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b73      	ldr	r3, [pc, #460]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a72      	ldr	r2, [pc, #456]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xcc>
 8004168:	4b6f      	ldr	r3, [pc, #444]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6e      	ldr	r2, [pc, #440]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b6c      	ldr	r3, [pc, #432]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a6b      	ldr	r2, [pc, #428]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7ff f820 	bl	80031cc <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7ff f81c 	bl	80031cc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	@ 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e21f      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b61      	ldr	r3, [pc, #388]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xdc>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7ff f80c 	bl	80031cc <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7ff f808 	bl	80031cc <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	@ 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e20b      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b57      	ldr	r3, [pc, #348]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x104>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d06f      	beq.n	80042c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041e6:	4b50      	ldr	r3, [pc, #320]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d017      	beq.n	8004222 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d105      	bne.n	800420a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d11c      	bne.n	8004250 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004216:	4b44      	ldr	r3, [pc, #272]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004222:	4b41      	ldr	r3, [pc, #260]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_RCC_OscConfig+0x186>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e1d3      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b3b      	ldr	r3, [pc, #236]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4937      	ldr	r1, [pc, #220]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	e03a      	b.n	80042c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004258:	4b34      	ldr	r3, [pc, #208]	@ (800432c <HAL_RCC_OscConfig+0x278>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fe ffb5 	bl	80031cc <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004266:	f7fe ffb1 	bl	80031cc <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e1b4      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004278:	4b2b      	ldr	r3, [pc, #172]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b28      	ldr	r3, [pc, #160]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4925      	ldr	r1, [pc, #148]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]
 8004298:	e015      	b.n	80042c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429a:	4b24      	ldr	r3, [pc, #144]	@ (800432c <HAL_RCC_OscConfig+0x278>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fe ff94 	bl	80031cc <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a8:	f7fe ff90 	bl	80031cc <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e193      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d036      	beq.n	8004340 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042da:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <HAL_RCC_OscConfig+0x27c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fe ff74 	bl	80031cc <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e8:	f7fe ff70 	bl	80031cc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e173      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80042fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x234>
 8004306:	e01b      	b.n	8004340 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004308:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <HAL_RCC_OscConfig+0x27c>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fe ff5d 	bl	80031cc <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	e00e      	b.n	8004334 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004316:	f7fe ff59 	bl	80031cc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d907      	bls.n	8004334 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e15c      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
 8004328:	40023800 	.word	0x40023800
 800432c:	42470000 	.word	0x42470000
 8004330:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	4b8a      	ldr	r3, [pc, #552]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1ea      	bne.n	8004316 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8097 	beq.w	800447c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004352:	4b83      	ldr	r3, [pc, #524]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	4b7f      	ldr	r3, [pc, #508]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	4a7e      	ldr	r2, [pc, #504]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	@ 0x40
 800436e:	4b7c      	ldr	r3, [pc, #496]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437a:	2301      	movs	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b79      	ldr	r3, [pc, #484]	@ (8004564 <HAL_RCC_OscConfig+0x4b0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d118      	bne.n	80043bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438a:	4b76      	ldr	r3, [pc, #472]	@ (8004564 <HAL_RCC_OscConfig+0x4b0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a75      	ldr	r2, [pc, #468]	@ (8004564 <HAL_RCC_OscConfig+0x4b0>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004396:	f7fe ff19 	bl	80031cc <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439e:	f7fe ff15 	bl	80031cc <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e118      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004564 <HAL_RCC_OscConfig+0x4b0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d106      	bne.n	80043d2 <HAL_RCC_OscConfig+0x31e>
 80043c4:	4b66      	ldr	r3, [pc, #408]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c8:	4a65      	ldr	r2, [pc, #404]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d0:	e01c      	b.n	800440c <HAL_RCC_OscConfig+0x358>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x340>
 80043da:	4b61      	ldr	r3, [pc, #388]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043de:	4a60      	ldr	r2, [pc, #384]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	f043 0304 	orr.w	r3, r3, #4
 80043e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0x358>
 80043f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f8:	4a59      	ldr	r2, [pc, #356]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004400:	4b57      	ldr	r3, [pc, #348]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004404:	4a56      	ldr	r2, [pc, #344]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004406:	f023 0304 	bic.w	r3, r3, #4
 800440a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fe feda 	bl	80031cc <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f7fe fed6 	bl	80031cc <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0d7      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004432:	4b4b      	ldr	r3, [pc, #300]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0ee      	beq.n	800441c <HAL_RCC_OscConfig+0x368>
 800443e:	e014      	b.n	800446a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fe fec4 	bl	80031cc <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004446:	e00a      	b.n	800445e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fe fec0 	bl	80031cc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0c1      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445e:	4b40      	ldr	r3, [pc, #256]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1ee      	bne.n	8004448 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d105      	bne.n	800447c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004470:	4b3b      	ldr	r3, [pc, #236]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	4a3a      	ldr	r2, [pc, #232]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800447a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80ad 	beq.w	80045e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004486:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b08      	cmp	r3, #8
 8004490:	d060      	beq.n	8004554 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d145      	bne.n	8004526 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449a:	4b33      	ldr	r3, [pc, #204]	@ (8004568 <HAL_RCC_OscConfig+0x4b4>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fe fe94 	bl	80031cc <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a8:	f7fe fe90 	bl	80031cc <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e093      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ba:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69da      	ldr	r2, [r3, #28]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	3b01      	subs	r3, #1
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f0:	071b      	lsls	r3, r3, #28
 80044f2:	491b      	ldr	r1, [pc, #108]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <HAL_RCC_OscConfig+0x4b4>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fe fe65 	bl	80031cc <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fe fe61 	bl	80031cc <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e064      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x452>
 8004524:	e05c      	b.n	80045e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <HAL_RCC_OscConfig+0x4b4>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe fe4e 	bl	80031cc <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe fe4a 	bl	80031cc <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e04d      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x480>
 8004552:	e045      	b.n	80045e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e040      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000
 8004568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800456c:	4b1f      	ldr	r3, [pc, #124]	@ (80045ec <HAL_RCC_OscConfig+0x538>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d030      	beq.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d129      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d122      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d119      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	3b01      	subs	r3, #1
 80045b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d10f      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800

080045f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e041      	b.n	8004686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd f91a 	bl	8001850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fc8c 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e041      	b.n	8004724 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f839 	bl	800472c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f000 fc3d 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_TIM_OC_Start_IT+0x28>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e022      	b.n	80047ae <HAL_TIM_OC_Start_IT+0x6e>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d109      	bne.n	8004782 <HAL_TIM_OC_Start_IT+0x42>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e015      	b.n	80047ae <HAL_TIM_OC_Start_IT+0x6e>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d109      	bne.n	800479c <HAL_TIM_OC_Start_IT+0x5c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e008      	b.n	80047ae <HAL_TIM_OC_Start_IT+0x6e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e0c7      	b.n	8004946 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_OC_Start_IT+0x86>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047c4:	e013      	b.n	80047ee <HAL_TIM_OC_Start_IT+0xae>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_OC_Start_IT+0x96>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d4:	e00b      	b.n	80047ee <HAL_TIM_OC_Start_IT+0xae>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_OC_Start_IT+0xa6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047e4:	e003      	b.n	80047ee <HAL_TIM_OC_Start_IT+0xae>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d841      	bhi.n	8004878 <HAL_TIM_OC_Start_IT+0x138>
 80047f4:	a201      	add	r2, pc, #4	@ (adr r2, 80047fc <HAL_TIM_OC_Start_IT+0xbc>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004879 	.word	0x08004879
 8004804:	08004879 	.word	0x08004879
 8004808:	08004879 	.word	0x08004879
 800480c:	08004843 	.word	0x08004843
 8004810:	08004879 	.word	0x08004879
 8004814:	08004879 	.word	0x08004879
 8004818:	08004879 	.word	0x08004879
 800481c:	08004855 	.word	0x08004855
 8004820:	08004879 	.word	0x08004879
 8004824:	08004879 	.word	0x08004879
 8004828:	08004879 	.word	0x08004879
 800482c:	08004867 	.word	0x08004867
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0202 	orr.w	r2, r2, #2
 800483e:	60da      	str	r2, [r3, #12]
      break;
 8004840:	e01d      	b.n	800487e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0204 	orr.w	r2, r2, #4
 8004850:	60da      	str	r2, [r3, #12]
      break;
 8004852:	e014      	b.n	800487e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0208 	orr.w	r2, r2, #8
 8004862:	60da      	str	r2, [r3, #12]
      break;
 8004864:	e00b      	b.n	800487e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0210 	orr.w	r2, r2, #16
 8004874:	60da      	str	r2, [r3, #12]
      break;
 8004876:	e002      	b.n	800487e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      break;
 800487c:	bf00      	nop
  }

  if (status == HAL_OK)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d15f      	bne.n	8004944 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2201      	movs	r2, #1
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fe4d 	bl	800552c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2e      	ldr	r2, [pc, #184]	@ (8004950 <HAL_TIM_OC_Start_IT+0x210>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_TIM_OC_Start_IT+0x166>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004954 <HAL_TIM_OC_Start_IT+0x214>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_OC_Start_IT+0x16a>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_TIM_OC_Start_IT+0x16c>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a22      	ldr	r2, [pc, #136]	@ (8004950 <HAL_TIM_OC_Start_IT+0x210>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d022      	beq.n	8004910 <HAL_TIM_OC_Start_IT+0x1d0>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d2:	d01d      	beq.n	8004910 <HAL_TIM_OC_Start_IT+0x1d0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <HAL_TIM_OC_Start_IT+0x218>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_TIM_OC_Start_IT+0x1d0>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <HAL_TIM_OC_Start_IT+0x21c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_TIM_OC_Start_IT+0x1d0>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <HAL_TIM_OC_Start_IT+0x220>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_TIM_OC_Start_IT+0x1d0>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a17      	ldr	r2, [pc, #92]	@ (8004954 <HAL_TIM_OC_Start_IT+0x214>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_TIM_OC_Start_IT+0x1d0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a18      	ldr	r2, [pc, #96]	@ (8004964 <HAL_TIM_OC_Start_IT+0x224>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_OC_Start_IT+0x1d0>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a17      	ldr	r2, [pc, #92]	@ (8004968 <HAL_TIM_OC_Start_IT+0x228>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d111      	bne.n	8004934 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d010      	beq.n	8004944 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	e007      	b.n	8004944 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40010400 	.word	0x40010400
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40014000 	.word	0x40014000
 8004968:	40001800 	.word	0x40001800

0800496c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b0c      	cmp	r3, #12
 800497e:	d841      	bhi.n	8004a04 <HAL_TIM_OC_Stop_IT+0x98>
 8004980:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <HAL_TIM_OC_Stop_IT+0x1c>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	080049bd 	.word	0x080049bd
 800498c:	08004a05 	.word	0x08004a05
 8004990:	08004a05 	.word	0x08004a05
 8004994:	08004a05 	.word	0x08004a05
 8004998:	080049cf 	.word	0x080049cf
 800499c:	08004a05 	.word	0x08004a05
 80049a0:	08004a05 	.word	0x08004a05
 80049a4:	08004a05 	.word	0x08004a05
 80049a8:	080049e1 	.word	0x080049e1
 80049ac:	08004a05 	.word	0x08004a05
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004a05 	.word	0x08004a05
 80049b8:	080049f3 	.word	0x080049f3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0202 	bic.w	r2, r2, #2
 80049ca:	60da      	str	r2, [r3, #12]
      break;
 80049cc:	e01d      	b.n	8004a0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0204 	bic.w	r2, r2, #4
 80049dc:	60da      	str	r2, [r3, #12]
      break;
 80049de:	e014      	b.n	8004a0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0208 	bic.w	r2, r2, #8
 80049ee:	60da      	str	r2, [r3, #12]
      break;
 80049f0:	e00b      	b.n	8004a0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0210 	bic.w	r2, r2, #16
 8004a00:	60da      	str	r2, [r3, #12]
      break;
 8004a02:	e002      	b.n	8004a0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
      break;
 8004a08:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d161      	bne.n	8004ad4 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2200      	movs	r2, #0
 8004a16:	6839      	ldr	r1, [r7, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fd87 	bl	800552c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae0 <HAL_TIM_OC_Stop_IT+0x174>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_TIM_OC_Stop_IT+0xc6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae4 <HAL_TIM_OC_Stop_IT+0x178>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d101      	bne.n	8004a36 <HAL_TIM_OC_Stop_IT+0xca>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_TIM_OC_Stop_IT+0xcc>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d017      	beq.n	8004a6c <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10f      	bne.n	8004a6c <HAL_TIM_OC_Stop_IT+0x100>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6a1a      	ldr	r2, [r3, #32]
 8004a52:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_TIM_OC_Stop_IT+0x100>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a6a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10f      	bne.n	8004a9c <HAL_TIM_OC_Stop_IT+0x130>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_OC_Stop_IT+0x130>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d104      	bne.n	8004aac <HAL_TIM_OC_Stop_IT+0x140>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aaa:	e013      	b.n	8004ad4 <HAL_TIM_OC_Stop_IT+0x168>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d104      	bne.n	8004abc <HAL_TIM_OC_Stop_IT+0x150>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aba:	e00b      	b.n	8004ad4 <HAL_TIM_OC_Stop_IT+0x168>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d104      	bne.n	8004acc <HAL_TIM_OC_Stop_IT+0x160>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aca:	e003      	b.n	8004ad4 <HAL_TIM_OC_Stop_IT+0x168>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d020      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0202 	mvn.w	r2, #2
 8004b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f9eb 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fd fdf6 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9ee 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0204 	mvn.w	r2, #4
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9c5 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fd fdd0 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f9c8 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d020      	beq.n	8004be4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01b      	beq.n	8004be4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0208 	mvn.w	r2, #8
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f99f 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fd fdaa 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9a2 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d020      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0210 	mvn.w	r2, #16
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2208      	movs	r2, #8
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f979 	bl	8004f0e <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd fd84 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f97c 	bl	8004f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00c      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0201 	mvn.w	r2, #1
 8004c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fe fa10 	bl	8003074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fd58 	bl	8005728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f94d 	bl	8004f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0220 	mvn.w	r2, #32
 8004cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fd2a 	bl	8005714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e048      	b.n	8004d78 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d839      	bhi.n	8004d68 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d31 	.word	0x08004d31
 8004d00:	08004d69 	.word	0x08004d69
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004d69 	.word	0x08004d69
 8004d0c:	08004d3f 	.word	0x08004d3f
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004d69 	.word	0x08004d69
 8004d1c:	08004d4d 	.word	0x08004d4d
 8004d20:	08004d69 	.word	0x08004d69
 8004d24:	08004d69 	.word	0x08004d69
 8004d28:	08004d69 	.word	0x08004d69
 8004d2c:	08004d5b 	.word	0x08004d5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f9ae 	bl	8005098 <TIM_OC1_SetConfig>
      break;
 8004d3c:	e017      	b.n	8004d6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa17 	bl	8005178 <TIM_OC2_SetConfig>
      break;
 8004d4a:	e010      	b.n	8004d6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fa86 	bl	8005264 <TIM_OC3_SetConfig>
      break;
 8004d58:	e009      	b.n	8004d6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 faf3 	bl	800534c <TIM_OC4_SetConfig>
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_ConfigClockSource+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0b4      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x186>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd4:	d03e      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xd4>
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dda:	f200 8087 	bhi.w	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de2:	f000 8086 	beq.w	8004ef2 <HAL_TIM_ConfigClockSource+0x172>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dea:	d87f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b70      	cmp	r3, #112	@ 0x70
 8004dee:	d01a      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0xa6>
 8004df0:	2b70      	cmp	r3, #112	@ 0x70
 8004df2:	d87b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b60      	cmp	r3, #96	@ 0x60
 8004df6:	d050      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x11a>
 8004df8:	2b60      	cmp	r3, #96	@ 0x60
 8004dfa:	d877      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b50      	cmp	r3, #80	@ 0x50
 8004dfe:	d03c      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xfa>
 8004e00:	2b50      	cmp	r3, #80	@ 0x50
 8004e02:	d873      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b40      	cmp	r3, #64	@ 0x40
 8004e06:	d058      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x13a>
 8004e08:	2b40      	cmp	r3, #64	@ 0x40
 8004e0a:	d86f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b30      	cmp	r3, #48	@ 0x30
 8004e0e:	d064      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b30      	cmp	r3, #48	@ 0x30
 8004e12:	d86b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d060      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d867      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05c      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d05a      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	e062      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e36:	f000 fb59 	bl	80054ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	609a      	str	r2, [r3, #8]
      break;
 8004e52:	e04f      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e64:	f000 fb42 	bl	80054ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e76:	609a      	str	r2, [r3, #8]
      break;
 8004e78:	e03c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 fab6 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2150      	movs	r1, #80	@ 0x50
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fb0f 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8004e98:	e02c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 fad5 	bl	8005456 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2160      	movs	r1, #96	@ 0x60
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 faff 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e01c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 fa96 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2140      	movs	r1, #64	@ 0x40
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 faef 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e00c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f000 fae6 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8004eea:	e003      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a43      	ldr	r2, [pc, #268]	@ (800506c <TIM_Base_SetConfig+0x120>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d00f      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a40      	ldr	r2, [pc, #256]	@ (8005070 <TIM_Base_SetConfig+0x124>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3f      	ldr	r2, [pc, #252]	@ (8005074 <TIM_Base_SetConfig+0x128>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8005078 <TIM_Base_SetConfig+0x12c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3d      	ldr	r2, [pc, #244]	@ (800507c <TIM_Base_SetConfig+0x130>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a32      	ldr	r2, [pc, #200]	@ (800506c <TIM_Base_SetConfig+0x120>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d02b      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fac:	d027      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8005070 <TIM_Base_SetConfig+0x124>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d023      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005074 <TIM_Base_SetConfig+0x128>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01f      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005078 <TIM_Base_SetConfig+0x12c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01b      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800507c <TIM_Base_SetConfig+0x130>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d017      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8005080 <TIM_Base_SetConfig+0x134>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8005084 <TIM_Base_SetConfig+0x138>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00f      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a29      	ldr	r2, [pc, #164]	@ (8005088 <TIM_Base_SetConfig+0x13c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a28      	ldr	r2, [pc, #160]	@ (800508c <TIM_Base_SetConfig+0x140>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a27      	ldr	r2, [pc, #156]	@ (8005090 <TIM_Base_SetConfig+0x144>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a26      	ldr	r2, [pc, #152]	@ (8005094 <TIM_Base_SetConfig+0x148>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d108      	bne.n	8005010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a0e      	ldr	r2, [pc, #56]	@ (800506c <TIM_Base_SetConfig+0x120>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_Base_SetConfig+0xf2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a10      	ldr	r2, [pc, #64]	@ (800507c <TIM_Base_SetConfig+0x130>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d103      	bne.n	8005046 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f043 0204 	orr.w	r2, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	601a      	str	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400
 8005088:	40014800 	.word	0x40014800
 800508c:	40001800 	.word	0x40001800
 8005090:	40001c00 	.word	0x40001c00
 8005094:	40002000 	.word	0x40002000

08005098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f023 0201 	bic.w	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 0302 	bic.w	r3, r3, #2
 80050e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a20      	ldr	r2, [pc, #128]	@ (8005170 <TIM_OC1_SetConfig+0xd8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC1_SetConfig+0x64>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005174 <TIM_OC1_SetConfig+0xdc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10c      	bne.n	8005116 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0308 	bic.w	r3, r3, #8
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a15      	ldr	r2, [pc, #84]	@ (8005170 <TIM_OC1_SetConfig+0xd8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_OC1_SetConfig+0x8e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a14      	ldr	r2, [pc, #80]	@ (8005174 <TIM_OC1_SetConfig+0xdc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d111      	bne.n	800514a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800512c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40010000 	.word	0x40010000
 8005174:	40010400 	.word	0x40010400

08005178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f023 0210 	bic.w	r2, r3, #16
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f023 0320 	bic.w	r3, r3, #32
 80051c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a22      	ldr	r2, [pc, #136]	@ (800525c <TIM_OC2_SetConfig+0xe4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC2_SetConfig+0x68>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a21      	ldr	r2, [pc, #132]	@ (8005260 <TIM_OC2_SetConfig+0xe8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10d      	bne.n	80051fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a17      	ldr	r2, [pc, #92]	@ (800525c <TIM_OC2_SetConfig+0xe4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_OC2_SetConfig+0x94>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a16      	ldr	r2, [pc, #88]	@ (8005260 <TIM_OC2_SetConfig+0xe8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d113      	bne.n	8005234 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40010400 	.word	0x40010400

08005264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a21      	ldr	r2, [pc, #132]	@ (8005344 <TIM_OC3_SetConfig+0xe0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d003      	beq.n	80052ca <TIM_OC3_SetConfig+0x66>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a20      	ldr	r2, [pc, #128]	@ (8005348 <TIM_OC3_SetConfig+0xe4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d10d      	bne.n	80052e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a16      	ldr	r2, [pc, #88]	@ (8005344 <TIM_OC3_SetConfig+0xe0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC3_SetConfig+0x92>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a15      	ldr	r2, [pc, #84]	@ (8005348 <TIM_OC3_SetConfig+0xe4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d113      	bne.n	800531e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40010000 	.word	0x40010000
 8005348:	40010400 	.word	0x40010400

0800534c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	031b      	lsls	r3, r3, #12
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a12      	ldr	r2, [pc, #72]	@ (80053f0 <TIM_OC4_SetConfig+0xa4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_OC4_SetConfig+0x68>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a11      	ldr	r2, [pc, #68]	@ (80053f4 <TIM_OC4_SetConfig+0xa8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d109      	bne.n	80053c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	019b      	lsls	r3, r3, #6
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40010400 	.word	0x40010400

080053f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 030a 	bic.w	r3, r3, #10
 8005434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005456:	b480      	push	{r7}
 8005458:	b087      	sub	sp, #28
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 0210 	bic.w	r2, r3, #16
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005492:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f043 0307 	orr.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	431a      	orrs	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4313      	orrs	r3, r2
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2201      	movs	r2, #1
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	43db      	mvns	r3, r3
 800554e:	401a      	ands	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1a      	ldr	r2, [r3, #32]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	fa01 f303 	lsl.w	r3, r1, r3
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800558c:	2302      	movs	r3, #2
 800558e:	e05a      	b.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a21      	ldr	r2, [pc, #132]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055dc:	d01d      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a18      	ldr	r2, [pc, #96]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a17      	ldr	r2, [pc, #92]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a15      	ldr	r2, [pc, #84]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10c      	bne.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	4313      	orrs	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40010000 	.word	0x40010000
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40010400 	.word	0x40010400
 8005668:	40014000 	.word	0x40014000
 800566c:	40001800 	.word	0x40001800

08005670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005688:	2302      	movs	r3, #2
 800568a:	e03d      	b.n	8005708 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e042      	b.n	80057d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fc f942 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	@ 0x24
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800577e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f973 	bl	8005a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695a      	ldr	r2, [r3, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	@ 0x28
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d175      	bne.n	80058e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_UART_Transmit+0x2c>
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e06e      	b.n	80058ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2221      	movs	r2, #33	@ 0x21
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800581a:	f7fd fcd7 	bl	80031cc <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	88fa      	ldrh	r2, [r7, #6]
 800582a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005834:	d108      	bne.n	8005848 <HAL_UART_Transmit+0x6c>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	e003      	b.n	8005850 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005850:	e02e      	b.n	80058b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2200      	movs	r2, #0
 800585a:	2180      	movs	r1, #128	@ 0x80
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f848 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e03a      	b.n	80058ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	3302      	adds	r3, #2
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	e007      	b.n	80058a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	3301      	adds	r3, #1
 80058a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1cb      	bne.n	8005852 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2200      	movs	r2, #0
 80058c2:	2140      	movs	r1, #64	@ 0x40
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f814 	bl	80058f2 <UART_WaitOnFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e006      	b.n	80058ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e000      	b.n	80058ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3720      	adds	r7, #32
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005902:	e03b      	b.n	800597c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d037      	beq.n	800597c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590c:	f7fd fc5e 	bl	80031cc <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	6a3a      	ldr	r2, [r7, #32]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <UART_WaitOnFlagUntilTimeout+0x30>
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e03a      	b.n	800599c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d023      	beq.n	800597c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b80      	cmp	r3, #128	@ 0x80
 8005938:	d020      	beq.n	800597c <UART_WaitOnFlagUntilTimeout+0x8a>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b40      	cmp	r3, #64	@ 0x40
 800593e:	d01d      	beq.n	800597c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b08      	cmp	r3, #8
 800594c:	d116      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f81d 	bl	80059a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2208      	movs	r2, #8
 800596e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e00f      	b.n	800599c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	429a      	cmp	r2, r3
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	429a      	cmp	r2, r3
 8005998:	d0b4      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b095      	sub	sp, #84	@ 0x54
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80059ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e5      	bne.n	80059ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3314      	adds	r3, #20
 80059e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f023 0301 	bic.w	r3, r3, #1
 80059f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3314      	adds	r3, #20
 80059fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d119      	bne.n	8005a50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f023 0310 	bic.w	r3, r3, #16
 8005a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a3c:	61ba      	str	r2, [r7, #24]
 8005a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6979      	ldr	r1, [r7, #20]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	613b      	str	r3, [r7, #16]
   return(result);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a5e:	bf00      	nop
 8005a60:	3754      	adds	r7, #84	@ 0x54
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a70:	b0c0      	sub	sp, #256	@ 0x100
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	68d9      	ldr	r1, [r3, #12]
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	ea40 0301 	orr.w	r3, r0, r1
 8005a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ac4:	f021 010c 	bic.w	r1, r1, #12
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae6:	6999      	ldr	r1, [r3, #24]
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	ea40 0301 	orr.w	r3, r0, r1
 8005af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b8f      	ldr	r3, [pc, #572]	@ (8005d38 <UART_SetConfig+0x2cc>)
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d005      	beq.n	8005b0c <UART_SetConfig+0xa0>
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b8d      	ldr	r3, [pc, #564]	@ (8005d3c <UART_SetConfig+0x2d0>)
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d104      	bne.n	8005b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b0c:	f7fe f88e 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8005b10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b14:	e003      	b.n	8005b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b16:	f7fe f875 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8005b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b28:	f040 810c 	bne.w	8005d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b3e:	4622      	mov	r2, r4
 8005b40:	462b      	mov	r3, r5
 8005b42:	1891      	adds	r1, r2, r2
 8005b44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b46:	415b      	adcs	r3, r3
 8005b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b4e:	4621      	mov	r1, r4
 8005b50:	eb12 0801 	adds.w	r8, r2, r1
 8005b54:	4629      	mov	r1, r5
 8005b56:	eb43 0901 	adc.w	r9, r3, r1
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b6e:	4690      	mov	r8, r2
 8005b70:	4699      	mov	r9, r3
 8005b72:	4623      	mov	r3, r4
 8005b74:	eb18 0303 	adds.w	r3, r8, r3
 8005b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	eb49 0303 	adc.w	r3, r9, r3
 8005b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	18db      	adds	r3, r3, r3
 8005b9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	eb42 0303 	adc.w	r3, r2, r3
 8005ba6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bb0:	f7fa ff1e 	bl	80009f0 <__aeabi_uldivmod>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4b61      	ldr	r3, [pc, #388]	@ (8005d40 <UART_SetConfig+0x2d4>)
 8005bba:	fba3 2302 	umull	r2, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	011c      	lsls	r4, r3, #4
 8005bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	1891      	adds	r1, r2, r2
 8005bda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bdc:	415b      	adcs	r3, r3
 8005bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005be4:	4641      	mov	r1, r8
 8005be6:	eb12 0a01 	adds.w	sl, r2, r1
 8005bea:	4649      	mov	r1, r9
 8005bec:	eb43 0b01 	adc.w	fp, r3, r1
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c04:	4692      	mov	sl, r2
 8005c06:	469b      	mov	fp, r3
 8005c08:	4643      	mov	r3, r8
 8005c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c12:	464b      	mov	r3, r9
 8005c14:	eb4b 0303 	adc.w	r3, fp, r3
 8005c18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c30:	460b      	mov	r3, r1
 8005c32:	18db      	adds	r3, r3, r3
 8005c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c36:	4613      	mov	r3, r2
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c46:	f7fa fed3 	bl	80009f0 <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <UART_SetConfig+0x2d4>)
 8005c52:	fba3 2301 	umull	r2, r3, r3, r1
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	2264      	movs	r2, #100	@ 0x64
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	1acb      	subs	r3, r1, r3
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c66:	4b36      	ldr	r3, [pc, #216]	@ (8005d40 <UART_SetConfig+0x2d4>)
 8005c68:	fba3 2302 	umull	r2, r3, r3, r2
 8005c6c:	095b      	lsrs	r3, r3, #5
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c74:	441c      	add	r4, r3
 8005c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c88:	4642      	mov	r2, r8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	1891      	adds	r1, r2, r2
 8005c8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c90:	415b      	adcs	r3, r3
 8005c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c98:	4641      	mov	r1, r8
 8005c9a:	1851      	adds	r1, r2, r1
 8005c9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	414b      	adcs	r3, r1
 8005ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cb0:	4659      	mov	r1, fp
 8005cb2:	00cb      	lsls	r3, r1, #3
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cba:	4651      	mov	r1, sl
 8005cbc:	00ca      	lsls	r2, r1, #3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	189b      	adds	r3, r3, r2
 8005cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ccc:	464b      	mov	r3, r9
 8005cce:	460a      	mov	r2, r1
 8005cd0:	eb42 0303 	adc.w	r3, r2, r3
 8005cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005cec:	460b      	mov	r3, r1
 8005cee:	18db      	adds	r3, r3, r3
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	eb42 0303 	adc.w	r3, r2, r3
 8005cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d02:	f7fa fe75 	bl	80009f0 <__aeabi_uldivmod>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <UART_SetConfig+0x2d4>)
 8005d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	2164      	movs	r1, #100	@ 0x64
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	3332      	adds	r3, #50	@ 0x32
 8005d1e:	4a08      	ldr	r2, [pc, #32]	@ (8005d40 <UART_SetConfig+0x2d4>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	f003 0207 	and.w	r2, r3, #7
 8005d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4422      	add	r2, r4
 8005d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d34:	e106      	b.n	8005f44 <UART_SetConfig+0x4d8>
 8005d36:	bf00      	nop
 8005d38:	40011000 	.word	0x40011000
 8005d3c:	40011400 	.word	0x40011400
 8005d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d56:	4642      	mov	r2, r8
 8005d58:	464b      	mov	r3, r9
 8005d5a:	1891      	adds	r1, r2, r2
 8005d5c:	6239      	str	r1, [r7, #32]
 8005d5e:	415b      	adcs	r3, r3
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d66:	4641      	mov	r1, r8
 8005d68:	1854      	adds	r4, r2, r1
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	eb43 0501 	adc.w	r5, r3, r1
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	00eb      	lsls	r3, r5, #3
 8005d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d7e:	00e2      	lsls	r2, r4, #3
 8005d80:	4614      	mov	r4, r2
 8005d82:	461d      	mov	r5, r3
 8005d84:	4643      	mov	r3, r8
 8005d86:	18e3      	adds	r3, r4, r3
 8005d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	eb45 0303 	adc.w	r3, r5, r3
 8005d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005da2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005db2:	4629      	mov	r1, r5
 8005db4:	008b      	lsls	r3, r1, #2
 8005db6:	4621      	mov	r1, r4
 8005db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	008a      	lsls	r2, r1, #2
 8005dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005dc4:	f7fa fe14 	bl	80009f0 <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4b60      	ldr	r3, [pc, #384]	@ (8005f50 <UART_SetConfig+0x4e4>)
 8005dce:	fba3 2302 	umull	r2, r3, r3, r2
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	011c      	lsls	r4, r3, #4
 8005dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005de0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005de8:	4642      	mov	r2, r8
 8005dea:	464b      	mov	r3, r9
 8005dec:	1891      	adds	r1, r2, r2
 8005dee:	61b9      	str	r1, [r7, #24]
 8005df0:	415b      	adcs	r3, r3
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005df8:	4641      	mov	r1, r8
 8005dfa:	1851      	adds	r1, r2, r1
 8005dfc:	6139      	str	r1, [r7, #16]
 8005dfe:	4649      	mov	r1, r9
 8005e00:	414b      	adcs	r3, r1
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e10:	4659      	mov	r1, fp
 8005e12:	00cb      	lsls	r3, r1, #3
 8005e14:	4651      	mov	r1, sl
 8005e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	00ca      	lsls	r2, r1, #3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4619      	mov	r1, r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	4642      	mov	r2, r8
 8005e26:	189b      	adds	r3, r3, r2
 8005e28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	460a      	mov	r2, r1
 8005e30:	eb42 0303 	adc.w	r3, r2, r3
 8005e34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e50:	4649      	mov	r1, r9
 8005e52:	008b      	lsls	r3, r1, #2
 8005e54:	4641      	mov	r1, r8
 8005e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e5a:	4641      	mov	r1, r8
 8005e5c:	008a      	lsls	r2, r1, #2
 8005e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e62:	f7fa fdc5 	bl	80009f0 <__aeabi_uldivmod>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	4b38      	ldr	r3, [pc, #224]	@ (8005f50 <UART_SetConfig+0x4e4>)
 8005e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	2264      	movs	r2, #100	@ 0x64
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	1acb      	subs	r3, r1, r3
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	3332      	adds	r3, #50	@ 0x32
 8005e80:	4a33      	ldr	r2, [pc, #204]	@ (8005f50 <UART_SetConfig+0x4e4>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e8c:	441c      	add	r4, r3
 8005e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e92:	2200      	movs	r2, #0
 8005e94:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e96:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	1891      	adds	r1, r2, r2
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	415b      	adcs	r3, r3
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eac:	4641      	mov	r1, r8
 8005eae:	1851      	adds	r1, r2, r1
 8005eb0:	6039      	str	r1, [r7, #0]
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	414b      	adcs	r3, r1
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ec4:	4659      	mov	r1, fp
 8005ec6:	00cb      	lsls	r3, r1, #3
 8005ec8:	4651      	mov	r1, sl
 8005eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ece:	4651      	mov	r1, sl
 8005ed0:	00ca      	lsls	r2, r1, #3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4642      	mov	r2, r8
 8005eda:	189b      	adds	r3, r3, r2
 8005edc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ede:	464b      	mov	r3, r9
 8005ee0:	460a      	mov	r2, r1
 8005ee2:	eb42 0303 	adc.w	r3, r2, r3
 8005ee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ef2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f00:	4649      	mov	r1, r9
 8005f02:	008b      	lsls	r3, r1, #2
 8005f04:	4641      	mov	r1, r8
 8005f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f0a:	4641      	mov	r1, r8
 8005f0c:	008a      	lsls	r2, r1, #2
 8005f0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f12:	f7fa fd6d 	bl	80009f0 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f50 <UART_SetConfig+0x4e4>)
 8005f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	2164      	movs	r1, #100	@ 0x64
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	3332      	adds	r3, #50	@ 0x32
 8005f2e:	4a08      	ldr	r2, [pc, #32]	@ (8005f50 <UART_SetConfig+0x4e4>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	f003 020f 	and.w	r2, r3, #15
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4422      	add	r2, r4
 8005f42:	609a      	str	r2, [r3, #8]
}
 8005f44:	bf00      	nop
 8005f46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f50:	51eb851f 	.word	0x51eb851f

08005f54 <sqrtf>:
 8005f54:	b508      	push	{r3, lr}
 8005f56:	ed2d 8b02 	vpush	{d8}
 8005f5a:	eeb0 8a40 	vmov.f32	s16, s0
 8005f5e:	f000 f817 	bl	8005f90 <__ieee754_sqrtf>
 8005f62:	eeb4 8a48 	vcmp.f32	s16, s16
 8005f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6a:	d60c      	bvs.n	8005f86 <sqrtf+0x32>
 8005f6c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005f8c <sqrtf+0x38>
 8005f70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f78:	d505      	bpl.n	8005f86 <sqrtf+0x32>
 8005f7a:	f000 f815 	bl	8005fa8 <__errno>
 8005f7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005f82:	2321      	movs	r3, #33	@ 0x21
 8005f84:	6003      	str	r3, [r0, #0]
 8005f86:	ecbd 8b02 	vpop	{d8}
 8005f8a:	bd08      	pop	{r3, pc}
 8005f8c:	00000000 	.word	0x00000000

08005f90 <__ieee754_sqrtf>:
 8005f90:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005f94:	4770      	bx	lr

08005f96 <memset>:
 8005f96:	4402      	add	r2, r0
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d100      	bne.n	8005fa0 <memset+0xa>
 8005f9e:	4770      	bx	lr
 8005fa0:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa4:	e7f9      	b.n	8005f9a <memset+0x4>
	...

08005fa8 <__errno>:
 8005fa8:	4b01      	ldr	r3, [pc, #4]	@ (8005fb0 <__errno+0x8>)
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	2000000c 	.word	0x2000000c

08005fb4 <__libc_init_array>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8005fec <__libc_init_array+0x38>)
 8005fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8005ff0 <__libc_init_array+0x3c>)
 8005fba:	1b64      	subs	r4, r4, r5
 8005fbc:	10a4      	asrs	r4, r4, #2
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	42a6      	cmp	r6, r4
 8005fc2:	d109      	bne.n	8005fd8 <__libc_init_array+0x24>
 8005fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8005ff4 <__libc_init_array+0x40>)
 8005fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff8 <__libc_init_array+0x44>)
 8005fc8:	f000 f826 	bl	8006018 <_init>
 8005fcc:	1b64      	subs	r4, r4, r5
 8005fce:	10a4      	asrs	r4, r4, #2
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	42a6      	cmp	r6, r4
 8005fd4:	d105      	bne.n	8005fe2 <__libc_init_array+0x2e>
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fdc:	4798      	blx	r3
 8005fde:	3601      	adds	r6, #1
 8005fe0:	e7ee      	b.n	8005fc0 <__libc_init_array+0xc>
 8005fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe6:	4798      	blx	r3
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7f2      	b.n	8005fd2 <__libc_init_array+0x1e>
 8005fec:	08006050 	.word	0x08006050
 8005ff0:	08006050 	.word	0x08006050
 8005ff4:	08006050 	.word	0x08006050
 8005ff8:	08006054 	.word	0x08006054

08005ffc <memcpy>:
 8005ffc:	440a      	add	r2, r1
 8005ffe:	4291      	cmp	r1, r2
 8006000:	f100 33ff 	add.w	r3, r0, #4294967295
 8006004:	d100      	bne.n	8006008 <memcpy+0xc>
 8006006:	4770      	bx	lr
 8006008:	b510      	push	{r4, lr}
 800600a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800600e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006012:	4291      	cmp	r1, r2
 8006014:	d1f9      	bne.n	800600a <memcpy+0xe>
 8006016:	bd10      	pop	{r4, pc}

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
