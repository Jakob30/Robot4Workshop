
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e24  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08007fe8  08007fe8  00008fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dbc  08008dbc  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008dbc  08008dbc  00009dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dc4  08008dc4  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc4  08008dc4  00009dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dc8  08008dc8  00009dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008dcc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  2000005c  08008e28  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  08008e28  0000aac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b5e  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312a  00000000  00000000  00021bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00024d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe8  00000000  00000000  00026170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241f7  00000000  00000000  00027158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019959  00000000  00000000  0004b34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7293  00000000  00000000  00064ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bf3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b34  00000000  00000000  0013bf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00141ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007fd0 	.word	0x08007fd0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08007fd0 	.word	0x08007fd0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	@ 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	3c01      	subs	r4, #1
 8000350:	bf28      	it	cs
 8000352:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000356:	d2e9      	bcs.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__aeabi_d2iz>:
 80009b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b8:	d215      	bcs.n	80009e6 <__aeabi_d2iz+0x36>
 80009ba:	d511      	bpl.n	80009e0 <__aeabi_d2iz+0x30>
 80009bc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c4:	d912      	bls.n	80009ec <__aeabi_d2iz+0x3c>
 80009c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	bf18      	it	ne
 80009dc:	4240      	negne	r0, r0
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d105      	bne.n	80009f8 <__aeabi_d2iz+0x48>
 80009ec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f0:	bf08      	it	eq
 80009f2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_uldivmod>:
 8000a00:	b953      	cbnz	r3, 8000a18 <__aeabi_uldivmod+0x18>
 8000a02:	b94a      	cbnz	r2, 8000a18 <__aeabi_uldivmod+0x18>
 8000a04:	2900      	cmp	r1, #0
 8000a06:	bf08      	it	eq
 8000a08:	2800      	cmpeq	r0, #0
 8000a0a:	bf1c      	itt	ne
 8000a0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a10:	f04f 30ff 	movne.w	r0, #4294967295
 8000a14:	f000 b988 	b.w	8000d28 <__aeabi_idiv0>
 8000a18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a20:	f000 f806 	bl	8000a30 <__udivmoddi4>
 8000a24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a2c:	b004      	add	sp, #16
 8000a2e:	4770      	bx	lr

08000a30 <__udivmoddi4>:
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a34:	9d08      	ldr	r5, [sp, #32]
 8000a36:	468e      	mov	lr, r1
 8000a38:	4604      	mov	r4, r0
 8000a3a:	4688      	mov	r8, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14a      	bne.n	8000ad6 <__udivmoddi4+0xa6>
 8000a40:	428a      	cmp	r2, r1
 8000a42:	4617      	mov	r7, r2
 8000a44:	d962      	bls.n	8000b0c <__udivmoddi4+0xdc>
 8000a46:	fab2 f682 	clz	r6, r2
 8000a4a:	b14e      	cbz	r6, 8000a60 <__udivmoddi4+0x30>
 8000a4c:	f1c6 0320 	rsb	r3, r6, #32
 8000a50:	fa01 f806 	lsl.w	r8, r1, r6
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	40b7      	lsls	r7, r6
 8000a5a:	ea43 0808 	orr.w	r8, r3, r8
 8000a5e:	40b4      	lsls	r4, r6
 8000a60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a6c:	0c23      	lsrs	r3, r4, #16
 8000a6e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a76:	fb01 f20c 	mul.w	r2, r1, ip
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0x62>
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a84:	f080 80ea 	bcs.w	8000c5c <__udivmoddi4+0x22c>
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	f240 80e7 	bls.w	8000c5c <__udivmoddi4+0x22c>
 8000a8e:	3902      	subs	r1, #2
 8000a90:	443b      	add	r3, r7
 8000a92:	1a9a      	subs	r2, r3, r2
 8000a94:	b2a3      	uxth	r3, r4
 8000a96:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa6:	459c      	cmp	ip, r3
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0x8e>
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab0:	f080 80d6 	bcs.w	8000c60 <__udivmoddi4+0x230>
 8000ab4:	459c      	cmp	ip, r3
 8000ab6:	f240 80d3 	bls.w	8000c60 <__udivmoddi4+0x230>
 8000aba:	443b      	add	r3, r7
 8000abc:	3802      	subs	r0, #2
 8000abe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac2:	eba3 030c 	sub.w	r3, r3, ip
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	b11d      	cbz	r5, 8000ad2 <__udivmoddi4+0xa2>
 8000aca:	40f3      	lsrs	r3, r6
 8000acc:	2200      	movs	r2, #0
 8000ace:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d905      	bls.n	8000ae6 <__udivmoddi4+0xb6>
 8000ada:	b10d      	cbz	r5, 8000ae0 <__udivmoddi4+0xb0>
 8000adc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e7f5      	b.n	8000ad2 <__udivmoddi4+0xa2>
 8000ae6:	fab3 f183 	clz	r1, r3
 8000aea:	2900      	cmp	r1, #0
 8000aec:	d146      	bne.n	8000b7c <__udivmoddi4+0x14c>
 8000aee:	4573      	cmp	r3, lr
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xc8>
 8000af2:	4282      	cmp	r2, r0
 8000af4:	f200 8105 	bhi.w	8000d02 <__udivmoddi4+0x2d2>
 8000af8:	1a84      	subs	r4, r0, r2
 8000afa:	eb6e 0203 	sbc.w	r2, lr, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	4690      	mov	r8, r2
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d0e5      	beq.n	8000ad2 <__udivmoddi4+0xa2>
 8000b06:	e9c5 4800 	strd	r4, r8, [r5]
 8000b0a:	e7e2      	b.n	8000ad2 <__udivmoddi4+0xa2>
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	f000 8090 	beq.w	8000c32 <__udivmoddi4+0x202>
 8000b12:	fab2 f682 	clz	r6, r2
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	f040 80a4 	bne.w	8000c64 <__udivmoddi4+0x234>
 8000b1c:	1a8a      	subs	r2, r1, r2
 8000b1e:	0c03      	lsrs	r3, r0, #16
 8000b20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b24:	b280      	uxth	r0, r0
 8000b26:	b2bc      	uxth	r4, r7
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b2e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb04 f20c 	mul.w	r2, r4, ip
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d907      	bls.n	8000b4e <__udivmoddi4+0x11e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b44:	d202      	bcs.n	8000b4c <__udivmoddi4+0x11c>
 8000b46:	429a      	cmp	r2, r3
 8000b48:	f200 80e0 	bhi.w	8000d0c <__udivmoddi4+0x2dc>
 8000b4c:	46c4      	mov	ip, r8
 8000b4e:	1a9b      	subs	r3, r3, r2
 8000b50:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b54:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b58:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b5c:	fb02 f404 	mul.w	r4, r2, r4
 8000b60:	429c      	cmp	r4, r3
 8000b62:	d907      	bls.n	8000b74 <__udivmoddi4+0x144>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x142>
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	f200 80ca 	bhi.w	8000d06 <__udivmoddi4+0x2d6>
 8000b72:	4602      	mov	r2, r0
 8000b74:	1b1b      	subs	r3, r3, r4
 8000b76:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b7a:	e7a5      	b.n	8000ac8 <__udivmoddi4+0x98>
 8000b7c:	f1c1 0620 	rsb	r6, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 f706 	lsr.w	r7, r2, r6
 8000b86:	431f      	orrs	r7, r3
 8000b88:	fa0e f401 	lsl.w	r4, lr, r1
 8000b8c:	fa20 f306 	lsr.w	r3, r0, r6
 8000b90:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b94:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9e:	fa1f fc87 	uxth.w	ip, r7
 8000ba2:	fbbe f0f9 	udiv	r0, lr, r9
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bb0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x1a0>
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bc2:	f080 809c 	bcs.w	8000cfe <__udivmoddi4+0x2ce>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	f240 8099 	bls.w	8000cfe <__udivmoddi4+0x2ce>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	443c      	add	r4, r7
 8000bd0:	eba4 040e 	sub.w	r4, r4, lr
 8000bd4:	fa1f fe83 	uxth.w	lr, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000be4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1ce>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bf2:	f080 8082 	bcs.w	8000cfa <__udivmoddi4+0x2ca>
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	d97f      	bls.n	8000cfa <__udivmoddi4+0x2ca>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	443c      	add	r4, r7
 8000bfe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c02:	eba4 040c 	sub.w	r4, r4, ip
 8000c06:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c0a:	4564      	cmp	r4, ip
 8000c0c:	4673      	mov	r3, lr
 8000c0e:	46e1      	mov	r9, ip
 8000c10:	d362      	bcc.n	8000cd8 <__udivmoddi4+0x2a8>
 8000c12:	d05f      	beq.n	8000cd4 <__udivmoddi4+0x2a4>
 8000c14:	b15d      	cbz	r5, 8000c2e <__udivmoddi4+0x1fe>
 8000c16:	ebb8 0203 	subs.w	r2, r8, r3
 8000c1a:	eb64 0409 	sbc.w	r4, r4, r9
 8000c1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c22:	fa22 f301 	lsr.w	r3, r2, r1
 8000c26:	431e      	orrs	r6, r3
 8000c28:	40cc      	lsrs	r4, r1
 8000c2a:	e9c5 6400 	strd	r6, r4, [r5]
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e74f      	b.n	8000ad2 <__udivmoddi4+0xa2>
 8000c32:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c36:	0c01      	lsrs	r1, r0, #16
 8000c38:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c3c:	b280      	uxth	r0, r0
 8000c3e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c42:	463b      	mov	r3, r7
 8000c44:	4638      	mov	r0, r7
 8000c46:	463c      	mov	r4, r7
 8000c48:	46b8      	mov	r8, r7
 8000c4a:	46be      	mov	lr, r7
 8000c4c:	2620      	movs	r6, #32
 8000c4e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c52:	eba2 0208 	sub.w	r2, r2, r8
 8000c56:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c5a:	e766      	b.n	8000b2a <__udivmoddi4+0xfa>
 8000c5c:	4601      	mov	r1, r0
 8000c5e:	e718      	b.n	8000a92 <__udivmoddi4+0x62>
 8000c60:	4610      	mov	r0, r2
 8000c62:	e72c      	b.n	8000abe <__udivmoddi4+0x8e>
 8000c64:	f1c6 0220 	rsb	r2, r6, #32
 8000c68:	fa2e f302 	lsr.w	r3, lr, r2
 8000c6c:	40b7      	lsls	r7, r6
 8000c6e:	40b1      	lsls	r1, r6
 8000c70:	fa20 f202 	lsr.w	r2, r0, r2
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c84:	0c11      	lsrs	r1, r2, #16
 8000c86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8a:	fb08 f904 	mul.w	r9, r8, r4
 8000c8e:	40b0      	lsls	r0, r6
 8000c90:	4589      	cmp	r9, r1
 8000c92:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c96:	b280      	uxth	r0, r0
 8000c98:	d93e      	bls.n	8000d18 <__udivmoddi4+0x2e8>
 8000c9a:	1879      	adds	r1, r7, r1
 8000c9c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ca0:	d201      	bcs.n	8000ca6 <__udivmoddi4+0x276>
 8000ca2:	4589      	cmp	r9, r1
 8000ca4:	d81f      	bhi.n	8000ce6 <__udivmoddi4+0x2b6>
 8000ca6:	eba1 0109 	sub.w	r1, r1, r9
 8000caa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cae:	fb09 f804 	mul.w	r8, r9, r4
 8000cb2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cbc:	4542      	cmp	r2, r8
 8000cbe:	d229      	bcs.n	8000d14 <__udivmoddi4+0x2e4>
 8000cc0:	18ba      	adds	r2, r7, r2
 8000cc2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cc6:	d2c4      	bcs.n	8000c52 <__udivmoddi4+0x222>
 8000cc8:	4542      	cmp	r2, r8
 8000cca:	d2c2      	bcs.n	8000c52 <__udivmoddi4+0x222>
 8000ccc:	f1a9 0102 	sub.w	r1, r9, #2
 8000cd0:	443a      	add	r2, r7
 8000cd2:	e7be      	b.n	8000c52 <__udivmoddi4+0x222>
 8000cd4:	45f0      	cmp	r8, lr
 8000cd6:	d29d      	bcs.n	8000c14 <__udivmoddi4+0x1e4>
 8000cd8:	ebbe 0302 	subs.w	r3, lr, r2
 8000cdc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	46e1      	mov	r9, ip
 8000ce4:	e796      	b.n	8000c14 <__udivmoddi4+0x1e4>
 8000ce6:	eba7 0909 	sub.w	r9, r7, r9
 8000cea:	4449      	add	r1, r9
 8000cec:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cf0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf4:	fb09 f804 	mul.w	r8, r9, r4
 8000cf8:	e7db      	b.n	8000cb2 <__udivmoddi4+0x282>
 8000cfa:	4673      	mov	r3, lr
 8000cfc:	e77f      	b.n	8000bfe <__udivmoddi4+0x1ce>
 8000cfe:	4650      	mov	r0, sl
 8000d00:	e766      	b.n	8000bd0 <__udivmoddi4+0x1a0>
 8000d02:	4608      	mov	r0, r1
 8000d04:	e6fd      	b.n	8000b02 <__udivmoddi4+0xd2>
 8000d06:	443b      	add	r3, r7
 8000d08:	3a02      	subs	r2, #2
 8000d0a:	e733      	b.n	8000b74 <__udivmoddi4+0x144>
 8000d0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d10:	443b      	add	r3, r7
 8000d12:	e71c      	b.n	8000b4e <__udivmoddi4+0x11e>
 8000d14:	4649      	mov	r1, r9
 8000d16:	e79c      	b.n	8000c52 <__udivmoddi4+0x222>
 8000d18:	eba1 0109 	sub.w	r1, r1, r9
 8000d1c:	46c4      	mov	ip, r8
 8000d1e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d22:	fb09 f804 	mul.w	r8, r9, r4
 8000d26:	e7c4      	b.n	8000cb2 <__udivmoddi4+0x282>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <writeDisplay>:
 * To write to external display with only one parameter, the string.
 * Also wraps the text around the edges if string size is bigger than the width of the monitor
 */

void writeDisplay(char* str)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	@ 0x30
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	6078      	str	r0, [r7, #4]
	ssd1306_Init();
 8000d34:	f000 f8b8 	bl	8000ea8 <ssd1306_Init>
	SSD1306_Font_t font = Font_11x18; //Set font size
 8000d38:	4a3d      	ldr	r2, [pc, #244]	@ (8000e30 <writeDisplay+0x104>)
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t y = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int8_t str_length = strlen(str);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fa5a 	bl	8000204 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t display_length = 128;
 8000d56:	2380      	movs	r3, #128	@ 0x80
 8000d58:	77fb      	strb	r3, [r7, #31]
	uint8_t display_height = 64;
 8000d5a:	2340      	movs	r3, #64	@ 0x40
 8000d5c:	77bb      	strb	r3, [r7, #30]
	uint8_t max_char = (display_length-2)/font.width; //Calculate maximum number of characters that fit in one line
 8000d5e:	7ffb      	ldrb	r3, [r7, #31]
 8000d60:	3b02      	subs	r3, #2
 8000d62:	7b3a      	ldrb	r2, [r7, #12]
 8000d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d68:	777b      	strb	r3, [r7, #29]
	uint8_t max_lines = display_height/font.height;
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	7fba      	ldrb	r2, [r7, #30]
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	773b      	strb	r3, [r7, #28]
	uint8_t line = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	ssd1306_Fill(Black);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 f8fe 	bl	8000f7c <ssd1306_Fill>

	while(str_length > 0 && line < max_lines)
 8000d80:	e047      	b.n	8000e12 <writeDisplay+0xe6>
	{
		ssd1306_SetCursor(2, y); //Set cursor to start of the line
 8000d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d86:	4619      	mov	r1, r3
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f000 fa43 	bl	8001214 <ssd1306_SetCursor>

		char* sub_str = malloc(max_char + 1); //Variable needed to store the string of the current line
 8000d8e:	7f7b      	ldrb	r3, [r7, #29]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f006 ffc2 	bl	8007d1c <malloc>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < max_char; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	e011      	b.n	8000dc6 <writeDisplay+0x9a>
		{
			sub_str[i] = str[i + max_char * line];
 8000da2:	7f7b      	ldrb	r3, [r7, #29]
 8000da4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000da8:	fb03 f202 	mul.w	r2, r3, r2
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	4413      	add	r3, r2
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	441a      	add	r2, r3
 8000db6:	6a3b      	ldr	r3, [r7, #32]
 8000db8:	69b9      	ldr	r1, [r7, #24]
 8000dba:	440b      	add	r3, r1
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < max_char; i++)
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
 8000dc6:	7f7b      	ldrb	r3, [r7, #29]
 8000dc8:	6a3a      	ldr	r2, [r7, #32]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	dbe9      	blt.n	8000da2 <writeDisplay+0x76>
		}
		sub_str[max_char] = '\0';	//At the end of the string, add a null terminator
 8000dce:	7f7b      	ldrb	r3, [r7, #29]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(sub_str, font, White); //Write the current line to the buffer
 8000dd8:	2301      	movs	r3, #1
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de2:	69b8      	ldr	r0, [r7, #24]
 8000de4:	f000 f9f0 	bl	80011c8 <ssd1306_WriteString>
		str_length = str_length - max_char;
 8000de8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000dec:	7f7b      	ldrb	r3, [r7, #29]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		y += font.height;
 8000df6:	7b7a      	ldrb	r2, [r7, #13]
 8000df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		line++;
 8000e02:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000e06:	3301      	adds	r3, #1
 8000e08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		free(sub_str);
 8000e0c:	69b8      	ldr	r0, [r7, #24]
 8000e0e:	f006 ff8d 	bl	8007d2c <free>
	while(str_length > 0 && line < max_lines)
 8000e12:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	dd04      	ble.n	8000e24 <writeDisplay+0xf8>
 8000e1a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000e1e:	7f3b      	ldrb	r3, [r7, #28]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3ae      	bcc.n	8000d82 <writeDisplay+0x56>
	}
	ssd1306_UpdateScreen();
 8000e24:	f000 f8c2 	bl	8000fac <ssd1306_UpdateScreen>
}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	@ 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	08008d98 	.word	0x08008d98

08000e34 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af04      	add	r7, sp, #16
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2178      	movs	r1, #120	@ 0x78
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <ssd1306_WriteCommand+0x2c>)
 8000e64:	f003 fffe 	bl	8004e64 <HAL_I2C_Mem_Write>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000480 	.word	0x20000480

08000e74 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f04f 32ff 	mov.w	r2, #4294967295
 8000e86:	9202      	str	r2, [sp, #8]
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2240      	movs	r2, #64	@ 0x40
 8000e92:	2178      	movs	r1, #120	@ 0x78
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <ssd1306_WriteData+0x30>)
 8000e96:	f003 ffe5 	bl	8004e64 <HAL_I2C_Mem_Write>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000480 	.word	0x20000480

08000ea8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000eac:	f7ff ffc2 	bl	8000e34 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000eb0:	2064      	movs	r0, #100	@ 0x64
 8000eb2:	f003 fb65 	bl	8004580 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f9d8 	bl	800126c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ebc:	2020      	movs	r0, #32
 8000ebe:	f7ff ffc1 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff ffbe 	bl	8000e44 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ec8:	20b0      	movs	r0, #176	@ 0xb0
 8000eca:	f7ff ffbb 	bl	8000e44 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ece:	20c8      	movs	r0, #200	@ 0xc8
 8000ed0:	f7ff ffb8 	bl	8000e44 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff ffb5 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000eda:	2010      	movs	r0, #16
 8000edc:	f7ff ffb2 	bl	8000e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ee0:	2040      	movs	r0, #64	@ 0x40
 8000ee2:	f7ff ffaf 	bl	8000e44 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ee6:	20ff      	movs	r0, #255	@ 0xff
 8000ee8:	f000 f9ac 	bl	8001244 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000eec:	20a1      	movs	r0, #161	@ 0xa1
 8000eee:	f7ff ffa9 	bl	8000e44 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000ef2:	20a6      	movs	r0, #166	@ 0xa6
 8000ef4:	f7ff ffa6 	bl	8000e44 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ef8:	20a8      	movs	r0, #168	@ 0xa8
 8000efa:	f7ff ffa3 	bl	8000e44 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000efe:	203f      	movs	r0, #63	@ 0x3f
 8000f00:	f7ff ffa0 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f04:	20a4      	movs	r0, #164	@ 0xa4
 8000f06:	f7ff ff9d 	bl	8000e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f0a:	20d3      	movs	r0, #211	@ 0xd3
 8000f0c:	f7ff ff9a 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff ff97 	bl	8000e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f16:	20d5      	movs	r0, #213	@ 0xd5
 8000f18:	f7ff ff94 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f1c:	20f0      	movs	r0, #240	@ 0xf0
 8000f1e:	f7ff ff91 	bl	8000e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f22:	20d9      	movs	r0, #217	@ 0xd9
 8000f24:	f7ff ff8e 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f28:	2022      	movs	r0, #34	@ 0x22
 8000f2a:	f7ff ff8b 	bl	8000e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f2e:	20da      	movs	r0, #218	@ 0xda
 8000f30:	f7ff ff88 	bl	8000e44 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000f34:	2012      	movs	r0, #18
 8000f36:	f7ff ff85 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f3a:	20db      	movs	r0, #219	@ 0xdb
 8000f3c:	f7ff ff82 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f40:	2020      	movs	r0, #32
 8000f42:	f7ff ff7f 	bl	8000e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000f46:	208d      	movs	r0, #141	@ 0x8d
 8000f48:	f7ff ff7c 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000f4c:	2014      	movs	r0, #20
 8000f4e:	f7ff ff79 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 f98a 	bl	800126c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 f80f 	bl	8000f7c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000f5e:	f000 f825 	bl	8000fac <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f62:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <ssd1306_Init+0xd0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <ssd1306_Init+0xd0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000f6e:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <ssd1306_Init+0xd0>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	711a      	strb	r2, [r3, #4]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000478 	.word	0x20000478

08000f7c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <ssd1306_Fill+0x14>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e000      	b.n	8000f92 <ssd1306_Fill+0x16>
 8000f90:	23ff      	movs	r3, #255	@ 0xff
 8000f92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f96:	4619      	mov	r1, r3
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <ssd1306_Fill+0x2c>)
 8000f9a:	f006 ff7d 	bl	8007e98 <memset>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000078 	.word	0x20000078

08000fac <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e016      	b.n	8000fe6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	3b50      	subs	r3, #80	@ 0x50
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff40 	bl	8000e44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff ff3d 	bl	8000e44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000fca:	2010      	movs	r0, #16
 8000fcc:	f7ff ff3a 	bl	8000e44 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	01db      	lsls	r3, r3, #7
 8000fd4:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <ssd1306_UpdateScreen+0x4c>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff4a 	bl	8000e74 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d9e5      	bls.n	8000fb8 <ssd1306_UpdateScreen+0xc>
    }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000078 	.word	0x20000078

08000ffc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	460b      	mov	r3, r1
 8001008:	71bb      	strb	r3, [r7, #6]
 800100a:	4613      	mov	r3, r2
 800100c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db3d      	blt.n	8001092 <ssd1306_DrawPixel+0x96>
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	2b3f      	cmp	r3, #63	@ 0x3f
 800101a:	d83a      	bhi.n	8001092 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800101c:	797b      	ldrb	r3, [r7, #5]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d11a      	bne.n	8001058 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	b2d8      	uxtb	r0, r3
 800102a:	4603      	mov	r3, r0
 800102c:	01db      	lsls	r3, r3, #7
 800102e:	4413      	add	r3, r2
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <ssd1306_DrawPixel+0xa4>)
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	b25a      	sxtb	r2, r3
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	b25b      	sxtb	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b259      	sxtb	r1, r3
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	4603      	mov	r3, r0
 800104c:	01db      	lsls	r3, r3, #7
 800104e:	4413      	add	r3, r2
 8001050:	b2c9      	uxtb	r1, r1
 8001052:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <ssd1306_DrawPixel+0xa4>)
 8001054:	54d1      	strb	r1, [r2, r3]
 8001056:	e01d      	b.n	8001094 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001058:	79fa      	ldrb	r2, [r7, #7]
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	b2d8      	uxtb	r0, r3
 8001060:	4603      	mov	r3, r0
 8001062:	01db      	lsls	r3, r3, #7
 8001064:	4413      	add	r3, r2
 8001066:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <ssd1306_DrawPixel+0xa4>)
 8001068:	5cd3      	ldrb	r3, [r2, r3]
 800106a:	b25a      	sxtb	r2, r3
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	b25b      	sxtb	r3, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4013      	ands	r3, r2
 8001080:	b259      	sxtb	r1, r3
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	4603      	mov	r3, r0
 8001086:	01db      	lsls	r3, r3, #7
 8001088:	4413      	add	r3, r2
 800108a:	b2c9      	uxtb	r1, r1
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <ssd1306_DrawPixel+0xa4>)
 800108e:	54d1      	strb	r1, [r2, r3]
 8001090:	e000      	b.n	8001094 <ssd1306_DrawPixel+0x98>
        return;
 8001092:	bf00      	nop
    }
}
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000078 	.word	0x20000078

080010a4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4604      	mov	r4, r0
 80010ac:	4638      	mov	r0, r7
 80010ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010b2:	4623      	mov	r3, r4
 80010b4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b1f      	cmp	r3, #31
 80010ba:	d902      	bls.n	80010c2 <ssd1306_WriteChar+0x1e>
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b7e      	cmp	r3, #126	@ 0x7e
 80010c0:	d901      	bls.n	80010c6 <ssd1306_WriteChar+0x22>
        return 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e079      	b.n	80011ba <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <ssd1306_WriteChar+0x34>
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3b20      	subs	r3, #32
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	e000      	b.n	80010da <ssd1306_WriteChar+0x36>
 80010d8:	783b      	ldrb	r3, [r7, #0]
 80010da:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80010dc:	4b39      	ldr	r3, [pc, #228]	@ (80011c4 <ssd1306_WriteChar+0x120>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	4413      	add	r3, r2
 80010e6:	2b80      	cmp	r3, #128	@ 0x80
 80010e8:	dc06      	bgt.n	80010f8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80010ea:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <ssd1306_WriteChar+0x120>)
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	461a      	mov	r2, r3
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80010f4:	2b40      	cmp	r3, #64	@ 0x40
 80010f6:	dd01      	ble.n	80010fc <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e05e      	b.n	80011ba <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	e04d      	b.n	800119e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	3b20      	subs	r3, #32
 8001108:	7879      	ldrb	r1, [r7, #1]
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4619      	mov	r1, r3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	440b      	add	r3, r1
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	e036      	b.n	8001190 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d013      	beq.n	800115a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001132:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <ssd1306_WriteChar+0x120>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	b2d8      	uxtb	r0, r3
 8001140:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <ssd1306_WriteChar+0x120>)
 8001142:	885b      	ldrh	r3, [r3, #2]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff ff52 	bl	8000ffc <ssd1306_DrawPixel>
 8001158:	e017      	b.n	800118a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <ssd1306_WriteChar+0x120>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4413      	add	r3, r2
 8001166:	b2d8      	uxtb	r0, r3
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <ssd1306_WriteChar+0x120>)
 800116a:	885b      	ldrh	r3, [r3, #2]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4413      	add	r3, r2
 8001174:	b2d9      	uxtb	r1, r3
 8001176:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	f7ff ff39 	bl	8000ffc <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	3301      	adds	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3c4      	bcc.n	8001122 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	3301      	adds	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	787b      	ldrb	r3, [r7, #1]
 80011a0:	461a      	mov	r2, r3
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d3ac      	bcc.n	8001102 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <ssd1306_WriteChar+0x120>)
 80011aa:	881a      	ldrh	r2, [r3, #0]
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <ssd1306_WriteChar+0x120>)
 80011b6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000478 	.word	0x20000478

080011c8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	4638      	mov	r0, r7
 80011d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80011d6:	e013      	b.n	8001200 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	7818      	ldrb	r0, [r3, #0]
 80011dc:	7e3b      	ldrb	r3, [r7, #24]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	463b      	mov	r3, r7
 80011e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e4:	f7ff ff5e 	bl	80010a4 <ssd1306_WriteChar>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d002      	beq.n	80011fa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	e008      	b.n	800120c <ssd1306_WriteString+0x44>
        }
        str++;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3301      	adds	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e7      	bne.n	80011d8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	781b      	ldrb	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <ssd1306_SetCursor+0x2c>)
 800122a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <ssd1306_SetCursor+0x2c>)
 8001232:	805a      	strh	r2, [r3, #2]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	20000478 	.word	0x20000478

08001244 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800124e:	2381      	movs	r3, #129	@ 0x81
 8001250:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fdf5 	bl	8000e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fdf1 	bl	8000e44 <ssd1306_WriteCommand>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800127c:	23af      	movs	r3, #175	@ 0xaf
 800127e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <ssd1306_SetDisplayOn+0x38>)
 8001282:	2201      	movs	r2, #1
 8001284:	715a      	strb	r2, [r3, #5]
 8001286:	e004      	b.n	8001292 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001288:	23ae      	movs	r3, #174	@ 0xae
 800128a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <ssd1306_SetDisplayOn+0x38>)
 800128e:	2200      	movs	r2, #0
 8001290:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fdd5 	bl	8000e44 <ssd1306_WriteCommand>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000478 	.word	0x20000478

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	f6ad 0dd8 	subw	sp, sp, #2264	@ 0x8d8
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f003 f8f4 	bl	800449c <HAL_Init>
  motor_t motor2;
  motor_t motor3;
  motor_t motor4;
  motor_t motor5;

  motors[0] = &motor1;
 80012b4:	4a32      	ldr	r2, [pc, #200]	@ (8001380 <main+0xd8>)
 80012b6:	f207 5354 	addw	r3, r7, #1364	@ 0x554
 80012ba:	6013      	str	r3, [r2, #0]
  motors[1] = &motor2;
 80012bc:	4a30      	ldr	r2, [pc, #192]	@ (8001380 <main+0xd8>)
 80012be:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80012c2:	6053      	str	r3, [r2, #4]
  motors[2] = &motor3;
 80012c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001380 <main+0xd8>)
 80012c6:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 80012ca:	6093      	str	r3, [r2, #8]
  motors[3] = &motor4;
 80012cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001380 <main+0xd8>)
 80012ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012d2:	60d3      	str	r3, [r2, #12]
  motors[4] = &motor5;
 80012d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001380 <main+0xd8>)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	6113      	str	r3, [r2, #16]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f853 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f000 fd33 	bl	8001d48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012e2:	f000 fcb3 	bl	8001c4c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012e6:	f000 fc87 	bl	8001bf8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80012ea:	f000 f8b9 	bl	8001460 <MX_I2C1_Init>
  MX_UART4_Init();
 80012ee:	f000 fc2f 	bl	8001b50 <MX_UART4_Init>
  MX_UART5_Init();
 80012f2:	f000 fc57 	bl	8001ba4 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80012f6:	f000 fcd3 	bl	8001ca0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80012fa:	f000 fcfb 	bl	8001cf4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80012fe:	f000 f92d 	bl	800155c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001302:	f000 f99f 	bl	8001644 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001306:	f000 fb1b 	bl	8001940 <MX_TIM9_Init>
  MX_TIM8_Init();
 800130a:	f000 fa7b 	bl	8001804 <MX_TIM8_Init>
  MX_TIM12_Init();
 800130e:	f000 fb75 	bl	80019fc <MX_TIM12_Init>
  MX_TIM13_Init();
 8001312:	f000 fbd3 	bl	8001abc <MX_TIM13_Init>
  MX_TIM1_Init();
 8001316:	f000 f8d1 	bl	80014bc <MX_TIM1_Init>
  MX_TIM6_Init();
 800131a:	f000 fa07 	bl	800172c <MX_TIM6_Init>
  MX_TIM7_Init();
 800131e:	f000 fa3b 	bl	8001798 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001322:	f000 fb47 	bl	80019b4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_motor_1(&motor1, &driver1);
 8001326:	f607 0268 	addw	r2, r7, #2152	@ 0x868
 800132a:	f207 5354 	addw	r3, r7, #1364	@ 0x554
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fcad 	bl	8003c90 <init_motor_1>
  init_motor_2(&motor2, &driver2);
 8001336:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 800133a:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fd57 	bl	8003df4 <init_motor_2>
  init_motor_3(&motor3, &driver3);
 8001346:	f507 62f1 	add.w	r2, r7, #1928	@ 0x788
 800134a:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fe1d 	bl	8003f90 <init_motor_3>
  init_motor_4(&motor4, &driver4);
 8001356:	f507 62e3 	add.w	r2, r7, #1816	@ 0x718
 800135a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fed1 	bl	8004108 <init_motor_4>
  init_motor_5(&motor5, &driver5);
 8001366:	f507 62d5 	add.w	r2, r7, #1704	@ 0x6a8
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f002 ff7e 	bl	8004270 <init_motor_5>
//
//  HAL_Delay(2000);
//  moveDegrees(90, &motor2);
//  moveDegrees(90, &motor4);

  goHome();
 8001374:	f002 faac 	bl	80038d0 <goHome>
  grip();
 8001378:	f002 fa4e 	bl	8003818 <grip>
//  HAL_Delay(10000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <main+0xd4>
 8001380:	20000954 	.word	0x20000954

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	@ 0x50
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2234      	movs	r2, #52	@ 0x34
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fd80 	bl	8007e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <SystemClock_Config+0xd4>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	4a29      	ldr	r2, [pc, #164]	@ (8001458 <SystemClock_Config+0xd4>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <SystemClock_Config+0xd4>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	4b24      	ldr	r3, [pc, #144]	@ (800145c <SystemClock_Config+0xd8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013d0:	4a22      	ldr	r2, [pc, #136]	@ (800145c <SystemClock_Config+0xd8>)
 80013d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <SystemClock_Config+0xd8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ec:	2310      	movs	r3, #16
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	2302      	movs	r3, #2
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013f8:	2310      	movs	r3, #16
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001400:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001402:	2304      	movs	r3, #4
 8001404:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001406:	2302      	movs	r3, #2
 8001408:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800140a:	2302      	movs	r3, #2
 800140c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fbda 	bl	8005bcc <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800141e:	f000 fd6d 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2302      	movs	r3, #2
 8001428:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f004 f87a 	bl	8005538 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800144a:	f000 fd57 	bl	8001efc <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3750      	adds	r7, #80	@ 0x50
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001466:	4a13      	ldr	r2, [pc, #76]	@ (80014b4 <MX_I2C1_Init+0x54>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_I2C1_Init+0x50>)
 800146c:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <MX_I2C1_Init+0x58>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_I2C1_Init+0x50>)
 800147e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_I2C1_Init+0x50>)
 800149e:	f003 fb9d 	bl	8004bdc <HAL_I2C_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a8:	f000 fd28 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000480 	.word	0x20000480
 80014b4:	40005400 	.word	0x40005400
 80014b8:	000186a0 	.word	0x000186a0

080014bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <MX_TIM1_Init+0x98>)
 80014da:	4a1f      	ldr	r2, [pc, #124]	@ (8001558 <MX_TIM1_Init+0x9c>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80014de:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <MX_TIM1_Init+0x98>)
 80014e0:	2253      	movs	r2, #83	@ 0x53
 80014e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <MX_TIM1_Init+0x98>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_TIM1_Init+0x98>)
 80014ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <MX_TIM1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <MX_TIM1_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_TIM1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001504:	4813      	ldr	r0, [pc, #76]	@ (8001554 <MX_TIM1_Init+0x98>)
 8001506:	f004 fdff 	bl	8006108 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001510:	f000 fcf4 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001518:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <MX_TIM1_Init+0x98>)
 8001522:	f005 fa59 	bl	80069d8 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800152c:	f000 fce6 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_TIM1_Init+0x98>)
 800153e:	f005 fe47 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001548:	f000 fcd8 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200004d4 	.word	0x200004d4
 8001558:	40010000 	.word	0x40010000

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]
 800158a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <MX_TIM3_Init+0xe0>)
 800158e:	4a2c      	ldr	r2, [pc, #176]	@ (8001640 <MX_TIM3_Init+0xe4>)
 8001590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <MX_TIM3_Init+0xe0>)
 8001594:	2229      	movs	r2, #41	@ 0x29
 8001596:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <MX_TIM3_Init+0xe0>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800159e:	4b27      	ldr	r3, [pc, #156]	@ (800163c <MX_TIM3_Init+0xe0>)
 80015a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b25      	ldr	r3, [pc, #148]	@ (800163c <MX_TIM3_Init+0xe0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <MX_TIM3_Init+0xe0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b2:	4822      	ldr	r0, [pc, #136]	@ (800163c <MX_TIM3_Init+0xe0>)
 80015b4:	f004 fda8 	bl	8006108 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015be:	f000 fc9d 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015cc:	4619      	mov	r1, r3
 80015ce:	481b      	ldr	r0, [pc, #108]	@ (800163c <MX_TIM3_Init+0xe0>)
 80015d0:	f005 fa02 	bl	80069d8 <HAL_TIM_ConfigClockSource>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015da:	f000 fc8f 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80015de:	4817      	ldr	r0, [pc, #92]	@ (800163c <MX_TIM3_Init+0xe0>)
 80015e0:	f004 fe81 	bl	80062e6 <HAL_TIM_OC_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015ea:	f000 fc87 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	4619      	mov	r1, r3
 80015fc:	480f      	ldr	r0, [pc, #60]	@ (800163c <MX_TIM3_Init+0xe0>)
 80015fe:	f005 fde7 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001608:	f000 fc78 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	@ (800163c <MX_TIM3_Init+0xe0>)
 8001624:	f005 f97c 	bl	8006920 <HAL_TIM_OC_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800162e:	f000 fc65 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3738      	adds	r7, #56	@ 0x38
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000051c 	.word	0x2000051c
 8001640:	40000400 	.word	0x40000400

08001644 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	@ 0x38
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <MX_TIM4_Init+0xe0>)
 8001676:	4a2c      	ldr	r2, [pc, #176]	@ (8001728 <MX_TIM4_Init+0xe4>)
 8001678:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <MX_TIM4_Init+0xe0>)
 800167c:	2229      	movs	r2, #41	@ 0x29
 800167e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <MX_TIM4_Init+0xe0>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001686:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <MX_TIM4_Init+0xe0>)
 8001688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800168c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168e:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <MX_TIM4_Init+0xe0>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <MX_TIM4_Init+0xe0>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800169a:	4822      	ldr	r0, [pc, #136]	@ (8001724 <MX_TIM4_Init+0xe0>)
 800169c:	f004 fd34 	bl	8006108 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016a6:	f000 fc29 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b4:	4619      	mov	r1, r3
 80016b6:	481b      	ldr	r0, [pc, #108]	@ (8001724 <MX_TIM4_Init+0xe0>)
 80016b8:	f005 f98e 	bl	80069d8 <HAL_TIM_ConfigClockSource>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016c2:	f000 fc1b 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80016c6:	4817      	ldr	r0, [pc, #92]	@ (8001724 <MX_TIM4_Init+0xe0>)
 80016c8:	f004 fe0d 	bl	80062e6 <HAL_TIM_OC_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80016d2:	f000 fc13 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016de:	f107 0320 	add.w	r3, r7, #32
 80016e2:	4619      	mov	r1, r3
 80016e4:	480f      	ldr	r0, [pc, #60]	@ (8001724 <MX_TIM4_Init+0xe0>)
 80016e6:	f005 fd73 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80016f0:	f000 fc04 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	@ (8001724 <MX_TIM4_Init+0xe0>)
 800170c:	f005 f908 	bl	8006920 <HAL_TIM_OC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001716:	f000 fbf1 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3738      	adds	r7, #56	@ 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000564 	.word	0x20000564
 8001728:	40000800 	.word	0x40000800

0800172c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <MX_TIM6_Init+0x64>)
 800173c:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <MX_TIM6_Init+0x68>)
 800173e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 839;
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <MX_TIM6_Init+0x64>)
 8001742:	f240 3247 	movw	r2, #839	@ 0x347
 8001746:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_TIM6_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <MX_TIM6_Init+0x64>)
 8001750:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001754:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <MX_TIM6_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <MX_TIM6_Init+0x64>)
 800175e:	f004 fcd3 	bl	8006108 <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001768:	f000 fbc8 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_TIM6_Init+0x64>)
 800177a:	f005 fd29 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001784:	f000 fbba 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200005ac 	.word	0x200005ac
 8001794:	40001000 	.word	0x40001000

08001798 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_TIM7_Init+0x64>)
 80017a8:	4a15      	ldr	r2, [pc, #84]	@ (8001800 <MX_TIM7_Init+0x68>)
 80017aa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 839;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_TIM7_Init+0x64>)
 80017ae:	f240 3247 	movw	r2, #839	@ 0x347
 80017b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_TIM7_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <MX_TIM7_Init+0x64>)
 80017bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_TIM7_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <MX_TIM7_Init+0x64>)
 80017ca:	f004 fc9d 	bl	8006108 <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017d4:	f000 fb92 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_TIM7_Init+0x64>)
 80017e6:	f005 fcf3 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80017f0:	f000 fb84 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200005f4 	.word	0x200005f4
 8001800:	40001400 	.word	0x40001400

08001804 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b096      	sub	sp, #88	@ 0x58
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2220      	movs	r2, #32
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f006 fb2b 	bl	8007e98 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <MX_TIM8_Init+0x134>)
 8001844:	4a3d      	ldr	r2, [pc, #244]	@ (800193c <MX_TIM8_Init+0x138>)
 8001846:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 8001848:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <MX_TIM8_Init+0x134>)
 800184a:	2229      	movs	r2, #41	@ 0x29
 800184c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <MX_TIM8_Init+0x134>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001854:	4b38      	ldr	r3, [pc, #224]	@ (8001938 <MX_TIM8_Init+0x134>)
 8001856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800185a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b36      	ldr	r3, [pc, #216]	@ (8001938 <MX_TIM8_Init+0x134>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001862:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <MX_TIM8_Init+0x134>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b33      	ldr	r3, [pc, #204]	@ (8001938 <MX_TIM8_Init+0x134>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800186e:	4832      	ldr	r0, [pc, #200]	@ (8001938 <MX_TIM8_Init+0x134>)
 8001870:	f004 fc4a 	bl	8006108 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800187a:	f000 fb3f 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001882:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001888:	4619      	mov	r1, r3
 800188a:	482b      	ldr	r0, [pc, #172]	@ (8001938 <MX_TIM8_Init+0x134>)
 800188c:	f005 f8a4 	bl	80069d8 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001896:	f000 fb31 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800189a:	4827      	ldr	r0, [pc, #156]	@ (8001938 <MX_TIM8_Init+0x134>)
 800189c:	f004 fd23 	bl	80062e6 <HAL_TIM_OC_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80018a6:	f000 fb29 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018b6:	4619      	mov	r1, r3
 80018b8:	481f      	ldr	r0, [pc, #124]	@ (8001938 <MX_TIM8_Init+0x134>)
 80018ba:	f005 fc89 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80018c4:	f000 fb1a 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	4812      	ldr	r0, [pc, #72]	@ (8001938 <MX_TIM8_Init+0x134>)
 80018ee:	f005 f817 	bl	8006920 <HAL_TIM_OC_ConfigChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80018f8:	f000 fb00 	bl	8001efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001910:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001914:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	@ (8001938 <MX_TIM8_Init+0x134>)
 8001920:	f005 fcd2 	bl	80072c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800192a:	f000 fae7 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3758      	adds	r7, #88	@ 0x58
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000063c 	.word	0x2000063c
 800193c:	40010400 	.word	0x40010400

08001940 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001952:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <MX_TIM9_Init+0x6c>)
 8001954:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <MX_TIM9_Init+0x70>)
 8001956:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_TIM9_Init+0x6c>)
 800195a:	f240 3247 	movw	r2, #839	@ 0x347
 800195e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <MX_TIM9_Init+0x6c>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_TIM9_Init+0x6c>)
 8001968:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800196c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <MX_TIM9_Init+0x6c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <MX_TIM9_Init+0x6c>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800197a:	480c      	ldr	r0, [pc, #48]	@ (80019ac <MX_TIM9_Init+0x6c>)
 800197c:	f004 fbc4 	bl	8006108 <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001986:	f000 fab9 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_TIM9_Init+0x6c>)
 8001996:	f005 f81f 	bl	80069d8 <HAL_TIM_ConfigClockSource>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80019a0:	f000 faac 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000684 	.word	0x20000684
 80019b0:	40014000 	.word	0x40014000

080019b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_TIM10_Init+0x40>)
 80019ba:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <MX_TIM10_Init+0x44>)
 80019bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <MX_TIM10_Init+0x40>)
 80019c0:	f240 3247 	movw	r2, #839	@ 0x347
 80019c4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <MX_TIM10_Init+0x40>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_TIM10_Init+0x40>)
 80019ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019d2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <MX_TIM10_Init+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_TIM10_Init+0x40>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <MX_TIM10_Init+0x40>)
 80019e2:	f004 fb91 	bl	8006108 <HAL_TIM_Base_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80019ec:	f000 fa86 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200006cc 	.word	0x200006cc
 80019f8:	40014400 	.word	0x40014400

080019fc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a22:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a24:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <MX_TIM12_Init+0xbc>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a2a:	2229      	movs	r2, #41	@ 0x29
 8001a2c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a3a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001a48:	481a      	ldr	r0, [pc, #104]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a4a:	f004 fb5d 	bl	8006108 <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001a54:	f000 fa52 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0320 	add.w	r3, r7, #32
 8001a62:	4619      	mov	r1, r3
 8001a64:	4813      	ldr	r0, [pc, #76]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a66:	f004 ffb7 	bl	80069d8 <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001a70:	f000 fa44 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8001a74:	480f      	ldr	r0, [pc, #60]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a76:	f004 fc36 	bl	80062e6 <HAL_TIM_OC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001a80:	f000 fa3c 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <MX_TIM12_Init+0xb8>)
 8001a9c:	f004 ff40 	bl	8006920 <HAL_TIM_OC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001aa6:	f000 fa29 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	3730      	adds	r7, #48	@ 0x30
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000714 	.word	0x20000714
 8001ab8:	40001800 	.word	0x40001800

08001abc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <MX_TIM13_Init+0x90>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001adc:	2229      	movs	r2, #41	@ 0x29
 8001ade:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001afa:	4813      	ldr	r0, [pc, #76]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001afc:	f004 fb04 	bl	8006108 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001b06:	f000 f9f9 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001b0a:	480f      	ldr	r0, [pc, #60]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001b0c:	f004 fbeb 	bl	80062e6 <HAL_TIM_OC_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001b16:	f000 f9f1 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_TIM13_Init+0x8c>)
 8001b32:	f004 fef5 	bl	8006920 <HAL_TIM_OC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001b3c:	f000 f9de 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000075c 	.word	0x2000075c
 8001b4c:	40001c00 	.word	0x40001c00

08001b50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <MX_UART4_Init+0x50>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_UART4_Init+0x4c>)
 8001b88:	f005 fc04 	bl	8007394 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b92:	f000 f9b3 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200007a4 	.word	0x200007a4
 8001ba0:	40004c00 	.word	0x40004c00

08001ba4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <MX_UART5_Init+0x50>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <MX_UART5_Init+0x4c>)
 8001bdc:	f005 fbda 	bl	8007394 <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001be6:	f000 f989 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200007ec 	.word	0x200007ec
 8001bf4:	40005000 	.word	0x40005000

08001bf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <MX_USART1_UART_Init+0x50>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <MX_USART1_UART_Init+0x4c>)
 8001c30:	f005 fbb0 	bl	8007394 <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c3a:	f000 f95f 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000834 	.word	0x20000834
 8001c48:	40011000 	.word	0x40011000

08001c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <MX_USART2_UART_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f005 fb86 	bl	8007394 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f000 f935 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000087c 	.word	0x2000087c
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <MX_USART3_UART_Init+0x50>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001cac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_USART3_UART_Init+0x4c>)
 8001cd8:	f005 fb5c 	bl	8007394 <HAL_UART_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ce2:	f000 f90b 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200008c4 	.word	0x200008c4
 8001cf0:	40004800 	.word	0x40004800

08001cf4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <MX_USART6_UART_Init+0x50>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_USART6_UART_Init+0x4c>)
 8001d2c:	f005 fb32 	bl	8007394 <HAL_UART_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d36:	f000 f8e1 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000090c 	.word	0x2000090c
 8001d44:	40011400 	.word	0x40011400

08001d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b62      	ldr	r3, [pc, #392]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a61      	ldr	r2, [pc, #388]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a5a      	ldr	r2, [pc, #360]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b58      	ldr	r3, [pc, #352]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b54      	ldr	r3, [pc, #336]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a53      	ldr	r2, [pc, #332]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b51      	ldr	r3, [pc, #324]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b4d      	ldr	r3, [pc, #308]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4a4c      	ldr	r2, [pc, #304]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b46      	ldr	r3, [pc, #280]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4a45      	ldr	r2, [pc, #276]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dde:	4b43      	ldr	r3, [pc, #268]	@ (8001eec <MX_GPIO_Init+0x1a4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 8001dea:	2200      	movs	r2, #0
 8001dec:	f640 311f 	movw	r1, #2847	@ 0xb1f
 8001df0:	483f      	ldr	r0, [pc, #252]	@ (8001ef0 <MX_GPIO_Init+0x1a8>)
 8001df2:	f002 fea7 	bl	8004b44 <HAL_GPIO_WritePin>
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001dfc:	483d      	ldr	r0, [pc, #244]	@ (8001ef4 <MX_GPIO_Init+0x1ac>)
 8001dfe:	f002 fea1 	bl	8004b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001e02:	2200      	movs	r2, #0
 8001e04:	f247 0117 	movw	r1, #28695	@ 0x7017
 8001e08:	483b      	ldr	r0, [pc, #236]	@ (8001ef8 <MX_GPIO_Init+0x1b0>)
 8001e0a:	f002 fe9b 	bl	8004b44 <HAL_GPIO_WritePin>
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	4832      	ldr	r0, [pc, #200]	@ (8001ef0 <MX_GPIO_Init+0x1a8>)
 8001e26:	f002 fce1 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_yellow_Pin LED_green_Pin MOT_EN_3_Pin STEP_3_Pin
                           MOT_EN_5_Pin STEP_5_Pin DIR_5_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 8001e2a:	f640 331f 	movw	r3, #2847	@ 0xb1f
 8001e2e:	617b      	str	r3, [r7, #20]
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e30:	2301      	movs	r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	482b      	ldr	r0, [pc, #172]	@ (8001ef0 <MX_GPIO_Init+0x1a8>)
 8001e44:	f002 fcd2 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8001e48:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8001e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4825      	ldr	r0, [pc, #148]	@ (8001ef4 <MX_GPIO_Init+0x1ac>)
 8001e5e:	f002 fcc5 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_EN_2_Pin STEP_2_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin;
 8001e62:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481e      	ldr	r0, [pc, #120]	@ (8001ef4 <MX_GPIO_Init+0x1ac>)
 8001e7c:	f002 fcb6 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin MOT_EN_4_Pin STEP_4_Pin MOT_EN_1_Pin
                           STEP_1_Pin DIR_1_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001e80:	f247 0317 	movw	r3, #28695	@ 0x7017
 8001e84:	617b      	str	r3, [r7, #20]
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4817      	ldr	r0, [pc, #92]	@ (8001ef8 <MX_GPIO_Init+0x1b0>)
 8001e9a:	f002 fca7 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB5 DIAG_3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|DIAG_3_Pin;
 8001e9e:	f248 2320 	movw	r3, #33312	@ 0x8220
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4811      	ldr	r0, [pc, #68]	@ (8001ef8 <MX_GPIO_Init+0x1b0>)
 8001eb4:	f002 fc9a 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4808      	ldr	r0, [pc, #32]	@ (8001ef0 <MX_GPIO_Init+0x1a8>)
 8001ece:	f002 fc8d 	bl	80047ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2028      	movs	r0, #40	@ 0x28
 8001ed8:	f002 fc51 	bl	800477e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001edc:	2028      	movs	r0, #40	@ 0x28
 8001ede:	f002 fc6a 	bl	80047b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	@ 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <Error_Handler+0x8>

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	4a0f      	ldr	r2, [pc, #60]	@ (8001f54 <HAL_MspInit+0x4c>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a08      	ldr	r2, [pc, #32]	@ (8001f54 <HAL_MspInit+0x4c>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f46:	2007      	movs	r0, #7
 8001f48:	f002 fc0e 	bl	8004768 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800

08001f58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <HAL_I2C_MspInit+0x84>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d12b      	bne.n	8001fd2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <HAL_I2C_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_I2C_MspInit+0x88>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <HAL_I2C_MspInit+0x88>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f96:	23c0      	movs	r3, #192	@ 0xc0
 8001f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9a:	2312      	movs	r3, #18
 8001f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	480c      	ldr	r0, [pc, #48]	@ (8001fe4 <HAL_I2C_MspInit+0x8c>)
 8001fb2:	f002 fc1b 	bl	80047ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_I2C_MspInit+0x88>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <HAL_I2C_MspInit+0x88>)
 8001fc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_I2C_MspInit+0x88>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	@ 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020400 	.word	0x40020400

08001fe8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	@ 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a98      	ldr	r2, [pc, #608]	@ (8002258 <HAL_TIM_Base_MspInit+0x270>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11e      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x50>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ffe:	4b97      	ldr	r3, [pc, #604]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	4a96      	ldr	r2, [pc, #600]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6453      	str	r3, [r2, #68]	@ 0x44
 800200a:	4b94      	ldr	r3, [pc, #592]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2018      	movs	r0, #24
 800201c:	f002 fbaf 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002020:	2018      	movs	r0, #24
 8002022:	f002 fbc8 	bl	80047b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2019      	movs	r0, #25
 800202c:	f002 fba7 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002030:	2019      	movs	r0, #25
 8002032:	f002 fbc0 	bl	80047b6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002036:	e10a      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM3)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a88      	ldr	r2, [pc, #544]	@ (8002260 <HAL_TIM_Base_MspInit+0x278>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d116      	bne.n	8002070 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002046:	4b85      	ldr	r3, [pc, #532]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	4a84      	ldr	r2, [pc, #528]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6413      	str	r3, [r2, #64]	@ 0x40
 8002052:	4b82      	ldr	r3, [pc, #520]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	201d      	movs	r0, #29
 8002064:	f002 fb8b 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002068:	201d      	movs	r0, #29
 800206a:	f002 fba4 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 800206e:	e0ee      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM4)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7b      	ldr	r2, [pc, #492]	@ (8002264 <HAL_TIM_Base_MspInit+0x27c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d116      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
 800207e:	4b77      	ldr	r3, [pc, #476]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a76      	ldr	r2, [pc, #472]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b74      	ldr	r3, [pc, #464]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	201e      	movs	r0, #30
 800209c:	f002 fb6f 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020a0:	201e      	movs	r0, #30
 80020a2:	f002 fb88 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 80020a6:	e0d2      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM6)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002268 <HAL_TIM_Base_MspInit+0x280>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d116      	bne.n	80020e0 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4b69      	ldr	r3, [pc, #420]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a68      	ldr	r2, [pc, #416]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b66      	ldr	r3, [pc, #408]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2036      	movs	r0, #54	@ 0x36
 80020d4:	f002 fb53 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020d8:	2036      	movs	r0, #54	@ 0x36
 80020da:	f002 fb6c 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 80020de:	e0b6      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM7)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a61      	ldr	r2, [pc, #388]	@ (800226c <HAL_TIM_Base_MspInit+0x284>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d116      	bne.n	8002118 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	4b5b      	ldr	r3, [pc, #364]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	4a5a      	ldr	r2, [pc, #360]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fa:	4b58      	ldr	r3, [pc, #352]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	2037      	movs	r0, #55	@ 0x37
 800210c:	f002 fb37 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002110:	2037      	movs	r0, #55	@ 0x37
 8002112:	f002 fb50 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 8002116:	e09a      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM8)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a54      	ldr	r2, [pc, #336]	@ (8002270 <HAL_TIM_Base_MspInit+0x288>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d126      	bne.n	8002170 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	4b4d      	ldr	r3, [pc, #308]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	4a4c      	ldr	r2, [pc, #304]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6453      	str	r3, [r2, #68]	@ 0x44
 8002132:	4b4a      	ldr	r3, [pc, #296]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	202b      	movs	r0, #43	@ 0x2b
 8002144:	f002 fb1b 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002148:	202b      	movs	r0, #43	@ 0x2b
 800214a:	f002 fb34 	bl	80047b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	202c      	movs	r0, #44	@ 0x2c
 8002154:	f002 fb13 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002158:	202c      	movs	r0, #44	@ 0x2c
 800215a:	f002 fb2c 	bl	80047b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	202e      	movs	r0, #46	@ 0x2e
 8002164:	f002 fb0b 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002168:	202e      	movs	r0, #46	@ 0x2e
 800216a:	f002 fb24 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 800216e:	e06e      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM9)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <HAL_TIM_Base_MspInit+0x28c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d116      	bne.n	80021a8 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	4b37      	ldr	r3, [pc, #220]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	4a36      	ldr	r2, [pc, #216]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6453      	str	r3, [r2, #68]	@ 0x44
 800218a:	4b34      	ldr	r3, [pc, #208]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2018      	movs	r0, #24
 800219c:	f002 faef 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80021a0:	2018      	movs	r0, #24
 80021a2:	f002 fb08 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 80021a6:	e052      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM10)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <HAL_TIM_Base_MspInit+0x290>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d116      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b29      	ldr	r3, [pc, #164]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	4a28      	ldr	r2, [pc, #160]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c2:	4b26      	ldr	r3, [pc, #152]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2019      	movs	r0, #25
 80021d4:	f002 fad3 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021d8:	2019      	movs	r0, #25
 80021da:	f002 faec 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 80021de:	e036      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM12)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a25      	ldr	r2, [pc, #148]	@ (800227c <HAL_TIM_Base_MspInit+0x294>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d116      	bne.n	8002218 <HAL_TIM_Base_MspInit+0x230>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	4a1a      	ldr	r2, [pc, #104]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80021f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fa:	4b18      	ldr	r3, [pc, #96]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	202b      	movs	r0, #43	@ 0x2b
 800220c:	f002 fab7 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002210:	202b      	movs	r0, #43	@ 0x2b
 8002212:	f002 fad0 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 8002216:	e01a      	b.n	800224e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM13)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a18      	ldr	r2, [pc, #96]	@ (8002280 <HAL_TIM_Base_MspInit+0x298>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d115      	bne.n	800224e <HAL_TIM_Base_MspInit+0x266>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	4a0c      	ldr	r2, [pc, #48]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 800222c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_TIM_Base_MspInit+0x274>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	202c      	movs	r0, #44	@ 0x2c
 8002244:	f002 fa9b 	bl	800477e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002248:	202c      	movs	r0, #44	@ 0x2c
 800224a:	f002 fab4 	bl	80047b6 <HAL_NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3730      	adds	r7, #48	@ 0x30
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000
 800225c:	40023800 	.word	0x40023800
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800
 8002268:	40001000 	.word	0x40001000
 800226c:	40001400 	.word	0x40001400
 8002270:	40010400 	.word	0x40010400
 8002274:	40014000 	.word	0x40014000
 8002278:	40014400 	.word	0x40014400
 800227c:	40001800 	.word	0x40001800
 8002280:	40001c00 	.word	0x40001c00

08002284 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b096      	sub	sp, #88	@ 0x58
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a9b      	ldr	r2, [pc, #620]	@ (8002510 <HAL_UART_MspInit+0x28c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d12c      	bne.n	8002300 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022aa:	4b9a      	ldr	r3, [pc, #616]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	4a99      	ldr	r2, [pc, #612]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80022b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b6:	4b97      	ldr	r3, [pc, #604]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022be:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c6:	4b93      	ldr	r3, [pc, #588]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a92      	ldr	r2, [pc, #584]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b90      	ldr	r3, [pc, #576]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022de:	2303      	movs	r3, #3
 80022e0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022ee:	2308      	movs	r3, #8
 80022f0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80022f6:	4619      	mov	r1, r3
 80022f8:	4887      	ldr	r0, [pc, #540]	@ (8002518 <HAL_UART_MspInit+0x294>)
 80022fa:	f002 fa77 	bl	80047ec <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80022fe:	e14c      	b.n	800259a <HAL_UART_MspInit+0x316>
  else if(huart->Instance==UART5)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a85      	ldr	r2, [pc, #532]	@ (800251c <HAL_UART_MspInit+0x298>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d14b      	bne.n	80023a2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800230e:	4b81      	ldr	r3, [pc, #516]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a80      	ldr	r2, [pc, #512]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b7e      	ldr	r3, [pc, #504]	@ (8002514 <HAL_UART_MspInit+0x290>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002322:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
 800232a:	4b7a      	ldr	r3, [pc, #488]	@ (8002514 <HAL_UART_MspInit+0x290>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a79      	ldr	r2, [pc, #484]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b77      	ldr	r3, [pc, #476]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	633b      	str	r3, [r7, #48]	@ 0x30
 8002346:	4b73      	ldr	r3, [pc, #460]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a72      	ldr	r2, [pc, #456]	@ (8002514 <HAL_UART_MspInit+0x290>)
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b70      	ldr	r3, [pc, #448]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
 800235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800235e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002370:	2308      	movs	r3, #8
 8002372:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002378:	4619      	mov	r1, r3
 800237a:	4869      	ldr	r0, [pc, #420]	@ (8002520 <HAL_UART_MspInit+0x29c>)
 800237c:	f002 fa36 	bl	80047ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002380:	2304      	movs	r3, #4
 8002382:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002390:	2308      	movs	r3, #8
 8002392:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002394:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002398:	4619      	mov	r1, r3
 800239a:	4862      	ldr	r0, [pc, #392]	@ (8002524 <HAL_UART_MspInit+0x2a0>)
 800239c:	f002 fa26 	bl	80047ec <HAL_GPIO_Init>
}
 80023a0:	e0fb      	b.n	800259a <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a60      	ldr	r2, [pc, #384]	@ (8002528 <HAL_UART_MspInit+0x2a4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d12d      	bne.n	8002408 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023b0:	4b58      	ldr	r3, [pc, #352]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	4a57      	ldr	r2, [pc, #348]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80023bc:	4b55      	ldr	r3, [pc, #340]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80023be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023cc:	4b51      	ldr	r3, [pc, #324]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	4a50      	ldr	r2, [pc, #320]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023e8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f6:	2307      	movs	r3, #7
 80023f8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023fe:	4619      	mov	r1, r3
 8002400:	4845      	ldr	r0, [pc, #276]	@ (8002518 <HAL_UART_MspInit+0x294>)
 8002402:	f002 f9f3 	bl	80047ec <HAL_GPIO_Init>
}
 8002406:	e0c8      	b.n	800259a <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a47      	ldr	r2, [pc, #284]	@ (800252c <HAL_UART_MspInit+0x2a8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d12c      	bne.n	800246c <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
 8002416:	4b3f      	ldr	r3, [pc, #252]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a3e      	ldr	r2, [pc, #248]	@ (8002514 <HAL_UART_MspInit+0x290>)
 800241c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b3c      	ldr	r3, [pc, #240]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	4b38      	ldr	r3, [pc, #224]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a37      	ldr	r2, [pc, #220]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800244a:	230c      	movs	r3, #12
 800244c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002456:	2303      	movs	r3, #3
 8002458:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800245a:	2307      	movs	r3, #7
 800245c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002462:	4619      	mov	r1, r3
 8002464:	482c      	ldr	r0, [pc, #176]	@ (8002518 <HAL_UART_MspInit+0x294>)
 8002466:	f002 f9c1 	bl	80047ec <HAL_GPIO_Init>
}
 800246a:	e096      	b.n	800259a <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART3)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2f      	ldr	r2, [pc, #188]	@ (8002530 <HAL_UART_MspInit+0x2ac>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d160      	bne.n	8002538 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <HAL_UART_MspInit+0x290>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a25      	ldr	r2, [pc, #148]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_UART_MspInit+0x290>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_UART_MspInit+0x290>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	4a17      	ldr	r2, [pc, #92]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_UART_MspInit+0x290>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024ca:	2320      	movs	r3, #32
 80024cc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d6:	2303      	movs	r3, #3
 80024d8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024da:	2307      	movs	r3, #7
 80024dc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024e2:	4619      	mov	r1, r3
 80024e4:	480e      	ldr	r0, [pc, #56]	@ (8002520 <HAL_UART_MspInit+0x29c>)
 80024e6:	f002 f981 	bl	80047ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024ee:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024fc:	2307      	movs	r3, #7
 80024fe:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002504:	4619      	mov	r1, r3
 8002506:	480b      	ldr	r0, [pc, #44]	@ (8002534 <HAL_UART_MspInit+0x2b0>)
 8002508:	f002 f970 	bl	80047ec <HAL_GPIO_Init>
}
 800250c:	e045      	b.n	800259a <HAL_UART_MspInit+0x316>
 800250e:	bf00      	nop
 8002510:	40004c00 	.word	0x40004c00
 8002514:	40023800 	.word	0x40023800
 8002518:	40020000 	.word	0x40020000
 800251c:	40005000 	.word	0x40005000
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	40011000 	.word	0x40011000
 800252c:	40004400 	.word	0x40004400
 8002530:	40004800 	.word	0x40004800
 8002534:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a19      	ldr	r2, [pc, #100]	@ (80025a4 <HAL_UART_MspInit+0x320>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12b      	bne.n	800259a <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <HAL_UART_MspInit+0x324>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <HAL_UART_MspInit+0x324>)
 800254c:	f043 0320 	orr.w	r3, r3, #32
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44
 8002552:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <HAL_UART_MspInit+0x324>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_UART_MspInit+0x324>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <HAL_UART_MspInit+0x324>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <HAL_UART_MspInit+0x324>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800257a:	23c0      	movs	r3, #192	@ 0xc0
 800257c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800258a:	2308      	movs	r3, #8
 800258c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002592:	4619      	mov	r1, r3
 8002594:	4805      	ldr	r0, [pc, #20]	@ (80025ac <HAL_UART_MspInit+0x328>)
 8002596:	f002 f929 	bl	80047ec <HAL_GPIO_Init>
}
 800259a:	bf00      	nop
 800259c:	3758      	adds	r7, #88	@ 0x58
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40011400 	.word	0x40011400
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020800 	.word	0x40020800

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <NMI_Handler+0x4>

080025b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <MemManage_Handler+0x4>

080025c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002606:	f001 ff9b 	bl	8004540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002614:	4803      	ldr	r0, [pc, #12]	@ (8002624 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002616:	f004 f893 	bl	8006740 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800261a:	4803      	ldr	r0, [pc, #12]	@ (8002628 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800261c:	f004 f890 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200004d4 	.word	0x200004d4
 8002628:	20000684 	.word	0x20000684

0800262c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002630:	4803      	ldr	r0, [pc, #12]	@ (8002640 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002632:	f004 f885 	bl	8006740 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002636:	4803      	ldr	r0, [pc, #12]	@ (8002644 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002638:	f004 f882 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200004d4 	.word	0x200004d4
 8002644:	200006cc 	.word	0x200006cc

08002648 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <TIM3_IRQHandler+0x10>)
 800264e:	f004 f877 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000051c 	.word	0x2000051c

0800265c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <TIM4_IRQHandler+0x10>)
 8002662:	f004 f86d 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000564 	.word	0x20000564

08002670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002674:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002678:	f002 fa98 	bl	8004bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}

08002680 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002684:	4803      	ldr	r0, [pc, #12]	@ (8002694 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002686:	f004 f85b 	bl	8006740 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800268a:	4803      	ldr	r0, [pc, #12]	@ (8002698 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800268c:	f004 f858 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	2000063c 	.word	0x2000063c
 8002698:	20000714 	.word	0x20000714

0800269c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80026a0:	4803      	ldr	r0, [pc, #12]	@ (80026b0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80026a2:	f004 f84d 	bl	8006740 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80026a6:	4803      	ldr	r0, [pc, #12]	@ (80026b4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80026a8:	f004 f84a 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000063c 	.word	0x2000063c
 80026b4:	2000075c 	.word	0x2000075c

080026b8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80026bc:	4802      	ldr	r0, [pc, #8]	@ (80026c8 <TIM8_CC_IRQHandler+0x10>)
 80026be:	f004 f83f 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000063c 	.word	0x2000063c

080026cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <TIM6_DAC_IRQHandler+0x10>)
 80026d2:	f004 f835 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200005ac 	.word	0x200005ac

080026e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <TIM7_IRQHandler+0x10>)
 80026e6:	f004 f82b 	bl	8006740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200005f4 	.word	0x200005f4

080026f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026fc:	4a14      	ldr	r2, [pc, #80]	@ (8002750 <_sbrk+0x5c>)
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <_sbrk+0x60>)
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <_sbrk+0x64>)
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <_sbrk+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d207      	bcs.n	8002734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002724:	f005 fbd0 	bl	8007ec8 <__errno>
 8002728:	4603      	mov	r3, r0
 800272a:	220c      	movs	r2, #12
 800272c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e009      	b.n	8002748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002734:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <_sbrk+0x64>)
 8002744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20020000 	.word	0x20020000
 8002754:	00000400 	.word	0x00000400
 8002758:	20000968 	.word	0x20000968
 800275c:	20000ac8 	.word	0x20000ac8

08002760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <SystemInit+0x20>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	4a05      	ldr	r2, [pc, #20]	@ (8002780 <SystemInit+0x20>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <tmc2209_setup>:
#include "tmc2209.h"


void tmc2209_setup(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_  = serial_baud_rate;
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]
  stepper_driver->serial_address_    = serial_address;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	79fa      	ldrb	r2, [r7, #7]
 800279c:	711a      	strb	r2, [r3, #4]
  stepper_driver->cool_step_enabled_ = false;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

  tmc2209_initialize(stepper_driver, serial_baud_rate, serial_address);
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f9b2 	bl	8002b16 <tmc2209_initialize>
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <map>:

// unidirectional methods

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	1a8a      	subs	r2, r1, r2
 80027d4:	fb03 f202 	mul.w	r2, r3, r2
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1acb      	subs	r3, r1, r3
 80027de:	fb92 f2f3 	sdiv	r2, r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	4413      	add	r3, r2
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <constrain>:

long constrain(long x, long a, long b)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  if (x < a)
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	da01      	bge.n	800280a <constrain+0x18>
  {
    return a;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	e006      	b.n	8002818 <constrain+0x26>
  }
  else if (b < x)
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	429a      	cmp	r2, r3
 8002810:	da01      	bge.n	8002816 <constrain+0x24>
  {
    return b;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	e000      	b.n	8002818 <constrain+0x26>
  }
  else
  {
    return x;
 8002816:	68fb      	ldr	r3, [r7, #12]
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <set_micro_steps_per_step>:

void set_micro_steps_per_step(tmc2209_stepper_driver_t *stepper_driver, uint16_t microsteps_per_step)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
  uint16_t microsteps_per_step_shifted = constrain(microsteps_per_step, MICROSTEPS_PER_STEP_MIN, MICROSTEPS_PER_STEP_MAX);
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ffda 	bl	80027f2 <constrain>
 800283e:	4603      	mov	r3, r0
 8002840:	81fb      	strh	r3, [r7, #14]
  microsteps_per_step_shifted          = microsteps_per_step >> 1;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	81fb      	strh	r3, [r7, #14]
  uint16_t exponent                    = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 800284c:	e005      	b.n	800285a <set_micro_steps_per_step+0x36>
  {
    microsteps_per_step_shifted = microsteps_per_step_shifted >> 1;
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	81fb      	strh	r3, [r7, #14]
    ++exponent;
 8002854:	89bb      	ldrh	r3, [r7, #12]
 8002856:	3301      	adds	r3, #1
 8002858:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f6      	bne.n	800284e <set_micro_steps_per_step+0x2a>
  }
  set_micro_steps_per_step_power_of_two(stepper_driver, exponent);
 8002860:	89bb      	ldrh	r3, [r7, #12]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f804 	bl	8002874 <set_micro_steps_per_step_power_of_two>
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <set_micro_steps_per_step_power_of_two>:

void set_micro_steps_per_step_power_of_two(tmc2209_stepper_driver_t *stepper_driver, uint8_t exponent)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
  switch (exponent)
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	2b07      	cmp	r3, #7
 8002884:	d85a      	bhi.n	800293c <set_micro_steps_per_step_power_of_two+0xc8>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <set_micro_steps_per_step_power_of_two+0x18>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	080028ad 	.word	0x080028ad
 8002890:	080028bf 	.word	0x080028bf
 8002894:	080028d1 	.word	0x080028d1
 8002898:	080028e3 	.word	0x080028e3
 800289c:	080028f5 	.word	0x080028f5
 80028a0:	08002907 	.word	0x08002907
 80028a4:	08002919 	.word	0x08002919
 80028a8:	0800292b 	.word	0x0800292b
  {
    case 0: {
      stepper_driver->chopper_config_.mres = MRES_001;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80028b2:	2108      	movs	r1, #8
 80028b4:	f361 0303 	bfi	r3, r1, #0, #4
 80028b8:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80028bc:	e046      	b.n	800294c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 1: {
      stepper_driver->chopper_config_.mres = MRES_002;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80028c4:	2107      	movs	r1, #7
 80028c6:	f361 0303 	bfi	r3, r1, #0, #4
 80028ca:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80028ce:	e03d      	b.n	800294c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 2: {
      stepper_driver->chopper_config_.mres = MRES_004;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80028d6:	2106      	movs	r1, #6
 80028d8:	f361 0303 	bfi	r3, r1, #0, #4
 80028dc:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80028e0:	e034      	b.n	800294c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 3: {
      stepper_driver->chopper_config_.mres = MRES_008;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80028e8:	2105      	movs	r1, #5
 80028ea:	f361 0303 	bfi	r3, r1, #0, #4
 80028ee:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80028f2:	e02b      	b.n	800294c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 4: {
      stepper_driver->chopper_config_.mres = MRES_016;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80028fa:	2104      	movs	r1, #4
 80028fc:	f361 0303 	bfi	r3, r1, #0, #4
 8002900:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002904:	e022      	b.n	800294c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 5: {
      stepper_driver->chopper_config_.mres = MRES_032;
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800290c:	2103      	movs	r1, #3
 800290e:	f361 0303 	bfi	r3, r1, #0, #4
 8002912:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002916:	e019      	b.n	800294c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 6: {
      stepper_driver->chopper_config_.mres = MRES_064;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800291e:	2102      	movs	r1, #2
 8002920:	f361 0303 	bfi	r3, r1, #0, #4
 8002924:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002928:	e010      	b.n	800294c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 7: {
      stepper_driver->chopper_config_.mres = MRES_128;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002930:	2101      	movs	r1, #1
 8002932:	f361 0303 	bfi	r3, r1, #0, #4
 8002936:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800293a:	e007      	b.n	800294c <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 8:
    default: {
      stepper_driver->chopper_config_.mres = MRES_256;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002942:	f023 030f 	bic.w	r3, r3, #15
 8002946:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800294a:	bf00      	nop
    }
  }
  write_stored_chopper_config(stepper_driver);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fb34 	bl	8002fba <write_stored_chopper_config>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop

0800295c <set_all_current_percent_values>:

void set_all_current_percent_values(tmc2209_stepper_driver_t *stepper_driver,
                                    uint8_t                   run_current_percent,
                                    uint8_t                   hold_current_percent,
                                    uint8_t                   hold_delay_percent)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	70fb      	strb	r3, [r7, #3]
 800296e:	460b      	mov	r3, r1
 8002970:	70bb      	strb	r3, [r7, #2]
 8002972:	4613      	mov	r3, r2
 8002974:	707b      	strb	r3, [r7, #1]
  uint8_t run_current  = percent_to_current_settings(stepper_driver, run_current_percent);
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 faa2 	bl	8002ec4 <percent_to_current_settings>
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_current = percent_to_current_settings(stepper_driver, hold_current_percent);
 8002984:	78bb      	ldrb	r3, [r7, #2]
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa9b 	bl	8002ec4 <percent_to_current_settings>
 800298e:	4603      	mov	r3, r0
 8002990:	73bb      	strb	r3, [r7, #14]
  uint8_t hold_delay   = percent_to_hold_delay_setting(stepper_driver, hold_delay_percent);
 8002992:	787b      	ldrb	r3, [r7, #1]
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fab1 	bl	8002efe <percent_to_hold_delay_setting>
 800299c:	4603      	mov	r3, r0
 800299e:	737b      	strb	r3, [r7, #13]

  stepper_driver->driver_current_.irun       = run_current;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	b2d9      	uxtb	r1, r3
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80029ae:	f361 0304 	bfi	r3, r1, #0, #5
 80029b2:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold      = hold_current;
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	b2d9      	uxtb	r1, r3
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80029c4:	f361 0304 	bfi	r3, r1, #0, #5
 80029c8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.iholddelay = hold_delay;
 80029cc:	7b7b      	ldrb	r3, [r7, #13]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	b2d9      	uxtb	r1, r3
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80029da:	f361 0303 	bfi	r3, r1, #0, #4
 80029de:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  write_stored_driver_current(stepper_driver);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fab7 	bl	8002f56 <write_stored_driver_current>
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <enable_inverse_motor_direction>:

void enable_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 1;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa96 	bl	8002f38 <write_stored_global_config>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <disable_inverse_motor_direction>:

void disable_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 0;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002a22:	f023 0308 	bic.w	r3, r3, #8
 8002a26:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fa84 	bl	8002f38 <write_stored_global_config>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <enable_automatic_current_scaling>:
  stepper_driver->pwm_config_.freewheel = mode;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_current_scaling(tmc2209_stepper_driver_t *stepper_driver)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fac2 	bl	8002fd8 <write_stored_pwm_config>
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <enable_automatic_gradient_adaptation>:
  stepper_driver->pwm_config_.pwm_freq = pwm_freq;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_gradient_adaptation(tmc2209_stepper_driver_t *stepper_driver)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8002a6a:	f043 0308 	orr.w	r3, r3, #8
 8002a6e:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fab0 	bl	8002fd8 <write_stored_pwm_config>
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <enable_cool_step>:
{
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, stall_guard_threshold);
}

void enable_cool_step(tmc2209_stepper_driver_t *stepper_driver, uint8_t lower_threshold, uint8_t upper_threshold)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	70fb      	strb	r3, [r7, #3]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	70bb      	strb	r3, [r7, #2]
  lower_threshold                    = constrain(lower_threshold, SEMIN_MIN, SEMIN_MAX);
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	220f      	movs	r2, #15
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff feab 	bl	80027f2 <constrain>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	70fb      	strb	r3, [r7, #3]
  stepper_driver->cool_config_.semin = lower_threshold;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	b2d9      	uxtb	r1, r3
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 8002aae:	f361 0303 	bfi	r3, r1, #0, #4
 8002ab2:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
  upper_threshold                    = constrain(upper_threshold, SEMAX_MIN, SEMAX_MAX);
 8002ab6:	78bb      	ldrb	r3, [r7, #2]
 8002ab8:	220f      	movs	r2, #15
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fe98 	bl	80027f2 <constrain>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	70bb      	strb	r3, [r7, #2]
  stepper_driver->cool_config_.semax = upper_threshold;
 8002ac6:	78bb      	ldrb	r3, [r7, #2]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	b2d9      	uxtb	r1, r3
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002ad4:	f361 0303 	bfi	r3, r1, #0, #4
 8002ad8:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2142      	movs	r1, #66	@ 0x42
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 faee 	bl	80030c6 <tmc2209_write>
  stepper_driver->cool_step_enabled_ = true;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <get_stall_guard_result>:
{
  return tmc2209_read(stepper_driver, ADDRESS_TSTEP);
}

uint16_t get_stall_guard_result(tmc2209_stepper_driver_t *stepper_driver)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  return tmc2209_read(stepper_driver, ADDRESS_SG_RESULT);
 8002b02:	2141      	movs	r1, #65	@ 0x41
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fb3c 	bl	8003182 <tmc2209_read>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	b29b      	uxth	r3, r3
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <tmc2209_initialize>:
{
  return tmc2209_read(stepper_driver, ADDRESS_MSCNT);
}

void tmc2209_initialize(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_ = serial_baud_rate;
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]

  set_operation_mode_to_serial(stepper_driver, serial_address);
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f813 	bl	8002b5a <set_operation_mode_to_serial>
  set_registers_to_default(stepper_driver);
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f83f 	bl	8002bb8 <set_registers_to_default>

  minimize_motor_current(stepper_driver);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f8c2 	bl	8002cc4 <minimize_motor_current>
  tmc2209_disable(stepper_driver);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 faa6 	bl	8003092 <tmc2209_disable>
  enable_automatic_current_scaling(stepper_driver);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff ff76 	bl	8002a38 <enable_automatic_current_scaling>
  enable_automatic_gradient_adaptation(stepper_driver);
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff ff85 	bl	8002a5c <enable_automatic_gradient_adaptation>
//  disable_automatic_current_scaling(stepper_driver);
//  disable_automatic_gradient_adaptation(stepper_driver);
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <set_operation_mode_to_serial>:

void set_operation_mode_to_serial(tmc2209_stepper_driver_t *stepper_driver, tmc2209_serial_address_t serial_address)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
  stepper_driver->serial_address_ = serial_address;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	711a      	strb	r2, [r3, #4]

  stepper_driver->global_config_.bytes            = 0;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	66da      	str	r2, [r3, #108]	@ 0x6c
  stepper_driver->global_config_.i_scale_analog   = 1;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.pdn_disable      = 1;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b8a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.mstep_reg_select = 1;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b98:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.multistep_filt   = 1;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

  write_stored_global_config(stepper_driver);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f9c4 	bl	8002f38 <write_stored_global_config>
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <set_registers_to_default>:

void set_registers_to_default(tmc2209_stepper_driver_t *stepper_driver)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.bytes      = 0;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	669a      	str	r2, [r3, #104]	@ 0x68
  stepper_driver->driver_current_.ihold      = IHOLD_DEFAULT;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002bcc:	2110      	movs	r1, #16
 8002bce:	f361 0304 	bfi	r3, r1, #0, #5
 8002bd2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.irun       = IRUN_DEFAULT;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002bdc:	f043 031f 	orr.w	r3, r3, #31
 8002be0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002bea:	2101      	movs	r1, #1
 8002bec:	f361 0303 	bfi	r3, r1, #0, #4
 8002bf0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2110      	movs	r1, #16
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fa62 	bl	80030c6 <tmc2209_write>

  stepper_driver->chopper_config_.bytes  = CHOPPER_CONFIG_DEFAULT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2d      	ldr	r2, [pc, #180]	@ (8002cbc <set_registers_to_default+0x104>)
 8002c06:	659a      	str	r2, [r3, #88]	@ 0x58
  stepper_driver->chopper_config_.tbl    = TBL_DEFAULT;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	f361 33d0 	bfi	r3, r1, #15, #2
 8002c12:	6593      	str	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hend   = HEND_DEFAULT;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 8002c1a:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 8002c1e:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hstart = HSTART_DEFAULT;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002c28:	2105      	movs	r1, #5
 8002c2a:	f361 1306 	bfi	r3, r1, #4, #3
 8002c2e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.toff   = TOFF_DEFAULT;
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002c38:	2103      	movs	r1, #3
 8002c3a:	f361 0303 	bfi	r3, r1, #0, #4
 8002c3e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	461a      	mov	r2, r3
 8002c48:	216c      	movs	r1, #108	@ 0x6c
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa3b 	bl	80030c6 <tmc2209_write>

  stepper_driver->pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc0 <set_registers_to_default+0x108>)
 8002c54:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2170      	movs	r1, #112	@ 0x70
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa31 	bl	80030c6 <tmc2209_write>

  stepper_driver->cool_config_.bytes = COOLCONF_DEFAULT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	661a      	str	r2, [r3, #96]	@ 0x60
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2142      	movs	r1, #66	@ 0x42
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa27 	bl	80030c6 <tmc2209_write>

  tmc2209_write(stepper_driver, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002c78:	2214      	movs	r2, #20
 8002c7a:	2111      	movs	r1, #17
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fa22 	bl	80030c6 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2113      	movs	r1, #19
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fa1d 	bl	80030c6 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2122      	movs	r1, #34	@ 0x22
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa18 	bl	80030c6 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2114      	movs	r1, #20
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa13 	bl	80030c6 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2140      	movs	r1, #64	@ 0x40
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fa0e 	bl	80030c6 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2142      	movs	r1, #66	@ 0x42
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa09 	bl	80030c6 <tmc2209_write>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	10000053 	.word	0x10000053
 8002cc0:	c10d0024 	.word	0xc10d0024

08002cc4 <minimize_motor_current>:

  return global_config.pdn_disable;
}

void minimize_motor_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.irun  = CURRENT_SETTING_MIN;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002cd2:	f023 031f 	bic.w	r3, r3, #31
 8002cd6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold = CURRENT_SETTING_MIN;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002ce0:	f023 031f 	bic.w	r3, r3, #31
 8002ce4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  write_stored_driver_current(stepper_driver);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f934 	bl	8002f56 <write_stored_driver_current>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <reverse_data>:

uint32_t reverse_data(uint32_t data)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  uint8_t  right_shift;
  uint8_t  left_shift;
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002d02:	2300      	movs	r3, #0
 8002d04:	72fb      	strb	r3, [r7, #11]
 8002d06:	e016      	b.n	8002d36 <reverse_data+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	f1c3 0303 	rsb	r3, r3, #3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	72bb      	strb	r3, [r7, #10]
    left_shift  = i * BITS_PER_BYTE;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8002d1a:	7abb      	ldrb	r3, [r7, #10]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	7a7b      	ldrb	r3, [r7, #9]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	3301      	adds	r3, #1
 8002d34:	72fb      	strb	r3, [r7, #11]
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d9e5      	bls.n	8002d08 <reverse_data+0x12>
  }
  return reversed_data;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <calculate_crc_write>:

uint8_t calculate_crc_write(write_read_reply_datagram_t *datagram, uint8_t datagram_size)
{
 8002d4a:	b4f0      	push	{r4, r5, r6, r7}
 8002d4c:	b088      	sub	sp, #32
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	70f9      	strb	r1, [r7, #3]
  uint8_t crc = 0;
 8002d54:	2100      	movs	r1, #0
 8002d56:	77f9      	strb	r1, [r7, #31]
  uint8_t byte;
  uint8_t datagram_bytes[7];
  for (int i = 0; i < datagram_size - 1; i++)
 8002d58:	2100      	movs	r1, #0
 8002d5a:	61b9      	str	r1, [r7, #24]
 8002d5c:	e01c      	b.n	8002d98 <calculate_crc_write+0x4e>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d64:	69bc      	ldr	r4, [r7, #24]
 8002d66:	00e4      	lsls	r4, r4, #3
 8002d68:	f1c4 0620 	rsb	r6, r4, #32
 8002d6c:	f1a4 0520 	sub.w	r5, r4, #32
 8002d70:	fa20 f204 	lsr.w	r2, r0, r4
 8002d74:	fa01 f606 	lsl.w	r6, r1, r6
 8002d78:	4332      	orrs	r2, r6
 8002d7a:	fa21 f505 	lsr.w	r5, r1, r5
 8002d7e:	432a      	orrs	r2, r5
 8002d80:	fa21 f304 	lsr.w	r3, r1, r4
 8002d84:	b2d4      	uxtb	r4, r2
 8002d86:	f107 000c 	add.w	r0, r7, #12
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	4401      	add	r1, r0
 8002d8e:	4620      	mov	r0, r4
 8002d90:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < datagram_size - 1; i++)
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	3101      	adds	r1, #1
 8002d96:	61b9      	str	r1, [r7, #24]
 8002d98:	78f9      	ldrb	r1, [r7, #3]
 8002d9a:	3901      	subs	r1, #1
 8002d9c:	69b8      	ldr	r0, [r7, #24]
 8002d9e:	4288      	cmp	r0, r1
 8002da0:	dbdd      	blt.n	8002d5e <calculate_crc_write+0x14>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]
 8002da6:	e029      	b.n	8002dfc <calculate_crc_write+0xb2>
  {
    byte = datagram_bytes[i];
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	3320      	adds	r3, #32
 8002dac:	443b      	add	r3, r7
 8002dae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002db2:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002db4:	2300      	movs	r3, #0
 8002db6:	75bb      	strb	r3, [r7, #22]
 8002db8:	e01a      	b.n	8002df0 <calculate_crc_write+0xa6>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	09db      	lsrs	r3, r3, #7
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	7fbb      	ldrb	r3, [r7, #30]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d008      	beq.n	8002dde <calculate_crc_write+0x94>
      {
        crc = (crc << 1) ^ 0x07;
 8002dcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	f083 0307 	eor.w	r3, r3, #7
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e002      	b.n	8002de4 <calculate_crc_write+0x9a>
      }
      else
      {
        crc = crc << 1;
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]
      }
      byte = byte >> 1;
 8002de4:	7fbb      	ldrb	r3, [r7, #30]
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002dea:	7dbb      	ldrb	r3, [r7, #22]
 8002dec:	3301      	adds	r3, #1
 8002dee:	75bb      	strb	r3, [r7, #22]
 8002df0:	7dbb      	ldrb	r3, [r7, #22]
 8002df2:	2b07      	cmp	r3, #7
 8002df4:	d9e1      	bls.n	8002dba <calculate_crc_write+0x70>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
 8002dfc:	7dfa      	ldrb	r2, [r7, #23]
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	429a      	cmp	r2, r3
 8002e04:	dbd0      	blt.n	8002da8 <calculate_crc_write+0x5e>
    }
  }
  return crc;
 8002e06:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bcf0      	pop	{r4, r5, r6, r7}
 8002e10:	4770      	bx	lr

08002e12 <calculate_crc_read>:

uint8_t calculate_crc_read(read_request_datagram_t *datagram, uint8_t datagram_size)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b087      	sub	sp, #28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  uint8_t datagram_bytes[4];
  for (int i = 0; i < (datagram_size - 1); i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	e00f      	b.n	8002e48 <calculate_crc_read+0x36>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	b2d9      	uxtb	r1, r3
 8002e36:	f107 0208 	add.w	r2, r7, #8
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	460a      	mov	r2, r1
 8002e40:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < (datagram_size - 1); i++)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	3301      	adds	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dbea      	blt.n	8002e28 <calculate_crc_read+0x16>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	e029      	b.n	8002eac <calculate_crc_read+0x9a>
  {
    byte = datagram_bytes[i];
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	3318      	adds	r3, #24
 8002e5c:	443b      	add	r3, r7
 8002e5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e62:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002e64:	2300      	movs	r3, #0
 8002e66:	73bb      	strb	r3, [r7, #14]
 8002e68:	e01a      	b.n	8002ea0 <calculate_crc_read+0x8e>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	09db      	lsrs	r3, r3, #7
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	7dbb      	ldrb	r3, [r7, #22]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d008      	beq.n	8002e8e <calculate_crc_read+0x7c>
      {
        crc = (crc << 1) ^ 0x07;
 8002e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	f083 0307 	eor.w	r3, r3, #7
 8002e88:	b25b      	sxtb	r3, r3
 8002e8a:	75fb      	strb	r3, [r7, #23]
 8002e8c:	e002      	b.n	8002e94 <calculate_crc_read+0x82>
      }
      else
      {
        crc = crc << 1;
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 8002e94:	7dbb      	ldrb	r3, [r7, #22]
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002e9a:	7bbb      	ldrb	r3, [r7, #14]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	73bb      	strb	r3, [r7, #14]
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	2b07      	cmp	r3, #7
 8002ea4:	d9e1      	bls.n	8002e6a <calculate_crc_read+0x58>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	7bfa      	ldrb	r2, [r7, #15]
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	dbd0      	blt.n	8002e58 <calculate_crc_read+0x46>
    }
  }
  return crc;
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <percent_to_current_settings>:

uint8_t percent_to_current_settings(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	2264      	movs	r2, #100	@ 0x64
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fc8b 	bl	80027f2 <constrain>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint8_t current_setting     = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
 8002ee0:	7bf8      	ldrb	r0, [r7, #15]
 8002ee2:	231f      	movs	r3, #31
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2264      	movs	r2, #100	@ 0x64
 8002eea:	2100      	movs	r1, #0
 8002eec:	f7ff fc65 	bl	80027ba <map>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73bb      	strb	r3, [r7, #14]
  return current_setting;
 8002ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <percent_to_hold_delay_setting>:
  uint8_t percent = map(current_setting, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

uint8_t percent_to_hold_delay_setting(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	2264      	movs	r2, #100	@ 0x64
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fc6e 	bl	80027f2 <constrain>
 8002f16:	4603      	mov	r3, r0
 8002f18:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_delay_setting  = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
 8002f1a:	7bf8      	ldrb	r0, [r7, #15]
 8002f1c:	230f      	movs	r3, #15
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2300      	movs	r3, #0
 8002f22:	2264      	movs	r2, #100	@ 0x64
 8002f24:	2100      	movs	r1, #0
 8002f26:	f7ff fc48 	bl	80027ba <map>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73bb      	strb	r3, [r7, #14]
  return hold_delay_setting;
 8002f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <write_stored_global_config>:
  uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

void write_stored_global_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_GCONF, stepper_driver->global_config_.bytes);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f44:	461a      	mov	r2, r3
 8002f46:	2100      	movs	r1, #0
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8bc 	bl	80030c6 <tmc2209_write>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <write_stored_driver_current>:
{
  return tmc2209_read(stepper_driver, ADDRESS_GCONF);
}

void write_stored_driver_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f62:	461a      	mov	r2, r3
 8002f64:	2110      	movs	r1, #16
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8ad 	bl	80030c6 <tmc2209_write>

  if (stepper_driver->driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8002f72:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b13      	cmp	r3, #19
 8002f7a:	d907      	bls.n	8002f8c <write_stored_driver_current+0x36>
  {
    stepper_driver->cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f86:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
 8002f8a:	e006      	b.n	8002f9a <write_stored_driver_current+0x44>
  }
  else
  {
    stepper_driver->cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f96:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  }
  if (stepper_driver->cool_step_enabled_)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <write_stored_driver_current+0x5c>
  {
    tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2142      	movs	r1, #66	@ 0x42
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f88a 	bl	80030c6 <tmc2209_write>
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <write_stored_chopper_config>:

void write_stored_chopper_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	216c      	movs	r1, #108	@ 0x6c
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f87b 	bl	80030c6 <tmc2209_write>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <write_stored_pwm_config>:
{
  return tmc2209_read(stepper_driver, ADDRESS_CHOPCONF);
}

void write_stored_pwm_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2170      	movs	r1, #112	@ 0x70
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f86c 	bl	80030c6 <tmc2209_write>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <tmc2209_set_uart>:

// /* Private function code -----------------------------------------------------*/

extern UART_HandleTypeDef huart1;
void tmc2209_set_uart(tmc2209_stepper_driver_t *stepper_driver, UART_HandleTypeDef uart)
{
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	f107 0014 	add.w	r0, r7, #20
 8003004:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	stepper_driver->uart_ = uart;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3308      	adds	r3, #8
 800300c:	f107 0114 	add.w	r1, r7, #20
 8003010:	2248      	movs	r2, #72	@ 0x48
 8003012:	4618      	mov	r0, r3
 8003014:	f004 ff84 	bl	8007f20 <memcpy>
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003022:	b004      	add	sp, #16
 8003024:	4770      	bx	lr

08003026 <tmc2209_set_hardware_enable_pin>:

void tmc2209_set_hardware_enable_pin(tmc2209_stepper_driver_t *stepper_driver, uint16_t hardware_enable_pin, GPIO_TypeDef* hardware_enable_gpio_port)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	460b      	mov	r3, r1
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	817b      	strh	r3, [r7, #10]
   stepper_driver->hardware_enable_pin_ = hardware_enable_pin;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	897a      	ldrh	r2, [r7, #10]
 8003038:	80da      	strh	r2, [r3, #6]
   stepper_driver->hardware_enable_gpio_port_ = hardware_enable_gpio_port;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	651a      	str	r2, [r3, #80]	@ 0x50

   HAL_GPIO_WritePin(hardware_enable_gpio_port, hardware_enable_pin, GPIO_PIN_SET);
 8003040:	897b      	ldrh	r3, [r7, #10]
 8003042:	2201      	movs	r2, #1
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f001 fd7c 	bl	8004b44 <HAL_GPIO_WritePin>
 }
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <tmc2209_enable>:

 void tmc2209_enable(tmc2209_stepper_driver_t *stepper_driver)
 {
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
     HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_RESET);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	88db      	ldrh	r3, [r3, #6]
 8003064:	2200      	movs	r2, #0
 8003066:	4619      	mov	r1, r3
 8003068:	f001 fd6c 	bl	8004b44 <HAL_GPIO_WritePin>
   }
   stepper_driver->toff_                = TOFF_DEFAULT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
   stepper_driver->chopper_config_.toff = TOFF_DEFAULT;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800307a:	2103      	movs	r1, #3
 800307c:	f361 0303 	bfi	r3, r1, #0, #4
 8003080:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff98 	bl	8002fba <write_stored_chopper_config>
 }
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <tmc2209_disable>:

 void tmc2209_disable(tmc2209_stepper_driver_t* stepper_driver)
 {
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
   HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_SET);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	88db      	ldrh	r3, [r3, #6]
 80030a2:	2201      	movs	r2, #1
 80030a4:	4619      	mov	r1, r3
 80030a6:	f001 fd4d 	bl	8004b44 <HAL_GPIO_WritePin>
   }
   stepper_driver->chopper_config_.toff = TOFF_DISABLE;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80030b0:	f023 030f 	bic.w	r3, r3, #15
 80030b4:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff7e 	bl	8002fba <write_stored_chopper_config>
 }
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <tmc2209_write>:

 void tmc2209_write(tmc2209_stepper_driver_t *stepper_driver, uint8_t register_address, uint32_t data)
 {
 80030c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c8:	b08b      	sub	sp, #44	@ 0x2c
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	460b      	mov	r3, r1
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	72fb      	strb	r3, [r7, #11]
   write_read_reply_datagram_t write_datagram;
   write_datagram.bytes            = 0;
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
   write_datagram.sync             = SYNC;
 80030e0:	7e3b      	ldrb	r3, [r7, #24]
 80030e2:	2205      	movs	r2, #5
 80030e4:	f362 0303 	bfi	r3, r2, #0, #4
 80030e8:	763b      	strb	r3, [r7, #24]
   write_datagram.serial_address   = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	767b      	strb	r3, [r7, #25]
   write_datagram.register_address = register_address;
 80030ee:	7afb      	ldrb	r3, [r7, #11]
 80030f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	7ebb      	ldrb	r3, [r7, #26]
 80030f8:	f362 0306 	bfi	r3, r2, #0, #7
 80030fc:	76bb      	strb	r3, [r7, #26]
   write_datagram.rw               = RW_WRITE;
 80030fe:	7ebb      	ldrb	r3, [r7, #26]
 8003100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003104:	76bb      	strb	r3, [r7, #26]
   write_datagram.data             = reverse_data(data);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fdf5 	bl	8002cf6 <reverse_data>
 800310c:	4603      	mov	r3, r0
 800310e:	f8c7 301b 	str.w	r3, [r7, #27]
   write_datagram.crc              = calculate_crc_write(&write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8003112:	f107 0318 	add.w	r3, r7, #24
 8003116:	2108      	movs	r1, #8
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fe16 	bl	8002d4a <calculate_crc_write>
 800311e:	4603      	mov	r3, r0
 8003120:	77fb      	strb	r3, [r7, #31]

   uint8_t datagram_bytes[8];
   for (int i = 0; i < 8; i++)
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
 8003126:	e01b      	b.n	8003160 <tmc2209_write+0x9a>
   {
     datagram_bytes[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8003128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800312c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800312e:	00c9      	lsls	r1, r1, #3
 8003130:	f1c1 0620 	rsb	r6, r1, #32
 8003134:	f1a1 0020 	sub.w	r0, r1, #32
 8003138:	fa22 f401 	lsr.w	r4, r2, r1
 800313c:	fa03 f606 	lsl.w	r6, r3, r6
 8003140:	4334      	orrs	r4, r6
 8003142:	fa23 f000 	lsr.w	r0, r3, r0
 8003146:	4304      	orrs	r4, r0
 8003148:	fa23 f501 	lsr.w	r5, r3, r1
 800314c:	b2e1      	uxtb	r1, r4
 800314e:	f107 0210 	add.w	r2, r7, #16
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	4413      	add	r3, r2
 8003156:	460a      	mov	r2, r1
 8003158:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	3301      	adds	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	2b07      	cmp	r3, #7
 8003164:	dde0      	ble.n	8003128 <tmc2209_write+0x62>
   }
   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, WRITE_READ_REPLY_DATAGRAM_SIZE, 0XFFFF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f103 0008 	add.w	r0, r3, #8
 800316c:	f107 0110 	add.w	r1, r7, #16
 8003170:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003174:	2208      	movs	r2, #8
 8003176:	f004 f95d 	bl	8007434 <HAL_UART_Transmit>
   //   printf("Write Data Request: %s", datagram_bytes);
 }
 800317a:	bf00      	nop
 800317c:	372c      	adds	r7, #44	@ 0x2c
 800317e:	46bd      	mov	sp, r7
 8003180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003182 <tmc2209_read>:

 uint32_t tmc2209_read(tmc2209_stepper_driver_t * stepper_driver, uint8_t register_address)
 {
 8003182:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003186:	b090      	sub	sp, #64	@ 0x40
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
   read_request_datagram_t read_request_datagram;
   read_request_datagram.bytes            = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	@ 0x28
   read_request_datagram.sync             = SYNC;
 8003194:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003198:	2205      	movs	r2, #5
 800319a:	f362 0303 	bfi	r3, r2, #0, #4
 800319e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
   read_request_datagram.serial_address   = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
   read_request_datagram.register_address = register_address;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031b4:	f362 0306 	bfi	r3, r2, #0, #7
 80031b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.rw               = RW_READ;
 80031bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.crc              = calculate_crc_read(&read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 80031c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031cc:	2104      	movs	r1, #4
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fe1f 	bl	8002e12 <calculate_crc_read>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

   uint8_t datagram_bytes[WRITE_READ_REPLY_DATAGRAM_SIZE];
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 80031da:	2300      	movs	r3, #0
 80031dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031de:	e00e      	b.n	80031fe <tmc2209_read+0x7c>
   {
     datagram_bytes[i] = (read_request_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80031e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	b2d9      	uxtb	r1, r3
 80031ec:	f107 0220 	add.w	r2, r7, #32
 80031f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f2:	4413      	add	r3, r2
 80031f4:	460a      	mov	r2, r1
 80031f6:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 80031f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fa:	3301      	adds	r3, #1
 80031fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003200:	2b03      	cmp	r3, #3
 8003202:	dded      	ble.n	80031e0 <tmc2209_read+0x5e>
   }

   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, READ_REQUEST_DATAGRAM_SIZE, 0XFFFF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f103 0008 	add.w	r0, r3, #8
 800320a:	f107 0120 	add.w	r1, r7, #32
 800320e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003212:	2204      	movs	r2, #4
 8003214:	f004 f90e 	bl	8007434 <HAL_UART_Transmit>
//   printf("Write Data Request: %s", datagram_bytes);


   uint8_t                     byte_count = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
   write_read_reply_datagram_t read_reply_datagram;
   read_reply_datagram.bytes = 0;
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9c7 2306 	strd	r2, r3, [r7, #24]
//   {
//     HAL_UART_Receive(&huart1, (uint8_t *)&byte, 1, 100);
//     datagram_bytes[i] = byte;
//   }
   uint8_t uart_reply[WRITE_READ_REPLY_DATAGRAM_SIZE + 1];
   HAL_UART_Receive(&stepper_driver->uart_, uart_reply, 9, 100);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f103 0008 	add.w	r0, r3, #8
 8003230:	f107 010c 	add.w	r1, r7, #12
 8003234:	2364      	movs	r3, #100	@ 0x64
 8003236:	2209      	movs	r2, #9
 8003238:	f004 f987 	bl	800754a <HAL_UART_Receive>
   uint8_t* datagram = uart_reply + sizeof(uint8_t);
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	3301      	adds	r3, #1
 8003242:	637b      	str	r3, [r7, #52]	@ 0x34

   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8003244:	2300      	movs	r3, #0
 8003246:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800324a:	e029      	b.n	80032a0 <tmc2209_read+0x11e>
   {
     read_reply_datagram.bytes |= ((uint64_t)datagram[i] << (byte_count++ * BITS_PER_BYTE));
 800324c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003252:	4413      	add	r3, r2
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2200      	movs	r2, #0
 800325a:	4698      	mov	r8, r3
 800325c:	4691      	mov	r9, r2
 800325e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	f1a3 0120 	sub.w	r1, r3, #32
 800326e:	f1c3 0220 	rsb	r2, r3, #32
 8003272:	fa09 f503 	lsl.w	r5, r9, r3
 8003276:	fa08 f101 	lsl.w	r1, r8, r1
 800327a:	430d      	orrs	r5, r1
 800327c:	fa28 f202 	lsr.w	r2, r8, r2
 8003280:	4315      	orrs	r5, r2
 8003282:	fa08 f403 	lsl.w	r4, r8, r3
 8003286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328a:	ea44 0a02 	orr.w	sl, r4, r2
 800328e:	ea45 0b03 	orr.w	fp, r5, r3
 8003292:	e9c7 ab06 	strd	sl, fp, [r7, #24]
   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8003296:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800329a:	3301      	adds	r3, #1
 800329c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80032a0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	d9d1      	bls.n	800324c <tmc2209_read+0xca>
   }
   uint32_t reversed_data = reverse_data(read_reply_datagram.data);
 80032a8:	f8d7 301b 	ldr.w	r3, [r7, #27]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fd22 	bl	8002cf6 <reverse_data>
 80032b2:	6338      	str	r0, [r7, #48]	@ 0x30
   uint8_t  crc           = calculate_crc_write(&read_reply_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80032b4:	f107 0318 	add.w	r3, r7, #24
 80032b8:	2108      	movs	r1, #8
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fd45 	bl	8002d4a <calculate_crc_write>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   if (crc != read_reply_datagram.crc)
   {
   }
   return reversed_data;
 80032c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 }
 80032c8:	4618      	mov	r0, r3
 80032ca:	3740      	adds	r7, #64	@ 0x40
 80032cc:	46bd      	mov	sp, r7
 80032ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080032d4 <toSteps>:

/*
 * Calculates the steps needed to rotate the amount stated in the variable degrees.
 */
int32_t toSteps(float degrees, motor_t* motor)
{
 80032d4:	b5b0      	push	{r4, r5, r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	ed87 0a01 	vstr	s0, [r7, #4]
 80032de:	6038      	str	r0, [r7, #0]
	int32_t steps;
	steps = ((200.0 * (float)(motor->microsteps)/360.0)*degrees) * motor->gear_ratio;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	ee17 0a90 	vmov	r0, s15
 80032f0:	f7fd f8f4 	bl	80004dc <__aeabi_f2d>
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003364 <toSteps+0x90>)
 80032fa:	f7fd f947 	bl	800058c <__aeabi_dmul>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <toSteps+0x94>)
 800330c:	f7fd fa68 	bl	80007e0 <__aeabi_ddiv>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4614      	mov	r4, r2
 8003316:	461d      	mov	r5, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fd f8df 	bl	80004dc <__aeabi_f2d>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4620      	mov	r0, r4
 8003324:	4629      	mov	r1, r5
 8003326:	f7fd f931 	bl	800058c <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4614      	mov	r4, r2
 8003330:	461d      	mov	r5, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd f8d0 	bl	80004dc <__aeabi_f2d>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4620      	mov	r0, r4
 8003342:	4629      	mov	r1, r5
 8003344:	f7fd f922 	bl	800058c <__aeabi_dmul>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	f7fd fb2e 	bl	80009b0 <__aeabi_d2iz>
 8003354:	4603      	mov	r3, r0
 8003356:	60fb      	str	r3, [r7, #12]
	return steps;
 8003358:	68fb      	ldr	r3, [r7, #12]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bdb0      	pop	{r4, r5, r7, pc}
 8003362:	bf00      	nop
 8003364:	40690000 	.word	0x40690000
 8003368:	40768000 	.word	0x40768000

0800336c <stopMotorMovement>:

static inline void stopMotorMovement(motor_t * motor)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3340      	adds	r3, #64	@ 0x40
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f003 f922 	bl	80065c4 <HAL_TIM_OC_Stop_IT>
	motor->active_movement_flag = 0;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	731a      	strb	r2, [r3, #12]
	initializeDefaults(motor);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f001 f824 	bl	80043d4 <initializeDefaults>
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <trapezMove>:
 *       Accel: v = sqrt(2 * a_acc * s)
 *       Const: v = v_max
 *       Decel: v = sqrt(2 * a_dec * s_remaining)
 */
static inline void trapezMove(motion_t* mt)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	if (mt->step >= 0 && mt->step < mt->acc_steps)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db1b      	blt.n	80033dc <trapezMove+0x48>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	da15      	bge.n	80033dc <trapezMove+0x48>
	{
		mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6a12      	ldr	r2, [r2, #32]
 80033b8:	3201      	adds	r2, #1
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	f004 fc84 	bl	8007cd8 <sqrtf>
 80033d0:	eef0 7a40 	vmov.f32	s15, s0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	edc3 7a03 	vstr	s15, [r3, #12]
 80033da:	e043      	b.n	8003464 <trapezMove+0xd0>
		// motion.v = acc_ramp[motion.step]
	}
	else if (mt->const_steps != 0 && mt->step >= mt->acc_steps && mt->step < (mt->total_steps - mt->dec_steps))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d018      	beq.n	8003416 <trapezMove+0x82>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	db12      	blt.n	8003416 <trapezMove+0x82>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1a      	ldr	r2, [r3, #32]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6919      	ldr	r1, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	1acb      	subs	r3, r1, r3
 80033fe:	429a      	cmp	r2, r3
 8003400:	da09      	bge.n	8003416 <trapezMove+0x82>
		mt->v = mt->V_MAX;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	edc3 7a03 	vstr	s15, [r3, #12]
 8003414:	e026      	b.n	8003464 <trapezMove+0xd0>
	else if (mt->step >= (mt->total_steps - mt->dec_steps) && mt->step < mt->total_steps)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	1acb      	subs	r3, r1, r3
 8003424:	429a      	cmp	r2, r3
 8003426:	db1d      	blt.n	8003464 <trapezMove+0xd0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	429a      	cmp	r2, r3
 8003432:	da17      	bge.n	8003464 <trapezMove+0xd0>
	{
		mt->v = sqrtf(2 * mt->DEC_MAX * (mt->total_steps - mt->step));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6911      	ldr	r1, [r2, #16]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6a12      	ldr	r2, [r2, #32]
 8003440:	1a8a      	subs	r2, r1, r2
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003450:	eeb0 0a67 	vmov.f32	s0, s15
 8003454:	f004 fc40 	bl	8007cd8 <sqrtf>
 8003458:	eef0 7a40 	vmov.f32	s15, s0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	edc3 7a03 	vstr	s15, [r3, #12]
		// motion.v = acc_ramp[motion.total_steps - motion.step]
	}
}
 8003462:	e7ff      	b.n	8003464 <trapezMove+0xd0>
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_OC_DelayElapsedCallback>:
 * Every other motion.cycle, as motion.step only triggers on rising edge,
 * the velocity and the compare value is changed depending on current state of velocity ramp.
 *
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	int8_t index;
	motor_t* motor;

	//To know which timer and thus which motor caused the interrupt
	if (htim->Instance == motors[0]->motion.motor_control_timer.Instance){ index = 0; }
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b5c      	ldr	r3, [pc, #368]	@ (80035ec <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	429a      	cmp	r2, r3
 8003480:	d102      	bne.n	8003488 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 8003482:	2300      	movs	r3, #0
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e026      	b.n	80034d6 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[1]->motion.motor_control_timer.Instance){ index = 1; }
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b57      	ldr	r3, [pc, #348]	@ (80035ec <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	429a      	cmp	r2, r3
 8003494:	d102      	bne.n	800349c <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8003496:	2301      	movs	r3, #1
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e01c      	b.n	80034d6 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[2]->motion.motor_control_timer.Instance){ index = 2; }
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b52      	ldr	r3, [pc, #328]	@ (80035ec <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d102      	bne.n	80034b0 <HAL_TIM_OC_DelayElapsedCallback+0x44>
 80034aa:	2302      	movs	r3, #2
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e012      	b.n	80034d6 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[3]->motion.motor_control_timer.Instance){ index = 3; }
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b4d      	ldr	r3, [pc, #308]	@ (80035ec <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d102      	bne.n	80034c4 <HAL_TIM_OC_DelayElapsedCallback+0x58>
 80034be:	2303      	movs	r3, #3
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e008      	b.n	80034d6 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[4]->motion.motor_control_timer.Instance){ index = 4; }
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b48      	ldr	r3, [pc, #288]	@ (80035ec <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 80034d2:	2304      	movs	r3, #4
 80034d4:	77fb      	strb	r3, [r7, #31]

	motor = motors[index];
 80034d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034da:	4a44      	ldr	r2, [pc, #272]	@ (80035ec <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	61bb      	str	r3, [r7, #24]
	motion_t* mt = &motor->motion;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	3310      	adds	r3, #16
 80034e6:	617b      	str	r3, [r7, #20]

	//Stop timer and movement if the robot reaches its destination
	if (mt->motion_mode == MOTION_TRAPEZ && mt->step >= mt->total_steps)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_TIM_OC_DelayElapsedCallback+0x9a>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	db03      	blt.n	8003506 <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	{
		stopMotorMovement(motor);
 80034fe:	69b8      	ldr	r0, [r7, #24]
 8003500:	f7ff ff34 	bl	800336c <stopMotorMovement>
		return;
 8003504:	e06f      	b.n	80035e6 <HAL_TIM_OC_DelayElapsedCallback+0x17a>
	}

	if (mt->cycle % 2 == 0) //Change velocity only every other cycle because step only triggers on rising edge
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d142      	bne.n	8003598 <HAL_TIM_OC_DelayElapsedCallback+0x12c>
	{
		switch(mt->motion_mode)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_TIM_OC_DelayElapsedCallback+0xbc>
 800351c:	2b00      	cmp	r3, #0
 800351e:	db31      	blt.n	8003584 <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8003520:	3b01      	subs	r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d82e      	bhi.n	8003584 <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8003526:	e003      	b.n	8003530 <HAL_TIM_OC_DelayElapsedCallback+0xc4>
		{
		case MOTION_TRAPEZ:
			trapezMove(mt);
 8003528:	6978      	ldr	r0, [r7, #20]
 800352a:	f7ff ff33 	bl	8003394 <trapezMove>
			break;
 800352e:	e029      	b.n	8003584 <HAL_TIM_OC_DelayElapsedCallback+0x118>
		case MOTION_HOME:	//Since we don't know the exact distance to move in these 2 following cases, there's no deceleration
		case MOTION_GRIP:
			if (mt->step >= 0 && mt->step < mt->acc_steps)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db1b      	blt.n	8003570 <HAL_TIM_OC_DelayElapsedCallback+0x104>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	6a1a      	ldr	r2, [r3, #32]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	429a      	cmp	r2, r3
 8003542:	da15      	bge.n	8003570 <HAL_TIM_OC_DelayElapsedCallback+0x104>
				mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	6a12      	ldr	r2, [r2, #32]
 800354c:	3201      	adds	r2, #1
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	ee07 3a90 	vmov	s15, r3
 8003558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355c:	eeb0 0a67 	vmov.f32	s0, s15
 8003560:	f004 fbba 	bl	8007cd8 <sqrtf>
 8003564:	eef0 7a40 	vmov.f32	s15, s0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	edc3 7a03 	vstr	s15, [r3, #12]
			else
				mt->v = mt->V_MAX;

			break;
 800356e:	e008      	b.n	8003582 <HAL_TIM_OC_DelayElapsedCallback+0x116>
				mt->v = mt->V_MAX;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8003582:	bf00      	nop
		}
		mt->step++;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
		mt->position++;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	mt->cycle++;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_GPIO_TogglePin(motor->gpio_ports.step, motor->gpio_pins.step);
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f001 fae0 	bl	8004b76 <HAL_GPIO_TogglePin>
	 *	But this is not the answer since the time has to be converted into timer ticks.
	 *	The timer runs at 2 MHz so we need to divide our current period duration by 1 / 2000000 s or 0.5 µs.
	 *	-> delay in ticks = 1/(2*v)/0.0000005 = 2000000/(2*v)
	 */

	int32_t delay = 2000000 / (2 * motor->motion.v);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80035bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035c0:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80035f0 <HAL_TIM_OC_DelayElapsedCallback+0x184>
 80035c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035cc:	ee17 3a90 	vmov	r3, s15
 80035d0:	613b      	str	r3, [r7, #16]
	//Add delay to current compare value in register
	int32_t total_delay = __HAL_TIM_GET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1) + delay;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1, total_delay);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000954 	.word	0x20000954
 80035f0:	49f42400 	.word	0x49f42400

080035f4 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupt service routine for timer 9, which periodically invokes status checks.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e024      	b.n	800364c <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if (htim->Instance == motors[i]->status_check_timer.Instance)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4915      	ldr	r1, [pc, #84]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800360e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003612:	429a      	cmp	r2, r3
 8003614:	d117      	bne.n	8003646 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if (motors[i]->active_movement_flag)
 8003616:	4a11      	ldr	r2, [pc, #68]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361e:	7b1b      	ldrb	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_TIM_PeriodElapsedCallback+0x40>
				motors[i]->status_flag = 1;
 8003624:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
			else
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);

			break;
 8003632:	e00f      	b.n	8003654 <HAL_TIM_PeriodElapsedCallback+0x60>
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);
 8003634:	4a09      	ldr	r2, [pc, #36]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	338c      	adds	r3, #140	@ 0x8c
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fe22 	bl	8006288 <HAL_TIM_Base_Stop_IT>
			break;
 8003644:	e006      	b.n	8003654 <HAL_TIM_PeriodElapsedCallback+0x60>
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3301      	adds	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b04      	cmp	r3, #4
 8003650:	ddd7      	ble.n	8003602 <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
//	writeDisplay("HAHA");
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000954 	.word	0x20000954

08003660 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)  // Check if User Button
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003670:	d106      	bne.n	8003680 <HAL_GPIO_EXTI_Callback+0x20>
	{
		toggle_inverse_motor_direction(motors[4]->driver);
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_GPIO_EXTI_Callback+0x28>)
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800367a:	4618      	mov	r0, r3
 800367c:	f000 faea 	bl	8003c54 <toggle_inverse_motor_direction>
	}
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000954 	.word	0x20000954

0800368c <moveDegrees>:
 *   - calculating acc_steps, dec_steps, const_steps
 *   - adjusting to triangle profile if total steps are too short
 *   - starting the timer for output compare with interrupt
 */
void moveDegrees(float degrees, motor_t* motor)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	ed87 0a01 	vstr	s0, [r7, #4]
 8003696:	6038      	str	r0, [r7, #0]
	if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f001 fa34 	bl	8004b14 <HAL_GPIO_ReadPin>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <moveDegrees+0x32>
		tmc2209_enable(motor->driver);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fccb 	bl	8003054 <tmc2209_enable>

	if (degrees < 0)
 80036be:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	d50c      	bpl.n	80036e6 <moveDegrees+0x5a>
	{
		enable_inverse_motor_direction(motor->driver);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff f98c 	bl	80029f0 <enable_inverse_motor_direction>
		degrees = degrees * (-1);
 80036d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80036dc:	eef1 7a67 	vneg.f32	s15, s15
 80036e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80036e4:	e005      	b.n	80036f2 <moveDegrees+0x66>
	}
	else
		disable_inverse_motor_direction(motor->driver);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f991 	bl	8002a14 <disable_inverse_motor_direction>

	motor->motion.total_steps = toSteps(degrees, motor); //Convert degrees to steps
 80036f2:	6838      	ldr	r0, [r7, #0]
 80036f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80036f8:	f7ff fdec 	bl	80032d4 <toSteps>
 80036fc:	4602      	mov	r2, r0
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	621a      	str	r2, [r3, #32]
	motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration and deceleration steps
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	6912      	ldr	r2, [r2, #16]
 800370a:	fb03 f202 	mul.w	r2, r3, r2
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	461a      	mov	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.DEC_MAX);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	6912      	ldr	r2, [r2, #16]
 8003726:	fb03 f202 	mul.w	r2, r3, r2
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	461a      	mov	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.const_steps = motor->motion.total_steps - (motor->motion.acc_steps + motor->motion.dec_steps);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	440b      	add	r3, r1
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	625a      	str	r2, [r3, #36]	@ 0x24

	motion_mode_t motion_mode = MOTION_TRAPEZ;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]

	initMovementVars(motor, motion_mode);
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	4619      	mov	r1, r3
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f000 f978 	bl	8003a4c <initMovementVars>

	if (motor->motion.const_steps < 0)  // If acceleration steps + deceleration steps exceed total steps -> trapezoid not possible -> triangle profile
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	da4e      	bge.n	8003802 <moveDegrees+0x176>
	{
	    // Compute peak velocity based on available distance (triangle case)
	    float v_peak = sqrtf((2.0f * motor->motion.ACC_MAX * motor->motion.DEC_MAX) /
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	ee07 3a90 	vmov	s15, r3
 800376c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003770:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003780:	ee67 6a27 	vmul.f32	s13, s14, s15
	                         (motor->motion.ACC_MAX + motor->motion.DEC_MAX) *
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4413      	add	r3, r2
	    float v_peak = sqrtf((2.0f * motor->motion.ACC_MAX * motor->motion.DEC_MAX) /
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	                         (float)motor->motion.total_steps);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	    float v_peak = sqrtf((2.0f * motor->motion.ACC_MAX * motor->motion.DEC_MAX) /
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	eeb0 0a67 	vmov.f32	s0, s15
 80037ae:	f004 fa93 	bl	8007cd8 <sqrtf>
 80037b2:	ed87 0a02 	vstr	s0, [r7, #8]

	    // Recalculate acceleration and deceleration steps for triangle profile
	    motor->motion.acc_steps = (uint32_t)(v_peak * v_peak / (2.0f * motor->motion.ACC_MAX));
 80037b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ba:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d6:	ee17 2a90 	vmov	r2, s15
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	629a      	str	r2, [r3, #40]	@ 0x28
	    motor->motion.dec_steps = motor->motion.total_steps - motor->motion.acc_steps;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6a1a      	ldr	r2, [r3, #32]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	1ad2      	subs	r2, r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	    motor->motion.const_steps = 0;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	625a      	str	r2, [r3, #36]	@ 0x24

	    // Adjust maximum velocity to the achievable peak
	    motor->motion.V_MAX = v_peak;
 80037f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fa:	ee17 2a90 	vmov	r2, s15
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	611a      	str	r2, [r3, #16]
	}

	//Start timer in output compare with interrupt
	startMovement(motor);
 8003802:	6838      	ldr	r0, [r7, #0]
 8003804:	f000 f93c 	bl	8003a80 <startMovement>

	startStatusChecks(motor);
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	f000 f958 	bl	8003abe <startStatusChecks>
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <grip>:
	toPolar(x, y, &theta, &r);
	movePolar(theta, r, z, gripper_direction);
}

void grip()
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
	motor_t * motor5 = motors[4];
 800381e:	4b2a      	ldr	r3, [pc, #168]	@ (80038c8 <grip+0xb0>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	607b      	str	r3, [r7, #4]

	disable_inverse_motor_direction(motor5->driver);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f8f2 	bl	8002a14 <disable_inverse_motor_direction>
	moveDegrees(10000, motor5);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80038cc <grip+0xb4>
 8003836:	f7ff ff29 	bl	800368c <moveDegrees>
	while(motor5->active_movement_flag); //wait until movement finished
 800383a:	bf00      	nop
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7b1b      	ldrb	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1fb      	bne.n	800383c <grip+0x24>

	enable_inverse_motor_direction(motor5->driver);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff f8d0 	bl	80029f0 <enable_inverse_motor_direction>

	if (HAL_GPIO_ReadPin(motor5->gpio_ports.mot_en, motor5->gpio_pins.mot_en) == GPIO_PIN_SET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f001 f958 	bl	8004b14 <HAL_GPIO_ReadPin>
 8003864:	4603      	mov	r3, r0
 8003866:	2b01      	cmp	r3, #1
 8003868:	d105      	bne.n	8003876 <grip+0x5e>
		tmc2209_enable(motor5->driver);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fbef 	bl	8003054 <tmc2209_enable>

	motor5->motion.acc_steps = (motor5->motion.V_MAX * motor5->motion.V_MAX) / (2 * motor5->motion.ACC_MAX); //Calculate total acceleration steps
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6912      	ldr	r2, [r2, #16]
 800387e:	fb03 f202 	mul.w	r2, r3, r2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	629a      	str	r2, [r3, #40]	@ 0x28

	motion_mode_t motion_mode = MOTION_GRIP;
 8003892:	2302      	movs	r3, #2
 8003894:	70fb      	strb	r3, [r7, #3]
	initMovementVars(motor5, motion_mode);
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8d6 	bl	8003a4c <initMovementVars>

	startMovement(motor5);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8ed 	bl	8003a80 <startMovement>
	startStatusChecks(motor5);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f909 	bl	8003abe <startStatusChecks>
	while (motor5->stallguard.stall_flag == 0)
 80038ac:	e002      	b.n	80038b4 <grip+0x9c>
	{
		checkDriverStatus(motor5);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9b2 	bl	8003c18 <checkDriverStatus>
	while (motor5->stallguard.stall_flag == 0)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f7      	beq.n	80038ae <grip+0x96>
	}
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000954 	.word	0x20000954
 80038cc:	461c4000 	.word	0x461c4000

080038d0 <goHome>:

void goHome()
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
	writeDisplay("Homing...");
 80038d6:	485a      	ldr	r0, [pc, #360]	@ (8003a40 <goHome+0x170>)
 80038d8:	f7fd fa28 	bl	8000d2c <writeDisplay>
	for (int i = 0; i < NUMBER_OF_MOTOR; i++)
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e03e      	b.n	8003960 <goHome+0x90>
	{
		motor_t * motor = motors[i];
 80038e2:	4a58      	ldr	r2, [pc, #352]	@ (8003a44 <goHome+0x174>)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ea:	60bb      	str	r3, [r7, #8]
//		if (i == 3)
//			continue;
		if (i == 4)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d105      	bne.n	80038fe <goHome+0x2e>
		{
			enable_inverse_motor_direction(motor->driver);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff f879 	bl	80029f0 <enable_inverse_motor_direction>
		}

		motion_mode_t motion_mode = MOTION_HOME;
 80038fe:	2301      	movs	r3, #1
 8003900:	71fb      	strb	r3, [r7, #7]

		if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f001 f8ff 	bl	8004b14 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d105      	bne.n	8003928 <goHome+0x58>
			tmc2209_enable(motor->driver);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fb96 	bl	8003054 <tmc2209_enable>

		motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration steps
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	6912      	ldr	r2, [r2, #16]
 8003930:	fb03 f202 	mul.w	r2, r3, r2
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28

		initMovementVars(motor, motion_mode);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4619      	mov	r1, r3
 8003948:	68b8      	ldr	r0, [r7, #8]
 800394a:	f000 f87f 	bl	8003a4c <initMovementVars>

		startMovement(motor);
 800394e:	68b8      	ldr	r0, [r7, #8]
 8003950:	f000 f896 	bl	8003a80 <startMovement>
		startStatusChecks(motor);
 8003954:	68b8      	ldr	r0, [r7, #8]
 8003956:	f000 f8b2 	bl	8003abe <startStatusChecks>
	for (int i = 0; i < NUMBER_OF_MOTOR; i++)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b04      	cmp	r3, #4
 8003964:	ddbd      	ble.n	80038e2 <goHome+0x12>
	}

	while(motors[0]->stallguard.stall_flag == 0
 8003966:	e018      	b.n	800399a <goHome+0xca>
			|| motors[1]->stallguard.stall_flag == 0
			|| motors[2]->stallguard.stall_flag == 0
			|| motors[3]->stallguard.stall_flag == 0
			|| motors[4]->stallguard.stall_flag == 0)
	{
		checkDriverStatus(motors[0]);
 8003968:	4b36      	ldr	r3, [pc, #216]	@ (8003a44 <goHome+0x174>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 f953 	bl	8003c18 <checkDriverStatus>
		checkDriverStatus(motors[1]);
 8003972:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <goHome+0x174>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f94e 	bl	8003c18 <checkDriverStatus>
		checkDriverStatus(motors[2]);
 800397c:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <goHome+0x174>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f949 	bl	8003c18 <checkDriverStatus>
		checkDriverStatus(motors[3]);
 8003986:	4b2f      	ldr	r3, [pc, #188]	@ (8003a44 <goHome+0x174>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f944 	bl	8003c18 <checkDriverStatus>
		checkDriverStatus(motors[4]);
 8003990:	4b2c      	ldr	r3, [pc, #176]	@ (8003a44 <goHome+0x174>)
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f93f 	bl	8003c18 <checkDriverStatus>
	while(motors[0]->stallguard.stall_flag == 0
 800399a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a44 <goHome+0x174>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
			|| motors[4]->stallguard.stall_flag == 0)
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0e0      	beq.n	8003968 <goHome+0x98>
			|| motors[1]->stallguard.stall_flag == 0
 80039a6:	4b27      	ldr	r3, [pc, #156]	@ (8003a44 <goHome+0x174>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0da      	beq.n	8003968 <goHome+0x98>
			|| motors[2]->stallguard.stall_flag == 0
 80039b2:	4b24      	ldr	r3, [pc, #144]	@ (8003a44 <goHome+0x174>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0d4      	beq.n	8003968 <goHome+0x98>
			|| motors[3]->stallguard.stall_flag == 0
 80039be:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <goHome+0x174>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ce      	beq.n	8003968 <goHome+0x98>
			|| motors[4]->stallguard.stall_flag == 0)
 80039ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003a44 <goHome+0x174>)
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0c8      	beq.n	8003968 <goHome+0x98>
	}

	motors[0]->stallguard.stall_flag = 0;
 80039d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <goHome+0x174>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
	motors[1]->stallguard.stall_flag = 0;
 80039e0:	4b18      	ldr	r3, [pc, #96]	@ (8003a44 <goHome+0x174>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
	motors[2]->stallguard.stall_flag = 0;
 80039ea:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <goHome+0x174>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
	motors[3]->stallguard.stall_flag = 0;
 80039f4:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <goHome+0x174>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
	motors[4]->stallguard.stall_flag = 0;
 80039fe:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <goHome+0x174>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

	motors[0]->motion.position = 1245;
 8003a08:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <goHome+0x174>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f240 42dd 	movw	r2, #1245	@ 0x4dd
 8003a10:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[1]->motion.position = 0;
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <goHome+0x174>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[2]->motion.position = 0;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <goHome+0x174>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[3]->motion.position = 0;
 8003a22:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <goHome+0x174>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[4]->motion.position = 0;
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <goHome+0x174>)
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	639a      	str	r2, [r3, #56]	@ 0x38

	writeDisplay("Homing finished");
 8003a32:	4805      	ldr	r0, [pc, #20]	@ (8003a48 <goHome+0x178>)
 8003a34:	f7fd f97a 	bl	8000d2c <writeDisplay>
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	08007fe8 	.word	0x08007fe8
 8003a44:	20000954 	.word	0x20000954
 8003a48:	08007ff4 	.word	0x08007ff4

08003a4c <initMovementVars>:

void initMovementVars(motor_t * motor, motion_mode_t motion_mode)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
	motor->motion.v = 0;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	61da      	str	r2, [r3, #28]
	motor->motion.step = 0;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->motion.motion_mode = motion_mode;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <startMovement>:

void startMovement(motor_t * motor)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_ports.step, motor->gpio_pins.step, GPIO_PIN_RESET);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 8003a94:	2200      	movs	r2, #0
 8003a96:	4619      	mov	r1, r3
 8003a98:	f001 f854 	bl	8004b44 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&motor->motion.motor_control_timer, TIM_CHANNEL_1, 1);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_OC_Start_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3340      	adds	r3, #64	@ 0x40
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fc74 	bl	8006398 <HAL_TIM_OC_Start_IT>

	motor->active_movement_flag = 1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	731a      	strb	r2, [r3, #12]
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <startStatusChecks>:

void startStatusChecks(motor_t * motor)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&motor->status_check_timer);  //Timer for periodical status checks
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	338c      	adds	r3, #140	@ 0x8c
 8003aca:	4618      	mov	r0, r3
 8003acc:	f002 fb6c 	bl	80061a8 <HAL_TIM_Base_Start_IT>

	motor->status_flag = 0;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	motor->stallguard.previous_smoothed_result = 0;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

//	while(motor->active_movement_flag)		//While motor is moving, periodically check driver status
//	{
//		checkDriverStatus(motor);
//	}
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <checkStall>:

/*
 * Also work in progress, now simply outputs stallguard result to monitor.
 */
void checkStall(uint16_t stallguard_result, motor_t* motor)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	80fb      	strh	r3, [r7, #6]
	stallguard_t* sg = &motor->stallguard;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	33d4      	adds	r3, #212	@ 0xd4
 8003afc:	613b      	str	r3, [r7, #16]
	uint16_t result = stallguard_result;
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	82fb      	strh	r3, [r7, #22]
//	float diff;

	sg->smoothed_result = ALPHA * stallguard_result + (1-ALPHA) * sg->previous_smoothed_result; //Exponential smoothing/exponential moving average (EMA) filter
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b0c:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8003b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b1a:	eef6 6a08 	vmov.f32	s13, #104	@ 0x3f400000  0.750
 8003b1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	edc3 7a04 	vstr	s15, [r3, #16]

	smoothed_result_g = sg->smoothed_result;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	4a35      	ldr	r2, [pc, #212]	@ (8003c08 <checkStall+0x11c>)
 8003b32:	6013      	str	r3, [r2, #0]
	stallguard_result_g = stallguard_result;
 8003b34:	4a35      	ldr	r2, [pc, #212]	@ (8003c0c <checkStall+0x120>)
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	8013      	strh	r3, [r2, #0]
	v_g = motor->motion.v;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4a34      	ldr	r2, [pc, #208]	@ (8003c10 <checkStall+0x124>)
 8003b40:	6013      	str	r3, [r2, #0]

//	diff = sg->smoothed_result - sg->previous_smoothed_result;
	float k = sg->MAX_STALLGUARD_VALUE / (float) motor->motion.V_MAX;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b58:	edc7 7a03 	vstr	s15, [r7, #12]

	if (motor->ID == '5')
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b35      	cmp	r3, #53	@ 0x35
 8003b62:	d10f      	bne.n	8003b84 <checkStall+0x98>
	{
		result = sg->smoothed_result;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b6e:	ee17 3a90 	vmov	r3, s15
 8003b72:	82fb      	strh	r3, [r7, #22]
		if (motor->motion.motion_mode == MOTION_GRIP)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d102      	bne.n	8003b84 <checkStall+0x98>
			sg->STALL_BUFFER = STALL_GRIP_BUFFER_M_5;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	223c      	movs	r2, #60	@ 0x3c
 8003b82:	819a      	strh	r2, [r3, #12]
	}

	float dynamic_stall_threshold = k * motor->motion.v - sg->STALL_BUFFER;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	ed93 7a07 	vldr	s14, [r3, #28]
 8003b8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	899b      	ldrh	r3, [r3, #12]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba2:	edc7 7a02 	vstr	s15, [r7, #8]
	dynamic_threshold_g = dynamic_stall_threshold;
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c14 <checkStall+0x128>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6013      	str	r3, [r2, #0]


	if (result < dynamic_stall_threshold)
 8003bac:	8afb      	ldrh	r3, [r7, #22]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc2:	dd15      	ble.n	8003bf0 <checkStall+0x104>
	{
		sg->consecutive_low_counter++;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	8b1b      	ldrh	r3, [r3, #24]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	831a      	strh	r2, [r3, #24]
		if (sg->consecutive_low_counter >= sg->MAX_CONSECUTIVE_LOW)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	8b1a      	ldrh	r2, [r3, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	889b      	ldrh	r3, [r3, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d30c      	bcc.n	8003bf6 <checkStall+0x10a>
		{
			stopMotorMovement(motor);
 8003bdc:	6838      	ldr	r0, [r7, #0]
 8003bde:	f7ff fbc5 	bl	800336c <stopMotorMovement>
			sg->stall_flag = 1;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2201      	movs	r2, #1
 8003be6:	739a      	strb	r2, [r3, #14]
			sg->consecutive_low_counter = 0;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2200      	movs	r2, #0
 8003bec:	831a      	strh	r2, [r3, #24]
 8003bee:	e002      	b.n	8003bf6 <checkStall+0x10a>
		}
	}
	else
	{
		sg->consecutive_low_counter = 0;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	831a      	strh	r2, [r3, #24]
	}

	sg->previous_smoothed_result = sg->smoothed_result;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	615a      	str	r2, [r3, #20]

}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000970 	.word	0x20000970
 8003c0c:	2000096c 	.word	0x2000096c
 8003c10:	20000974 	.word	0x20000974
 8003c14:	20000978 	.word	0x20000978

08003c18 <checkDriverStatus>:
 * This function is continuously called while a motor is active.
 * It only does something when status_flag has been set to 1.
 * Then it calls the checkOverheat and Load functions.
 */
void checkDriverStatus(motor_t* motor)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	if (motor->status_flag)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d010      	beq.n	8003c4c <checkDriverStatus+0x34>
	{
//		tmc2209_status_t status;
		uint16_t stallguard_result;

		motor->status_flag = 0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
//		status = get_status(motor->driver);
//
//		checkOverheating(status);

		stallguard_result = get_stall_guard_result(motor->driver);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe ff5e 	bl	8002afa <get_stall_guard_result>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	81fb      	strh	r3, [r7, #14]
		checkStall(stallguard_result, motor);
 8003c42:	89fb      	ldrh	r3, [r7, #14]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff ff50 	bl	8003aec <checkStall>
	}
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <toggle_inverse_motor_direction>:

void toggle_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 1 - stepper_driver->global_config_.shaft;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8003c62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f1c3 0301 	rsb	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	b2d9      	uxtb	r1, r3
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8003c7a:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c7e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff f958 	bl	8002f38 <write_stored_global_config>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <init_motor_1>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart5;

void init_motor_1(motor_t *motor1, tmc2209_stepper_driver_t *driver1)
{
 8003c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c92:	b093      	sub	sp, #76	@ 0x4c
 8003c94:	af10      	add	r7, sp, #64	@ 0x40
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor1);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fb9a 	bl	80043d4 <initializeDefaults>
	motor1->ID = '1';
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2231      	movs	r2, #49	@ 0x31
 8003ca4:	701a      	strb	r2, [r3, #0]

	motor1->gear_ratio = GEAR_RATIO_M_1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8003ddc <init_motor_1+0x14c>)
 8003caa:	605a      	str	r2, [r3, #4]
	motor1->microsteps = MICROSTEPS_M_1;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	609a      	str	r2, [r3, #8]
	motor1->motion.V_MAX 	= V_MAX_M_1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8003cb8:	611a      	str	r2, [r3, #16]
	motor1->motion.ACC_MAX = ACC_MAX_M_1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003cc0:	615a      	str	r2, [r3, #20]
	motor1->motion.DEC_MAX = DEC_MAX_M_1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003cc8:	619a      	str	r2, [r3, #24]

	motor1->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	221e      	movs	r2, #30
 8003cce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	motor1->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2246      	movs	r2, #70	@ 0x46
 8003cd6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

	motor1->gpio_pins.step 		= STEP_1_Pin;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ce0:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor1->gpio_pins.dir 		= DIR_1_Pin;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cea:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor1->gpio_pins.mot_en 	= MOT_EN_1_Pin;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cf4:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
//	motor1->gpio_pins.diag 		= DIAG_1_Pin;
	motor1->gpio_ports.step 	= STEP_1_GPIO_Port;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a39      	ldr	r2, [pc, #228]	@ (8003de0 <init_motor_1+0x150>)
 8003cfc:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor1->gpio_ports.dir 		= DIR_1_GPIO_Port;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a37      	ldr	r2, [pc, #220]	@ (8003de0 <init_motor_1+0x150>)
 8003d04:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor1->gpio_ports.mot_en 	= MOT_EN_1_GPIO_Port;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a35      	ldr	r2, [pc, #212]	@ (8003de0 <init_motor_1+0x150>)
 8003d0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor1->gpio_ports.diag		= DIAG_1_GPIO_Port;

	motor1->motion.motor_control_timer = htim12;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a34      	ldr	r2, [pc, #208]	@ (8003de4 <init_motor_1+0x154>)
 8003d14:	3340      	adds	r3, #64	@ 0x40
 8003d16:	4611      	mov	r1, r2
 8003d18:	2248      	movs	r2, #72	@ 0x48
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 f900 	bl	8007f20 <memcpy>
	motor1->status_check_timer = htim1;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a31      	ldr	r2, [pc, #196]	@ (8003de8 <init_motor_1+0x158>)
 8003d24:	338c      	adds	r3, #140	@ 0x8c
 8003d26:	4611      	mov	r1, r2
 8003d28:	2248      	movs	r2, #72	@ 0x48
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f004 f8f8 	bl	8007f20 <memcpy>
	motor1->uart = huart1;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2e      	ldr	r2, [pc, #184]	@ (8003dec <init_motor_1+0x15c>)
 8003d34:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003d38:	4611      	mov	r1, r2
 8003d3a:	2248      	movs	r2, #72	@ 0x48
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f004 f8ef 	bl	8007f20 <memcpy>

	motor1->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f64e 7295 	movw	r2, #61333	@ 0xef95
 8003d48:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	motor1->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
	motor1->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_1;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a26      	ldr	r2, [pc, #152]	@ (8003df0 <init_motor_1+0x160>)
 8003d58:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor1->stallguard.STALL_BUFFER = STALL_BUFFER_M_1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2219      	movs	r2, #25
 8003d60:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

	tmc2209_set_uart(driver1, huart1);
 8003d64:	4e21      	ldr	r6, [pc, #132]	@ (8003dec <init_motor_1+0x15c>)
 8003d66:	466d      	mov	r5, sp
 8003d68:	f106 040c 	add.w	r4, r6, #12
 8003d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d78:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003d7c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003d80:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003d84:	6838      	ldr	r0, [r7, #0]
 8003d86:	f7ff f936 	bl	8002ff6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver1, motor1->gpio_pins.mot_en, motor1->gpio_ports.mot_en);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d96:	461a      	mov	r2, r3
 8003d98:	6838      	ldr	r0, [r7, #0]
 8003d9a:	f7ff f944 	bl	8003026 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003da4:	6838      	ldr	r0, [r7, #0]
 8003da6:	f7fe fced 	bl	8002784 <tmc2209_setup>
	set_micro_steps_per_step(driver1, motor1->microsteps);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f7fe fd36 	bl	8002824 <set_micro_steps_per_step>
	set_all_current_percent_values(driver1, motor1->current_settings.RUN_CURRENT_PERCENT, motor1->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 1089 	ldrb.w	r1, [r3, #137]	@ 0x89
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	f7fe fdc8 	bl	800295c <set_all_current_percent_values>

	motor1->driver = driver1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ddc:	41200000 	.word	0x41200000
 8003de0:	40020400 	.word	0x40020400
 8003de4:	20000714 	.word	0x20000714
 8003de8:	200004d4 	.word	0x200004d4
 8003dec:	20000834 	.word	0x20000834
 8003df0:	43280000 	.word	0x43280000

08003df4 <init_motor_2>:

void init_motor_2(motor_t *motor2, tmc2209_stepper_driver_t *driver2)
{
 8003df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df6:	b093      	sub	sp, #76	@ 0x4c
 8003df8:	af10      	add	r7, sp, #64	@ 0x40
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor2);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fae8 	bl	80043d4 <initializeDefaults>
	motor2->ID = '2';
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2232      	movs	r2, #50	@ 0x32
 8003e08:	701a      	strb	r2, [r3, #0]

	motor2->gear_ratio = GEAR_RATIO_M_2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a5a      	ldr	r2, [pc, #360]	@ (8003f78 <init_motor_2+0x184>)
 8003e0e:	605a      	str	r2, [r3, #4]
	motor2->microsteps = MICROSTEPS_M_2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	609a      	str	r2, [r3, #8]
	motor2->motion.V_MAX 	= V_MAX_M_2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8003e1c:	611a      	str	r2, [r3, #16]
	motor2->motion.ACC_MAX = ACC_MAX_M_2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8003e24:	615a      	str	r2, [r3, #20]
	motor2->motion.DEC_MAX = DEC_MAX_M_2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8003e2c:	619a      	str	r2, [r3, #24]

	motor2->motion.v = 0;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	61da      	str	r2, [r3, #28]
	motor2->motion.total_steps = 0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	621a      	str	r2, [r3, #32]
	motor2->motion.const_steps = 0;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	625a      	str	r2, [r3, #36]	@ 0x24
	motor2->motion.acc_steps = 0;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	629a      	str	r2, [r3, #40]	@ 0x28
	motor2->motion.dec_steps = 0;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor2->motion.step = 0;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
	motor2->motion.cycle = 0;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	635a      	str	r2, [r3, #52]	@ 0x34

	motor2->active_movement_flag = 0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	731a      	strb	r2, [r3, #12]

	motor2->status_flag = 0;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

	motor2->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	225a      	movs	r2, #90	@ 0x5a
 8003e6c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	motor2->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2264      	movs	r2, #100	@ 0x64
 8003e74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

	motor2->gpio_pins.step 		= STEP_2_Pin;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2280      	movs	r2, #128	@ 0x80
 8003e7c:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor2->gpio_pins.dir 		= DIR_2_Pin;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e86:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor2->gpio_pins.mot_en 	= MOT_EN_2_Pin;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2240      	movs	r2, #64	@ 0x40
 8003e8e:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
//	motor2->gpio_pins.diag 		= DIAG_2_Pin;
	motor2->gpio_ports.step 	= STEP_2_GPIO_Port;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a39      	ldr	r2, [pc, #228]	@ (8003f7c <init_motor_2+0x188>)
 8003e96:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor2->gpio_ports.dir 		= DIR_2_GPIO_Port;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a37      	ldr	r2, [pc, #220]	@ (8003f7c <init_motor_2+0x188>)
 8003e9e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor2->gpio_ports.mot_en 	= MOT_EN_2_GPIO_Port;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a35      	ldr	r2, [pc, #212]	@ (8003f7c <init_motor_2+0x188>)
 8003ea6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor2->gpio_ports.diag 	= DIAG_2_GPIO_Port;

	motor2->motion.motor_control_timer = htim13;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a34      	ldr	r2, [pc, #208]	@ (8003f80 <init_motor_2+0x18c>)
 8003eae:	3340      	adds	r3, #64	@ 0x40
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	2248      	movs	r2, #72	@ 0x48
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 f833 	bl	8007f20 <memcpy>
	motor2->status_check_timer = htim6;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	@ (8003f84 <init_motor_2+0x190>)
 8003ebe:	338c      	adds	r3, #140	@ 0x8c
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	2248      	movs	r2, #72	@ 0x48
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f004 f82b 	bl	8007f20 <memcpy>

	motor2->uart = huart6;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8003f88 <init_motor_2+0x194>)
 8003ece:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	2248      	movs	r2, #72	@ 0x48
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 f822 	bl	8007f20 <memcpy>

	motor2->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8003ee2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	motor2->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
	motor2->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a26      	ldr	r2, [pc, #152]	@ (8003f8c <init_motor_2+0x198>)
 8003ef2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor2->stallguard.STALL_BUFFER = STALL_BUFFER_M_2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2228      	movs	r2, #40	@ 0x28
 8003efa:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

	tmc2209_set_uart(driver2, motor2->uart);
 8003efe:	687e      	ldr	r6, [r7, #4]
 8003f00:	466d      	mov	r5, sp
 8003f02:	f506 748a 	add.w	r4, r6, #276	@ 0x114
 8003f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f12:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003f16:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003f1a:	f506 7384 	add.w	r3, r6, #264	@ 0x108
 8003f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f20:	6838      	ldr	r0, [r7, #0]
 8003f22:	f7ff f868 	bl	8002ff6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver2, motor2->gpio_pins.mot_en, motor2->gpio_ports.mot_en);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f32:	461a      	mov	r2, r3
 8003f34:	6838      	ldr	r0, [r7, #0]
 8003f36:	f7ff f876 	bl	8003026 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_0);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003f40:	6838      	ldr	r0, [r7, #0]
 8003f42:	f7fe fc1f 	bl	8002784 <tmc2209_setup>
//	disable_stealth_chop(motor2->driver);
	set_micro_steps_per_step(driver2, motor2->microsteps);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	6838      	ldr	r0, [r7, #0]
 8003f50:	f7fe fc68 	bl	8002824 <set_micro_steps_per_step>
	set_all_current_percent_values(driver2, motor2->current_settings.RUN_CURRENT_PERCENT, motor2->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 1089 	ldrb.w	r1, [r3, #137]	@ 0x89
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8003f60:	2300      	movs	r3, #0
 8003f62:	6838      	ldr	r0, [r7, #0]
 8003f64:	f7fe fcfa 	bl	800295c <set_all_current_percent_values>

	motor2->driver = driver2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f78:	40f00000 	.word	0x40f00000
 8003f7c:	40020000 	.word	0x40020000
 8003f80:	2000075c 	.word	0x2000075c
 8003f84:	200005ac 	.word	0x200005ac
 8003f88:	2000090c 	.word	0x2000090c
 8003f8c:	42a4cccd 	.word	0x42a4cccd

08003f90 <init_motor_3>:

void init_motor_3(motor_t *motor3, tmc2209_stepper_driver_t *driver3)
{
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	b093      	sub	sp, #76	@ 0x4c
 8003f94:	af10      	add	r7, sp, #64	@ 0x40
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor3);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa1a 	bl	80043d4 <initializeDefaults>

	motor3->ID = '3';
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2233      	movs	r2, #51	@ 0x33
 8003fa4:	701a      	strb	r2, [r3, #0]

	motor3->gear_ratio = GEAR_RATIO_M_3;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a50      	ldr	r2, [pc, #320]	@ (80040ec <init_motor_3+0x15c>)
 8003faa:	605a      	str	r2, [r3, #4]
	motor3->microsteps = MICROSTEPS_M_3;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	609a      	str	r2, [r3, #8]
	motor3->motion.V_MAX 	= V_MAX_M_3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8003fb8:	611a      	str	r2, [r3, #16]
	motor3->motion.ACC_MAX = ACC_MAX_M_3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003fc0:	615a      	str	r2, [r3, #20]
	motor3->motion.DEC_MAX = DEC_MAX_M_3;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003fc8:	619a      	str	r2, [r3, #24]

	motor3->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_3;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2228      	movs	r2, #40	@ 0x28
 8003fce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	motor3->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_3;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	223c      	movs	r2, #60	@ 0x3c
 8003fd6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

	motor3->gpio_pins.step 		= STEP_3_Pin;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor3->gpio_pins.dir 		= DIR_3_Pin;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fe8:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor3->gpio_pins.mot_en 	= MOT_EN_3_Pin;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	motor3->gpio_pins.diag 		= DIAG_3_Pin;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ffa:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
	motor3->gpio_ports.step 	= STEP_3_GPIO_Port;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a3b      	ldr	r2, [pc, #236]	@ (80040f0 <init_motor_3+0x160>)
 8004002:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor3->gpio_ports.dir 		= DIR_3_GPIO_Port;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a39      	ldr	r2, [pc, #228]	@ (80040f0 <init_motor_3+0x160>)
 800400a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor3->gpio_ports.mot_en 	= MOT_EN_3_GPIO_Port;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a37      	ldr	r2, [pc, #220]	@ (80040f0 <init_motor_3+0x160>)
 8004012:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor3->gpio_ports.diag 	= DIAG_3_GPIO_Port;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a36      	ldr	r2, [pc, #216]	@ (80040f4 <init_motor_3+0x164>)
 800401a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

	motor3->motion.motor_control_timer = htim3;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a35      	ldr	r2, [pc, #212]	@ (80040f8 <init_motor_3+0x168>)
 8004022:	3340      	adds	r3, #64	@ 0x40
 8004024:	4611      	mov	r1, r2
 8004026:	2248      	movs	r2, #72	@ 0x48
 8004028:	4618      	mov	r0, r3
 800402a:	f003 ff79 	bl	8007f20 <memcpy>
	motor3->status_check_timer = htim7;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a32      	ldr	r2, [pc, #200]	@ (80040fc <init_motor_3+0x16c>)
 8004032:	338c      	adds	r3, #140	@ 0x8c
 8004034:	4611      	mov	r1, r2
 8004036:	2248      	movs	r2, #72	@ 0x48
 8004038:	4618      	mov	r0, r3
 800403a:	f003 ff71 	bl	8007f20 <memcpy>

	motor3->uart = huart3;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2f      	ldr	r2, [pc, #188]	@ (8004100 <init_motor_3+0x170>)
 8004042:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004046:	4611      	mov	r1, r2
 8004048:	2248      	movs	r2, #72	@ 0x48
 800404a:	4618      	mov	r0, r3
 800404c:	f003 ff68 	bl	8007f20 <memcpy>

	motor3->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_3;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8004056:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	motor3->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_3;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
	motor3->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_3;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a27      	ldr	r2, [pc, #156]	@ (8004104 <init_motor_3+0x174>)
 8004066:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor3->stallguard.STALL_BUFFER = STALL_BUFFER_M_3;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2219      	movs	r2, #25
 800406e:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

	tmc2209_set_uart(driver3, huart3);
 8004072:	4e23      	ldr	r6, [pc, #140]	@ (8004100 <init_motor_3+0x170>)
 8004074:	466d      	mov	r5, sp
 8004076:	f106 040c 	add.w	r4, r6, #12
 800407a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800407c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800407e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004086:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800408a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800408e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	f7fe ffaf 	bl	8002ff6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver3, motor3->gpio_pins.mot_en, motor3->gpio_ports.mot_en);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80040a4:	461a      	mov	r2, r3
 80040a6:	6838      	ldr	r0, [r7, #0]
 80040a8:	f7fe ffbd 	bl	8003026 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_0);
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80040b2:	6838      	ldr	r0, [r7, #0]
 80040b4:	f7fe fb66 	bl	8002784 <tmc2209_setup>
	set_micro_steps_per_step(driver3, motor3->microsteps);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4619      	mov	r1, r3
 80040c0:	6838      	ldr	r0, [r7, #0]
 80040c2:	f7fe fbaf 	bl	8002824 <set_micro_steps_per_step>
	set_all_current_percent_values(driver3, motor3->current_settings.RUN_CURRENT_PERCENT, motor3->current_settings.HOLD_CURRENT_PERCENT, 0);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 1089 	ldrb.w	r1, [r3, #137]	@ 0x89
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80040d2:	2300      	movs	r3, #0
 80040d4:	6838      	ldr	r0, [r7, #0]
 80040d6:	f7fe fc41 	bl	800295c <set_all_current_percent_values>

	motor3->driver = driver3;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40f00000 	.word	0x40f00000
 80040f0:	40020800 	.word	0x40020800
 80040f4:	40020400 	.word	0x40020400
 80040f8:	2000051c 	.word	0x2000051c
 80040fc:	200005f4 	.word	0x200005f4
 8004100:	200008c4 	.word	0x200008c4
 8004104:	430c0000 	.word	0x430c0000

08004108 <init_motor_4>:

void init_motor_4(motor_t *motor4, tmc2209_stepper_driver_t *driver4)
{
 8004108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410a:	b093      	sub	sp, #76	@ 0x4c
 800410c:	af10      	add	r7, sp, #64	@ 0x40
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor4);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f95e 	bl	80043d4 <initializeDefaults>

	motor4->ID = '4';
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2234      	movs	r2, #52	@ 0x34
 800411c:	701a      	strb	r2, [r3, #0]

	motor4->gear_ratio = GEAR_RATIO_M_4;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4d      	ldr	r2, [pc, #308]	@ (8004258 <init_motor_4+0x150>)
 8004122:	605a      	str	r2, [r3, #4]
	motor4->microsteps = MICROSTEPS_M_4;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2208      	movs	r2, #8
 8004128:	609a      	str	r2, [r3, #8]
	motor4->motion.V_MAX 	= V_MAX_M_4;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004130:	611a      	str	r2, [r3, #16]
	motor4->motion.ACC_MAX = ACC_MAX_M_4;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8004138:	615a      	str	r2, [r3, #20]
	motor4->motion.DEC_MAX = DEC_MAX_M_4;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8004140:	619a      	str	r2, [r3, #24]

	motor4->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_4;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2232      	movs	r2, #50	@ 0x32
 8004146:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	motor4->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_4;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2246      	movs	r2, #70	@ 0x46
 800414e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

	motor4->gpio_pins.step 		= STEP_4_Pin;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor4->gpio_pins.dir 		= DIR_4_Pin;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2210      	movs	r2, #16
 800415e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor4->gpio_pins.mot_en 	= MOT_EN_4_Pin;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
//	motor4->gpio_pins.diag 		= DIAG_4_Pin;
	motor4->gpio_ports.step 	= STEP_4_GPIO_Port;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a3b      	ldr	r2, [pc, #236]	@ (800425c <init_motor_4+0x154>)
 800416e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor4->gpio_ports.dir 		= DIR_4_GPIO_Port;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a39      	ldr	r2, [pc, #228]	@ (800425c <init_motor_4+0x154>)
 8004176:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor4->gpio_ports.mot_en 	= MOT_EN_4_GPIO_Port;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a37      	ldr	r2, [pc, #220]	@ (800425c <init_motor_4+0x154>)
 800417e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor4->gpio_ports.diag 		= DIAG_4_GPIO_Port;

	motor4->motion.motor_control_timer = htim4;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a36      	ldr	r2, [pc, #216]	@ (8004260 <init_motor_4+0x158>)
 8004186:	3340      	adds	r3, #64	@ 0x40
 8004188:	4611      	mov	r1, r2
 800418a:	2248      	movs	r2, #72	@ 0x48
 800418c:	4618      	mov	r0, r3
 800418e:	f003 fec7 	bl	8007f20 <memcpy>
	motor4->status_check_timer = htim9;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a33      	ldr	r2, [pc, #204]	@ (8004264 <init_motor_4+0x15c>)
 8004196:	338c      	adds	r3, #140	@ 0x8c
 8004198:	4611      	mov	r1, r2
 800419a:	2248      	movs	r2, #72	@ 0x48
 800419c:	4618      	mov	r0, r3
 800419e:	f003 febf 	bl	8007f20 <memcpy>

	motor4->uart = huart4;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a30      	ldr	r2, [pc, #192]	@ (8004268 <init_motor_4+0x160>)
 80041a6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80041aa:	4611      	mov	r1, r2
 80041ac:	2248      	movs	r2, #72	@ 0x48
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 feb6 	bl	8007f20 <memcpy>

	motor4->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_4;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f241 7270 	movw	r2, #6000	@ 0x1770
 80041ba:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	motor4->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_4;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
	motor4->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_4;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	@ (800426c <init_motor_4+0x164>)
 80041ca:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor4->stallguard.STALL_BUFFER = STALL_BUFFER_M_4;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	220c      	movs	r2, #12
 80041d2:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

	tmc2209_set_uart(driver4, huart4);
 80041d6:	4e24      	ldr	r6, [pc, #144]	@ (8004268 <init_motor_4+0x160>)
 80041d8:	466d      	mov	r5, sp
 80041da:	f106 040c 	add.w	r4, r6, #12
 80041de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80041ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80041f2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80041f6:	6838      	ldr	r0, [r7, #0]
 80041f8:	f7fe fefd 	bl	8002ff6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver4, motor4->gpio_pins.mot_en, motor4->gpio_ports.mot_en);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004208:	461a      	mov	r2, r3
 800420a:	6838      	ldr	r0, [r7, #0]
 800420c:	f7fe ff0b 	bl	8003026 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004216:	6838      	ldr	r0, [r7, #0]
 8004218:	f7fe fab4 	bl	8002784 <tmc2209_setup>
	enable_cool_step(driver4, 0, 1);
 800421c:	2201      	movs	r2, #1
 800421e:	2100      	movs	r1, #0
 8004220:	6838      	ldr	r0, [r7, #0]
 8004222:	f7fe fc2d 	bl	8002a80 <enable_cool_step>
	set_micro_steps_per_step(driver4, motor4->microsteps);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	b29b      	uxth	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6838      	ldr	r0, [r7, #0]
 8004230:	f7fe faf8 	bl	8002824 <set_micro_steps_per_step>
	set_all_current_percent_values(driver4, motor4->current_settings.RUN_CURRENT_PERCENT, motor4->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 1089 	ldrb.w	r1, [r3, #137]	@ 0x89
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8004240:	2300      	movs	r3, #0
 8004242:	6838      	ldr	r0, [r7, #0]
 8004244:	f7fe fb8a 	bl	800295c <set_all_current_percent_values>

	motor4->driver = driver4;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004258:	40f00000 	.word	0x40f00000
 800425c:	40020400 	.word	0x40020400
 8004260:	20000564 	.word	0x20000564
 8004264:	20000684 	.word	0x20000684
 8004268:	200007a4 	.word	0x200007a4
 800426c:	421c0000 	.word	0x421c0000

08004270 <init_motor_5>:

void init_motor_5(motor_t *motor5, tmc2209_stepper_driver_t *driver5)
{
 8004270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004272:	b093      	sub	sp, #76	@ 0x4c
 8004274:	af10      	add	r7, sp, #64	@ 0x40
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor5);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8aa 	bl	80043d4 <initializeDefaults>

	motor5->ID = '5';
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2235      	movs	r2, #53	@ 0x35
 8004284:	701a      	strb	r2, [r3, #0]

	motor5->gear_ratio = GEAR_RATIO_M_5;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800428c:	605a      	str	r2, [r3, #4]
	motor5->microsteps = MICROSTEPS_M_5;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	609a      	str	r2, [r3, #8]
	motor5->motion.V_MAX 	= V_MAX_M_5;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800429a:	611a      	str	r2, [r3, #16]
	motor5->motion.ACC_MAX = ACC_MAX_M_5;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80042a2:	615a      	str	r2, [r3, #20]
	motor5->motion.DEC_MAX = DEC_MAX_M_5;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80042aa:	619a      	str	r2, [r3, #24]

	motor5->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_5;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2214      	movs	r2, #20
 80042b0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	motor5->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_5;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2214      	movs	r2, #20
 80042b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

	motor5->gpio_pins.step 		= STEP_5_Pin;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042c2:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor5->gpio_pins.dir 		= DIR_5_Pin;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042cc:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor5->gpio_pins.mot_en 	= MOT_EN_5_Pin;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2210      	movs	r2, #16
 80042d4:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	motor5->gpio_ports.step 	= STEP_5_GPIO_Port;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a38      	ldr	r2, [pc, #224]	@ (80043bc <init_motor_5+0x14c>)
 80042dc:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
//	motor5->gpio_pins.diag 		= DIAG_5_Pin;
	motor5->gpio_ports.dir 		= DIR_5_GPIO_Port;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a36      	ldr	r2, [pc, #216]	@ (80043bc <init_motor_5+0x14c>)
 80042e4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor5->gpio_ports.mot_en 	= MOT_EN_5_GPIO_Port;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a34      	ldr	r2, [pc, #208]	@ (80043bc <init_motor_5+0x14c>)
 80042ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor5->gpio_ports.diag 		= DIAG_5_GPIO_Port;

	motor5->motion.motor_control_timer = htim8;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a33      	ldr	r2, [pc, #204]	@ (80043c0 <init_motor_5+0x150>)
 80042f4:	3340      	adds	r3, #64	@ 0x40
 80042f6:	4611      	mov	r1, r2
 80042f8:	2248      	movs	r2, #72	@ 0x48
 80042fa:	4618      	mov	r0, r3
 80042fc:	f003 fe10 	bl	8007f20 <memcpy>
	motor5->status_check_timer = htim10;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a30      	ldr	r2, [pc, #192]	@ (80043c4 <init_motor_5+0x154>)
 8004304:	338c      	adds	r3, #140	@ 0x8c
 8004306:	4611      	mov	r1, r2
 8004308:	2248      	movs	r2, #72	@ 0x48
 800430a:	4618      	mov	r0, r3
 800430c:	f003 fe08 	bl	8007f20 <memcpy>

	motor5->uart = huart5;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a2d      	ldr	r2, [pc, #180]	@ (80043c8 <init_motor_5+0x158>)
 8004314:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004318:	4611      	mov	r1, r2
 800431a:	2248      	movs	r2, #72	@ 0x48
 800431c:	4618      	mov	r0, r3
 800431e:	f003 fdff 	bl	8007f20 <memcpy>

	motor5->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_5;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a29      	ldr	r2, [pc, #164]	@ (80043cc <init_motor_5+0x15c>)
 8004326:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	motor5->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_5;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
	motor5->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_5;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a26      	ldr	r2, [pc, #152]	@ (80043d0 <init_motor_5+0x160>)
 8004336:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor5->stallguard.STALL_BUFFER = STALL_BUFFER_M_5;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	221e      	movs	r2, #30
 800433e:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

	tmc2209_set_uart(driver5, huart5);
 8004342:	4e21      	ldr	r6, [pc, #132]	@ (80043c8 <init_motor_5+0x158>)
 8004344:	466d      	mov	r5, sp
 8004346:	f106 040c 	add.w	r4, r6, #12
 800434a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800434e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004356:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800435a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800435e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004362:	6838      	ldr	r0, [r7, #0]
 8004364:	f7fe fe47 	bl	8002ff6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver5, motor5->gpio_pins.mot_en, motor5->gpio_ports.mot_en);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004374:	461a      	mov	r2, r3
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	f7fe fe55 	bl	8003026 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_0);
 800437c:	2200      	movs	r2, #0
 800437e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004382:	6838      	ldr	r0, [r7, #0]
 8004384:	f7fe f9fe 	bl	8002784 <tmc2209_setup>
	set_micro_steps_per_step(driver5, motor5->microsteps);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	b29b      	uxth	r3, r3
 800438e:	4619      	mov	r1, r3
 8004390:	6838      	ldr	r0, [r7, #0]
 8004392:	f7fe fa47 	bl	8002824 <set_micro_steps_per_step>
	set_all_current_percent_values(driver5, motor5->current_settings.RUN_CURRENT_PERCENT, motor5->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 1089 	ldrb.w	r1, [r3, #137]	@ 0x89
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80043a2:	2300      	movs	r3, #0
 80043a4:	6838      	ldr	r0, [r7, #0]
 80043a6:	f7fe fad9 	bl	800295c <set_all_current_percent_values>

	motor5->driver = driver5;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40020800 	.word	0x40020800
 80043c0:	2000063c 	.word	0x2000063c
 80043c4:	200006cc 	.word	0x200006cc
 80043c8:	200007ec 	.word	0x200007ec
 80043cc:	00027100 	.word	0x00027100
 80043d0:	433e0000 	.word	0x433e0000

080043d4 <initializeDefaults>:

void initializeDefaults(motor_t * motor)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	motor->motion.v = 0;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	61da      	str	r2, [r3, #28]
	motor->motion.total_steps = 0;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	621a      	str	r2, [r3, #32]
	motor->motion.const_steps = 0;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->motion.acc_steps = 0;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = 0;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.step = 0;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	635a      	str	r2, [r3, #52]	@ 0x34

	motor->active_movement_flag = 0;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	731a      	strb	r2, [r3, #12]

	motor->status_flag = 0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

	motor->stallguard.smoothed_result = 0;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor->stallguard.previous_smoothed_result = 0;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	motor->stallguard.consecutive_low_counter = 0;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
	motor->stallguard.stall_flag = 0;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004480 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800444c:	f7fe f988 	bl	8002760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004450:	480c      	ldr	r0, [pc, #48]	@ (8004484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004452:	490d      	ldr	r1, [pc, #52]	@ (8004488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004454:	4a0d      	ldr	r2, [pc, #52]	@ (800448c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004458:	e002      	b.n	8004460 <LoopCopyDataInit>

0800445a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800445a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800445c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800445e:	3304      	adds	r3, #4

08004460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004464:	d3f9      	bcc.n	800445a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004466:	4a0a      	ldr	r2, [pc, #40]	@ (8004490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004468:	4c0a      	ldr	r4, [pc, #40]	@ (8004494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800446a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800446c:	e001      	b.n	8004472 <LoopFillZerobss>

0800446e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800446e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004470:	3204      	adds	r2, #4

08004472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004474:	d3fb      	bcc.n	800446e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004476:	f003 fd2d 	bl	8007ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800447a:	f7fc ff15 	bl	80012a8 <main>
  bx  lr    
 800447e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004488:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800448c:	08008dcc 	.word	0x08008dcc
  ldr r2, =_sbss
 8004490:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8004494:	20000ac8 	.word	0x20000ac8

08004498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004498:	e7fe      	b.n	8004498 <ADC_IRQHandler>
	...

0800449c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044a0:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <HAL_Init+0x40>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0d      	ldr	r2, [pc, #52]	@ (80044dc <HAL_Init+0x40>)
 80044a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <HAL_Init+0x40>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	@ (80044dc <HAL_Init+0x40>)
 80044b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044b8:	4b08      	ldr	r3, [pc, #32]	@ (80044dc <HAL_Init+0x40>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a07      	ldr	r2, [pc, #28]	@ (80044dc <HAL_Init+0x40>)
 80044be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c4:	2003      	movs	r0, #3
 80044c6:	f000 f94f 	bl	8004768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044ca:	2000      	movs	r0, #0
 80044cc:	f000 f808 	bl	80044e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044d0:	f7fd fd1a 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40023c00 	.word	0x40023c00

080044e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044e8:	4b12      	ldr	r3, [pc, #72]	@ (8004534 <HAL_InitTick+0x54>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <HAL_InitTick+0x58>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	4619      	mov	r1, r3
 80044f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f967 	bl	80047d2 <HAL_SYSTICK_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e00e      	b.n	800452c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b0f      	cmp	r3, #15
 8004512:	d80a      	bhi.n	800452a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004514:	2200      	movs	r2, #0
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	f000 f92f 	bl	800477e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004520:	4a06      	ldr	r2, [pc, #24]	@ (800453c <HAL_InitTick+0x5c>)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e000      	b.n	800452c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000000 	.word	0x20000000
 8004538:	20000008 	.word	0x20000008
 800453c:	20000004 	.word	0x20000004

08004540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004544:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_IncTick+0x20>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <HAL_IncTick+0x24>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4413      	add	r3, r2
 8004550:	4a04      	ldr	r2, [pc, #16]	@ (8004564 <HAL_IncTick+0x24>)
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000008 	.word	0x20000008
 8004564:	2000097c 	.word	0x2000097c

08004568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return uwTick;
 800456c:	4b03      	ldr	r3, [pc, #12]	@ (800457c <HAL_GetTick+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	2000097c 	.word	0x2000097c

08004580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004588:	f7ff ffee 	bl	8004568 <HAL_GetTick>
 800458c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d005      	beq.n	80045a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <HAL_Delay+0x44>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045a6:	bf00      	nop
 80045a8:	f7ff ffde 	bl	8004568 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d8f7      	bhi.n	80045a8 <HAL_Delay+0x28>
  {
  }
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000008 	.word	0x20000008

080045c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d8:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <__NVIC_SetPriorityGrouping+0x44>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045e4:	4013      	ands	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045fa:	4a04      	ldr	r2, [pc, #16]	@ (800460c <__NVIC_SetPriorityGrouping+0x44>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	60d3      	str	r3, [r2, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004614:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <__NVIC_GetPriorityGrouping+0x18>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 0307 	and.w	r3, r3, #7
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	2b00      	cmp	r3, #0
 800463c:	db0b      	blt.n	8004656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	f003 021f 	and.w	r2, r3, #31
 8004644:	4907      	ldr	r1, [pc, #28]	@ (8004664 <__NVIC_EnableIRQ+0x38>)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2001      	movs	r0, #1
 800464e:	fa00 f202 	lsl.w	r2, r0, r2
 8004652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000e100 	.word	0xe000e100

08004668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	db0a      	blt.n	8004692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	490c      	ldr	r1, [pc, #48]	@ (80046b4 <__NVIC_SetPriority+0x4c>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	0112      	lsls	r2, r2, #4
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	440b      	add	r3, r1
 800468c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004690:	e00a      	b.n	80046a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4908      	ldr	r1, [pc, #32]	@ (80046b8 <__NVIC_SetPriority+0x50>)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	3b04      	subs	r3, #4
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	440b      	add	r3, r1
 80046a6:	761a      	strb	r2, [r3, #24]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000e100 	.word	0xe000e100
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	@ 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f1c3 0307 	rsb	r3, r3, #7
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	bf28      	it	cs
 80046da:	2304      	movcs	r3, #4
 80046dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d902      	bls.n	80046ec <NVIC_EncodePriority+0x30>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3b03      	subs	r3, #3
 80046ea:	e000      	b.n	80046ee <NVIC_EncodePriority+0x32>
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	401a      	ands	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004704:	f04f 31ff 	mov.w	r1, #4294967295
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	43d9      	mvns	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	4313      	orrs	r3, r2
         );
}
 8004716:	4618      	mov	r0, r3
 8004718:	3724      	adds	r7, #36	@ 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3b01      	subs	r3, #1
 8004730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004734:	d301      	bcc.n	800473a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004736:	2301      	movs	r3, #1
 8004738:	e00f      	b.n	800475a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800473a:	4a0a      	ldr	r2, [pc, #40]	@ (8004764 <SysTick_Config+0x40>)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3b01      	subs	r3, #1
 8004740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004742:	210f      	movs	r1, #15
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	f7ff ff8e 	bl	8004668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800474c:	4b05      	ldr	r3, [pc, #20]	@ (8004764 <SysTick_Config+0x40>)
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004752:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <SysTick_Config+0x40>)
 8004754:	2207      	movs	r2, #7
 8004756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	e000e010 	.word	0xe000e010

08004768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff ff29 	bl	80045c8 <__NVIC_SetPriorityGrouping>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	4603      	mov	r3, r0
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004790:	f7ff ff3e 	bl	8004610 <__NVIC_GetPriorityGrouping>
 8004794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	f7ff ff8e 	bl	80046bc <NVIC_EncodePriority>
 80047a0:	4602      	mov	r2, r0
 80047a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ff5d 	bl	8004668 <__NVIC_SetPriority>
}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	4603      	mov	r3, r0
 80047be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff31 	bl	800462c <__NVIC_EnableIRQ>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff ffa2 	bl	8004724 <SysTick_Config>
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	@ 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	e165      	b.n	8004ad4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004808:	2201      	movs	r2, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4013      	ands	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	429a      	cmp	r2, r3
 8004822:	f040 8154 	bne.w	8004ace <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d005      	beq.n	800483e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800483a:	2b02      	cmp	r3, #2
 800483c:	d130      	bne.n	80048a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	2203      	movs	r2, #3
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004874:	2201      	movs	r2, #1
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 0201 	and.w	r2, r3, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d017      	beq.n	80048dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	2203      	movs	r2, #3
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d123      	bne.n	8004930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	08da      	lsrs	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3208      	adds	r2, #8
 80048f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	220f      	movs	r2, #15
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	08da      	lsrs	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3208      	adds	r2, #8
 800492a:	69b9      	ldr	r1, [r7, #24]
 800492c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0203 	and.w	r2, r3, #3
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80ae 	beq.w	8004ace <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	4b5d      	ldr	r3, [pc, #372]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497a:	4a5c      	ldr	r2, [pc, #368]	@ (8004aec <HAL_GPIO_Init+0x300>)
 800497c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004980:	6453      	str	r3, [r2, #68]	@ 0x44
 8004982:	4b5a      	ldr	r3, [pc, #360]	@ (8004aec <HAL_GPIO_Init+0x300>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800498e:	4a58      	ldr	r2, [pc, #352]	@ (8004af0 <HAL_GPIO_Init+0x304>)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	3302      	adds	r3, #2
 8004996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	220f      	movs	r2, #15
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a4f      	ldr	r2, [pc, #316]	@ (8004af4 <HAL_GPIO_Init+0x308>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d025      	beq.n	8004a06 <HAL_GPIO_Init+0x21a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a4e      	ldr	r2, [pc, #312]	@ (8004af8 <HAL_GPIO_Init+0x30c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01f      	beq.n	8004a02 <HAL_GPIO_Init+0x216>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4d      	ldr	r2, [pc, #308]	@ (8004afc <HAL_GPIO_Init+0x310>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d019      	beq.n	80049fe <HAL_GPIO_Init+0x212>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4c      	ldr	r2, [pc, #304]	@ (8004b00 <HAL_GPIO_Init+0x314>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_GPIO_Init+0x20e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004b04 <HAL_GPIO_Init+0x318>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00d      	beq.n	80049f6 <HAL_GPIO_Init+0x20a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004b08 <HAL_GPIO_Init+0x31c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d007      	beq.n	80049f2 <HAL_GPIO_Init+0x206>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a49      	ldr	r2, [pc, #292]	@ (8004b0c <HAL_GPIO_Init+0x320>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <HAL_GPIO_Init+0x202>
 80049ea:	2306      	movs	r3, #6
 80049ec:	e00c      	b.n	8004a08 <HAL_GPIO_Init+0x21c>
 80049ee:	2307      	movs	r3, #7
 80049f0:	e00a      	b.n	8004a08 <HAL_GPIO_Init+0x21c>
 80049f2:	2305      	movs	r3, #5
 80049f4:	e008      	b.n	8004a08 <HAL_GPIO_Init+0x21c>
 80049f6:	2304      	movs	r3, #4
 80049f8:	e006      	b.n	8004a08 <HAL_GPIO_Init+0x21c>
 80049fa:	2303      	movs	r3, #3
 80049fc:	e004      	b.n	8004a08 <HAL_GPIO_Init+0x21c>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e002      	b.n	8004a08 <HAL_GPIO_Init+0x21c>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_GPIO_Init+0x21c>
 8004a06:	2300      	movs	r3, #0
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	f002 0203 	and.w	r2, r2, #3
 8004a0e:	0092      	lsls	r2, r2, #2
 8004a10:	4093      	lsls	r3, r2
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a18:	4935      	ldr	r1, [pc, #212]	@ (8004af0 <HAL_GPIO_Init+0x304>)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a26:	4b3a      	ldr	r3, [pc, #232]	@ (8004b10 <HAL_GPIO_Init+0x324>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a4a:	4a31      	ldr	r2, [pc, #196]	@ (8004b10 <HAL_GPIO_Init+0x324>)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a50:	4b2f      	ldr	r3, [pc, #188]	@ (8004b10 <HAL_GPIO_Init+0x324>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a74:	4a26      	ldr	r2, [pc, #152]	@ (8004b10 <HAL_GPIO_Init+0x324>)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a7a:	4b25      	ldr	r3, [pc, #148]	@ (8004b10 <HAL_GPIO_Init+0x324>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4013      	ands	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b10 <HAL_GPIO_Init+0x324>)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b10 <HAL_GPIO_Init+0x324>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ac8:	4a11      	ldr	r2, [pc, #68]	@ (8004b10 <HAL_GPIO_Init+0x324>)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2b0f      	cmp	r3, #15
 8004ad8:	f67f ae96 	bls.w	8004808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	3724      	adds	r7, #36	@ 0x24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40013800 	.word	0x40013800
 8004af4:	40020000 	.word	0x40020000
 8004af8:	40020400 	.word	0x40020400
 8004afc:	40020800 	.word	0x40020800
 8004b00:	40020c00 	.word	0x40020c00
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40021400 	.word	0x40021400
 8004b0c:	40021800 	.word	0x40021800
 8004b10:	40013c00 	.word	0x40013c00

08004b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	887b      	ldrh	r3, [r7, #2]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	e001      	b.n	8004b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
 8004b50:	4613      	mov	r3, r2
 8004b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b54:	787b      	ldrb	r3, [r7, #1]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b5a:	887a      	ldrh	r2, [r7, #2]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b60:	e003      	b.n	8004b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b62:	887b      	ldrh	r3, [r7, #2]
 8004b64:	041a      	lsls	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	619a      	str	r2, [r3, #24]
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b88:	887a      	ldrh	r2, [r7, #2]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	041a      	lsls	r2, r3, #16
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	43d9      	mvns	r1, r3
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	400b      	ands	r3, r1
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	619a      	str	r2, [r3, #24]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bb6:	4b08      	ldr	r3, [pc, #32]	@ (8004bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d006      	beq.n	8004bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bc2:	4a05      	ldr	r2, [pc, #20]	@ (8004bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bc8:	88fb      	ldrh	r3, [r7, #6]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fd48 	bl	8003660 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40013c00 	.word	0x40013c00

08004bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e12b      	b.n	8004e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd f9a8 	bl	8001f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2224      	movs	r2, #36	@ 0x24
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0201 	bic.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c40:	f000 fd6c 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8004c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4a81      	ldr	r2, [pc, #516]	@ (8004e50 <HAL_I2C_Init+0x274>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d807      	bhi.n	8004c60 <HAL_I2C_Init+0x84>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a80      	ldr	r2, [pc, #512]	@ (8004e54 <HAL_I2C_Init+0x278>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	bf94      	ite	ls
 8004c58:	2301      	movls	r3, #1
 8004c5a:	2300      	movhi	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e006      	b.n	8004c6e <HAL_I2C_Init+0x92>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a7d      	ldr	r2, [pc, #500]	@ (8004e58 <HAL_I2C_Init+0x27c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bf94      	ite	ls
 8004c68:	2301      	movls	r3, #1
 8004c6a:	2300      	movhi	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0e7      	b.n	8004e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a78      	ldr	r2, [pc, #480]	@ (8004e5c <HAL_I2C_Init+0x280>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	0c9b      	lsrs	r3, r3, #18
 8004c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8004e50 <HAL_I2C_Init+0x274>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d802      	bhi.n	8004cb0 <HAL_I2C_Init+0xd4>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	3301      	adds	r3, #1
 8004cae:	e009      	b.n	8004cc4 <HAL_I2C_Init+0xe8>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	4a69      	ldr	r2, [pc, #420]	@ (8004e60 <HAL_I2C_Init+0x284>)
 8004cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc0:	099b      	lsrs	r3, r3, #6
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004cd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	495c      	ldr	r1, [pc, #368]	@ (8004e50 <HAL_I2C_Init+0x274>)
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	d819      	bhi.n	8004d18 <HAL_I2C_Init+0x13c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1e59      	subs	r1, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004cf8:	400b      	ands	r3, r1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_I2C_Init+0x138>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1e59      	subs	r1, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d12:	e051      	b.n	8004db8 <HAL_I2C_Init+0x1dc>
 8004d14:	2304      	movs	r3, #4
 8004d16:	e04f      	b.n	8004db8 <HAL_I2C_Init+0x1dc>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d111      	bne.n	8004d44 <HAL_I2C_Init+0x168>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1e58      	subs	r0, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	440b      	add	r3, r1
 8004d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d32:	3301      	adds	r3, #1
 8004d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e012      	b.n	8004d6a <HAL_I2C_Init+0x18e>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1e58      	subs	r0, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	0099      	lsls	r1, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_Init+0x196>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e022      	b.n	8004db8 <HAL_I2C_Init+0x1dc>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10e      	bne.n	8004d98 <HAL_I2C_Init+0x1bc>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1e58      	subs	r0, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	440b      	add	r3, r1
 8004d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d96:	e00f      	b.n	8004db8 <HAL_I2C_Init+0x1dc>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1e58      	subs	r0, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	0099      	lsls	r1, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	6809      	ldr	r1, [r1, #0]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004de6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6911      	ldr	r1, [r2, #16]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68d2      	ldr	r2, [r2, #12]
 8004df2:	4311      	orrs	r1, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	000186a0 	.word	0x000186a0
 8004e54:	001e847f 	.word	0x001e847f
 8004e58:	003d08ff 	.word	0x003d08ff
 8004e5c:	431bde83 	.word	0x431bde83
 8004e60:	10624dd3 	.word	0x10624dd3

08004e64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	817b      	strh	r3, [r7, #10]
 8004e76:	460b      	mov	r3, r1
 8004e78:	813b      	strh	r3, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e7e:	f7ff fb73 	bl	8004568 <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	f040 80d9 	bne.w	8005044 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2319      	movs	r3, #25
 8004e98:	2201      	movs	r2, #1
 8004e9a:	496d      	ldr	r1, [pc, #436]	@ (8005050 <HAL_I2C_Mem_Write+0x1ec>)
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f971 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0cc      	b.n	8005046 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_I2C_Mem_Write+0x56>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0c5      	b.n	8005046 <HAL_I2C_Mem_Write+0x1e2>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d007      	beq.n	8004ee0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2221      	movs	r2, #33	@ 0x21
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2240      	movs	r2, #64	@ 0x40
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a4d      	ldr	r2, [pc, #308]	@ (8005054 <HAL_I2C_Mem_Write+0x1f0>)
 8004f20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f22:	88f8      	ldrh	r0, [r7, #6]
 8004f24:	893a      	ldrh	r2, [r7, #8]
 8004f26:	8979      	ldrh	r1, [r7, #10]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4603      	mov	r3, r0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f890 	bl	8005058 <I2C_RequestMemoryWrite>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d052      	beq.n	8004fe4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e081      	b.n	8005046 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fa36 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00d      	beq.n	8004f6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d107      	bne.n	8004f6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e06b      	b.n	8005046 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	781a      	ldrb	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d11b      	bne.n	8004fe4 <HAL_I2C_Mem_Write+0x180>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d017      	beq.n	8004fe4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	781a      	ldrb	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1aa      	bne.n	8004f42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fa29 	bl	8005448 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	2b04      	cmp	r3, #4
 8005002:	d107      	bne.n	8005014 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005012:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e016      	b.n	8005046 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	e000      	b.n	8005046 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005044:	2302      	movs	r3, #2
  }
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	00100002 	.word	0x00100002
 8005054:	ffff0000 	.word	0xffff0000

08005058 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	4608      	mov	r0, r1
 8005062:	4611      	mov	r1, r2
 8005064:	461a      	mov	r2, r3
 8005066:	4603      	mov	r3, r0
 8005068:	817b      	strh	r3, [r7, #10]
 800506a:	460b      	mov	r3, r1
 800506c:	813b      	strh	r3, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005080:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	2200      	movs	r2, #0
 800508a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f878 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00d      	beq.n	80050b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a8:	d103      	bne.n	80050b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e05f      	b.n	8005176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050b6:	897b      	ldrh	r3, [r7, #10]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	492d      	ldr	r1, [pc, #180]	@ (8005180 <I2C_RequestMemoryWrite+0x128>)
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f8d3 	bl	8005278 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e04c      	b.n	8005176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f4:	6a39      	ldr	r1, [r7, #32]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f95e 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00d      	beq.n	800511e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	2b04      	cmp	r3, #4
 8005108:	d107      	bne.n	800511a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005118:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e02b      	b.n	8005176 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d105      	bne.n	8005130 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005124:	893b      	ldrh	r3, [r7, #8]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	611a      	str	r2, [r3, #16]
 800512e:	e021      	b.n	8005174 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005130:	893b      	ldrh	r3, [r7, #8]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	b29b      	uxth	r3, r3
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f938 	bl	80053b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	2b04      	cmp	r3, #4
 8005154:	d107      	bne.n	8005166 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005164:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e005      	b.n	8005176 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800516a:	893b      	ldrh	r3, [r7, #8]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	00010002 	.word	0x00010002

08005184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005194:	e048      	b.n	8005228 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d044      	beq.n	8005228 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7ff f9e3 	bl	8004568 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d139      	bne.n	8005228 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10d      	bne.n	80051da <I2C_WaitOnFlagUntilTimeout+0x56>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	43da      	mvns	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4013      	ands	r3, r2
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	e00c      	b.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	43da      	mvns	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d116      	bne.n	8005228 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e023      	b.n	8005270 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10d      	bne.n	800524e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	43da      	mvns	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4013      	ands	r3, r2
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	e00c      	b.n	8005268 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	43da      	mvns	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	429a      	cmp	r2, r3
 800526c:	d093      	beq.n	8005196 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005286:	e071      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005296:	d123      	bne.n	80052e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	f043 0204 	orr.w	r2, r3, #4
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e067      	b.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d041      	beq.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7ff f93e 	bl	8004568 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d136      	bne.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10c      	bne.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	43da      	mvns	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4013      	ands	r3, r2
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	bf14      	ite	ne
 800531a:	2301      	movne	r3, #1
 800531c:	2300      	moveq	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	e00b      	b.n	800533a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	43da      	mvns	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d016      	beq.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e021      	b.n	80053b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b01      	cmp	r3, #1
 8005374:	d10c      	bne.n	8005390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	43da      	mvns	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e00b      	b.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	43da      	mvns	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4013      	ands	r3, r2
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f af6d 	bne.w	8005288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c4:	e034      	b.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f886 	bl	80054d8 <I2C_IsAcknowledgeFailed>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e034      	b.n	8005440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d028      	beq.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053de:	f7ff f8c3 	bl	8004568 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d302      	bcc.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11d      	bne.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b80      	cmp	r3, #128	@ 0x80
 8005400:	d016      	beq.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e007      	b.n	8005440 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543a:	2b80      	cmp	r3, #128	@ 0x80
 800543c:	d1c3      	bne.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005454:	e034      	b.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f83e 	bl	80054d8 <I2C_IsAcknowledgeFailed>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e034      	b.n	80054d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d028      	beq.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7ff f87b 	bl	8004568 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11d      	bne.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b04      	cmp	r3, #4
 8005490:	d016      	beq.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e007      	b.n	80054d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d1c3      	bne.n	8005456 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ee:	d11b      	bne.n	8005528 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	f043 0204 	orr.w	r2, r3, #4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0cc      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800554c:	4b68      	ldr	r3, [pc, #416]	@ (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d90c      	bls.n	8005574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	4b65      	ldr	r3, [pc, #404]	@ (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b63      	ldr	r3, [pc, #396]	@ (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0b8      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d020      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800558c:	4b59      	ldr	r3, [pc, #356]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4a58      	ldr	r2, [pc, #352]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005596:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a4:	4b53      	ldr	r3, [pc, #332]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4a52      	ldr	r2, [pc, #328]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b0:	4b50      	ldr	r3, [pc, #320]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	494d      	ldr	r1, [pc, #308]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d044      	beq.n	8005658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d107      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	4b47      	ldr	r3, [pc, #284]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d119      	bne.n	8005616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e07f      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d003      	beq.n	80055f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f6:	4b3f      	ldr	r3, [pc, #252]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e06f      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005606:	4b3b      	ldr	r3, [pc, #236]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e067      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005616:	4b37      	ldr	r3, [pc, #220]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0203 	bic.w	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4934      	ldr	r1, [pc, #208]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	4313      	orrs	r3, r2
 8005626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005628:	f7fe ff9e 	bl	8004568 <HAL_GetTick>
 800562c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	e00a      	b.n	8005646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005630:	f7fe ff9a 	bl	8004568 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e04f      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005646:	4b2b      	ldr	r3, [pc, #172]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 020c 	and.w	r2, r3, #12
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	429a      	cmp	r2, r3
 8005656:	d1eb      	bne.n	8005630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005658:	4b25      	ldr	r3, [pc, #148]	@ (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d20c      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b22      	ldr	r3, [pc, #136]	@ (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b20      	ldr	r3, [pc, #128]	@ (80056f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e032      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800568c:	4b19      	ldr	r3, [pc, #100]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4916      	ldr	r1, [pc, #88]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	4313      	orrs	r3, r2
 800569c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056aa:	4b12      	ldr	r3, [pc, #72]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	490e      	ldr	r1, [pc, #56]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056be:	f000 f855 	bl	800576c <HAL_RCC_GetSysClockFreq>
 80056c2:	4602      	mov	r2, r0
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	490a      	ldr	r1, [pc, #40]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c0>)
 80056d0:	5ccb      	ldrb	r3, [r1, r3]
 80056d2:	fa22 f303 	lsr.w	r3, r2, r3
 80056d6:	4a09      	ldr	r2, [pc, #36]	@ (80056fc <HAL_RCC_ClockConfig+0x1c4>)
 80056d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056da:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <HAL_RCC_ClockConfig+0x1c8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fefe 	bl	80044e0 <HAL_InitTick>

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40023c00 	.word	0x40023c00
 80056f4:	40023800 	.word	0x40023800
 80056f8:	08008da4 	.word	0x08008da4
 80056fc:	20000000 	.word	0x20000000
 8005700:	20000004 	.word	0x20000004

08005704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <HAL_RCC_GetHCLKFreq+0x14>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000000 	.word	0x20000000

0800571c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005720:	f7ff fff0 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0a9b      	lsrs	r3, r3, #10
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	4903      	ldr	r1, [pc, #12]	@ (8005740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005732:	5ccb      	ldrb	r3, [r1, r3]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	08008db4 	.word	0x08008db4

08005744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005748:	f7ff ffdc 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 800574c:	4602      	mov	r2, r0
 800574e:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	0b5b      	lsrs	r3, r3, #13
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	4903      	ldr	r1, [pc, #12]	@ (8005768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800575a:	5ccb      	ldrb	r3, [r1, r3]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40023800 	.word	0x40023800
 8005768:	08008db4 	.word	0x08008db4

0800576c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800576c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005770:	b0ae      	sub	sp, #184	@ 0xb8
 8005772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005792:	4bcb      	ldr	r3, [pc, #812]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	2b0c      	cmp	r3, #12
 800579c:	f200 8206 	bhi.w	8005bac <HAL_RCC_GetSysClockFreq+0x440>
 80057a0:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057dd 	.word	0x080057dd
 80057ac:	08005bad 	.word	0x08005bad
 80057b0:	08005bad 	.word	0x08005bad
 80057b4:	08005bad 	.word	0x08005bad
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	08005bad 	.word	0x08005bad
 80057c0:	08005bad 	.word	0x08005bad
 80057c4:	08005bad 	.word	0x08005bad
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	08005bad 	.word	0x08005bad
 80057d0:	08005bad 	.word	0x08005bad
 80057d4:	08005bad 	.word	0x08005bad
 80057d8:	080059dd 	.word	0x080059dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057dc:	4bb9      	ldr	r3, [pc, #740]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x358>)
 80057de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80057e2:	e1e7      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057e4:	4bb8      	ldr	r3, [pc, #736]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80057e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80057ea:	e1e3      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057ec:	4bb4      	ldr	r3, [pc, #720]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057f8:	4bb1      	ldr	r3, [pc, #708]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d071      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005804:	4bae      	ldr	r3, [pc, #696]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	099b      	lsrs	r3, r3, #6
 800580a:	2200      	movs	r2, #0
 800580c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005810:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005820:	2300      	movs	r3, #0
 8005822:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800582a:	4622      	mov	r2, r4
 800582c:	462b      	mov	r3, r5
 800582e:	f04f 0000 	mov.w	r0, #0
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	0159      	lsls	r1, r3, #5
 8005838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800583c:	0150      	lsls	r0, r2, #5
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4621      	mov	r1, r4
 8005844:	1a51      	subs	r1, r2, r1
 8005846:	6439      	str	r1, [r7, #64]	@ 0x40
 8005848:	4629      	mov	r1, r5
 800584a:	eb63 0301 	sbc.w	r3, r3, r1
 800584e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800585c:	4649      	mov	r1, r9
 800585e:	018b      	lsls	r3, r1, #6
 8005860:	4641      	mov	r1, r8
 8005862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005866:	4641      	mov	r1, r8
 8005868:	018a      	lsls	r2, r1, #6
 800586a:	4641      	mov	r1, r8
 800586c:	1a51      	subs	r1, r2, r1
 800586e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005870:	4649      	mov	r1, r9
 8005872:	eb63 0301 	sbc.w	r3, r3, r1
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005884:	4649      	mov	r1, r9
 8005886:	00cb      	lsls	r3, r1, #3
 8005888:	4641      	mov	r1, r8
 800588a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588e:	4641      	mov	r1, r8
 8005890:	00ca      	lsls	r2, r1, #3
 8005892:	4610      	mov	r0, r2
 8005894:	4619      	mov	r1, r3
 8005896:	4603      	mov	r3, r0
 8005898:	4622      	mov	r2, r4
 800589a:	189b      	adds	r3, r3, r2
 800589c:	633b      	str	r3, [r7, #48]	@ 0x30
 800589e:	462b      	mov	r3, r5
 80058a0:	460a      	mov	r2, r1
 80058a2:	eb42 0303 	adc.w	r3, r2, r3
 80058a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058b4:	4629      	mov	r1, r5
 80058b6:	024b      	lsls	r3, r1, #9
 80058b8:	4621      	mov	r1, r4
 80058ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058be:	4621      	mov	r1, r4
 80058c0:	024a      	lsls	r2, r1, #9
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80058d8:	f7fb f892 	bl	8000a00 <__aeabi_uldivmod>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4613      	mov	r3, r2
 80058e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058e6:	e067      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058e8:	4b75      	ldr	r3, [pc, #468]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	099b      	lsrs	r3, r3, #6
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80058f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005902:	2300      	movs	r3, #0
 8005904:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005906:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800590a:	4622      	mov	r2, r4
 800590c:	462b      	mov	r3, r5
 800590e:	f04f 0000 	mov.w	r0, #0
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	0159      	lsls	r1, r3, #5
 8005918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800591c:	0150      	lsls	r0, r2, #5
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4621      	mov	r1, r4
 8005924:	1a51      	subs	r1, r2, r1
 8005926:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005928:	4629      	mov	r1, r5
 800592a:	eb63 0301 	sbc.w	r3, r3, r1
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800593c:	4649      	mov	r1, r9
 800593e:	018b      	lsls	r3, r1, #6
 8005940:	4641      	mov	r1, r8
 8005942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005946:	4641      	mov	r1, r8
 8005948:	018a      	lsls	r2, r1, #6
 800594a:	4641      	mov	r1, r8
 800594c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005950:	4649      	mov	r1, r9
 8005952:	eb63 0b01 	sbc.w	fp, r3, r1
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005962:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800596a:	4692      	mov	sl, r2
 800596c:	469b      	mov	fp, r3
 800596e:	4623      	mov	r3, r4
 8005970:	eb1a 0303 	adds.w	r3, sl, r3
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	462b      	mov	r3, r5
 8005978:	eb4b 0303 	adc.w	r3, fp, r3
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800598a:	4629      	mov	r1, r5
 800598c:	028b      	lsls	r3, r1, #10
 800598e:	4621      	mov	r1, r4
 8005990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005994:	4621      	mov	r1, r4
 8005996:	028a      	lsls	r2, r1, #10
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059a0:	2200      	movs	r2, #0
 80059a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80059a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80059a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80059aa:	f7fb f829 	bl	8000a00 <__aeabi_uldivmod>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4613      	mov	r3, r2
 80059b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059b8:	4b41      	ldr	r3, [pc, #260]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	3301      	adds	r3, #1
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80059ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059da:	e0eb      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059dc:	4b38      	ldr	r3, [pc, #224]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059e8:	4b35      	ldr	r3, [pc, #212]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d06b      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f4:	4b32      	ldr	r3, [pc, #200]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	099b      	lsrs	r3, r3, #6
 80059fa:	2200      	movs	r2, #0
 80059fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a08:	2300      	movs	r3, #0
 8005a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005a10:	4622      	mov	r2, r4
 8005a12:	462b      	mov	r3, r5
 8005a14:	f04f 0000 	mov.w	r0, #0
 8005a18:	f04f 0100 	mov.w	r1, #0
 8005a1c:	0159      	lsls	r1, r3, #5
 8005a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a22:	0150      	lsls	r0, r2, #5
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4621      	mov	r1, r4
 8005a2a:	1a51      	subs	r1, r2, r1
 8005a2c:	61b9      	str	r1, [r7, #24]
 8005a2e:	4629      	mov	r1, r5
 8005a30:	eb63 0301 	sbc.w	r3, r3, r1
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005a42:	4659      	mov	r1, fp
 8005a44:	018b      	lsls	r3, r1, #6
 8005a46:	4651      	mov	r1, sl
 8005a48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	018a      	lsls	r2, r1, #6
 8005a50:	4651      	mov	r1, sl
 8005a52:	ebb2 0801 	subs.w	r8, r2, r1
 8005a56:	4659      	mov	r1, fp
 8005a58:	eb63 0901 	sbc.w	r9, r3, r1
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a70:	4690      	mov	r8, r2
 8005a72:	4699      	mov	r9, r3
 8005a74:	4623      	mov	r3, r4
 8005a76:	eb18 0303 	adds.w	r3, r8, r3
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	eb49 0303 	adc.w	r3, r9, r3
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005a90:	4629      	mov	r1, r5
 8005a92:	024b      	lsls	r3, r1, #9
 8005a94:	4621      	mov	r1, r4
 8005a96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	024a      	lsls	r2, r1, #9
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005aac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ab0:	f7fa ffa6 	bl	8000a00 <__aeabi_uldivmod>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4613      	mov	r3, r2
 8005aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005abe:	e065      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0x420>
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	00f42400 	.word	0x00f42400
 8005ac8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005acc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	099b      	lsrs	r3, r3, #6
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005adc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ade:	2300      	movs	r3, #0
 8005ae0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ae2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005ae6:	4642      	mov	r2, r8
 8005ae8:	464b      	mov	r3, r9
 8005aea:	f04f 0000 	mov.w	r0, #0
 8005aee:	f04f 0100 	mov.w	r1, #0
 8005af2:	0159      	lsls	r1, r3, #5
 8005af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005af8:	0150      	lsls	r0, r2, #5
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4641      	mov	r1, r8
 8005b00:	1a51      	subs	r1, r2, r1
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	4649      	mov	r1, r9
 8005b06:	eb63 0301 	sbc.w	r3, r3, r1
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005b18:	4659      	mov	r1, fp
 8005b1a:	018b      	lsls	r3, r1, #6
 8005b1c:	4651      	mov	r1, sl
 8005b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b22:	4651      	mov	r1, sl
 8005b24:	018a      	lsls	r2, r1, #6
 8005b26:	4651      	mov	r1, sl
 8005b28:	1a54      	subs	r4, r2, r1
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	eb63 0501 	sbc.w	r5, r3, r1
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	00eb      	lsls	r3, r5, #3
 8005b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b3e:	00e2      	lsls	r2, r4, #3
 8005b40:	4614      	mov	r4, r2
 8005b42:	461d      	mov	r5, r3
 8005b44:	4643      	mov	r3, r8
 8005b46:	18e3      	adds	r3, r4, r3
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	eb45 0303 	adc.w	r3, r5, r3
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b5e:	4629      	mov	r1, r5
 8005b60:	028b      	lsls	r3, r1, #10
 8005b62:	4621      	mov	r1, r4
 8005b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b68:	4621      	mov	r1, r4
 8005b6a:	028a      	lsls	r2, r1, #10
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b74:	2200      	movs	r2, #0
 8005b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005b7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b7e:	f7fa ff3f 	bl	8000a00 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4613      	mov	r3, r2
 8005b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	0f1b      	lsrs	r3, r3, #28
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005baa:	e003      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bac:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	37b8      	adds	r7, #184	@ 0xb8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	00f42400 	.word	0x00f42400

08005bcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e28d      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 8083 	beq.w	8005cf2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005bec:	4b94      	ldr	r3, [pc, #592]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 030c 	and.w	r3, r3, #12
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d019      	beq.n	8005c2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005bf8:	4b91      	ldr	r3, [pc, #580]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 030c 	and.w	r3, r3, #12
        || \
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d106      	bne.n	8005c12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005c04:	4b8e      	ldr	r3, [pc, #568]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c10:	d00c      	beq.n	8005c2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c12:	4b8b      	ldr	r3, [pc, #556]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005c1a:	2b0c      	cmp	r3, #12
 8005c1c:	d112      	bne.n	8005c44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c1e:	4b88      	ldr	r3, [pc, #544]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c2a:	d10b      	bne.n	8005c44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c2c:	4b84      	ldr	r3, [pc, #528]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d05b      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x124>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d157      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e25a      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c4c:	d106      	bne.n	8005c5c <HAL_RCC_OscConfig+0x90>
 8005c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a7b      	ldr	r2, [pc, #492]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	e01d      	b.n	8005c98 <HAL_RCC_OscConfig+0xcc>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCC_OscConfig+0xb4>
 8005c66:	4b76      	ldr	r3, [pc, #472]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a75      	ldr	r2, [pc, #468]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	4b73      	ldr	r3, [pc, #460]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a72      	ldr	r2, [pc, #456]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e00b      	b.n	8005c98 <HAL_RCC_OscConfig+0xcc>
 8005c80:	4b6f      	ldr	r3, [pc, #444]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a6e      	ldr	r2, [pc, #440]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a6b      	ldr	r2, [pc, #428]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d013      	beq.n	8005cc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca0:	f7fe fc62 	bl	8004568 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca8:	f7fe fc5e 	bl	8004568 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	@ 0x64
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e21f      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cba:	4b61      	ldr	r3, [pc, #388]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0xdc>
 8005cc6:	e014      	b.n	8005cf2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fe fc4e 	bl	8004568 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd0:	f7fe fc4a 	bl	8004568 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b64      	cmp	r3, #100	@ 0x64
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e20b      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ce2:	4b57      	ldr	r3, [pc, #348]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f0      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x104>
 8005cee:	e000      	b.n	8005cf2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d06f      	beq.n	8005dde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005cfe:	4b50      	ldr	r3, [pc, #320]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d017      	beq.n	8005d3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d105      	bne.n	8005d22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d16:	4b4a      	ldr	r3, [pc, #296]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00b      	beq.n	8005d3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d22:	4b47      	ldr	r3, [pc, #284]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005d2a:	2b0c      	cmp	r3, #12
 8005d2c:	d11c      	bne.n	8005d68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d2e:	4b44      	ldr	r3, [pc, #272]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d116      	bne.n	8005d68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d3a:	4b41      	ldr	r3, [pc, #260]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_RCC_OscConfig+0x186>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d001      	beq.n	8005d52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e1d3      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d52:	4b3b      	ldr	r3, [pc, #236]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4937      	ldr	r1, [pc, #220]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d66:	e03a      	b.n	8005dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d020      	beq.n	8005db2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d70:	4b34      	ldr	r3, [pc, #208]	@ (8005e44 <HAL_RCC_OscConfig+0x278>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d76:	f7fe fbf7 	bl	8004568 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d7e:	f7fe fbf3 	bl	8004568 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e1b4      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d90:	4b2b      	ldr	r3, [pc, #172]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9c:	4b28      	ldr	r3, [pc, #160]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	4925      	ldr	r1, [pc, #148]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	600b      	str	r3, [r1, #0]
 8005db0:	e015      	b.n	8005dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005db2:	4b24      	ldr	r3, [pc, #144]	@ (8005e44 <HAL_RCC_OscConfig+0x278>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7fe fbd6 	bl	8004568 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc0:	f7fe fbd2 	bl	8004568 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e193      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d036      	beq.n	8005e58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d016      	beq.n	8005e20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005df2:	4b15      	ldr	r3, [pc, #84]	@ (8005e48 <HAL_RCC_OscConfig+0x27c>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df8:	f7fe fbb6 	bl	8004568 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e00:	f7fe fbb2 	bl	8004568 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e173      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e12:	4b0b      	ldr	r3, [pc, #44]	@ (8005e40 <HAL_RCC_OscConfig+0x274>)
 8005e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x234>
 8005e1e:	e01b      	b.n	8005e58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e20:	4b09      	ldr	r3, [pc, #36]	@ (8005e48 <HAL_RCC_OscConfig+0x27c>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e26:	f7fe fb9f 	bl	8004568 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e2c:	e00e      	b.n	8005e4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e2e:	f7fe fb9b 	bl	8004568 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d907      	bls.n	8005e4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e15c      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
 8005e40:	40023800 	.word	0x40023800
 8005e44:	42470000 	.word	0x42470000
 8005e48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1ea      	bne.n	8005e2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8097 	beq.w	8005f94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e6a:	4b83      	ldr	r3, [pc, #524]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10f      	bne.n	8005e96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e86:	4b7c      	ldr	r3, [pc, #496]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e96:	4b79      	ldr	r3, [pc, #484]	@ (800607c <HAL_RCC_OscConfig+0x4b0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d118      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ea2:	4b76      	ldr	r3, [pc, #472]	@ (800607c <HAL_RCC_OscConfig+0x4b0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a75      	ldr	r2, [pc, #468]	@ (800607c <HAL_RCC_OscConfig+0x4b0>)
 8005ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eae:	f7fe fb5b 	bl	8004568 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb6:	f7fe fb57 	bl	8004568 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e118      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800607c <HAL_RCC_OscConfig+0x4b0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d106      	bne.n	8005eea <HAL_RCC_OscConfig+0x31e>
 8005edc:	4b66      	ldr	r3, [pc, #408]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee0:	4a65      	ldr	r2, [pc, #404]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee8:	e01c      	b.n	8005f24 <HAL_RCC_OscConfig+0x358>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b05      	cmp	r3, #5
 8005ef0:	d10c      	bne.n	8005f0c <HAL_RCC_OscConfig+0x340>
 8005ef2:	4b61      	ldr	r3, [pc, #388]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef6:	4a60      	ldr	r2, [pc, #384]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005ef8:	f043 0304 	orr.w	r3, r3, #4
 8005efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005efe:	4b5e      	ldr	r3, [pc, #376]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f02:	4a5d      	ldr	r2, [pc, #372]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f0a:	e00b      	b.n	8005f24 <HAL_RCC_OscConfig+0x358>
 8005f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f10:	4a59      	ldr	r2, [pc, #356]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f18:	4b57      	ldr	r3, [pc, #348]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1c:	4a56      	ldr	r2, [pc, #344]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f1e:	f023 0304 	bic.w	r3, r3, #4
 8005f22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d015      	beq.n	8005f58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f2c:	f7fe fb1c 	bl	8004568 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f32:	e00a      	b.n	8005f4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f34:	f7fe fb18 	bl	8004568 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e0d7      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0ee      	beq.n	8005f34 <HAL_RCC_OscConfig+0x368>
 8005f56:	e014      	b.n	8005f82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fe fb06 	bl	8004568 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f60:	f7fe fb02 	bl	8004568 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0c1      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f76:	4b40      	ldr	r3, [pc, #256]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1ee      	bne.n	8005f60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d105      	bne.n	8005f94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f88:	4b3b      	ldr	r3, [pc, #236]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80ad 	beq.w	80060f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f9e:	4b36      	ldr	r3, [pc, #216]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d060      	beq.n	800606c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d145      	bne.n	800603e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb2:	4b33      	ldr	r3, [pc, #204]	@ (8006080 <HAL_RCC_OscConfig+0x4b4>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fe fad6 	bl	8004568 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc0:	f7fe fad2 	bl	8004568 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e093      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd2:	4b29      	ldr	r3, [pc, #164]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69da      	ldr	r2, [r3, #28]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	019b      	lsls	r3, r3, #6
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff4:	085b      	lsrs	r3, r3, #1
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006008:	071b      	lsls	r3, r3, #28
 800600a:	491b      	ldr	r1, [pc, #108]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 800600c:	4313      	orrs	r3, r2
 800600e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006010:	4b1b      	ldr	r3, [pc, #108]	@ (8006080 <HAL_RCC_OscConfig+0x4b4>)
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006016:	f7fe faa7 	bl	8004568 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800601e:	f7fe faa3 	bl	8004568 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e064      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006030:	4b11      	ldr	r3, [pc, #68]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f0      	beq.n	800601e <HAL_RCC_OscConfig+0x452>
 800603c:	e05c      	b.n	80060f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603e:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <HAL_RCC_OscConfig+0x4b4>)
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fe fa90 	bl	8004568 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800604c:	f7fe fa8c 	bl	8004568 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e04d      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605e:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <HAL_RCC_OscConfig+0x4ac>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f0      	bne.n	800604c <HAL_RCC_OscConfig+0x480>
 800606a:	e045      	b.n	80060f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d107      	bne.n	8006084 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e040      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
 8006078:	40023800 	.word	0x40023800
 800607c:	40007000 	.word	0x40007000
 8006080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006084:	4b1f      	ldr	r3, [pc, #124]	@ (8006104 <HAL_RCC_OscConfig+0x538>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d030      	beq.n	80060f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800609c:	429a      	cmp	r2, r3
 800609e:	d129      	bne.n	80060f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d122      	bne.n	80060f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060b4:	4013      	ands	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060bc:	4293      	cmp	r3, r2
 80060be:	d119      	bne.n	80060f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	3b01      	subs	r3, #1
 80060ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d10f      	bne.n	80060f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d107      	bne.n	80060f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d001      	beq.n	80060f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40023800 	.word	0x40023800

08006108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e041      	b.n	800619e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb ff5a 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f000 fd2c 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d001      	beq.n	80061c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e04e      	b.n	800625e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a23      	ldr	r2, [pc, #140]	@ (800626c <HAL_TIM_Base_Start_IT+0xc4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ea:	d01d      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006270 <HAL_TIM_Base_Start_IT+0xc8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006274 <HAL_TIM_Base_Start_IT+0xcc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1c      	ldr	r2, [pc, #112]	@ (8006278 <HAL_TIM_Base_Start_IT+0xd0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1b      	ldr	r2, [pc, #108]	@ (800627c <HAL_TIM_Base_Start_IT+0xd4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	@ (8006280 <HAL_TIM_Base_Start_IT+0xd8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <HAL_TIM_Base_Start_IT+0xdc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d111      	bne.n	800624c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b06      	cmp	r3, #6
 8006238:	d010      	beq.n	800625c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	e007      	b.n	800625c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40010400 	.word	0x40010400
 8006280:	40014000 	.word	0x40014000
 8006284:	40001800 	.word	0x40001800

08006288 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10f      	bne.n	80062d0 <HAL_TIM_Base_Stop_IT+0x48>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6a1a      	ldr	r2, [r3, #32]
 80062b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <HAL_TIM_Base_Stop_IT+0x48>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0201 	bic.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e041      	b.n	800637c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d106      	bne.n	8006312 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f839 	bl	8006384 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f000 fc3d 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <HAL_TIM_OC_Start_IT+0x28>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e022      	b.n	8006406 <HAL_TIM_OC_Start_IT+0x6e>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d109      	bne.n	80063da <HAL_TIM_OC_Start_IT+0x42>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	e015      	b.n	8006406 <HAL_TIM_OC_Start_IT+0x6e>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d109      	bne.n	80063f4 <HAL_TIM_OC_Start_IT+0x5c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e008      	b.n	8006406 <HAL_TIM_OC_Start_IT+0x6e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e0c7      	b.n	800659e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <HAL_TIM_OC_Start_IT+0x86>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800641c:	e013      	b.n	8006446 <HAL_TIM_OC_Start_IT+0xae>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b04      	cmp	r3, #4
 8006422:	d104      	bne.n	800642e <HAL_TIM_OC_Start_IT+0x96>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800642c:	e00b      	b.n	8006446 <HAL_TIM_OC_Start_IT+0xae>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d104      	bne.n	800643e <HAL_TIM_OC_Start_IT+0xa6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800643c:	e003      	b.n	8006446 <HAL_TIM_OC_Start_IT+0xae>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b0c      	cmp	r3, #12
 800644a:	d841      	bhi.n	80064d0 <HAL_TIM_OC_Start_IT+0x138>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <HAL_TIM_OC_Start_IT+0xbc>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006489 	.word	0x08006489
 8006458:	080064d1 	.word	0x080064d1
 800645c:	080064d1 	.word	0x080064d1
 8006460:	080064d1 	.word	0x080064d1
 8006464:	0800649b 	.word	0x0800649b
 8006468:	080064d1 	.word	0x080064d1
 800646c:	080064d1 	.word	0x080064d1
 8006470:	080064d1 	.word	0x080064d1
 8006474:	080064ad 	.word	0x080064ad
 8006478:	080064d1 	.word	0x080064d1
 800647c:	080064d1 	.word	0x080064d1
 8006480:	080064d1 	.word	0x080064d1
 8006484:	080064bf 	.word	0x080064bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0202 	orr.w	r2, r2, #2
 8006496:	60da      	str	r2, [r3, #12]
      break;
 8006498:	e01d      	b.n	80064d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0204 	orr.w	r2, r2, #4
 80064a8:	60da      	str	r2, [r3, #12]
      break;
 80064aa:	e014      	b.n	80064d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0208 	orr.w	r2, r2, #8
 80064ba:	60da      	str	r2, [r3, #12]
      break;
 80064bc:	e00b      	b.n	80064d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0210 	orr.w	r2, r2, #16
 80064cc:	60da      	str	r2, [r3, #12]
      break;
 80064ce:	e002      	b.n	80064d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d15f      	bne.n	800659c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2201      	movs	r2, #1
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fe4d 	bl	8007184 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2e      	ldr	r2, [pc, #184]	@ (80065a8 <HAL_TIM_OC_Start_IT+0x210>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_TIM_OC_Start_IT+0x166>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2c      	ldr	r2, [pc, #176]	@ (80065ac <HAL_TIM_OC_Start_IT+0x214>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d101      	bne.n	8006502 <HAL_TIM_OC_Start_IT+0x16a>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <HAL_TIM_OC_Start_IT+0x16c>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006516:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a22      	ldr	r2, [pc, #136]	@ (80065a8 <HAL_TIM_OC_Start_IT+0x210>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d022      	beq.n	8006568 <HAL_TIM_OC_Start_IT+0x1d0>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652a:	d01d      	beq.n	8006568 <HAL_TIM_OC_Start_IT+0x1d0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1f      	ldr	r2, [pc, #124]	@ (80065b0 <HAL_TIM_OC_Start_IT+0x218>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d018      	beq.n	8006568 <HAL_TIM_OC_Start_IT+0x1d0>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1e      	ldr	r2, [pc, #120]	@ (80065b4 <HAL_TIM_OC_Start_IT+0x21c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <HAL_TIM_OC_Start_IT+0x1d0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1c      	ldr	r2, [pc, #112]	@ (80065b8 <HAL_TIM_OC_Start_IT+0x220>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00e      	beq.n	8006568 <HAL_TIM_OC_Start_IT+0x1d0>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a17      	ldr	r2, [pc, #92]	@ (80065ac <HAL_TIM_OC_Start_IT+0x214>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d009      	beq.n	8006568 <HAL_TIM_OC_Start_IT+0x1d0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a18      	ldr	r2, [pc, #96]	@ (80065bc <HAL_TIM_OC_Start_IT+0x224>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_TIM_OC_Start_IT+0x1d0>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a17      	ldr	r2, [pc, #92]	@ (80065c0 <HAL_TIM_OC_Start_IT+0x228>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d111      	bne.n	800658c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b06      	cmp	r3, #6
 8006578:	d010      	beq.n	800659c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0201 	orr.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658a:	e007      	b.n	800659c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40001800 	.word	0x40001800

080065c4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b0c      	cmp	r3, #12
 80065d6:	d841      	bhi.n	800665c <HAL_TIM_OC_Stop_IT+0x98>
 80065d8:	a201      	add	r2, pc, #4	@ (adr r2, 80065e0 <HAL_TIM_OC_Stop_IT+0x1c>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	08006615 	.word	0x08006615
 80065e4:	0800665d 	.word	0x0800665d
 80065e8:	0800665d 	.word	0x0800665d
 80065ec:	0800665d 	.word	0x0800665d
 80065f0:	08006627 	.word	0x08006627
 80065f4:	0800665d 	.word	0x0800665d
 80065f8:	0800665d 	.word	0x0800665d
 80065fc:	0800665d 	.word	0x0800665d
 8006600:	08006639 	.word	0x08006639
 8006604:	0800665d 	.word	0x0800665d
 8006608:	0800665d 	.word	0x0800665d
 800660c:	0800665d 	.word	0x0800665d
 8006610:	0800664b 	.word	0x0800664b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0202 	bic.w	r2, r2, #2
 8006622:	60da      	str	r2, [r3, #12]
      break;
 8006624:	e01d      	b.n	8006662 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0204 	bic.w	r2, r2, #4
 8006634:	60da      	str	r2, [r3, #12]
      break;
 8006636:	e014      	b.n	8006662 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0208 	bic.w	r2, r2, #8
 8006646:	60da      	str	r2, [r3, #12]
      break;
 8006648:	e00b      	b.n	8006662 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0210 	bic.w	r2, r2, #16
 8006658:	60da      	str	r2, [r3, #12]
      break;
 800665a:	e002      	b.n	8006662 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
      break;
 8006660:	bf00      	nop
  }

  if (status == HAL_OK)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d161      	bne.n	800672c <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2200      	movs	r2, #0
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fd87 	bl	8007184 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2f      	ldr	r2, [pc, #188]	@ (8006738 <HAL_TIM_OC_Stop_IT+0x174>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d004      	beq.n	800668a <HAL_TIM_OC_Stop_IT+0xc6>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2d      	ldr	r2, [pc, #180]	@ (800673c <HAL_TIM_OC_Stop_IT+0x178>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d101      	bne.n	800668e <HAL_TIM_OC_Stop_IT+0xca>
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <HAL_TIM_OC_Stop_IT+0xcc>
 800668e:	2300      	movs	r3, #0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10f      	bne.n	80066c4 <HAL_TIM_OC_Stop_IT+0x100>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d107      	bne.n	80066c4 <HAL_TIM_OC_Stop_IT+0x100>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10f      	bne.n	80066f4 <HAL_TIM_OC_Stop_IT+0x130>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	f240 4344 	movw	r3, #1092	@ 0x444
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d107      	bne.n	80066f4 <HAL_TIM_OC_Stop_IT+0x130>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0201 	bic.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <HAL_TIM_OC_Stop_IT+0x140>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006702:	e013      	b.n	800672c <HAL_TIM_OC_Stop_IT+0x168>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b04      	cmp	r3, #4
 8006708:	d104      	bne.n	8006714 <HAL_TIM_OC_Stop_IT+0x150>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006712:	e00b      	b.n	800672c <HAL_TIM_OC_Stop_IT+0x168>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b08      	cmp	r3, #8
 8006718:	d104      	bne.n	8006724 <HAL_TIM_OC_Stop_IT+0x160>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006722:	e003      	b.n	800672c <HAL_TIM_OC_Stop_IT+0x168>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400

08006740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d020      	beq.n	80067a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0202 	mvn.w	r2, #2
 8006774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f9eb 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fc fe6a 	bl	800346c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f9ee 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d020      	beq.n	80067f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01b      	beq.n	80067f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0204 	mvn.w	r2, #4
 80067c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f9c5 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fc fe44 	bl	800346c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9c8 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d020      	beq.n	800683c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01b      	beq.n	800683c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0208 	mvn.w	r2, #8
 800680c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2204      	movs	r2, #4
 8006812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f99f 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 8006828:	e005      	b.n	8006836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fc fe1e 	bl	800346c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f9a2 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b00      	cmp	r3, #0
 8006844:	d020      	beq.n	8006888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01b      	beq.n	8006888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0210 	mvn.w	r2, #16
 8006858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2208      	movs	r2, #8
 800685e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f979 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 8006874:	e005      	b.n	8006882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fc fdf8 	bl	800346c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f97c 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0201 	mvn.w	r2, #1
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fc fea4 	bl	80035f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00c      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80068c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fd58 	bl	8007380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00c      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f94d 	bl	8006b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0220 	mvn.w	r2, #32
 8006910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fd2a 	bl	800736c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_TIM_OC_ConfigChannel+0x1e>
 800693a:	2302      	movs	r3, #2
 800693c:	e048      	b.n	80069d0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b0c      	cmp	r3, #12
 800694a:	d839      	bhi.n	80069c0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800694c:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <HAL_TIM_OC_ConfigChannel+0x34>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006989 	.word	0x08006989
 8006958:	080069c1 	.word	0x080069c1
 800695c:	080069c1 	.word	0x080069c1
 8006960:	080069c1 	.word	0x080069c1
 8006964:	08006997 	.word	0x08006997
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069c1 	.word	0x080069c1
 8006970:	080069c1 	.word	0x080069c1
 8006974:	080069a5 	.word	0x080069a5
 8006978:	080069c1 	.word	0x080069c1
 800697c:	080069c1 	.word	0x080069c1
 8006980:	080069c1 	.word	0x080069c1
 8006984:	080069b3 	.word	0x080069b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f9ae 	bl	8006cf0 <TIM_OC1_SetConfig>
      break;
 8006994:	e017      	b.n	80069c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fa17 	bl	8006dd0 <TIM_OC2_SetConfig>
      break;
 80069a2:	e010      	b.n	80069c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fa86 	bl	8006ebc <TIM_OC3_SetConfig>
      break;
 80069b0:	e009      	b.n	80069c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 faf3 	bl	8006fa4 <TIM_OC4_SetConfig>
      break;
 80069be:	e002      	b.n	80069c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]
      break;
 80069c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIM_ConfigClockSource+0x1c>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e0b4      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x186>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a2c:	d03e      	beq.n	8006aac <HAL_TIM_ConfigClockSource+0xd4>
 8006a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a32:	f200 8087 	bhi.w	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
 8006a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a3a:	f000 8086 	beq.w	8006b4a <HAL_TIM_ConfigClockSource+0x172>
 8006a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a42:	d87f      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	2b70      	cmp	r3, #112	@ 0x70
 8006a46:	d01a      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0xa6>
 8006a48:	2b70      	cmp	r3, #112	@ 0x70
 8006a4a:	d87b      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
 8006a4c:	2b60      	cmp	r3, #96	@ 0x60
 8006a4e:	d050      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x11a>
 8006a50:	2b60      	cmp	r3, #96	@ 0x60
 8006a52:	d877      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
 8006a54:	2b50      	cmp	r3, #80	@ 0x50
 8006a56:	d03c      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0xfa>
 8006a58:	2b50      	cmp	r3, #80	@ 0x50
 8006a5a:	d873      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
 8006a5c:	2b40      	cmp	r3, #64	@ 0x40
 8006a5e:	d058      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x13a>
 8006a60:	2b40      	cmp	r3, #64	@ 0x40
 8006a62:	d86f      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
 8006a64:	2b30      	cmp	r3, #48	@ 0x30
 8006a66:	d064      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x15a>
 8006a68:	2b30      	cmp	r3, #48	@ 0x30
 8006a6a:	d86b      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d060      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x15a>
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d867      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d05c      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x15a>
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d05a      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x15a>
 8006a7c:	e062      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a8e:	f000 fb59 	bl	8007144 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006aa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	609a      	str	r2, [r3, #8]
      break;
 8006aaa:	e04f      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006abc:	f000 fb42 	bl	8007144 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ace:	609a      	str	r2, [r3, #8]
      break;
 8006ad0:	e03c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f000 fab6 	bl	8007050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2150      	movs	r1, #80	@ 0x50
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fb0f 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006af0:	e02c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006afe:	461a      	mov	r2, r3
 8006b00:	f000 fad5 	bl	80070ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2160      	movs	r1, #96	@ 0x60
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 faff 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006b10:	e01c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f000 fa96 	bl	8007050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2140      	movs	r1, #64	@ 0x40
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 faef 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006b30:	e00c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f000 fae6 	bl	800710e <TIM_ITRx_SetConfig>
      break;
 8006b42:	e003      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
      break;
 8006b48:	e000      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
	...

08006ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a43      	ldr	r2, [pc, #268]	@ (8006cc4 <TIM_Base_SetConfig+0x120>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc2:	d00f      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a40      	ldr	r2, [pc, #256]	@ (8006cc8 <TIM_Base_SetConfig+0x124>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a3f      	ldr	r2, [pc, #252]	@ (8006ccc <TIM_Base_SetConfig+0x128>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d007      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8006cd0 <TIM_Base_SetConfig+0x12c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a3d      	ldr	r2, [pc, #244]	@ (8006cd4 <TIM_Base_SetConfig+0x130>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d108      	bne.n	8006bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a32      	ldr	r2, [pc, #200]	@ (8006cc4 <TIM_Base_SetConfig+0x120>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d02b      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c04:	d027      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc8 <TIM_Base_SetConfig+0x124>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d023      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2e      	ldr	r2, [pc, #184]	@ (8006ccc <TIM_Base_SetConfig+0x128>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d01f      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd0 <TIM_Base_SetConfig+0x12c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01b      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2c      	ldr	r2, [pc, #176]	@ (8006cd4 <TIM_Base_SetConfig+0x130>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d017      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	@ (8006cd8 <TIM_Base_SetConfig+0x134>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2a      	ldr	r2, [pc, #168]	@ (8006cdc <TIM_Base_SetConfig+0x138>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00f      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a29      	ldr	r2, [pc, #164]	@ (8006ce0 <TIM_Base_SetConfig+0x13c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00b      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a28      	ldr	r2, [pc, #160]	@ (8006ce4 <TIM_Base_SetConfig+0x140>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d007      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a27      	ldr	r2, [pc, #156]	@ (8006ce8 <TIM_Base_SetConfig+0x144>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a26      	ldr	r2, [pc, #152]	@ (8006cec <TIM_Base_SetConfig+0x148>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d108      	bne.n	8006c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a0e      	ldr	r2, [pc, #56]	@ (8006cc4 <TIM_Base_SetConfig+0x120>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d003      	beq.n	8006c96 <TIM_Base_SetConfig+0xf2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a10      	ldr	r2, [pc, #64]	@ (8006cd4 <TIM_Base_SetConfig+0x130>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d103      	bne.n	8006c9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f043 0204 	orr.w	r2, r3, #4
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	601a      	str	r2, [r3, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40010400 	.word	0x40010400
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	40014400 	.word	0x40014400
 8006ce0:	40014800 	.word	0x40014800
 8006ce4:	40001800 	.word	0x40001800
 8006ce8:	40001c00 	.word	0x40001c00
 8006cec:	40002000 	.word	0x40002000

08006cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f023 0201 	bic.w	r2, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0303 	bic.w	r3, r3, #3
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 0302 	bic.w	r3, r3, #2
 8006d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a20      	ldr	r2, [pc, #128]	@ (8006dc8 <TIM_OC1_SetConfig+0xd8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <TIM_OC1_SetConfig+0x64>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dcc <TIM_OC1_SetConfig+0xdc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d10c      	bne.n	8006d6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f023 0308 	bic.w	r3, r3, #8
 8006d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f023 0304 	bic.w	r3, r3, #4
 8006d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a15      	ldr	r2, [pc, #84]	@ (8006dc8 <TIM_OC1_SetConfig+0xd8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d003      	beq.n	8006d7e <TIM_OC1_SetConfig+0x8e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a14      	ldr	r2, [pc, #80]	@ (8006dcc <TIM_OC1_SetConfig+0xdc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d111      	bne.n	8006da2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	621a      	str	r2, [r3, #32]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40010400 	.word	0x40010400

08006dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f023 0210 	bic.w	r2, r3, #16
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f023 0320 	bic.w	r3, r3, #32
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a22      	ldr	r2, [pc, #136]	@ (8006eb4 <TIM_OC2_SetConfig+0xe4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC2_SetConfig+0x68>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a21      	ldr	r2, [pc, #132]	@ (8006eb8 <TIM_OC2_SetConfig+0xe8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10d      	bne.n	8006e54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a17      	ldr	r2, [pc, #92]	@ (8006eb4 <TIM_OC2_SetConfig+0xe4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_OC2_SetConfig+0x94>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a16      	ldr	r2, [pc, #88]	@ (8006eb8 <TIM_OC2_SetConfig+0xe8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d113      	bne.n	8006e8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	621a      	str	r2, [r3, #32]
}
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40010400 	.word	0x40010400

08006ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a21      	ldr	r2, [pc, #132]	@ (8006f9c <TIM_OC3_SetConfig+0xe0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC3_SetConfig+0x66>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a20      	ldr	r2, [pc, #128]	@ (8006fa0 <TIM_OC3_SetConfig+0xe4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10d      	bne.n	8006f3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a16      	ldr	r2, [pc, #88]	@ (8006f9c <TIM_OC3_SetConfig+0xe0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <TIM_OC3_SetConfig+0x92>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a15      	ldr	r2, [pc, #84]	@ (8006fa0 <TIM_OC3_SetConfig+0xe4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d113      	bne.n	8006f76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	621a      	str	r2, [r3, #32]
}
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40010400 	.word	0x40010400

08006fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	031b      	lsls	r3, r3, #12
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a12      	ldr	r2, [pc, #72]	@ (8007048 <TIM_OC4_SetConfig+0xa4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d003      	beq.n	800700c <TIM_OC4_SetConfig+0x68>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a11      	ldr	r2, [pc, #68]	@ (800704c <TIM_OC4_SetConfig+0xa8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d109      	bne.n	8007020 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	019b      	lsls	r3, r3, #6
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400

08007050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f023 0201 	bic.w	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800707a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f023 030a 	bic.w	r3, r3, #10
 800708c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b087      	sub	sp, #28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f023 0210 	bic.w	r2, r3, #16
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	031b      	lsls	r3, r3, #12
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	f043 0307 	orr.w	r3, r3, #7
 8007130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	609a      	str	r2, [r3, #8]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800715e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	021a      	lsls	r2, r3, #8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	431a      	orrs	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	609a      	str	r2, [r3, #8]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2201      	movs	r2, #1
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1a      	ldr	r2, [r3, #32]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	401a      	ands	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a1a      	ldr	r2, [r3, #32]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	fa01 f303 	lsl.w	r3, r1, r3
 80071bc:	431a      	orrs	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e05a      	b.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a21      	ldr	r2, [pc, #132]	@ (80072ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d022      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007234:	d01d      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1d      	ldr	r2, [pc, #116]	@ (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d018      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1b      	ldr	r2, [pc, #108]	@ (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d013      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1a      	ldr	r2, [pc, #104]	@ (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00e      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a18      	ldr	r2, [pc, #96]	@ (80072bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d009      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a17      	ldr	r2, [pc, #92]	@ (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d004      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a15      	ldr	r2, [pc, #84]	@ (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d10c      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	4313      	orrs	r3, r2
 8007282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40001800 	.word	0x40001800

080072c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e03d      	b.n	8007360 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e042      	b.n	800742c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fa ff62 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2224      	movs	r2, #36	@ 0x24
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa09 	bl	80077f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	695a      	ldr	r2, [r3, #20]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800740c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	@ 0x28
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	4613      	mov	r3, r2
 8007442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b20      	cmp	r3, #32
 8007452:	d175      	bne.n	8007540 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_UART_Transmit+0x2c>
 800745a:	88fb      	ldrh	r3, [r7, #6]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e06e      	b.n	8007542 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2221      	movs	r2, #33	@ 0x21
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007472:	f7fd f879 	bl	8004568 <HAL_GetTick>
 8007476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800748c:	d108      	bne.n	80074a0 <HAL_UART_Transmit+0x6c>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d104      	bne.n	80074a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	e003      	b.n	80074a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074a8:	e02e      	b.n	8007508 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	2180      	movs	r1, #128	@ 0x80
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f8df 	bl	8007678 <UART_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e03a      	b.n	8007542 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10b      	bne.n	80074ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	3302      	adds	r3, #2
 80074e6:	61bb      	str	r3, [r7, #24]
 80074e8:	e007      	b.n	80074fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	781a      	ldrb	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	3301      	adds	r3, #1
 80074f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1cb      	bne.n	80074aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2200      	movs	r2, #0
 800751a:	2140      	movs	r1, #64	@ 0x40
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f8ab 	bl	8007678 <UART_WaitOnFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e006      	b.n	8007542 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b08a      	sub	sp, #40	@ 0x28
 800754e:	af02      	add	r7, sp, #8
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	4613      	mov	r3, r2
 8007558:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b20      	cmp	r3, #32
 8007568:	f040 8081 	bne.w	800766e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_UART_Receive+0x2e>
 8007572:	88fb      	ldrh	r3, [r7, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e079      	b.n	8007670 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2222      	movs	r2, #34	@ 0x22
 8007586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007590:	f7fc ffea 	bl	8004568 <HAL_GetTick>
 8007594:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	88fa      	ldrh	r2, [r7, #6]
 80075a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075aa:	d108      	bne.n	80075be <HAL_UART_Receive+0x74>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	e003      	b.n	80075c6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80075c6:	e047      	b.n	8007658 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2200      	movs	r2, #0
 80075d0:	2120      	movs	r1, #32
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f850 	bl	8007678 <UART_WaitOnFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e042      	b.n	8007670 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10c      	bne.n	800760a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	3302      	adds	r3, #2
 8007606:	61bb      	str	r3, [r7, #24]
 8007608:	e01f      	b.n	800764a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007612:	d007      	beq.n	8007624 <HAL_UART_Receive+0xda>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <HAL_UART_Receive+0xe8>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	e008      	b.n	8007644 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800763e:	b2da      	uxtb	r2, r3
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	3301      	adds	r3, #1
 8007648:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1b2      	bne.n	80075c8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	e000      	b.n	8007670 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800766e:	2302      	movs	r3, #2
  }
}
 8007670:	4618      	mov	r0, r3
 8007672:	3720      	adds	r7, #32
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	4613      	mov	r3, r2
 8007686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007688:	e03b      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007690:	d037      	beq.n	8007702 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007692:	f7fc ff69 	bl	8004568 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	6a3a      	ldr	r2, [r7, #32]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d302      	bcc.n	80076a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e03a      	b.n	8007722 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0304 	and.w	r3, r3, #4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d023      	beq.n	8007702 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b80      	cmp	r3, #128	@ 0x80
 80076be:	d020      	beq.n	8007702 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b40      	cmp	r3, #64	@ 0x40
 80076c4:	d01d      	beq.n	8007702 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d116      	bne.n	8007702 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f81d 	bl	800772a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2208      	movs	r2, #8
 80076f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e00f      	b.n	8007722 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4013      	ands	r3, r2
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	429a      	cmp	r2, r3
 8007710:	bf0c      	ite	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	2300      	movne	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	429a      	cmp	r2, r3
 800771e:	d0b4      	beq.n	800768a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800772a:	b480      	push	{r7}
 800772c:	b095      	sub	sp, #84	@ 0x54
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	330c      	adds	r3, #12
 8007738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	330c      	adds	r3, #12
 8007750:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007752:	643a      	str	r2, [r7, #64]	@ 0x40
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e5      	bne.n	8007732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3314      	adds	r3, #20
 800776c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	61fb      	str	r3, [r7, #28]
   return(result);
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3314      	adds	r3, #20
 8007784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800778c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e5      	bne.n	8007766 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d119      	bne.n	80077d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	330c      	adds	r3, #12
 80077a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f023 0310 	bic.w	r3, r3, #16
 80077b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	330c      	adds	r3, #12
 80077c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c2:	61ba      	str	r2, [r7, #24]
 80077c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6979      	ldr	r1, [r7, #20]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	613b      	str	r3, [r7, #16]
   return(result);
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e5      	bne.n	80077a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80077e4:	bf00      	nop
 80077e6:	3754      	adds	r7, #84	@ 0x54
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077f4:	b0c0      	sub	sp, #256	@ 0x100
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780c:	68d9      	ldr	r1, [r3, #12]
 800780e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	ea40 0301 	orr.w	r3, r0, r1
 8007818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800781a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	431a      	orrs	r2, r3
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	431a      	orrs	r2, r3
 8007830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	4313      	orrs	r3, r2
 8007838:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800783c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007848:	f021 010c 	bic.w	r1, r1, #12
 800784c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007856:	430b      	orrs	r3, r1
 8007858:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786a:	6999      	ldr	r1, [r3, #24]
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	ea40 0301 	orr.w	r3, r0, r1
 8007876:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	4b8f      	ldr	r3, [pc, #572]	@ (8007abc <UART_SetConfig+0x2cc>)
 8007880:	429a      	cmp	r2, r3
 8007882:	d005      	beq.n	8007890 <UART_SetConfig+0xa0>
 8007884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ac0 <UART_SetConfig+0x2d0>)
 800788c:	429a      	cmp	r2, r3
 800788e:	d104      	bne.n	800789a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007890:	f7fd ff58 	bl	8005744 <HAL_RCC_GetPCLK2Freq>
 8007894:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007898:	e003      	b.n	80078a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800789a:	f7fd ff3f 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 800789e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ac:	f040 810c 	bne.w	8007ac8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078c2:	4622      	mov	r2, r4
 80078c4:	462b      	mov	r3, r5
 80078c6:	1891      	adds	r1, r2, r2
 80078c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078ca:	415b      	adcs	r3, r3
 80078cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078d2:	4621      	mov	r1, r4
 80078d4:	eb12 0801 	adds.w	r8, r2, r1
 80078d8:	4629      	mov	r1, r5
 80078da:	eb43 0901 	adc.w	r9, r3, r1
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078f2:	4690      	mov	r8, r2
 80078f4:	4699      	mov	r9, r3
 80078f6:	4623      	mov	r3, r4
 80078f8:	eb18 0303 	adds.w	r3, r8, r3
 80078fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007900:	462b      	mov	r3, r5
 8007902:	eb49 0303 	adc.w	r3, r9, r3
 8007906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007916:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800791a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800791e:	460b      	mov	r3, r1
 8007920:	18db      	adds	r3, r3, r3
 8007922:	653b      	str	r3, [r7, #80]	@ 0x50
 8007924:	4613      	mov	r3, r2
 8007926:	eb42 0303 	adc.w	r3, r2, r3
 800792a:	657b      	str	r3, [r7, #84]	@ 0x54
 800792c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007930:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007934:	f7f9 f864 	bl	8000a00 <__aeabi_uldivmod>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4b61      	ldr	r3, [pc, #388]	@ (8007ac4 <UART_SetConfig+0x2d4>)
 800793e:	fba3 2302 	umull	r2, r3, r3, r2
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	011c      	lsls	r4, r3, #4
 8007946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800794a:	2200      	movs	r2, #0
 800794c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007950:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007954:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007958:	4642      	mov	r2, r8
 800795a:	464b      	mov	r3, r9
 800795c:	1891      	adds	r1, r2, r2
 800795e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007960:	415b      	adcs	r3, r3
 8007962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007968:	4641      	mov	r1, r8
 800796a:	eb12 0a01 	adds.w	sl, r2, r1
 800796e:	4649      	mov	r1, r9
 8007970:	eb43 0b01 	adc.w	fp, r3, r1
 8007974:	f04f 0200 	mov.w	r2, #0
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007980:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007988:	4692      	mov	sl, r2
 800798a:	469b      	mov	fp, r3
 800798c:	4643      	mov	r3, r8
 800798e:	eb1a 0303 	adds.w	r3, sl, r3
 8007992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007996:	464b      	mov	r3, r9
 8007998:	eb4b 0303 	adc.w	r3, fp, r3
 800799c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079b4:	460b      	mov	r3, r1
 80079b6:	18db      	adds	r3, r3, r3
 80079b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80079ba:	4613      	mov	r3, r2
 80079bc:	eb42 0303 	adc.w	r3, r2, r3
 80079c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80079ca:	f7f9 f819 	bl	8000a00 <__aeabi_uldivmod>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4611      	mov	r1, r2
 80079d4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ac4 <UART_SetConfig+0x2d4>)
 80079d6:	fba3 2301 	umull	r2, r3, r3, r1
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	2264      	movs	r2, #100	@ 0x64
 80079de:	fb02 f303 	mul.w	r3, r2, r3
 80079e2:	1acb      	subs	r3, r1, r3
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80079ea:	4b36      	ldr	r3, [pc, #216]	@ (8007ac4 <UART_SetConfig+0x2d4>)
 80079ec:	fba3 2302 	umull	r2, r3, r3, r2
 80079f0:	095b      	lsrs	r3, r3, #5
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80079f8:	441c      	add	r4, r3
 80079fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	1891      	adds	r1, r2, r2
 8007a12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a14:	415b      	adcs	r3, r3
 8007a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	1851      	adds	r1, r2, r1
 8007a20:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a22:	4649      	mov	r1, r9
 8007a24:	414b      	adcs	r3, r1
 8007a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a34:	4659      	mov	r1, fp
 8007a36:	00cb      	lsls	r3, r1, #3
 8007a38:	4651      	mov	r1, sl
 8007a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a3e:	4651      	mov	r1, sl
 8007a40:	00ca      	lsls	r2, r1, #3
 8007a42:	4610      	mov	r0, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	4642      	mov	r2, r8
 8007a4a:	189b      	adds	r3, r3, r2
 8007a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a50:	464b      	mov	r3, r9
 8007a52:	460a      	mov	r2, r1
 8007a54:	eb42 0303 	adc.w	r3, r2, r3
 8007a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a70:	460b      	mov	r3, r1
 8007a72:	18db      	adds	r3, r3, r3
 8007a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a76:	4613      	mov	r3, r2
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a86:	f7f8 ffbb 	bl	8000a00 <__aeabi_uldivmod>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac4 <UART_SetConfig+0x2d4>)
 8007a90:	fba3 1302 	umull	r1, r3, r3, r2
 8007a94:	095b      	lsrs	r3, r3, #5
 8007a96:	2164      	movs	r1, #100	@ 0x64
 8007a98:	fb01 f303 	mul.w	r3, r1, r3
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	3332      	adds	r3, #50	@ 0x32
 8007aa2:	4a08      	ldr	r2, [pc, #32]	@ (8007ac4 <UART_SetConfig+0x2d4>)
 8007aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa8:	095b      	lsrs	r3, r3, #5
 8007aaa:	f003 0207 	and.w	r2, r3, #7
 8007aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4422      	add	r2, r4
 8007ab6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ab8:	e106      	b.n	8007cc8 <UART_SetConfig+0x4d8>
 8007aba:	bf00      	nop
 8007abc:	40011000 	.word	0x40011000
 8007ac0:	40011400 	.word	0x40011400
 8007ac4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ad2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ad6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007ada:	4642      	mov	r2, r8
 8007adc:	464b      	mov	r3, r9
 8007ade:	1891      	adds	r1, r2, r2
 8007ae0:	6239      	str	r1, [r7, #32]
 8007ae2:	415b      	adcs	r3, r3
 8007ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007aea:	4641      	mov	r1, r8
 8007aec:	1854      	adds	r4, r2, r1
 8007aee:	4649      	mov	r1, r9
 8007af0:	eb43 0501 	adc.w	r5, r3, r1
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	00eb      	lsls	r3, r5, #3
 8007afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b02:	00e2      	lsls	r2, r4, #3
 8007b04:	4614      	mov	r4, r2
 8007b06:	461d      	mov	r5, r3
 8007b08:	4643      	mov	r3, r8
 8007b0a:	18e3      	adds	r3, r4, r3
 8007b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b10:	464b      	mov	r3, r9
 8007b12:	eb45 0303 	adc.w	r3, r5, r3
 8007b16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b36:	4629      	mov	r1, r5
 8007b38:	008b      	lsls	r3, r1, #2
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b40:	4621      	mov	r1, r4
 8007b42:	008a      	lsls	r2, r1, #2
 8007b44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b48:	f7f8 ff5a 	bl	8000a00 <__aeabi_uldivmod>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4b60      	ldr	r3, [pc, #384]	@ (8007cd4 <UART_SetConfig+0x4e4>)
 8007b52:	fba3 2302 	umull	r2, r3, r3, r2
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	011c      	lsls	r4, r3, #4
 8007b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b6c:	4642      	mov	r2, r8
 8007b6e:	464b      	mov	r3, r9
 8007b70:	1891      	adds	r1, r2, r2
 8007b72:	61b9      	str	r1, [r7, #24]
 8007b74:	415b      	adcs	r3, r3
 8007b76:	61fb      	str	r3, [r7, #28]
 8007b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b7c:	4641      	mov	r1, r8
 8007b7e:	1851      	adds	r1, r2, r1
 8007b80:	6139      	str	r1, [r7, #16]
 8007b82:	4649      	mov	r1, r9
 8007b84:	414b      	adcs	r3, r1
 8007b86:	617b      	str	r3, [r7, #20]
 8007b88:	f04f 0200 	mov.w	r2, #0
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b94:	4659      	mov	r1, fp
 8007b96:	00cb      	lsls	r3, r1, #3
 8007b98:	4651      	mov	r1, sl
 8007b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b9e:	4651      	mov	r1, sl
 8007ba0:	00ca      	lsls	r2, r1, #3
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4642      	mov	r2, r8
 8007baa:	189b      	adds	r3, r3, r2
 8007bac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	460a      	mov	r2, r1
 8007bb4:	eb42 0303 	adc.w	r3, r2, r3
 8007bb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007bc8:	f04f 0200 	mov.w	r2, #0
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	008b      	lsls	r3, r1, #2
 8007bd8:	4641      	mov	r1, r8
 8007bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bde:	4641      	mov	r1, r8
 8007be0:	008a      	lsls	r2, r1, #2
 8007be2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007be6:	f7f8 ff0b 	bl	8000a00 <__aeabi_uldivmod>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4b38      	ldr	r3, [pc, #224]	@ (8007cd4 <UART_SetConfig+0x4e4>)
 8007bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8007bf6:	095b      	lsrs	r3, r3, #5
 8007bf8:	2264      	movs	r2, #100	@ 0x64
 8007bfa:	fb02 f303 	mul.w	r3, r2, r3
 8007bfe:	1acb      	subs	r3, r1, r3
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	3332      	adds	r3, #50	@ 0x32
 8007c04:	4a33      	ldr	r2, [pc, #204]	@ (8007cd4 <UART_SetConfig+0x4e4>)
 8007c06:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c10:	441c      	add	r4, r3
 8007c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c16:	2200      	movs	r2, #0
 8007c18:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c20:	4642      	mov	r2, r8
 8007c22:	464b      	mov	r3, r9
 8007c24:	1891      	adds	r1, r2, r2
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	415b      	adcs	r3, r3
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c30:	4641      	mov	r1, r8
 8007c32:	1851      	adds	r1, r2, r1
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	4649      	mov	r1, r9
 8007c38:	414b      	adcs	r3, r1
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	f04f 0300 	mov.w	r3, #0
 8007c44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c48:	4659      	mov	r1, fp
 8007c4a:	00cb      	lsls	r3, r1, #3
 8007c4c:	4651      	mov	r1, sl
 8007c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c52:	4651      	mov	r1, sl
 8007c54:	00ca      	lsls	r2, r1, #3
 8007c56:	4610      	mov	r0, r2
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	189b      	adds	r3, r3, r2
 8007c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c62:	464b      	mov	r3, r9
 8007c64:	460a      	mov	r2, r1
 8007c66:	eb42 0303 	adc.w	r3, r2, r3
 8007c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c76:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	f04f 0300 	mov.w	r3, #0
 8007c80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c84:	4649      	mov	r1, r9
 8007c86:	008b      	lsls	r3, r1, #2
 8007c88:	4641      	mov	r1, r8
 8007c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c8e:	4641      	mov	r1, r8
 8007c90:	008a      	lsls	r2, r1, #2
 8007c92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c96:	f7f8 feb3 	bl	8000a00 <__aeabi_uldivmod>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <UART_SetConfig+0x4e4>)
 8007ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca4:	095b      	lsrs	r3, r3, #5
 8007ca6:	2164      	movs	r1, #100	@ 0x64
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	3332      	adds	r3, #50	@ 0x32
 8007cb2:	4a08      	ldr	r2, [pc, #32]	@ (8007cd4 <UART_SetConfig+0x4e4>)
 8007cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	f003 020f 	and.w	r2, r3, #15
 8007cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4422      	add	r2, r4
 8007cc6:	609a      	str	r2, [r3, #8]
}
 8007cc8:	bf00      	nop
 8007cca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cd4:	51eb851f 	.word	0x51eb851f

08007cd8 <sqrtf>:
 8007cd8:	b508      	push	{r3, lr}
 8007cda:	ed2d 8b02 	vpush	{d8}
 8007cde:	eeb0 8a40 	vmov.f32	s16, s0
 8007ce2:	f000 f817 	bl	8007d14 <__ieee754_sqrtf>
 8007ce6:	eeb4 8a48 	vcmp.f32	s16, s16
 8007cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cee:	d60c      	bvs.n	8007d0a <sqrtf+0x32>
 8007cf0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007d10 <sqrtf+0x38>
 8007cf4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cfc:	d505      	bpl.n	8007d0a <sqrtf+0x32>
 8007cfe:	f000 f8e3 	bl	8007ec8 <__errno>
 8007d02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007d06:	2321      	movs	r3, #33	@ 0x21
 8007d08:	6003      	str	r3, [r0, #0]
 8007d0a:	ecbd 8b02 	vpop	{d8}
 8007d0e:	bd08      	pop	{r3, pc}
 8007d10:	00000000 	.word	0x00000000

08007d14 <__ieee754_sqrtf>:
 8007d14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007d18:	4770      	bx	lr
	...

08007d1c <malloc>:
 8007d1c:	4b02      	ldr	r3, [pc, #8]	@ (8007d28 <malloc+0xc>)
 8007d1e:	4601      	mov	r1, r0
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	f000 b82d 	b.w	8007d80 <_malloc_r>
 8007d26:	bf00      	nop
 8007d28:	2000000c 	.word	0x2000000c

08007d2c <free>:
 8007d2c:	4b02      	ldr	r3, [pc, #8]	@ (8007d38 <free+0xc>)
 8007d2e:	4601      	mov	r1, r0
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	f000 b903 	b.w	8007f3c <_free_r>
 8007d36:	bf00      	nop
 8007d38:	2000000c 	.word	0x2000000c

08007d3c <sbrk_aligned>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d7c <sbrk_aligned+0x40>)
 8007d40:	460c      	mov	r4, r1
 8007d42:	6831      	ldr	r1, [r6, #0]
 8007d44:	4605      	mov	r5, r0
 8007d46:	b911      	cbnz	r1, 8007d4e <sbrk_aligned+0x12>
 8007d48:	f000 f8ae 	bl	8007ea8 <_sbrk_r>
 8007d4c:	6030      	str	r0, [r6, #0]
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4628      	mov	r0, r5
 8007d52:	f000 f8a9 	bl	8007ea8 <_sbrk_r>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	d103      	bne.n	8007d62 <sbrk_aligned+0x26>
 8007d5a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d5e:	4620      	mov	r0, r4
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	1cc4      	adds	r4, r0, #3
 8007d64:	f024 0403 	bic.w	r4, r4, #3
 8007d68:	42a0      	cmp	r0, r4
 8007d6a:	d0f8      	beq.n	8007d5e <sbrk_aligned+0x22>
 8007d6c:	1a21      	subs	r1, r4, r0
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f89a 	bl	8007ea8 <_sbrk_r>
 8007d74:	3001      	adds	r0, #1
 8007d76:	d1f2      	bne.n	8007d5e <sbrk_aligned+0x22>
 8007d78:	e7ef      	b.n	8007d5a <sbrk_aligned+0x1e>
 8007d7a:	bf00      	nop
 8007d7c:	20000980 	.word	0x20000980

08007d80 <_malloc_r>:
 8007d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d84:	1ccd      	adds	r5, r1, #3
 8007d86:	f025 0503 	bic.w	r5, r5, #3
 8007d8a:	3508      	adds	r5, #8
 8007d8c:	2d0c      	cmp	r5, #12
 8007d8e:	bf38      	it	cc
 8007d90:	250c      	movcc	r5, #12
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	4606      	mov	r6, r0
 8007d96:	db01      	blt.n	8007d9c <_malloc_r+0x1c>
 8007d98:	42a9      	cmp	r1, r5
 8007d9a:	d904      	bls.n	8007da6 <_malloc_r+0x26>
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	6033      	str	r3, [r6, #0]
 8007da0:	2000      	movs	r0, #0
 8007da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e7c <_malloc_r+0xfc>
 8007daa:	f000 f869 	bl	8007e80 <__malloc_lock>
 8007dae:	f8d8 3000 	ldr.w	r3, [r8]
 8007db2:	461c      	mov	r4, r3
 8007db4:	bb44      	cbnz	r4, 8007e08 <_malloc_r+0x88>
 8007db6:	4629      	mov	r1, r5
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7ff ffbf 	bl	8007d3c <sbrk_aligned>
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	d158      	bne.n	8007e76 <_malloc_r+0xf6>
 8007dc4:	f8d8 4000 	ldr.w	r4, [r8]
 8007dc8:	4627      	mov	r7, r4
 8007dca:	2f00      	cmp	r7, #0
 8007dcc:	d143      	bne.n	8007e56 <_malloc_r+0xd6>
 8007dce:	2c00      	cmp	r4, #0
 8007dd0:	d04b      	beq.n	8007e6a <_malloc_r+0xea>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	eb04 0903 	add.w	r9, r4, r3
 8007ddc:	f000 f864 	bl	8007ea8 <_sbrk_r>
 8007de0:	4581      	cmp	r9, r0
 8007de2:	d142      	bne.n	8007e6a <_malloc_r+0xea>
 8007de4:	6821      	ldr	r1, [r4, #0]
 8007de6:	1a6d      	subs	r5, r5, r1
 8007de8:	4629      	mov	r1, r5
 8007dea:	4630      	mov	r0, r6
 8007dec:	f7ff ffa6 	bl	8007d3c <sbrk_aligned>
 8007df0:	3001      	adds	r0, #1
 8007df2:	d03a      	beq.n	8007e6a <_malloc_r+0xea>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	442b      	add	r3, r5
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	bb62      	cbnz	r2, 8007e5c <_malloc_r+0xdc>
 8007e02:	f8c8 7000 	str.w	r7, [r8]
 8007e06:	e00f      	b.n	8007e28 <_malloc_r+0xa8>
 8007e08:	6822      	ldr	r2, [r4, #0]
 8007e0a:	1b52      	subs	r2, r2, r5
 8007e0c:	d420      	bmi.n	8007e50 <_malloc_r+0xd0>
 8007e0e:	2a0b      	cmp	r2, #11
 8007e10:	d917      	bls.n	8007e42 <_malloc_r+0xc2>
 8007e12:	1961      	adds	r1, r4, r5
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	6025      	str	r5, [r4, #0]
 8007e18:	bf18      	it	ne
 8007e1a:	6059      	strne	r1, [r3, #4]
 8007e1c:	6863      	ldr	r3, [r4, #4]
 8007e1e:	bf08      	it	eq
 8007e20:	f8c8 1000 	streq.w	r1, [r8]
 8007e24:	5162      	str	r2, [r4, r5]
 8007e26:	604b      	str	r3, [r1, #4]
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f000 f82f 	bl	8007e8c <__malloc_unlock>
 8007e2e:	f104 000b 	add.w	r0, r4, #11
 8007e32:	1d23      	adds	r3, r4, #4
 8007e34:	f020 0007 	bic.w	r0, r0, #7
 8007e38:	1ac2      	subs	r2, r0, r3
 8007e3a:	bf1c      	itt	ne
 8007e3c:	1a1b      	subne	r3, r3, r0
 8007e3e:	50a3      	strne	r3, [r4, r2]
 8007e40:	e7af      	b.n	8007da2 <_malloc_r+0x22>
 8007e42:	6862      	ldr	r2, [r4, #4]
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	bf0c      	ite	eq
 8007e48:	f8c8 2000 	streq.w	r2, [r8]
 8007e4c:	605a      	strne	r2, [r3, #4]
 8007e4e:	e7eb      	b.n	8007e28 <_malloc_r+0xa8>
 8007e50:	4623      	mov	r3, r4
 8007e52:	6864      	ldr	r4, [r4, #4]
 8007e54:	e7ae      	b.n	8007db4 <_malloc_r+0x34>
 8007e56:	463c      	mov	r4, r7
 8007e58:	687f      	ldr	r7, [r7, #4]
 8007e5a:	e7b6      	b.n	8007dca <_malloc_r+0x4a>
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	42a3      	cmp	r3, r4
 8007e62:	d1fb      	bne.n	8007e5c <_malloc_r+0xdc>
 8007e64:	2300      	movs	r3, #0
 8007e66:	6053      	str	r3, [r2, #4]
 8007e68:	e7de      	b.n	8007e28 <_malloc_r+0xa8>
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f000 f80c 	bl	8007e8c <__malloc_unlock>
 8007e74:	e794      	b.n	8007da0 <_malloc_r+0x20>
 8007e76:	6005      	str	r5, [r0, #0]
 8007e78:	e7d6      	b.n	8007e28 <_malloc_r+0xa8>
 8007e7a:	bf00      	nop
 8007e7c:	20000984 	.word	0x20000984

08007e80 <__malloc_lock>:
 8007e80:	4801      	ldr	r0, [pc, #4]	@ (8007e88 <__malloc_lock+0x8>)
 8007e82:	f000 b84b 	b.w	8007f1c <__retarget_lock_acquire_recursive>
 8007e86:	bf00      	nop
 8007e88:	20000ac4 	.word	0x20000ac4

08007e8c <__malloc_unlock>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	@ (8007e94 <__malloc_unlock+0x8>)
 8007e8e:	f000 b846 	b.w	8007f1e <__retarget_lock_release_recursive>
 8007e92:	bf00      	nop
 8007e94:	20000ac4 	.word	0x20000ac4

08007e98 <memset>:
 8007e98:	4402      	add	r2, r0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d100      	bne.n	8007ea2 <memset+0xa>
 8007ea0:	4770      	bx	lr
 8007ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea6:	e7f9      	b.n	8007e9c <memset+0x4>

08007ea8 <_sbrk_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d06      	ldr	r5, [pc, #24]	@ (8007ec4 <_sbrk_r+0x1c>)
 8007eac:	2300      	movs	r3, #0
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	f7fa fc1e 	bl	80026f4 <_sbrk>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d102      	bne.n	8007ec2 <_sbrk_r+0x1a>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b103      	cbz	r3, 8007ec2 <_sbrk_r+0x1a>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	20000ac0 	.word	0x20000ac0

08007ec8 <__errno>:
 8007ec8:	4b01      	ldr	r3, [pc, #4]	@ (8007ed0 <__errno+0x8>)
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	2000000c 	.word	0x2000000c

08007ed4 <__libc_init_array>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8007f0c <__libc_init_array+0x38>)
 8007ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8007f10 <__libc_init_array+0x3c>)
 8007eda:	1b64      	subs	r4, r4, r5
 8007edc:	10a4      	asrs	r4, r4, #2
 8007ede:	2600      	movs	r6, #0
 8007ee0:	42a6      	cmp	r6, r4
 8007ee2:	d109      	bne.n	8007ef8 <__libc_init_array+0x24>
 8007ee4:	4d0b      	ldr	r5, [pc, #44]	@ (8007f14 <__libc_init_array+0x40>)
 8007ee6:	4c0c      	ldr	r4, [pc, #48]	@ (8007f18 <__libc_init_array+0x44>)
 8007ee8:	f000 f872 	bl	8007fd0 <_init>
 8007eec:	1b64      	subs	r4, r4, r5
 8007eee:	10a4      	asrs	r4, r4, #2
 8007ef0:	2600      	movs	r6, #0
 8007ef2:	42a6      	cmp	r6, r4
 8007ef4:	d105      	bne.n	8007f02 <__libc_init_array+0x2e>
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}
 8007ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efc:	4798      	blx	r3
 8007efe:	3601      	adds	r6, #1
 8007f00:	e7ee      	b.n	8007ee0 <__libc_init_array+0xc>
 8007f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f06:	4798      	blx	r3
 8007f08:	3601      	adds	r6, #1
 8007f0a:	e7f2      	b.n	8007ef2 <__libc_init_array+0x1e>
 8007f0c:	08008dc4 	.word	0x08008dc4
 8007f10:	08008dc4 	.word	0x08008dc4
 8007f14:	08008dc4 	.word	0x08008dc4
 8007f18:	08008dc8 	.word	0x08008dc8

08007f1c <__retarget_lock_acquire_recursive>:
 8007f1c:	4770      	bx	lr

08007f1e <__retarget_lock_release_recursive>:
 8007f1e:	4770      	bx	lr

08007f20 <memcpy>:
 8007f20:	440a      	add	r2, r1
 8007f22:	4291      	cmp	r1, r2
 8007f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f28:	d100      	bne.n	8007f2c <memcpy+0xc>
 8007f2a:	4770      	bx	lr
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f36:	4291      	cmp	r1, r2
 8007f38:	d1f9      	bne.n	8007f2e <memcpy+0xe>
 8007f3a:	bd10      	pop	{r4, pc}

08007f3c <_free_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4605      	mov	r5, r0
 8007f40:	2900      	cmp	r1, #0
 8007f42:	d041      	beq.n	8007fc8 <_free_r+0x8c>
 8007f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f48:	1f0c      	subs	r4, r1, #4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	bfb8      	it	lt
 8007f4e:	18e4      	addlt	r4, r4, r3
 8007f50:	f7ff ff96 	bl	8007e80 <__malloc_lock>
 8007f54:	4a1d      	ldr	r2, [pc, #116]	@ (8007fcc <_free_r+0x90>)
 8007f56:	6813      	ldr	r3, [r2, #0]
 8007f58:	b933      	cbnz	r3, 8007f68 <_free_r+0x2c>
 8007f5a:	6063      	str	r3, [r4, #4]
 8007f5c:	6014      	str	r4, [r2, #0]
 8007f5e:	4628      	mov	r0, r5
 8007f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f64:	f7ff bf92 	b.w	8007e8c <__malloc_unlock>
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d908      	bls.n	8007f7e <_free_r+0x42>
 8007f6c:	6820      	ldr	r0, [r4, #0]
 8007f6e:	1821      	adds	r1, r4, r0
 8007f70:	428b      	cmp	r3, r1
 8007f72:	bf01      	itttt	eq
 8007f74:	6819      	ldreq	r1, [r3, #0]
 8007f76:	685b      	ldreq	r3, [r3, #4]
 8007f78:	1809      	addeq	r1, r1, r0
 8007f7a:	6021      	streq	r1, [r4, #0]
 8007f7c:	e7ed      	b.n	8007f5a <_free_r+0x1e>
 8007f7e:	461a      	mov	r2, r3
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	b10b      	cbz	r3, 8007f88 <_free_r+0x4c>
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	d9fa      	bls.n	8007f7e <_free_r+0x42>
 8007f88:	6811      	ldr	r1, [r2, #0]
 8007f8a:	1850      	adds	r0, r2, r1
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d10b      	bne.n	8007fa8 <_free_r+0x6c>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	4401      	add	r1, r0
 8007f94:	1850      	adds	r0, r2, r1
 8007f96:	4283      	cmp	r3, r0
 8007f98:	6011      	str	r1, [r2, #0]
 8007f9a:	d1e0      	bne.n	8007f5e <_free_r+0x22>
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	6053      	str	r3, [r2, #4]
 8007fa2:	4408      	add	r0, r1
 8007fa4:	6010      	str	r0, [r2, #0]
 8007fa6:	e7da      	b.n	8007f5e <_free_r+0x22>
 8007fa8:	d902      	bls.n	8007fb0 <_free_r+0x74>
 8007faa:	230c      	movs	r3, #12
 8007fac:	602b      	str	r3, [r5, #0]
 8007fae:	e7d6      	b.n	8007f5e <_free_r+0x22>
 8007fb0:	6820      	ldr	r0, [r4, #0]
 8007fb2:	1821      	adds	r1, r4, r0
 8007fb4:	428b      	cmp	r3, r1
 8007fb6:	bf04      	itt	eq
 8007fb8:	6819      	ldreq	r1, [r3, #0]
 8007fba:	685b      	ldreq	r3, [r3, #4]
 8007fbc:	6063      	str	r3, [r4, #4]
 8007fbe:	bf04      	itt	eq
 8007fc0:	1809      	addeq	r1, r1, r0
 8007fc2:	6021      	streq	r1, [r4, #0]
 8007fc4:	6054      	str	r4, [r2, #4]
 8007fc6:	e7ca      	b.n	8007f5e <_free_r+0x22>
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000984 	.word	0x20000984

08007fd0 <_init>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr

08007fdc <_fini>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	bf00      	nop
 8007fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe2:	bc08      	pop	{r3}
 8007fe4:	469e      	mov	lr, r3
 8007fe6:	4770      	bx	lr
