
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c8c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006e50  08006e50  00007e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e68  08006e68  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e68  08006e68  00007e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e70  08006e70  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e70  08006e70  00007e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e74  08006e74  00007e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006e78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  2000005c  08006ed4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08006ed4  000086b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016194  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afb  00000000  00000000  0001e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00020d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef2  00000000  00000000  00022018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000300a  00000000  00000000  00022f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168bf  00000000  00000000  00025f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d68a7  00000000  00000000  0003c7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011307a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  001130c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011850c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006e38 	.word	0x08006e38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08006e38 	.word	0x08006e38

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2iz>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a8:	d215      	bcs.n	80009d6 <__aeabi_d2iz+0x36>
 80009aa:	d511      	bpl.n	80009d0 <__aeabi_d2iz+0x30>
 80009ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d912      	bls.n	80009dc <__aeabi_d2iz+0x3c>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009da:	d105      	bne.n	80009e8 <__aeabi_d2iz+0x48>
 80009dc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	bf08      	it	eq
 80009e2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_uldivmod>:
 80009f0:	b953      	cbnz	r3, 8000a08 <__aeabi_uldivmod+0x18>
 80009f2:	b94a      	cbnz	r2, 8000a08 <__aeabi_uldivmod+0x18>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	bf08      	it	eq
 80009f8:	2800      	cmpeq	r0, #0
 80009fa:	bf1c      	itt	ne
 80009fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000a00:	f04f 30ff 	movne.w	r0, #4294967295
 8000a04:	f000 b988 	b.w	8000d18 <__aeabi_idiv0>
 8000a08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a10:	f000 f806 	bl	8000a20 <__udivmoddi4>
 8000a14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1c:	b004      	add	sp, #16
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9d08      	ldr	r5, [sp, #32]
 8000a26:	468e      	mov	lr, r1
 8000a28:	4604      	mov	r4, r0
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14a      	bne.n	8000ac6 <__udivmoddi4+0xa6>
 8000a30:	428a      	cmp	r2, r1
 8000a32:	4617      	mov	r7, r2
 8000a34:	d962      	bls.n	8000afc <__udivmoddi4+0xdc>
 8000a36:	fab2 f682 	clz	r6, r2
 8000a3a:	b14e      	cbz	r6, 8000a50 <__udivmoddi4+0x30>
 8000a3c:	f1c6 0320 	rsb	r3, r6, #32
 8000a40:	fa01 f806 	lsl.w	r8, r1, r6
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	40b7      	lsls	r7, r6
 8000a4a:	ea43 0808 	orr.w	r8, r3, r8
 8000a4e:	40b4      	lsls	r4, r6
 8000a50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a5c:	0c23      	lsrs	r3, r4, #16
 8000a5e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a66:	fb01 f20c 	mul.w	r2, r1, ip
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d909      	bls.n	8000a82 <__udivmoddi4+0x62>
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a74:	f080 80ea 	bcs.w	8000c4c <__udivmoddi4+0x22c>
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	f240 80e7 	bls.w	8000c4c <__udivmoddi4+0x22c>
 8000a7e:	3902      	subs	r1, #2
 8000a80:	443b      	add	r3, r7
 8000a82:	1a9a      	subs	r2, r3, r2
 8000a84:	b2a3      	uxth	r3, r4
 8000a86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a92:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a96:	459c      	cmp	ip, r3
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0x8e>
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa0:	f080 80d6 	bcs.w	8000c50 <__udivmoddi4+0x230>
 8000aa4:	459c      	cmp	ip, r3
 8000aa6:	f240 80d3 	bls.w	8000c50 <__udivmoddi4+0x230>
 8000aaa:	443b      	add	r3, r7
 8000aac:	3802      	subs	r0, #2
 8000aae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab2:	eba3 030c 	sub.w	r3, r3, ip
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	b11d      	cbz	r5, 8000ac2 <__udivmoddi4+0xa2>
 8000aba:	40f3      	lsrs	r3, r6
 8000abc:	2200      	movs	r2, #0
 8000abe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d905      	bls.n	8000ad6 <__udivmoddi4+0xb6>
 8000aca:	b10d      	cbz	r5, 8000ad0 <__udivmoddi4+0xb0>
 8000acc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e7f5      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000ad6:	fab3 f183 	clz	r1, r3
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d146      	bne.n	8000b6c <__udivmoddi4+0x14c>
 8000ade:	4573      	cmp	r3, lr
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xc8>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 8105 	bhi.w	8000cf2 <__udivmoddi4+0x2d2>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	4690      	mov	r8, r2
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e5      	beq.n	8000ac2 <__udivmoddi4+0xa2>
 8000af6:	e9c5 4800 	strd	r4, r8, [r5]
 8000afa:	e7e2      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	f000 8090 	beq.w	8000c22 <__udivmoddi4+0x202>
 8000b02:	fab2 f682 	clz	r6, r2
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f040 80a4 	bne.w	8000c54 <__udivmoddi4+0x234>
 8000b0c:	1a8a      	subs	r2, r1, r2
 8000b0e:	0c03      	lsrs	r3, r0, #16
 8000b10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b14:	b280      	uxth	r0, r0
 8000b16:	b2bc      	uxth	r4, r7
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b1e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b26:	fb04 f20c 	mul.w	r2, r4, ip
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d907      	bls.n	8000b3e <__udivmoddi4+0x11e>
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b34:	d202      	bcs.n	8000b3c <__udivmoddi4+0x11c>
 8000b36:	429a      	cmp	r2, r3
 8000b38:	f200 80e0 	bhi.w	8000cfc <__udivmoddi4+0x2dc>
 8000b3c:	46c4      	mov	ip, r8
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b44:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b48:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b4c:	fb02 f404 	mul.w	r4, r2, r4
 8000b50:	429c      	cmp	r4, r3
 8000b52:	d907      	bls.n	8000b64 <__udivmoddi4+0x144>
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b5a:	d202      	bcs.n	8000b62 <__udivmoddi4+0x142>
 8000b5c:	429c      	cmp	r4, r3
 8000b5e:	f200 80ca 	bhi.w	8000cf6 <__udivmoddi4+0x2d6>
 8000b62:	4602      	mov	r2, r0
 8000b64:	1b1b      	subs	r3, r3, r4
 8000b66:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b6a:	e7a5      	b.n	8000ab8 <__udivmoddi4+0x98>
 8000b6c:	f1c1 0620 	rsb	r6, r1, #32
 8000b70:	408b      	lsls	r3, r1
 8000b72:	fa22 f706 	lsr.w	r7, r2, r6
 8000b76:	431f      	orrs	r7, r3
 8000b78:	fa0e f401 	lsl.w	r4, lr, r1
 8000b7c:	fa20 f306 	lsr.w	r3, r0, r6
 8000b80:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b84:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b8e:	fa1f fc87 	uxth.w	ip, r7
 8000b92:	fbbe f0f9 	udiv	r0, lr, r9
 8000b96:	0c1c      	lsrs	r4, r3, #16
 8000b98:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b9c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ba0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	fa02 f201 	lsl.w	r2, r2, r1
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x1a0>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bb2:	f080 809c 	bcs.w	8000cee <__udivmoddi4+0x2ce>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8099 	bls.w	8000cee <__udivmoddi4+0x2ce>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	eba4 040e 	sub.w	r4, r4, lr
 8000bc4:	fa1f fe83 	uxth.w	lr, r3
 8000bc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bd4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bd8:	45a4      	cmp	ip, r4
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x1ce>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f103 3eff 	add.w	lr, r3, #4294967295
 8000be2:	f080 8082 	bcs.w	8000cea <__udivmoddi4+0x2ca>
 8000be6:	45a4      	cmp	ip, r4
 8000be8:	d97f      	bls.n	8000cea <__udivmoddi4+0x2ca>
 8000bea:	3b02      	subs	r3, #2
 8000bec:	443c      	add	r4, r7
 8000bee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bf2:	eba4 040c 	sub.w	r4, r4, ip
 8000bf6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bfa:	4564      	cmp	r4, ip
 8000bfc:	4673      	mov	r3, lr
 8000bfe:	46e1      	mov	r9, ip
 8000c00:	d362      	bcc.n	8000cc8 <__udivmoddi4+0x2a8>
 8000c02:	d05f      	beq.n	8000cc4 <__udivmoddi4+0x2a4>
 8000c04:	b15d      	cbz	r5, 8000c1e <__udivmoddi4+0x1fe>
 8000c06:	ebb8 0203 	subs.w	r2, r8, r3
 8000c0a:	eb64 0409 	sbc.w	r4, r4, r9
 8000c0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c12:	fa22 f301 	lsr.w	r3, r2, r1
 8000c16:	431e      	orrs	r6, r3
 8000c18:	40cc      	lsrs	r4, r1
 8000c1a:	e9c5 6400 	strd	r6, r4, [r5]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	e74f      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000c22:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c26:	0c01      	lsrs	r1, r0, #16
 8000c28:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c2c:	b280      	uxth	r0, r0
 8000c2e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c32:	463b      	mov	r3, r7
 8000c34:	4638      	mov	r0, r7
 8000c36:	463c      	mov	r4, r7
 8000c38:	46b8      	mov	r8, r7
 8000c3a:	46be      	mov	lr, r7
 8000c3c:	2620      	movs	r6, #32
 8000c3e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c42:	eba2 0208 	sub.w	r2, r2, r8
 8000c46:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c4a:	e766      	b.n	8000b1a <__udivmoddi4+0xfa>
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	e718      	b.n	8000a82 <__udivmoddi4+0x62>
 8000c50:	4610      	mov	r0, r2
 8000c52:	e72c      	b.n	8000aae <__udivmoddi4+0x8e>
 8000c54:	f1c6 0220 	rsb	r2, r6, #32
 8000c58:	fa2e f302 	lsr.w	r3, lr, r2
 8000c5c:	40b7      	lsls	r7, r6
 8000c5e:	40b1      	lsls	r1, r6
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c6e:	b2bc      	uxth	r4, r7
 8000c70:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c74:	0c11      	lsrs	r1, r2, #16
 8000c76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7a:	fb08 f904 	mul.w	r9, r8, r4
 8000c7e:	40b0      	lsls	r0, r6
 8000c80:	4589      	cmp	r9, r1
 8000c82:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c86:	b280      	uxth	r0, r0
 8000c88:	d93e      	bls.n	8000d08 <__udivmoddi4+0x2e8>
 8000c8a:	1879      	adds	r1, r7, r1
 8000c8c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c90:	d201      	bcs.n	8000c96 <__udivmoddi4+0x276>
 8000c92:	4589      	cmp	r9, r1
 8000c94:	d81f      	bhi.n	8000cd6 <__udivmoddi4+0x2b6>
 8000c96:	eba1 0109 	sub.w	r1, r1, r9
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fb09 f804 	mul.w	r8, r9, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cac:	4542      	cmp	r2, r8
 8000cae:	d229      	bcs.n	8000d04 <__udivmoddi4+0x2e4>
 8000cb0:	18ba      	adds	r2, r7, r2
 8000cb2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cb6:	d2c4      	bcs.n	8000c42 <__udivmoddi4+0x222>
 8000cb8:	4542      	cmp	r2, r8
 8000cba:	d2c2      	bcs.n	8000c42 <__udivmoddi4+0x222>
 8000cbc:	f1a9 0102 	sub.w	r1, r9, #2
 8000cc0:	443a      	add	r2, r7
 8000cc2:	e7be      	b.n	8000c42 <__udivmoddi4+0x222>
 8000cc4:	45f0      	cmp	r8, lr
 8000cc6:	d29d      	bcs.n	8000c04 <__udivmoddi4+0x1e4>
 8000cc8:	ebbe 0302 	subs.w	r3, lr, r2
 8000ccc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	46e1      	mov	r9, ip
 8000cd4:	e796      	b.n	8000c04 <__udivmoddi4+0x1e4>
 8000cd6:	eba7 0909 	sub.w	r9, r7, r9
 8000cda:	4449      	add	r1, r9
 8000cdc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ce0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce4:	fb09 f804 	mul.w	r8, r9, r4
 8000ce8:	e7db      	b.n	8000ca2 <__udivmoddi4+0x282>
 8000cea:	4673      	mov	r3, lr
 8000cec:	e77f      	b.n	8000bee <__udivmoddi4+0x1ce>
 8000cee:	4650      	mov	r0, sl
 8000cf0:	e766      	b.n	8000bc0 <__udivmoddi4+0x1a0>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e6fd      	b.n	8000af2 <__udivmoddi4+0xd2>
 8000cf6:	443b      	add	r3, r7
 8000cf8:	3a02      	subs	r2, #2
 8000cfa:	e733      	b.n	8000b64 <__udivmoddi4+0x144>
 8000cfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d00:	443b      	add	r3, r7
 8000d02:	e71c      	b.n	8000b3e <__udivmoddi4+0x11e>
 8000d04:	4649      	mov	r1, r9
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x222>
 8000d08:	eba1 0109 	sub.w	r1, r1, r9
 8000d0c:	46c4      	mov	ip, r8
 8000d0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d12:	fb09 f804 	mul.w	r8, r9, r4
 8000d16:	e7c4      	b.n	8000ca2 <__udivmoddi4+0x282>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	f6ad 0dd8 	subw	sp, sp, #2264	@ 0x8d8
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f002 ff72 	bl	8003c0c <HAL_Init>
  motor_t motor2;
  motor_t motor3;
  motor_t motor4;
  motor_t motor5;

  motors[0] = &motor1;
 8000d28:	4a35      	ldr	r2, [pc, #212]	@ (8000e00 <main+0xe4>)
 8000d2a:	f207 5354 	addw	r3, r7, #1364	@ 0x554
 8000d2e:	6013      	str	r3, [r2, #0]
  motors[1] = &motor2;
 8000d30:	4a33      	ldr	r2, [pc, #204]	@ (8000e00 <main+0xe4>)
 8000d32:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8000d36:	6053      	str	r3, [r2, #4]
  motors[2] = &motor3;
 8000d38:	4a31      	ldr	r2, [pc, #196]	@ (8000e00 <main+0xe4>)
 8000d3a:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 8000d3e:	6093      	str	r3, [r2, #8]
  motors[3] = &motor4;
 8000d40:	4a2f      	ldr	r2, [pc, #188]	@ (8000e00 <main+0xe4>)
 8000d42:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d46:	60d3      	str	r3, [r2, #12]
  motors[4] = &motor5;
 8000d48:	4a2d      	ldr	r2, [pc, #180]	@ (8000e00 <main+0xe4>)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	6113      	str	r3, [r2, #16]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f85b 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fd3b 	bl	80017cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 fcbb 	bl	80016d0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d5a:	f000 fc8f 	bl	800167c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000d5e:	f000 f8c1 	bl	8000ee4 <MX_I2C1_Init>
  MX_UART4_Init();
 8000d62:	f000 fc37 	bl	80015d4 <MX_UART4_Init>
  MX_UART5_Init();
 8000d66:	f000 fc5f 	bl	8001628 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000d6a:	f000 fcdb 	bl	8001724 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000d6e:	f000 fd03 	bl	8001778 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000d72:	f000 f935 	bl	8000fe0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d76:	f000 f9a7 	bl	80010c8 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000d7a:	f000 fb23 	bl	80013c4 <MX_TIM9_Init>
  MX_TIM8_Init();
 8000d7e:	f000 fa83 	bl	8001288 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000d82:	f000 fb7d 	bl	8001480 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000d86:	f000 fbdb 	bl	8001540 <MX_TIM13_Init>
  MX_TIM1_Init();
 8000d8a:	f000 f8d9 	bl	8000f40 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000d8e:	f000 fa0f 	bl	80011b0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d92:	f000 fa43 	bl	800121c <MX_TIM7_Init>
  MX_TIM10_Init();
 8000d96:	f000 fb4f 	bl	8001438 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_motor_1(&motor1, &driver1);
 8000d9a:	f607 0268 	addw	r2, r7, #2152	@ 0x868
 8000d9e:	f207 5354 	addw	r3, r7, #1364	@ 0x554
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fb13 	bl	80033d0 <init_motor_1>
  init_motor_2(&motor2, &driver2);
 8000daa:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8000dae:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 fbc1 	bl	800353c <init_motor_2>
  init_motor_3(&motor3, &driver3);
 8000dba:	f507 62f1 	add.w	r2, r7, #1928	@ 0x788
 8000dbe:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fc8b 	bl	80036e0 <init_motor_3>
  init_motor_4(&motor4, &driver4);
 8000dca:	f507 62e3 	add.w	r2, r7, #1816	@ 0x718
 8000dce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fd43 	bl	8003860 <init_motor_4>
  init_motor_5(&motor5, &driver5);
 8000dda:	f507 62d5 	add.w	r2, r7, #1704	@ 0x6a8
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fdf4 	bl	80039d0 <init_motor_5>
//
//  enable_inverse_motor_direction(motor1.driver);
//
//  moveDegrees(60, &motor1);

  HAL_Delay(2000);
 8000de8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dec:	f002 ff80 	bl	8003cf0 <HAL_Delay>
//  enable_inverse_motor_direction(motor5.driver);
  moveDegrees(8000, &motor5);
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000e04 <main+0xe8>
 8000df8:	f002 f924 	bl	8003044 <moveDegrees>
//  goHome();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <main+0xe0>
 8000e00:	2000054c 	.word	0x2000054c
 8000e04:	45fa0000 	.word	0x45fa0000

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	@ 0x50
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2234      	movs	r2, #52	@ 0x34
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f005 ffcd 	bl	8006db6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	4a29      	ldr	r2, [pc, #164]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <SystemClock_Config+0xd8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e54:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <SystemClock_Config+0xd8>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <SystemClock_Config+0xd8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2310      	movs	r3, #16
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e80:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e86:	2304      	movs	r3, #4
 8000e88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fee6 	bl	8004c68 <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ea2:	f000 fd6d 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fb86 	bl	80045d4 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ece:	f000 fd57 	bl	8001980 <Error_Handler>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3750      	adds	r7, #80	@ 0x50
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40007000 	.word	0x40007000

08000ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000eea:	4a13      	ldr	r2, [pc, #76]	@ (8000f38 <MX_I2C1_Init+0x54>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000ef0:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <MX_I2C1_Init+0x58>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000f02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_I2C1_Init+0x50>)
 8000f22:	f003 fa13 	bl	800434c <HAL_I2C_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f2c:	f000 fd28 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000078 	.word	0x20000078
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	000186a0 	.word	0x000186a0

08000f40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fdc <MX_TIM1_Init+0x9c>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000f64:	2253      	movs	r2, #83	@ 0x53
 8000f66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000f70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f88:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000f8a:	f004 f90b 	bl	80051a4 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f94:	f000 fcf4 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000fa6:	f004 fd65 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fb0:	f000 fce6 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_TIM1_Init+0x98>)
 8000fc2:	f005 f953 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fcc:	f000 fcd8 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200000cc 	.word	0x200000cc
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	@ 0x38
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 8001012:	4a2c      	ldr	r2, [pc, #176]	@ (80010c4 <MX_TIM3_Init+0xe4>)
 8001014:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 8001018:	2229      	movs	r2, #41	@ 0x29
 800101a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001022:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 8001024:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001028:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102a:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001036:	4822      	ldr	r0, [pc, #136]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 8001038:	f004 f8b4 	bl	80051a4 <HAL_TIM_Base_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001042:	f000 fc9d 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800104c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001050:	4619      	mov	r1, r3
 8001052:	481b      	ldr	r0, [pc, #108]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 8001054:	f004 fd0e 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800105e:	f000 fc8f 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001062:	4817      	ldr	r0, [pc, #92]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 8001064:	f004 f98d 	bl	8005382 <HAL_TIM_OC_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800106e:	f000 fc87 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	4619      	mov	r1, r3
 8001080:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 8001082:	f005 f8f3 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800108c:	f000 fc78 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_TIM3_Init+0xe0>)
 80010a8:	f004 fc88 	bl	80059bc <HAL_TIM_OC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010b2:	f000 fc65 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3738      	adds	r7, #56	@ 0x38
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000114 	.word	0x20000114
 80010c4:	40000400 	.word	0x40000400

080010c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	@ 0x38
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010f8:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 80010fa:	4a2c      	ldr	r2, [pc, #176]	@ (80011ac <MX_TIM4_Init+0xe4>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 80010fe:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 8001100:	2229      	movs	r2, #41	@ 0x29
 8001102:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 800110c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001110:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800111e:	4822      	ldr	r0, [pc, #136]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 8001120:	f004 f840 	bl	80051a4 <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800112a:	f000 fc29 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001138:	4619      	mov	r1, r3
 800113a:	481b      	ldr	r0, [pc, #108]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 800113c:	f004 fc9a 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001146:	f000 fc1b 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800114a:	4817      	ldr	r0, [pc, #92]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 800114c:	f004 f919 	bl	8005382 <HAL_TIM_OC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001156:	f000 fc13 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	4619      	mov	r1, r3
 8001168:	480f      	ldr	r0, [pc, #60]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 800116a:	f005 f87f 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001174:	f000 fc04 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <MX_TIM4_Init+0xe0>)
 8001190:	f004 fc14 	bl	80059bc <HAL_TIM_OC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800119a:	f000 fbf1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3738      	adds	r7, #56	@ 0x38
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000015c 	.word	0x2000015c
 80011ac:	40000800 	.word	0x40000800

080011b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_TIM6_Init+0x64>)
 80011c0:	4a15      	ldr	r2, [pc, #84]	@ (8001218 <MX_TIM6_Init+0x68>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 839;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_TIM6_Init+0x64>)
 80011c6:	f240 3247 	movw	r2, #839	@ 0x347
 80011ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_TIM6_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_TIM6_Init+0x64>)
 80011d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_TIM6_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <MX_TIM6_Init+0x64>)
 80011e2:	f003 ffdf 	bl	80051a4 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011ec:	f000 fbc8 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_TIM6_Init+0x64>)
 80011fe:	f005 f835 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001208:	f000 fbba 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200001a4 	.word	0x200001a4
 8001218:	40001000 	.word	0x40001000

0800121c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <MX_TIM7_Init+0x64>)
 800122c:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <MX_TIM7_Init+0x68>)
 800122e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 839;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <MX_TIM7_Init+0x64>)
 8001232:	f240 3247 	movw	r2, #839	@ 0x347
 8001236:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_TIM7_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <MX_TIM7_Init+0x64>)
 8001240:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001244:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_TIM7_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <MX_TIM7_Init+0x64>)
 800124e:	f003 ffa9 	bl	80051a4 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001258:	f000 fb92 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_TIM7_Init+0x64>)
 800126a:	f004 ffff 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001274:	f000 fb84 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001ec 	.word	0x200001ec
 8001284:	40001400 	.word	0x40001400

08001288 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b096      	sub	sp, #88	@ 0x58
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2220      	movs	r2, #32
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f005 fd78 	bl	8006db6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012c6:	4b3d      	ldr	r3, [pc, #244]	@ (80013bc <MX_TIM8_Init+0x134>)
 80012c8:	4a3d      	ldr	r2, [pc, #244]	@ (80013c0 <MX_TIM8_Init+0x138>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 80012cc:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <MX_TIM8_Init+0x134>)
 80012ce:	2229      	movs	r2, #41	@ 0x29
 80012d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b3a      	ldr	r3, [pc, #232]	@ (80013bc <MX_TIM8_Init+0x134>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012d8:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <MX_TIM8_Init+0x134>)
 80012da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b36      	ldr	r3, [pc, #216]	@ (80013bc <MX_TIM8_Init+0x134>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012e6:	4b35      	ldr	r3, [pc, #212]	@ (80013bc <MX_TIM8_Init+0x134>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <MX_TIM8_Init+0x134>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012f2:	4832      	ldr	r0, [pc, #200]	@ (80013bc <MX_TIM8_Init+0x134>)
 80012f4:	f003 ff56 	bl	80051a4 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80012fe:	f000 fb3f 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800130c:	4619      	mov	r1, r3
 800130e:	482b      	ldr	r0, [pc, #172]	@ (80013bc <MX_TIM8_Init+0x134>)
 8001310:	f004 fbb0 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800131a:	f000 fb31 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800131e:	4827      	ldr	r0, [pc, #156]	@ (80013bc <MX_TIM8_Init+0x134>)
 8001320:	f004 f82f 	bl	8005382 <HAL_TIM_OC_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800132a:	f000 fb29 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001336:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800133a:	4619      	mov	r1, r3
 800133c:	481f      	ldr	r0, [pc, #124]	@ (80013bc <MX_TIM8_Init+0x134>)
 800133e:	f004 ff95 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001348:	f000 fb1a 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	4812      	ldr	r0, [pc, #72]	@ (80013bc <MX_TIM8_Init+0x134>)
 8001372:	f004 fb23 	bl	80059bc <HAL_TIM_OC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800137c:	f000 fb00 	bl	8001980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001398:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_TIM8_Init+0x134>)
 80013a4:	f004 ffde 	bl	8006364 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80013ae:	f000 fae7 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3758      	adds	r7, #88	@ 0x58
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000234 	.word	0x20000234
 80013c0:	40010400 	.word	0x40010400

080013c4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	463b      	mov	r3, r7
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <MX_TIM9_Init+0x6c>)
 80013d8:	4a16      	ldr	r2, [pc, #88]	@ (8001434 <MX_TIM9_Init+0x70>)
 80013da:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_TIM9_Init+0x6c>)
 80013de:	f240 3247 	movw	r2, #839	@ 0x347
 80013e2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_TIM9_Init+0x6c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_TIM9_Init+0x6c>)
 80013ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013f0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_TIM9_Init+0x6c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <MX_TIM9_Init+0x6c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013fe:	480c      	ldr	r0, [pc, #48]	@ (8001430 <MX_TIM9_Init+0x6c>)
 8001400:	f003 fed0 	bl	80051a4 <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800140a:	f000 fab9 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001412:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_TIM9_Init+0x6c>)
 800141a:	f004 fb2b 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001424:	f000 faac 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000027c 	.word	0x2000027c
 8001434:	40014000 	.word	0x40014000

08001438 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_TIM10_Init+0x40>)
 800143e:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <MX_TIM10_Init+0x44>)
 8001440:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <MX_TIM10_Init+0x40>)
 8001444:	f240 3247 	movw	r2, #839	@ 0x347
 8001448:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <MX_TIM10_Init+0x40>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_TIM10_Init+0x40>)
 8001452:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001456:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <MX_TIM10_Init+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_TIM10_Init+0x40>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_TIM10_Init+0x40>)
 8001466:	f003 fe9d 	bl	80051a4 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001470:	f000 fa86 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002c4 	.word	0x200002c4
 800147c:	40014400 	.word	0x40014400

08001480 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014a6:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014a8:	4a24      	ldr	r2, [pc, #144]	@ (800153c <MX_TIM12_Init+0xbc>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 80014ac:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014ae:	2229      	movs	r2, #41	@ 0x29
 80014b0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014be:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80014cc:	481a      	ldr	r0, [pc, #104]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014ce:	f003 fe69 	bl	80051a4 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 fa52 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	4619      	mov	r1, r3
 80014e8:	4813      	ldr	r0, [pc, #76]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014ea:	f004 fac3 	bl	8005a74 <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80014f4:	f000 fa44 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 80014f8:	480f      	ldr	r0, [pc, #60]	@ (8001538 <MX_TIM12_Init+0xb8>)
 80014fa:	f003 ff42 	bl	8005382 <HAL_TIM_OC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001504:	f000 fa3c 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	@ (8001538 <MX_TIM12_Init+0xb8>)
 8001520:	f004 fa4c 	bl	80059bc <HAL_TIM_OC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800152a:	f000 fa29 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3730      	adds	r7, #48	@ 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000030c 	.word	0x2000030c
 800153c:	40001800 	.word	0x40001800

08001540 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
 8001554:	615a      	str	r2, [r3, #20]
 8001556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <MX_TIM13_Init+0x8c>)
 800155a:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <MX_TIM13_Init+0x90>)
 800155c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_TIM13_Init+0x8c>)
 8001560:	2229      	movs	r2, #41	@ 0x29
 8001562:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_TIM13_Init+0x8c>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_TIM13_Init+0x8c>)
 800156c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_TIM13_Init+0x8c>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_TIM13_Init+0x8c>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800157e:	4813      	ldr	r0, [pc, #76]	@ (80015cc <MX_TIM13_Init+0x8c>)
 8001580:	f003 fe10 	bl	80051a4 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800158a:	f000 f9f9 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 800158e:	480f      	ldr	r0, [pc, #60]	@ (80015cc <MX_TIM13_Init+0x8c>)
 8001590:	f003 fef7 	bl	8005382 <HAL_TIM_OC_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800159a:	f000 f9f1 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_TIM13_Init+0x8c>)
 80015b6:	f004 fa01 	bl	80059bc <HAL_TIM_OC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80015c0:	f000 f9de 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000354 	.word	0x20000354
 80015d0:	40001c00 	.word	0x40001c00

080015d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_UART4_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <MX_UART4_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_UART4_Init+0x4c>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_UART4_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_UART4_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_UART4_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_UART4_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_UART4_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_UART4_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_UART4_Init+0x4c>)
 800160c:	f004 ff10 	bl	8006430 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001616:	f000 f9b3 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000039c 	.word	0x2000039c
 8001624:	40004c00 	.word	0x40004c00

08001628 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_UART5_Init+0x4c>)
 800162e:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <MX_UART5_Init+0x50>)
 8001630:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <MX_UART5_Init+0x4c>)
 8001634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001638:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_UART5_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_UART5_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <MX_UART5_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_UART5_Init+0x4c>)
 800164e:	220c      	movs	r2, #12
 8001650:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <MX_UART5_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_UART5_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_UART5_Init+0x4c>)
 8001660:	f004 fee6 	bl	8006430 <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800166a:	f000 f989 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200003e4 	.word	0x200003e4
 8001678:	40005000 	.word	0x40005000

0800167c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001682:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <MX_USART1_UART_Init+0x50>)
 8001684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f004 febc 	bl	8006430 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016be:	f000 f95f 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000042c 	.word	0x2000042c
 80016cc:	40011000 	.word	0x40011000

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <MX_USART2_UART_Init+0x50>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 8001708:	f004 fe92 	bl	8006430 <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001712:	f000 f935 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000474 	.word	0x20000474
 8001720:	40004400 	.word	0x40004400

08001724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <MX_USART3_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 800175c:	f004 fe68 	bl	8006430 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 f90b 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200004bc 	.word	0x200004bc
 8001774:	40004800 	.word	0x40004800

08001778 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <MX_USART6_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 80017b0:	f004 fe3e 	bl	8006430 <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f000 f8e1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000504 	.word	0x20000504
 80017c8:	40011400 	.word	0x40011400

080017cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b62      	ldr	r3, [pc, #392]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a61      	ldr	r2, [pc, #388]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a5a      	ldr	r2, [pc, #360]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b54      	ldr	r3, [pc, #336]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a53      	ldr	r2, [pc, #332]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b51      	ldr	r3, [pc, #324]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b4d      	ldr	r3, [pc, #308]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a4c      	ldr	r2, [pc, #304]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a45      	ldr	r2, [pc, #276]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b43      	ldr	r3, [pc, #268]	@ (8001970 <MX_GPIO_Init+0x1a4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 800186e:	2200      	movs	r2, #0
 8001870:	f640 311f 	movw	r1, #2847	@ 0xb1f
 8001874:	483f      	ldr	r0, [pc, #252]	@ (8001974 <MX_GPIO_Init+0x1a8>)
 8001876:	f002 fd1d 	bl	80042b4 <HAL_GPIO_WritePin>
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001880:	483d      	ldr	r0, [pc, #244]	@ (8001978 <MX_GPIO_Init+0x1ac>)
 8001882:	f002 fd17 	bl	80042b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001886:	2200      	movs	r2, #0
 8001888:	f247 0117 	movw	r1, #28695	@ 0x7017
 800188c:	483b      	ldr	r0, [pc, #236]	@ (800197c <MX_GPIO_Init+0x1b0>)
 800188e:	f002 fd11 	bl	80042b4 <HAL_GPIO_WritePin>
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001898:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800189c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4832      	ldr	r0, [pc, #200]	@ (8001974 <MX_GPIO_Init+0x1a8>)
 80018aa:	f002 fb57 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_yellow_Pin LED_green_Pin MOT_EN_3_Pin STEP_3_Pin
                           MOT_EN_5_Pin STEP_5_Pin DIR_5_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 80018ae:	f640 331f 	movw	r3, #2847	@ 0xb1f
 80018b2:	617b      	str	r3, [r7, #20]
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	482b      	ldr	r0, [pc, #172]	@ (8001974 <MX_GPIO_Init+0x1a8>)
 80018c8:	f002 fb48 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 80018cc:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4825      	ldr	r0, [pc, #148]	@ (8001978 <MX_GPIO_Init+0x1ac>)
 80018e2:	f002 fb3b 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_EN_2_Pin STEP_2_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin;
 80018e6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	481e      	ldr	r0, [pc, #120]	@ (8001978 <MX_GPIO_Init+0x1ac>)
 8001900:	f002 fb2c 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin MOT_EN_4_Pin STEP_4_Pin MOT_EN_1_Pin
                           STEP_1_Pin DIR_1_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001904:	f247 0317 	movw	r3, #28695	@ 0x7017
 8001908:	617b      	str	r3, [r7, #20]
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4817      	ldr	r0, [pc, #92]	@ (800197c <MX_GPIO_Init+0x1b0>)
 800191e:	f002 fb1d 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB5 DIAG_3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|DIAG_3_Pin;
 8001922:	f248 2320 	movw	r3, #33312	@ 0x8220
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4811      	ldr	r0, [pc, #68]	@ (800197c <MX_GPIO_Init+0x1b0>)
 8001938:	f002 fb10 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800193c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <MX_GPIO_Init+0x1a8>)
 8001952:	f002 fb03 	bl	8003f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	2028      	movs	r0, #40	@ 0x28
 800195c:	f002 fac7 	bl	8003eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001960:	2028      	movs	r0, #40	@ 0x28
 8001962:	f002 fae0 	bl	8003f26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	@ 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40020800 	.word	0x40020800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <Error_Handler+0x8>

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ca:	2007      	movs	r0, #7
 80019cc:	f002 fa84 	bl	8003ed8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a19      	ldr	r2, [pc, #100]	@ (8001a60 <HAL_I2C_MspInit+0x84>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12b      	bne.n	8001a56 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a17      	ldr	r2, [pc, #92]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a1a:	23c0      	movs	r3, #192	@ 0xc0
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1e:	2312      	movs	r3, #18
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <HAL_I2C_MspInit+0x8c>)
 8001a36:	f002 fa91 	bl	8003f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	@ 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40005400 	.word	0x40005400
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020400 	.word	0x40020400

08001a6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	@ 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a98      	ldr	r2, [pc, #608]	@ (8001cdc <HAL_TIM_Base_MspInit+0x270>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d11e      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x50>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a82:	4b97      	ldr	r3, [pc, #604]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	4a96      	ldr	r2, [pc, #600]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8e:	4b94      	ldr	r3, [pc, #592]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2018      	movs	r0, #24
 8001aa0:	f002 fa25 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001aa4:	2018      	movs	r0, #24
 8001aa6:	f002 fa3e 	bl	8003f26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2019      	movs	r0, #25
 8001ab0:	f002 fa1d 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ab4:	2019      	movs	r0, #25
 8001ab6:	f002 fa36 	bl	8003f26 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001aba:	e10a      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a88      	ldr	r2, [pc, #544]	@ (8001ce4 <HAL_TIM_Base_MspInit+0x278>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d116      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aca:	4b85      	ldr	r3, [pc, #532]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a84      	ldr	r2, [pc, #528]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b82      	ldr	r3, [pc, #520]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	201d      	movs	r0, #29
 8001ae8:	f002 fa01 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aec:	201d      	movs	r0, #29
 8001aee:	f002 fa1a 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001af2:	e0ee      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM4)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a7b      	ldr	r2, [pc, #492]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x27c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d116      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b02:	4b77      	ldr	r3, [pc, #476]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a76      	ldr	r2, [pc, #472]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b74      	ldr	r3, [pc, #464]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	201e      	movs	r0, #30
 8001b20:	f002 f9e5 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b24:	201e      	movs	r0, #30
 8001b26:	f002 f9fe 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001b2a:	e0d2      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM6)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6e      	ldr	r2, [pc, #440]	@ (8001cec <HAL_TIM_Base_MspInit+0x280>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d116      	bne.n	8001b64 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
 8001b3a:	4b69      	ldr	r3, [pc, #420]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a68      	ldr	r2, [pc, #416]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b66      	ldr	r3, [pc, #408]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2036      	movs	r0, #54	@ 0x36
 8001b58:	f002 f9c9 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b5c:	2036      	movs	r0, #54	@ 0x36
 8001b5e:	f002 f9e2 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001b62:	e0b6      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM7)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a61      	ldr	r2, [pc, #388]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x284>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d116      	bne.n	8001b9c <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b78:	f043 0320 	orr.w	r3, r3, #32
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b58      	ldr	r3, [pc, #352]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2037      	movs	r0, #55	@ 0x37
 8001b90:	f002 f9ad 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b94:	2037      	movs	r0, #55	@ 0x37
 8001b96:	f002 f9c6 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001b9a:	e09a      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM8)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a54      	ldr	r2, [pc, #336]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x288>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d126      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	202b      	movs	r0, #43	@ 0x2b
 8001bc8:	f002 f991 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001bcc:	202b      	movs	r0, #43	@ 0x2b
 8001bce:	f002 f9aa 	bl	8003f26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	202c      	movs	r0, #44	@ 0x2c
 8001bd8:	f002 f989 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bdc:	202c      	movs	r0, #44	@ 0x2c
 8001bde:	f002 f9a2 	bl	8003f26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	202e      	movs	r0, #46	@ 0x2e
 8001be8:	f002 f981 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001bec:	202e      	movs	r0, #46	@ 0x2e
 8001bee:	f002 f99a 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001bf2:	e06e      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM9)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x28c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d116      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b37      	ldr	r3, [pc, #220]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a36      	ldr	r2, [pc, #216]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2018      	movs	r0, #24
 8001c20:	f002 f965 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c24:	2018      	movs	r0, #24
 8001c26:	f002 f97e 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001c2a:	e052      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM10)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a32      	ldr	r2, [pc, #200]	@ (8001cfc <HAL_TIM_Base_MspInit+0x290>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d116      	bne.n	8001c64 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	4a28      	ldr	r2, [pc, #160]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c46:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2019      	movs	r0, #25
 8001c58:	f002 f949 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c5c:	2019      	movs	r0, #25
 8001c5e:	f002 f962 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001c62:	e036      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM12)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a25      	ldr	r2, [pc, #148]	@ (8001d00 <HAL_TIM_Base_MspInit+0x294>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d116      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0x230>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	202b      	movs	r0, #43	@ 0x2b
 8001c90:	f002 f92d 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001c94:	202b      	movs	r0, #43	@ 0x2b
 8001c96:	f002 f946 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001c9a:	e01a      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM13)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a18      	ldr	r2, [pc, #96]	@ (8001d04 <HAL_TIM_Base_MspInit+0x298>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d115      	bne.n	8001cd2 <HAL_TIM_Base_MspInit+0x266>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_TIM_Base_MspInit+0x274>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	202c      	movs	r0, #44	@ 0x2c
 8001cc8:	f002 f911 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ccc:	202c      	movs	r0, #44	@ 0x2c
 8001cce:	f002 f92a 	bl	8003f26 <HAL_NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3730      	adds	r7, #48	@ 0x30
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40000800 	.word	0x40000800
 8001cec:	40001000 	.word	0x40001000
 8001cf0:	40001400 	.word	0x40001400
 8001cf4:	40010400 	.word	0x40010400
 8001cf8:	40014000 	.word	0x40014000
 8001cfc:	40014400 	.word	0x40014400
 8001d00:	40001800 	.word	0x40001800
 8001d04:	40001c00 	.word	0x40001c00

08001d08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b096      	sub	sp, #88	@ 0x58
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a9b      	ldr	r2, [pc, #620]	@ (8001f94 <HAL_UART_MspInit+0x28c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12c      	bne.n	8001d84 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d2e:	4b9a      	ldr	r3, [pc, #616]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a99      	ldr	r2, [pc, #612]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001d34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b97      	ldr	r3, [pc, #604]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d4a:	4b93      	ldr	r3, [pc, #588]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a92      	ldr	r2, [pc, #584]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b90      	ldr	r3, [pc, #576]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d62:	2303      	movs	r3, #3
 8001d64:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d72:	2308      	movs	r3, #8
 8001d74:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4887      	ldr	r0, [pc, #540]	@ (8001f9c <HAL_UART_MspInit+0x294>)
 8001d7e:	f002 f8ed 	bl	8003f5c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d82:	e14c      	b.n	800201e <HAL_UART_MspInit+0x316>
  else if(huart->Instance==UART5)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a85      	ldr	r2, [pc, #532]	@ (8001fa0 <HAL_UART_MspInit+0x298>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d14b      	bne.n	8001e26 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d92:	4b81      	ldr	r3, [pc, #516]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a80      	ldr	r2, [pc, #512]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001d98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dae:	4b7a      	ldr	r3, [pc, #488]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a79      	ldr	r2, [pc, #484]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b77      	ldr	r3, [pc, #476]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dca:	4b73      	ldr	r3, [pc, #460]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a72      	ldr	r2, [pc, #456]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b70      	ldr	r3, [pc, #448]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001de2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001df4:	2308      	movs	r3, #8
 8001df6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4869      	ldr	r0, [pc, #420]	@ (8001fa4 <HAL_UART_MspInit+0x29c>)
 8001e00:	f002 f8ac 	bl	8003f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e04:	2304      	movs	r3, #4
 8001e06:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e14:	2308      	movs	r3, #8
 8001e16:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4862      	ldr	r0, [pc, #392]	@ (8001fa8 <HAL_UART_MspInit+0x2a0>)
 8001e20:	f002 f89c 	bl	8003f5c <HAL_GPIO_Init>
}
 8001e24:	e0fb      	b.n	800201e <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a60      	ldr	r2, [pc, #384]	@ (8001fac <HAL_UART_MspInit+0x2a4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d12d      	bne.n	8001e8c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e34:	4b58      	ldr	r3, [pc, #352]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e38:	4a57      	ldr	r2, [pc, #348]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e40:	4b55      	ldr	r3, [pc, #340]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e50:	4b51      	ldr	r3, [pc, #324]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	4a50      	ldr	r2, [pc, #320]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e68:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e6c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e82:	4619      	mov	r1, r3
 8001e84:	4845      	ldr	r0, [pc, #276]	@ (8001f9c <HAL_UART_MspInit+0x294>)
 8001e86:	f002 f869 	bl	8003f5c <HAL_GPIO_Init>
}
 8001e8a:	e0c8      	b.n	800201e <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a47      	ldr	r2, [pc, #284]	@ (8001fb0 <HAL_UART_MspInit+0x2a8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12c      	bne.n	8001ef0 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
 8001eb6:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a37      	ldr	r2, [pc, #220]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	623b      	str	r3, [r7, #32]
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ece:	230c      	movs	r3, #12
 8001ed0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ede:	2307      	movs	r3, #7
 8001ee0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	482c      	ldr	r0, [pc, #176]	@ (8001f9c <HAL_UART_MspInit+0x294>)
 8001eea:	f002 f837 	bl	8003f5c <HAL_GPIO_Init>
}
 8001eee:	e096      	b.n	800201e <HAL_UART_MspInit+0x316>
  else if(huart->Instance==USART3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb4 <HAL_UART_MspInit+0x2ac>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d160      	bne.n	8001fbc <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a25      	ldr	r2, [pc, #148]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_UART_MspInit+0x290>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f66:	4619      	mov	r1, r3
 8001f68:	480e      	ldr	r0, [pc, #56]	@ (8001fa4 <HAL_UART_MspInit+0x29c>)
 8001f6a:	f001 fff7 	bl	8003f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f72:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f80:	2307      	movs	r3, #7
 8001f82:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480b      	ldr	r0, [pc, #44]	@ (8001fb8 <HAL_UART_MspInit+0x2b0>)
 8001f8c:	f001 ffe6 	bl	8003f5c <HAL_GPIO_Init>
}
 8001f90:	e045      	b.n	800201e <HAL_UART_MspInit+0x316>
 8001f92:	bf00      	nop
 8001f94:	40004c00 	.word	0x40004c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40005000 	.word	0x40005000
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40011000 	.word	0x40011000
 8001fb0:	40004400 	.word	0x40004400
 8001fb4:	40004800 	.word	0x40004800
 8001fb8:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <HAL_UART_MspInit+0x320>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12b      	bne.n	800201e <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <HAL_UART_MspInit+0x324>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a17      	ldr	r2, [pc, #92]	@ (800202c <HAL_UART_MspInit+0x324>)
 8001fd0:	f043 0320 	orr.w	r3, r3, #32
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_UART_MspInit+0x324>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_UART_MspInit+0x324>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a10      	ldr	r2, [pc, #64]	@ (800202c <HAL_UART_MspInit+0x324>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_UART_MspInit+0x324>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffe:	23c0      	movs	r3, #192	@ 0xc0
 8002000:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800200e:	2308      	movs	r3, #8
 8002010:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002012:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <HAL_UART_MspInit+0x328>)
 800201a:	f001 ff9f 	bl	8003f5c <HAL_GPIO_Init>
}
 800201e:	bf00      	nop
 8002020:	3758      	adds	r7, #88	@ 0x58
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40011400 	.word	0x40011400
 800202c:	40023800 	.word	0x40023800
 8002030:	40020800 	.word	0x40020800

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <NMI_Handler+0x4>

0800203c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <MemManage_Handler+0x4>

0800204c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <UsageFault_Handler+0x4>

0800205c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208a:	f001 fe11 	bl	8003cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002098:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800209a:	f003 fb9f 	bl	80057dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800209e:	4803      	ldr	r0, [pc, #12]	@ (80020ac <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80020a0:	f003 fb9c 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200000cc 	.word	0x200000cc
 80020ac:	2000027c 	.word	0x2000027c

080020b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b4:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80020b6:	f003 fb91 	bl	80057dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80020ba:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80020bc:	f003 fb8e 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200000cc 	.word	0x200000cc
 80020c8:	200002c4 	.word	0x200002c4

080020cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <TIM3_IRQHandler+0x10>)
 80020d2:	f003 fb83 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000114 	.word	0x20000114

080020e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <TIM4_IRQHandler+0x10>)
 80020e6:	f003 fb79 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000015c 	.word	0x2000015c

080020f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020fc:	f002 f90e 	bl	800431c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002108:	4803      	ldr	r0, [pc, #12]	@ (8002118 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800210a:	f003 fb67 	bl	80057dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800210e:	4803      	ldr	r0, [pc, #12]	@ (800211c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002110:	f003 fb64 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000234 	.word	0x20000234
 800211c:	2000030c 	.word	0x2000030c

08002120 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002124:	4803      	ldr	r0, [pc, #12]	@ (8002134 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002126:	f003 fb59 	bl	80057dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800212a:	4803      	ldr	r0, [pc, #12]	@ (8002138 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800212c:	f003 fb56 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000234 	.word	0x20000234
 8002138:	20000354 	.word	0x20000354

0800213c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <TIM8_CC_IRQHandler+0x10>)
 8002142:	f003 fb4b 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000234 	.word	0x20000234

08002150 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002154:	4802      	ldr	r0, [pc, #8]	@ (8002160 <TIM6_DAC_IRQHandler+0x10>)
 8002156:	f003 fb41 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200001a4 	.word	0x200001a4

08002164 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <TIM7_IRQHandler+0x10>)
 800216a:	f003 fb37 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200001ec 	.word	0x200001ec

08002178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <SystemInit+0x20>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <SystemInit+0x20>)
 8002184:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002188:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <tmc2209_setup>:
#include "tmc2209.h"


void tmc2209_setup(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_  = serial_baud_rate;
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]
  stepper_driver->serial_address_    = serial_address;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	79fa      	ldrb	r2, [r7, #7]
 80021b4:	711a      	strb	r2, [r3, #4]
  stepper_driver->cool_step_enabled_ = false;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

  tmc2209_initialize(stepper_driver, serial_baud_rate, serial_address);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	461a      	mov	r2, r3
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f98e 	bl	80024e6 <tmc2209_initialize>
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <map>:

// unidirectional methods

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	1a8a      	subs	r2, r1, r2
 80021ec:	fb03 f202 	mul.w	r2, r3, r2
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1acb      	subs	r3, r1, r3
 80021f6:	fb92 f2f3 	sdiv	r2, r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	4413      	add	r3, r2
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <constrain>:

long constrain(long x, long a, long b)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  if (x < a)
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	da01      	bge.n	8002222 <constrain+0x18>
  {
    return a;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	e006      	b.n	8002230 <constrain+0x26>
  }
  else if (b < x)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	429a      	cmp	r2, r3
 8002228:	da01      	bge.n	800222e <constrain+0x24>
  {
    return b;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	e000      	b.n	8002230 <constrain+0x26>
  }
  else
  {
    return x;
 800222e:	68fb      	ldr	r3, [r7, #12]
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <set_micro_steps_per_step>:

void set_micro_steps_per_step(tmc2209_stepper_driver_t *stepper_driver, uint16_t microsteps_per_step)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
  uint16_t microsteps_per_step_shifted = constrain(microsteps_per_step, MICROSTEPS_PER_STEP_MIN, MICROSTEPS_PER_STEP_MAX);
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ffda 	bl	800220a <constrain>
 8002256:	4603      	mov	r3, r0
 8002258:	81fb      	strh	r3, [r7, #14]
  microsteps_per_step_shifted          = microsteps_per_step >> 1;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	81fb      	strh	r3, [r7, #14]
  uint16_t exponent                    = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8002264:	e005      	b.n	8002272 <set_micro_steps_per_step+0x36>
  {
    microsteps_per_step_shifted = microsteps_per_step_shifted >> 1;
 8002266:	89fb      	ldrh	r3, [r7, #14]
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	81fb      	strh	r3, [r7, #14]
    ++exponent;
 800226c:	89bb      	ldrh	r3, [r7, #12]
 800226e:	3301      	adds	r3, #1
 8002270:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f6      	bne.n	8002266 <set_micro_steps_per_step+0x2a>
  }
  set_micro_steps_per_step_power_of_two(stepper_driver, exponent);
 8002278:	89bb      	ldrh	r3, [r7, #12]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f804 	bl	800228c <set_micro_steps_per_step_power_of_two>
}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <set_micro_steps_per_step_power_of_two>:

void set_micro_steps_per_step_power_of_two(tmc2209_stepper_driver_t *stepper_driver, uint8_t exponent)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  switch (exponent)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b07      	cmp	r3, #7
 800229c:	d85a      	bhi.n	8002354 <set_micro_steps_per_step_power_of_two+0xc8>
 800229e:	a201      	add	r2, pc, #4	@ (adr r2, 80022a4 <set_micro_steps_per_step_power_of_two+0x18>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	080022c5 	.word	0x080022c5
 80022a8:	080022d7 	.word	0x080022d7
 80022ac:	080022e9 	.word	0x080022e9
 80022b0:	080022fb 	.word	0x080022fb
 80022b4:	0800230d 	.word	0x0800230d
 80022b8:	0800231f 	.word	0x0800231f
 80022bc:	08002331 	.word	0x08002331
 80022c0:	08002343 	.word	0x08002343
  {
    case 0: {
      stepper_driver->chopper_config_.mres = MRES_001;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80022ca:	2108      	movs	r1, #8
 80022cc:	f361 0303 	bfi	r3, r1, #0, #4
 80022d0:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80022d4:	e046      	b.n	8002364 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 1: {
      stepper_driver->chopper_config_.mres = MRES_002;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80022dc:	2107      	movs	r1, #7
 80022de:	f361 0303 	bfi	r3, r1, #0, #4
 80022e2:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80022e6:	e03d      	b.n	8002364 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 2: {
      stepper_driver->chopper_config_.mres = MRES_004;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80022ee:	2106      	movs	r1, #6
 80022f0:	f361 0303 	bfi	r3, r1, #0, #4
 80022f4:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80022f8:	e034      	b.n	8002364 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 3: {
      stepper_driver->chopper_config_.mres = MRES_008;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002300:	2105      	movs	r1, #5
 8002302:	f361 0303 	bfi	r3, r1, #0, #4
 8002306:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800230a:	e02b      	b.n	8002364 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 4: {
      stepper_driver->chopper_config_.mres = MRES_016;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002312:	2104      	movs	r1, #4
 8002314:	f361 0303 	bfi	r3, r1, #0, #4
 8002318:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800231c:	e022      	b.n	8002364 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 5: {
      stepper_driver->chopper_config_.mres = MRES_032;
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002324:	2103      	movs	r1, #3
 8002326:	f361 0303 	bfi	r3, r1, #0, #4
 800232a:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800232e:	e019      	b.n	8002364 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 6: {
      stepper_driver->chopper_config_.mres = MRES_064;
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002336:	2102      	movs	r1, #2
 8002338:	f361 0303 	bfi	r3, r1, #0, #4
 800233c:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002340:	e010      	b.n	8002364 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 7: {
      stepper_driver->chopper_config_.mres = MRES_128;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002348:	2101      	movs	r1, #1
 800234a:	f361 0303 	bfi	r3, r1, #0, #4
 800234e:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002352:	e007      	b.n	8002364 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 8:
    default: {
      stepper_driver->chopper_config_.mres = MRES_256;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800235a:	f023 030f 	bic.w	r3, r3, #15
 800235e:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002362:	bf00      	nop
    }
  }
  write_stored_chopper_config(stepper_driver);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fb10 	bl	800298a <write_stored_chopper_config>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop

08002374 <set_all_current_percent_values>:

void set_all_current_percent_values(tmc2209_stepper_driver_t *stepper_driver,
                                    uint8_t                   run_current_percent,
                                    uint8_t                   hold_current_percent,
                                    uint8_t                   hold_delay_percent)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	70fb      	strb	r3, [r7, #3]
 8002386:	460b      	mov	r3, r1
 8002388:	70bb      	strb	r3, [r7, #2]
 800238a:	4613      	mov	r3, r2
 800238c:	707b      	strb	r3, [r7, #1]
  uint8_t run_current  = percent_to_current_settings(stepper_driver, run_current_percent);
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa7e 	bl	8002894 <percent_to_current_settings>
 8002398:	4603      	mov	r3, r0
 800239a:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_current = percent_to_current_settings(stepper_driver, hold_current_percent);
 800239c:	78bb      	ldrb	r3, [r7, #2]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa77 	bl	8002894 <percent_to_current_settings>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73bb      	strb	r3, [r7, #14]
  uint8_t hold_delay   = percent_to_hold_delay_setting(stepper_driver, hold_delay_percent);
 80023aa:	787b      	ldrb	r3, [r7, #1]
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fa8d 	bl	80028ce <percent_to_hold_delay_setting>
 80023b4:	4603      	mov	r3, r0
 80023b6:	737b      	strb	r3, [r7, #13]

  stepper_driver->driver_current_.irun       = run_current;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	b2d9      	uxtb	r1, r3
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80023c6:	f361 0304 	bfi	r3, r1, #0, #5
 80023ca:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold      = hold_current;
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	b2d9      	uxtb	r1, r3
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80023dc:	f361 0304 	bfi	r3, r1, #0, #5
 80023e0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.iholddelay = hold_delay;
 80023e4:	7b7b      	ldrb	r3, [r7, #13]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	b2d9      	uxtb	r1, r3
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80023f2:	f361 0303 	bfi	r3, r1, #0, #4
 80023f6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  write_stored_driver_current(stepper_driver);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fa93 	bl	8002926 <write_stored_driver_current>
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <enable_automatic_current_scaling>:
  stepper_driver->pwm_config_.freewheel = mode;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_current_scaling(tmc2209_stepper_driver_t *stepper_driver)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fac2 	bl	80029a8 <write_stored_pwm_config>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <enable_automatic_gradient_adaptation>:
  stepper_driver->pwm_config_.pwm_freq = pwm_freq;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_gradient_adaptation(tmc2209_stepper_driver_t *stepper_driver)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 800243a:	f043 0308 	orr.w	r3, r3, #8
 800243e:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fab0 	bl	80029a8 <write_stored_pwm_config>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <enable_cool_step>:
{
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, stall_guard_threshold);
}

void enable_cool_step(tmc2209_stepper_driver_t *stepper_driver, uint8_t lower_threshold, uint8_t upper_threshold)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	70bb      	strb	r3, [r7, #2]
  lower_threshold                    = constrain(lower_threshold, SEMIN_MIN, SEMIN_MAX);
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	220f      	movs	r2, #15
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fecf 	bl	800220a <constrain>
 800246c:	4603      	mov	r3, r0
 800246e:	70fb      	strb	r3, [r7, #3]
  stepper_driver->cool_config_.semin = lower_threshold;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	b2d9      	uxtb	r1, r3
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	f892 3060 	ldrb.w	r3, [r2, #96]	@ 0x60
 800247e:	f361 0303 	bfi	r3, r1, #0, #4
 8002482:	f882 3060 	strb.w	r3, [r2, #96]	@ 0x60
  upper_threshold                    = constrain(upper_threshold, SEMAX_MIN, SEMAX_MAX);
 8002486:	78bb      	ldrb	r3, [r7, #2]
 8002488:	220f      	movs	r2, #15
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff febc 	bl	800220a <constrain>
 8002492:	4603      	mov	r3, r0
 8002494:	70bb      	strb	r3, [r7, #2]
  stepper_driver->cool_config_.semax = upper_threshold;
 8002496:	78bb      	ldrb	r3, [r7, #2]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	b2d9      	uxtb	r1, r3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 80024a4:	f361 0303 	bfi	r3, r1, #0, #4
 80024a8:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b0:	461a      	mov	r2, r3
 80024b2:	2142      	movs	r1, #66	@ 0x42
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 faee 	bl	8002a96 <tmc2209_write>
  stepper_driver->cool_step_enabled_ = true;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <get_stall_guard_result>:
{
  return tmc2209_read(stepper_driver, ADDRESS_TSTEP);
}

uint16_t get_stall_guard_result(tmc2209_stepper_driver_t *stepper_driver)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  return tmc2209_read(stepper_driver, ADDRESS_SG_RESULT);
 80024d2:	2141      	movs	r1, #65	@ 0x41
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fb3c 	bl	8002b52 <tmc2209_read>
 80024da:	4603      	mov	r3, r0
 80024dc:	b29b      	uxth	r3, r3
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <tmc2209_initialize>:
{
  return tmc2209_read(stepper_driver, ADDRESS_MSCNT);
}

void tmc2209_initialize(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_ = serial_baud_rate;
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	601a      	str	r2, [r3, #0]

  set_operation_mode_to_serial(stepper_driver, serial_address);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4619      	mov	r1, r3
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f813 	bl	800252a <set_operation_mode_to_serial>
  set_registers_to_default(stepper_driver);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f83f 	bl	8002588 <set_registers_to_default>

  minimize_motor_current(stepper_driver);
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f8c2 	bl	8002694 <minimize_motor_current>
  tmc2209_disable(stepper_driver);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 faa6 	bl	8002a62 <tmc2209_disable>
  enable_automatic_current_scaling(stepper_driver);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff ff76 	bl	8002408 <enable_automatic_current_scaling>
  enable_automatic_gradient_adaptation(stepper_driver);
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff ff85 	bl	800242c <enable_automatic_gradient_adaptation>
//  disable_automatic_current_scaling(stepper_driver);
//  disable_automatic_gradient_adaptation(stepper_driver);
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <set_operation_mode_to_serial>:

void set_operation_mode_to_serial(tmc2209_stepper_driver_t *stepper_driver, tmc2209_serial_address_t serial_address)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	70fb      	strb	r3, [r7, #3]
  stepper_driver->serial_address_ = serial_address;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	711a      	strb	r2, [r3, #4]

  stepper_driver->global_config_.bytes            = 0;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	66da      	str	r2, [r3, #108]	@ 0x6c
  stepper_driver->global_config_.i_scale_analog   = 1;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.pdn_disable      = 1;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800255a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.mstep_reg_select = 1;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002568:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.multistep_filt   = 1;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

  write_stored_global_config(stepper_driver);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f9c4 	bl	8002908 <write_stored_global_config>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <set_registers_to_default>:

void set_registers_to_default(tmc2209_stepper_driver_t *stepper_driver)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.bytes      = 0;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	669a      	str	r2, [r3, #104]	@ 0x68
  stepper_driver->driver_current_.ihold      = IHOLD_DEFAULT;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800259c:	2110      	movs	r1, #16
 800259e:	f361 0304 	bfi	r3, r1, #0, #5
 80025a2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.irun       = IRUN_DEFAULT;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80025ac:	f043 031f 	orr.w	r3, r3, #31
 80025b0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80025ba:	2101      	movs	r1, #1
 80025bc:	f361 0303 	bfi	r3, r1, #0, #4
 80025c0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025c8:	461a      	mov	r2, r3
 80025ca:	2110      	movs	r1, #16
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fa62 	bl	8002a96 <tmc2209_write>

  stepper_driver->chopper_config_.bytes  = CHOPPER_CONFIG_DEFAULT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <set_registers_to_default+0x104>)
 80025d6:	659a      	str	r2, [r3, #88]	@ 0x58
  stepper_driver->chopper_config_.tbl    = TBL_DEFAULT;
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80025dc:	2102      	movs	r1, #2
 80025de:	f361 33d0 	bfi	r3, r1, #15, #2
 80025e2:	6593      	str	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hend   = HEND_DEFAULT;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 80025ea:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 80025ee:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hstart = HSTART_DEFAULT;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80025f8:	2105      	movs	r1, #5
 80025fa:	f361 1306 	bfi	r3, r1, #4, #3
 80025fe:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.toff   = TOFF_DEFAULT;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002608:	2103      	movs	r1, #3
 800260a:	f361 0303 	bfi	r3, r1, #0, #4
 800260e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	461a      	mov	r2, r3
 8002618:	216c      	movs	r1, #108	@ 0x6c
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa3b 	bl	8002a96 <tmc2209_write>

  stepper_driver->pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <set_registers_to_default+0x108>)
 8002624:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	461a      	mov	r2, r3
 800262c:	2170      	movs	r1, #112	@ 0x70
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa31 	bl	8002a96 <tmc2209_write>

  stepper_driver->cool_config_.bytes = COOLCONF_DEFAULT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	661a      	str	r2, [r3, #96]	@ 0x60
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263e:	461a      	mov	r2, r3
 8002640:	2142      	movs	r1, #66	@ 0x42
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa27 	bl	8002a96 <tmc2209_write>

  tmc2209_write(stepper_driver, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002648:	2214      	movs	r2, #20
 800264a:	2111      	movs	r1, #17
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fa22 	bl	8002a96 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002652:	2200      	movs	r2, #0
 8002654:	2113      	movs	r1, #19
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fa1d 	bl	8002a96 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 800265c:	2200      	movs	r2, #0
 800265e:	2122      	movs	r1, #34	@ 0x22
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fa18 	bl	8002a96 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8002666:	2200      	movs	r2, #0
 8002668:	2114      	movs	r1, #20
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa13 	bl	8002a96 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002670:	2200      	movs	r2, #0
 8002672:	2140      	movs	r1, #64	@ 0x40
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa0e 	bl	8002a96 <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 800267a:	2200      	movs	r2, #0
 800267c:	2142      	movs	r1, #66	@ 0x42
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa09 	bl	8002a96 <tmc2209_write>
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	10000053 	.word	0x10000053
 8002690:	c10d0024 	.word	0xc10d0024

08002694 <minimize_motor_current>:

  return global_config.pdn_disable;
}

void minimize_motor_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.irun  = CURRENT_SETTING_MIN;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80026a2:	f023 031f 	bic.w	r3, r3, #31
 80026a6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold = CURRENT_SETTING_MIN;
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80026b0:	f023 031f 	bic.w	r3, r3, #31
 80026b4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  write_stored_driver_current(stepper_driver);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f934 	bl	8002926 <write_stored_driver_current>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <reverse_data>:

uint32_t reverse_data(uint32_t data)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  uint8_t  right_shift;
  uint8_t  left_shift;
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 80026d2:	2300      	movs	r3, #0
 80026d4:	72fb      	strb	r3, [r7, #11]
 80026d6:	e016      	b.n	8002706 <reverse_data+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	f1c3 0303 	rsb	r3, r3, #3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	72bb      	strb	r3, [r7, #10]
    left_shift  = i * BITS_PER_BYTE;
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 80026ea:	7abb      	ldrb	r3, [r7, #10]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	7a7b      	ldrb	r3, [r7, #9]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002700:	7afb      	ldrb	r3, [r7, #11]
 8002702:	3301      	adds	r3, #1
 8002704:	72fb      	strb	r3, [r7, #11]
 8002706:	7afb      	ldrb	r3, [r7, #11]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d9e5      	bls.n	80026d8 <reverse_data+0x12>
  }
  return reversed_data;
 800270c:	68fb      	ldr	r3, [r7, #12]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <calculate_crc_write>:

uint8_t calculate_crc_write(write_read_reply_datagram_t *datagram, uint8_t datagram_size)
{
 800271a:	b4f0      	push	{r4, r5, r6, r7}
 800271c:	b088      	sub	sp, #32
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	70f9      	strb	r1, [r7, #3]
  uint8_t crc = 0;
 8002724:	2100      	movs	r1, #0
 8002726:	77f9      	strb	r1, [r7, #31]
  uint8_t byte;
  uint8_t datagram_bytes[7];
  for (int i = 0; i < datagram_size - 1; i++)
 8002728:	2100      	movs	r1, #0
 800272a:	61b9      	str	r1, [r7, #24]
 800272c:	e01c      	b.n	8002768 <calculate_crc_write+0x4e>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002734:	69bc      	ldr	r4, [r7, #24]
 8002736:	00e4      	lsls	r4, r4, #3
 8002738:	f1c4 0620 	rsb	r6, r4, #32
 800273c:	f1a4 0520 	sub.w	r5, r4, #32
 8002740:	fa20 f204 	lsr.w	r2, r0, r4
 8002744:	fa01 f606 	lsl.w	r6, r1, r6
 8002748:	4332      	orrs	r2, r6
 800274a:	fa21 f505 	lsr.w	r5, r1, r5
 800274e:	432a      	orrs	r2, r5
 8002750:	fa21 f304 	lsr.w	r3, r1, r4
 8002754:	b2d4      	uxtb	r4, r2
 8002756:	f107 000c 	add.w	r0, r7, #12
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	4401      	add	r1, r0
 800275e:	4620      	mov	r0, r4
 8002760:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < datagram_size - 1; i++)
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	3101      	adds	r1, #1
 8002766:	61b9      	str	r1, [r7, #24]
 8002768:	78f9      	ldrb	r1, [r7, #3]
 800276a:	3901      	subs	r1, #1
 800276c:	69b8      	ldr	r0, [r7, #24]
 800276e:	4288      	cmp	r0, r1
 8002770:	dbdd      	blt.n	800272e <calculate_crc_write+0x14>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
 8002776:	e029      	b.n	80027cc <calculate_crc_write+0xb2>
  {
    byte = datagram_bytes[i];
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	3320      	adds	r3, #32
 800277c:	443b      	add	r3, r7
 800277e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002782:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002784:	2300      	movs	r3, #0
 8002786:	75bb      	strb	r3, [r7, #22]
 8002788:	e01a      	b.n	80027c0 <calculate_crc_write+0xa6>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 800278a:	7ffb      	ldrb	r3, [r7, #31]
 800278c:	09db      	lsrs	r3, r3, #7
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	7fbb      	ldrb	r3, [r7, #30]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	429a      	cmp	r2, r3
 800279a:	d008      	beq.n	80027ae <calculate_crc_write+0x94>
      {
        crc = (crc << 1) ^ 0x07;
 800279c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	f083 0307 	eor.w	r3, r3, #7
 80027a8:	b25b      	sxtb	r3, r3
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e002      	b.n	80027b4 <calculate_crc_write+0x9a>
      }
      else
      {
        crc = crc << 1;
 80027ae:	7ffb      	ldrb	r3, [r7, #31]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	77fb      	strb	r3, [r7, #31]
      }
      byte = byte >> 1;
 80027b4:	7fbb      	ldrb	r3, [r7, #30]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 80027ba:	7dbb      	ldrb	r3, [r7, #22]
 80027bc:	3301      	adds	r3, #1
 80027be:	75bb      	strb	r3, [r7, #22]
 80027c0:	7dbb      	ldrb	r3, [r7, #22]
 80027c2:	2b07      	cmp	r3, #7
 80027c4:	d9e1      	bls.n	800278a <calculate_crc_write+0x70>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
 80027c8:	3301      	adds	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
 80027cc:	7dfa      	ldrb	r2, [r7, #23]
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	429a      	cmp	r2, r3
 80027d4:	dbd0      	blt.n	8002778 <calculate_crc_write+0x5e>
    }
  }
  return crc;
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bcf0      	pop	{r4, r5, r6, r7}
 80027e0:	4770      	bx	lr

080027e2 <calculate_crc_read>:

uint8_t calculate_crc_read(read_request_datagram_t *datagram, uint8_t datagram_size)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  uint8_t datagram_bytes[4];
  for (int i = 0; i < (datagram_size - 1); i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e00f      	b.n	8002818 <calculate_crc_read+0x36>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
 8002804:	b2d9      	uxtb	r1, r3
 8002806:	f107 0208 	add.w	r2, r7, #8
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	460a      	mov	r2, r1
 8002810:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < (datagram_size - 1); i++)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3301      	adds	r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	3b01      	subs	r3, #1
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	429a      	cmp	r2, r3
 8002820:	dbea      	blt.n	80027f8 <calculate_crc_read+0x16>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e029      	b.n	800287c <calculate_crc_read+0x9a>
  {
    byte = datagram_bytes[i];
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	3318      	adds	r3, #24
 800282c:	443b      	add	r3, r7
 800282e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002832:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002834:	2300      	movs	r3, #0
 8002836:	73bb      	strb	r3, [r7, #14]
 8002838:	e01a      	b.n	8002870 <calculate_crc_read+0x8e>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	09db      	lsrs	r3, r3, #7
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	7dbb      	ldrb	r3, [r7, #22]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	429a      	cmp	r2, r3
 800284a:	d008      	beq.n	800285e <calculate_crc_read+0x7c>
      {
        crc = (crc << 1) ^ 0x07;
 800284c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	b25b      	sxtb	r3, r3
 8002854:	f083 0307 	eor.w	r3, r3, #7
 8002858:	b25b      	sxtb	r3, r3
 800285a:	75fb      	strb	r3, [r7, #23]
 800285c:	e002      	b.n	8002864 <calculate_crc_read+0x82>
      }
      else
      {
        crc = crc << 1;
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 8002864:	7dbb      	ldrb	r3, [r7, #22]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 800286a:	7bbb      	ldrb	r3, [r7, #14]
 800286c:	3301      	adds	r3, #1
 800286e:	73bb      	strb	r3, [r7, #14]
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	2b07      	cmp	r3, #7
 8002874:	d9e1      	bls.n	800283a <calculate_crc_read+0x58>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	3301      	adds	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	3b01      	subs	r3, #1
 8002882:	429a      	cmp	r2, r3
 8002884:	dbd0      	blt.n	8002828 <calculate_crc_read+0x46>
    }
  }
  return crc;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <percent_to_current_settings>:

uint8_t percent_to_current_settings(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af02      	add	r7, sp, #8
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	2264      	movs	r2, #100	@ 0x64
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fcaf 	bl	800220a <constrain>
 80028ac:	4603      	mov	r3, r0
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint8_t current_setting     = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
 80028b0:	7bf8      	ldrb	r0, [r7, #15]
 80028b2:	231f      	movs	r3, #31
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2300      	movs	r3, #0
 80028b8:	2264      	movs	r2, #100	@ 0x64
 80028ba:	2100      	movs	r1, #0
 80028bc:	f7ff fc89 	bl	80021d2 <map>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73bb      	strb	r3, [r7, #14]
  return current_setting;
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <percent_to_hold_delay_setting>:
  uint8_t percent = map(current_setting, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

uint8_t percent_to_hold_delay_setting(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af02      	add	r7, sp, #8
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	2264      	movs	r2, #100	@ 0x64
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fc92 	bl	800220a <constrain>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_delay_setting  = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
 80028ea:	7bf8      	ldrb	r0, [r7, #15]
 80028ec:	230f      	movs	r3, #15
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	2264      	movs	r2, #100	@ 0x64
 80028f4:	2100      	movs	r1, #0
 80028f6:	f7ff fc6c 	bl	80021d2 <map>
 80028fa:	4603      	mov	r3, r0
 80028fc:	73bb      	strb	r3, [r7, #14]
  return hold_delay_setting;
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <write_stored_global_config>:
  uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

void write_stored_global_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_GCONF, stepper_driver->global_config_.bytes);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002914:	461a      	mov	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f8bc 	bl	8002a96 <tmc2209_write>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <write_stored_driver_current>:
{
  return tmc2209_read(stepper_driver, ADDRESS_GCONF);
}

void write_stored_driver_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002932:	461a      	mov	r2, r3
 8002934:	2110      	movs	r1, #16
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f8ad 	bl	8002a96 <tmc2209_write>

  if (stepper_driver->driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8002942:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b13      	cmp	r3, #19
 800294a:	d907      	bls.n	800295c <write_stored_driver_current+0x36>
  {
    stepper_driver->cool_config_.seimin = SEIMIN_UPPER_SETTING;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002956:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
 800295a:	e006      	b.n	800296a <write_stored_driver_current+0x44>
  }
  else
  {
    stepper_driver->cool_config_.seimin = SEIMIN_LOWER_SETTING;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002966:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  }
  if (stepper_driver->cool_step_enabled_)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <write_stored_driver_current+0x5c>
  {
    tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002978:	461a      	mov	r2, r3
 800297a:	2142      	movs	r1, #66	@ 0x42
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f88a 	bl	8002a96 <tmc2209_write>
  }
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <write_stored_chopper_config>:

void write_stored_chopper_config(tmc2209_stepper_driver_t *stepper_driver)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	461a      	mov	r2, r3
 8002998:	216c      	movs	r1, #108	@ 0x6c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f87b 	bl	8002a96 <tmc2209_write>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <write_stored_pwm_config>:
{
  return tmc2209_read(stepper_driver, ADDRESS_CHOPCONF);
}

void write_stored_pwm_config(tmc2209_stepper_driver_t *stepper_driver)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	461a      	mov	r2, r3
 80029b6:	2170      	movs	r1, #112	@ 0x70
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f86c 	bl	8002a96 <tmc2209_write>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <tmc2209_set_uart>:

// /* Private function code -----------------------------------------------------*/

extern UART_HandleTypeDef huart1;
void tmc2209_set_uart(tmc2209_stepper_driver_t *stepper_driver, UART_HandleTypeDef uart)
{
 80029c6:	b084      	sub	sp, #16
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	f107 0014 	add.w	r0, r7, #20
 80029d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	stepper_driver->uart_ = uart;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3308      	adds	r3, #8
 80029dc:	f107 0114 	add.w	r1, r7, #20
 80029e0:	2248      	movs	r2, #72	@ 0x48
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 fa1a 	bl	8006e1c <memcpy>
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029f2:	b004      	add	sp, #16
 80029f4:	4770      	bx	lr

080029f6 <tmc2209_set_hardware_enable_pin>:

void tmc2209_set_hardware_enable_pin(tmc2209_stepper_driver_t *stepper_driver, uint16_t hardware_enable_pin, GPIO_TypeDef* hardware_enable_gpio_port)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	460b      	mov	r3, r1
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	817b      	strh	r3, [r7, #10]
   stepper_driver->hardware_enable_pin_ = hardware_enable_pin;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	897a      	ldrh	r2, [r7, #10]
 8002a08:	80da      	strh	r2, [r3, #6]
   stepper_driver->hardware_enable_gpio_port_ = hardware_enable_gpio_port;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	651a      	str	r2, [r3, #80]	@ 0x50

   HAL_GPIO_WritePin(hardware_enable_gpio_port, hardware_enable_pin, GPIO_PIN_SET);
 8002a10:	897b      	ldrh	r3, [r7, #10]
 8002a12:	2201      	movs	r2, #1
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f001 fc4c 	bl	80042b4 <HAL_GPIO_WritePin>
 }
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <tmc2209_enable>:

 void tmc2209_enable(tmc2209_stepper_driver_t *stepper_driver)
 {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
     HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_RESET);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	88db      	ldrh	r3, [r3, #6]
 8002a34:	2200      	movs	r2, #0
 8002a36:	4619      	mov	r1, r3
 8002a38:	f001 fc3c 	bl	80042b4 <HAL_GPIO_WritePin>
   }
   stepper_driver->toff_                = TOFF_DEFAULT;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
   stepper_driver->chopper_config_.toff = TOFF_DEFAULT;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	f361 0303 	bfi	r3, r1, #0, #4
 8002a50:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff98 	bl	800298a <write_stored_chopper_config>
 }
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <tmc2209_disable>:

 void tmc2209_disable(tmc2209_stepper_driver_t* stepper_driver)
 {
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
   HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_SET);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	88db      	ldrh	r3, [r3, #6]
 8002a72:	2201      	movs	r2, #1
 8002a74:	4619      	mov	r1, r3
 8002a76:	f001 fc1d 	bl	80042b4 <HAL_GPIO_WritePin>
   }
   stepper_driver->chopper_config_.toff = TOFF_DISABLE;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002a80:	f023 030f 	bic.w	r3, r3, #15
 8002a84:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff7e 	bl	800298a <write_stored_chopper_config>
 }
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <tmc2209_write>:

 void tmc2209_write(tmc2209_stepper_driver_t *stepper_driver, uint8_t register_address, uint32_t data)
 {
 8002a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a98:	b08b      	sub	sp, #44	@ 0x2c
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	72fb      	strb	r3, [r7, #11]
   write_read_reply_datagram_t write_datagram;
   write_datagram.bytes            = 0;
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9c7 2306 	strd	r2, r3, [r7, #24]
   write_datagram.sync             = SYNC;
 8002ab0:	7e3b      	ldrb	r3, [r7, #24]
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	f362 0303 	bfi	r3, r2, #0, #4
 8002ab8:	763b      	strb	r3, [r7, #24]
   write_datagram.serial_address   = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	767b      	strb	r3, [r7, #25]
   write_datagram.register_address = register_address;
 8002abe:	7afb      	ldrb	r3, [r7, #11]
 8002ac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	7ebb      	ldrb	r3, [r7, #26]
 8002ac8:	f362 0306 	bfi	r3, r2, #0, #7
 8002acc:	76bb      	strb	r3, [r7, #26]
   write_datagram.rw               = RW_WRITE;
 8002ace:	7ebb      	ldrb	r3, [r7, #26]
 8002ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad4:	76bb      	strb	r3, [r7, #26]
   write_datagram.data             = reverse_data(data);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fdf5 	bl	80026c6 <reverse_data>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f8c7 301b 	str.w	r3, [r7, #27]
   write_datagram.crc              = calculate_crc_write(&write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	2108      	movs	r1, #8
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fe16 	bl	800271a <calculate_crc_write>
 8002aee:	4603      	mov	r3, r0
 8002af0:	77fb      	strb	r3, [r7, #31]

   uint8_t datagram_bytes[8];
   for (int i = 0; i < 8; i++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af6:	e01b      	b.n	8002b30 <tmc2209_write+0x9a>
   {
     datagram_bytes[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002afe:	00c9      	lsls	r1, r1, #3
 8002b00:	f1c1 0620 	rsb	r6, r1, #32
 8002b04:	f1a1 0020 	sub.w	r0, r1, #32
 8002b08:	fa22 f401 	lsr.w	r4, r2, r1
 8002b0c:	fa03 f606 	lsl.w	r6, r3, r6
 8002b10:	4334      	orrs	r4, r6
 8002b12:	fa23 f000 	lsr.w	r0, r3, r0
 8002b16:	4304      	orrs	r4, r0
 8002b18:	fa23 f501 	lsr.w	r5, r3, r1
 8002b1c:	b2e1      	uxtb	r1, r4
 8002b1e:	f107 0210 	add.w	r2, r7, #16
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	4413      	add	r3, r2
 8002b26:	460a      	mov	r2, r1
 8002b28:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	2b07      	cmp	r3, #7
 8002b34:	dde0      	ble.n	8002af8 <tmc2209_write+0x62>
   }
   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, WRITE_READ_REPLY_DATAGRAM_SIZE, 0XFFFF);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f103 0008 	add.w	r0, r3, #8
 8002b3c:	f107 0110 	add.w	r1, r7, #16
 8002b40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b44:	2208      	movs	r2, #8
 8002b46:	f003 fcc3 	bl	80064d0 <HAL_UART_Transmit>
   //   printf("Write Data Request: %s", datagram_bytes);
 }
 8002b4a:	bf00      	nop
 8002b4c:	372c      	adds	r7, #44	@ 0x2c
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b52 <tmc2209_read>:

 uint32_t tmc2209_read(tmc2209_stepper_driver_t * stepper_driver, uint8_t register_address)
 {
 8002b52:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b56:	b090      	sub	sp, #64	@ 0x40
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
   read_request_datagram_t read_request_datagram;
   read_request_datagram.bytes            = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   read_request_datagram.sync             = SYNC;
 8002b64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b68:	2205      	movs	r2, #5
 8002b6a:	f362 0303 	bfi	r3, r2, #0, #4
 8002b6e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
   read_request_datagram.serial_address   = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
   read_request_datagram.register_address = register_address;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002b84:	f362 0306 	bfi	r3, r2, #0, #7
 8002b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.rw               = RW_READ;
 8002b8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.crc              = calculate_crc_read(&read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 8002b98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fe1f 	bl	80027e2 <calculate_crc_read>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

   uint8_t datagram_bytes[WRITE_READ_REPLY_DATAGRAM_SIZE];
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8002baa:	2300      	movs	r3, #0
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bae:	e00e      	b.n	8002bce <tmc2209_read+0x7c>
   {
     datagram_bytes[i] = (read_request_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	b2d9      	uxtb	r1, r3
 8002bbc:	f107 0220 	add.w	r2, r7, #32
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc2:	4413      	add	r3, r2
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bca:	3301      	adds	r3, #1
 8002bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	dded      	ble.n	8002bb0 <tmc2209_read+0x5e>
   }

   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, READ_REQUEST_DATAGRAM_SIZE, 0XFFFF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f103 0008 	add.w	r0, r3, #8
 8002bda:	f107 0120 	add.w	r1, r7, #32
 8002bde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002be2:	2204      	movs	r2, #4
 8002be4:	f003 fc74 	bl	80064d0 <HAL_UART_Transmit>
//   printf("Write Data Request: %s", datagram_bytes);


   uint8_t                     byte_count = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
   write_read_reply_datagram_t read_reply_datagram;
   read_reply_datagram.bytes = 0;
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
//   {
//     HAL_UART_Receive(&huart1, (uint8_t *)&byte, 1, 100);
//     datagram_bytes[i] = byte;
//   }
   uint8_t uart_reply[WRITE_READ_REPLY_DATAGRAM_SIZE + 1];
   HAL_UART_Receive(&stepper_driver->uart_, uart_reply, 9, 100);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f103 0008 	add.w	r0, r3, #8
 8002c00:	f107 010c 	add.w	r1, r7, #12
 8002c04:	2364      	movs	r3, #100	@ 0x64
 8002c06:	2209      	movs	r2, #9
 8002c08:	f003 fced 	bl	80065e6 <HAL_UART_Receive>
   uint8_t* datagram = uart_reply + sizeof(uint8_t);
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	3301      	adds	r3, #1
 8002c12:	637b      	str	r3, [r7, #52]	@ 0x34

   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002c1a:	e029      	b.n	8002c70 <tmc2209_read+0x11e>
   {
     read_reply_datagram.bytes |= ((uint64_t)datagram[i] << (byte_count++ * BITS_PER_BYTE));
 8002c1c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002c20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4698      	mov	r8, r3
 8002c2c:	4691      	mov	r9, r2
 8002c2e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	f1a3 0120 	sub.w	r1, r3, #32
 8002c3e:	f1c3 0220 	rsb	r2, r3, #32
 8002c42:	fa09 f503 	lsl.w	r5, r9, r3
 8002c46:	fa08 f101 	lsl.w	r1, r8, r1
 8002c4a:	430d      	orrs	r5, r1
 8002c4c:	fa28 f202 	lsr.w	r2, r8, r2
 8002c50:	4315      	orrs	r5, r2
 8002c52:	fa08 f403 	lsl.w	r4, r8, r3
 8002c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c5a:	ea44 0a02 	orr.w	sl, r4, r2
 8002c5e:	ea45 0b03 	orr.w	fp, r5, r3
 8002c62:	e9c7 ab06 	strd	sl, fp, [r7, #24]
   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8002c66:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002c70:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002c74:	2b07      	cmp	r3, #7
 8002c76:	d9d1      	bls.n	8002c1c <tmc2209_read+0xca>
   }
   uint32_t reversed_data = reverse_data(read_reply_datagram.data);
 8002c78:	f8d7 301b 	ldr.w	r3, [r7, #27]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fd22 	bl	80026c6 <reverse_data>
 8002c82:	6338      	str	r0, [r7, #48]	@ 0x30
   uint8_t  crc           = calculate_crc_write(&read_reply_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002c84:	f107 0318 	add.w	r3, r7, #24
 8002c88:	2108      	movs	r1, #8
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fd45 	bl	800271a <calculate_crc_write>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   if (crc != read_reply_datagram.crc)
   {
   }
   return reversed_data;
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 }
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3740      	adds	r7, #64	@ 0x40
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ca4 <toSteps>:

/*
 * Calculates the steps needed to rotate the amount stated in the variable degrees.
 */
int32_t toSteps(float degrees, motor_t* motor)
{
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cae:	6038      	str	r0, [r7, #0]
	int32_t steps;
	steps = ((200.0 * (float)(motor->microsteps)/360.0)*degrees) * motor->gear_ratio;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbc:	ee17 0a90 	vmov	r0, s15
 8002cc0:	f7fd fc04 	bl	80004cc <__aeabi_f2d>
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <toSteps+0x90>)
 8002cca:	f7fd fc57 	bl	800057c <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <toSteps+0x94>)
 8002cdc:	f7fd fd78 	bl	80007d0 <__aeabi_ddiv>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fd fbef 	bl	80004cc <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fc41 	bl	800057c <__aeabi_dmul>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4614      	mov	r4, r2
 8002d00:	461d      	mov	r5, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fbe0 	bl	80004cc <__aeabi_f2d>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7fd fc32 	bl	800057c <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd fe3e 	bl	80009a0 <__aeabi_d2iz>
 8002d24:	4603      	mov	r3, r0
 8002d26:	60fb      	str	r3, [r7, #12]
	return steps;
 8002d28:	68fb      	ldr	r3, [r7, #12]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bdb0      	pop	{r4, r5, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40690000 	.word	0x40690000
 8002d38:	40768000 	.word	0x40768000

08002d3c <stopMotorMovement>:

static inline void stopMotorMovement(motor_t * motor)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	333c      	adds	r3, #60	@ 0x3c
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 fc88 	bl	8005660 <HAL_TIM_OC_Stop_IT>
	motor->active_movement_flag = 0;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	731a      	strb	r2, [r3, #12]
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <trapezMove>:

static inline void trapezMove(motion_t* mt)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
	if (mt->step >= 0 && mt->step < mt->acc_steps)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db1b      	blt.n	8002da6 <trapezMove+0x48>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	da15      	bge.n	8002da6 <trapezMove+0x48>
	{
		mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6a12      	ldr	r2, [r2, #32]
 8002d82:	3201      	adds	r2, #1
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	f003 ffed 	bl	8006d74 <sqrtf>
 8002d9a:	eef0 7a40 	vmov.f32	s15, s0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	edc3 7a03 	vstr	s15, [r3, #12]
 8002da4:	e043      	b.n	8002e2e <trapezMove+0xd0>
		// motion.v = acc_ramp[motion.step]
	}
	else if (mt->const_steps != 0 && mt->step >= mt->acc_steps && mt->step < (mt->total_steps - mt->dec_steps))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d018      	beq.n	8002de0 <trapezMove+0x82>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	db12      	blt.n	8002de0 <trapezMove+0x82>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6919      	ldr	r1, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	1acb      	subs	r3, r1, r3
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	da09      	bge.n	8002de0 <trapezMove+0x82>
		mt->v = mt->V_MAX;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	edc3 7a03 	vstr	s15, [r3, #12]
 8002dde:	e026      	b.n	8002e2e <trapezMove+0xd0>
	else if (mt->step >= (mt->total_steps - mt->dec_steps) && mt->step < mt->total_steps)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1a      	ldr	r2, [r3, #32]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6919      	ldr	r1, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	1acb      	subs	r3, r1, r3
 8002dee:	429a      	cmp	r2, r3
 8002df0:	db1d      	blt.n	8002e2e <trapezMove+0xd0>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	da17      	bge.n	8002e2e <trapezMove+0xd0>
	{
		mt->v = sqrtf(2 * mt->DEC_MAX * (mt->total_steps - mt->step));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6911      	ldr	r1, [r2, #16]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6a12      	ldr	r2, [r2, #32]
 8002e0a:	1a8a      	subs	r2, r1, r2
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	f003 ffa9 	bl	8006d74 <sqrtf>
 8002e22:	eef0 7a40 	vmov.f32	s15, s0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	edc3 7a03 	vstr	s15, [r3, #12]
		// motion.v = acc_ramp[motion.total_steps - motion.step]
	}
}
 8002e2c:	e7ff      	b.n	8002e2e <trapezMove+0xd0>
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_TIM_OC_DelayElapsedCallback>:
 * Every other motion.cycle, as motion.step only triggers on rising edge,
 * the velocity and the compare value is changed depending on current state of velocity ramp.
 *
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	int8_t index;
	motor_t* motor;

	//To know which timer and thus which motor caused the interrupt
	if (htim->Instance == motors[0]->motion.motor_control_timer.Instance){ index = 0; }
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b57      	ldr	r3, [pc, #348]	@ (8002fa4 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d102      	bne.n	8002e54 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	e026      	b.n	8002ea2 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[1]->motion.motor_control_timer.Instance){ index = 1; }
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b52      	ldr	r3, [pc, #328]	@ (8002fa4 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d102      	bne.n	8002e68 <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8002e62:	2301      	movs	r3, #1
 8002e64:	77fb      	strb	r3, [r7, #31]
 8002e66:	e01c      	b.n	8002ea2 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[2]->motion.motor_control_timer.Instance){ index = 2; }
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa4 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d102      	bne.n	8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x44>
 8002e76:	2302      	movs	r3, #2
 8002e78:	77fb      	strb	r3, [r7, #31]
 8002e7a:	e012      	b.n	8002ea2 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[3]->motion.motor_control_timer.Instance){ index = 3; }
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b48      	ldr	r3, [pc, #288]	@ (8002fa4 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d102      	bne.n	8002e90 <HAL_TIM_OC_DelayElapsedCallback+0x58>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e008      	b.n	8002ea2 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[4]->motion.motor_control_timer.Instance){ index = 4; }
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b43      	ldr	r3, [pc, #268]	@ (8002fa4 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	77fb      	strb	r3, [r7, #31]

	motor = motors[index];
 8002ea2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8002fa4 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	61bb      	str	r3, [r7, #24]
	motion_t* mt = &motor->motion;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	3310      	adds	r3, #16
 8002eb2:	617b      	str	r3, [r7, #20]

	//Stop timer and movement if the robot reaches its destination
	if (mt->step >= mt->total_steps)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	db03      	blt.n	8002ec8 <HAL_TIM_OC_DelayElapsedCallback+0x90>
	{
		stopMotorMovement(motor);
 8002ec0:	69b8      	ldr	r0, [r7, #24]
 8002ec2:	f7ff ff3b 	bl	8002d3c <stopMotorMovement>
		return;
 8002ec6:	e06a      	b.n	8002f9e <HAL_TIM_OC_DelayElapsedCallback+0x166>
	}

	if (mt->cycle % 2 == 0) //Change velocity only every other motion.cycle because motion.step only triggers on rising edge
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d13d      	bne.n	8002f50 <HAL_TIM_OC_DelayElapsedCallback+0x118>
	{
		switch(mt->motion_mode)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_TIM_OC_DelayElapsedCallback+0xb2>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db31      	blt.n	8002f46 <HAL_TIM_OC_DelayElapsedCallback+0x10e>
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d82e      	bhi.n	8002f46 <HAL_TIM_OC_DelayElapsedCallback+0x10e>
 8002ee8:	e003      	b.n	8002ef2 <HAL_TIM_OC_DelayElapsedCallback+0xba>
		{
		case MOTION_TRAPEZ:
			trapezMove(mt);
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7ff ff37 	bl	8002d5e <trapezMove>
			break;
 8002ef0:	e029      	b.n	8002f46 <HAL_TIM_OC_DelayElapsedCallback+0x10e>
		case MOTION_HOME:
		case MOTION_GRIP:
			if (mt->step >= 0 && mt->step < mt->acc_steps)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db1b      	blt.n	8002f32 <HAL_TIM_OC_DelayElapsedCallback+0xfa>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	da15      	bge.n	8002f32 <HAL_TIM_OC_DelayElapsedCallback+0xfa>
				mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	6a12      	ldr	r2, [r2, #32]
 8002f0e:	3201      	adds	r2, #1
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f22:	f003 ff27 	bl	8006d74 <sqrtf>
 8002f26:	eef0 7a40 	vmov.f32	s15, s0
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	edc3 7a03 	vstr	s15, [r3, #12]
			else
				mt->v = mt->V_MAX;

			break;
 8002f30:	e008      	b.n	8002f44 <HAL_TIM_OC_DelayElapsedCallback+0x10c>
				mt->v = mt->V_MAX;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8002f44:	bf00      	nop
		}
		mt->step++;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
	}

	mt->cycle++;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_GPIO_TogglePin(motor->gpio_ports.step, motor->gpio_pins.step);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f001 f9bc 	bl	80042e6 <HAL_GPIO_TogglePin>
	 *	But this is not the answer since the time has to be converted into timer ticks.
	 *	The timer runs at 2 MHz so we need to divide our current period duration by 1 / 2000000 s or 0.5 µs.
	 *	-> delay in ticks = 1/(2*motion.v)/0.0000005 = 2000000/(2*motion.v)
	 */

	int32_t delay = 2000000 / (2 * motor->motion.v);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f78:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002fa8 <HAL_TIM_OC_DelayElapsedCallback+0x170>
 8002f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f84:	ee17 3a90 	vmov	r3, s15
 8002f88:	613b      	str	r3, [r7, #16]
	//Add delay to current compare value in register
	int32_t total_delay = __HAL_TIM_GET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1) + delay;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1, total_delay);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	2000054c 	.word	0x2000054c
 8002fa8:	49f42400 	.word	0x49f42400

08002fac <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupt service routine for timer 9, which periodically invokes status checks.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MOTOR_COUNT; i++)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e024      	b.n	8003004 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if (htim->Instance == motors[i]->status_check_timer.Instance)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4915      	ldr	r1, [pc, #84]	@ (8003014 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d117      	bne.n	8002ffe <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if (motors[i]->active_movement_flag)
 8002fce:	4a11      	ldr	r2, [pc, #68]	@ (8003014 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	7b1b      	ldrb	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_TIM_PeriodElapsedCallback+0x40>
				motors[i]->status_flag = 1;
 8002fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003014 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			else
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);

			break;
 8002fea:	e00f      	b.n	800300c <HAL_TIM_PeriodElapsedCallback+0x60>
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);
 8002fec:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	3388      	adds	r3, #136	@ 0x88
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 f994 	bl	8005324 <HAL_TIM_Base_Stop_IT>
			break;
 8002ffc:	e006      	b.n	800300c <HAL_TIM_PeriodElapsedCallback+0x60>
	for(int i = 0; i < MOTOR_COUNT; i++)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3301      	adds	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b04      	cmp	r3, #4
 8003008:	ddd7      	ble.n	8002fba <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
//	writeDisplay("HAHA");
}
 800300a:	bf00      	nop
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000054c 	.word	0x2000054c

08003018 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)  // Prüfen ob User Button
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003028:	d106      	bne.n	8003038 <HAL_GPIO_EXTI_Callback+0x20>
	{
		toggle_inverse_motor_direction(motors[4]->driver);
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_GPIO_EXTI_Callback+0x28>)
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f9ae 	bl	8003394 <toggle_inverse_motor_direction>
//		HAL_GPIO_TogglePin(DIR_5_GPIO_Port, DIR_5_Pin);
	}
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000054c 	.word	0x2000054c

08003044 <moveDegrees>:

/*
 * Initiates motor movement by starting the timer and calculating the steps
 */
void moveDegrees(float degrees, motor_t* motor)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	ed87 0a01 	vstr	s0, [r7, #4]
 800304e:	6038      	str	r0, [r7, #0]
	if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f001 f910 	bl	8004284 <HAL_GPIO_ReadPin>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <moveDegrees+0x32>
		tmc2209_enable(motor->driver);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fcd7 	bl	8002a24 <tmc2209_enable>

	motor->motion.total_steps = toSteps(degrees, motor); //Convert degrees to steps
 8003076:	6838      	ldr	r0, [r7, #0]
 8003078:	ed97 0a01 	vldr	s0, [r7, #4]
 800307c:	f7ff fe12 	bl	8002ca4 <toSteps>
 8003080:	4602      	mov	r2, r0
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	621a      	str	r2, [r3, #32]
	motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration and deceleration steps
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	6912      	ldr	r2, [r2, #16]
 800308e:	fb03 f202 	mul.w	r2, r3, r2
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	461a      	mov	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.DEC_MAX);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	6912      	ldr	r2, [r2, #16]
 80030aa:	fb03 f202 	mul.w	r2, r3, r2
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.const_steps = motor->motion.total_steps - (motor->motion.acc_steps + motor->motion.dec_steps);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	440b      	add	r3, r1
 80030cc:	1ad2      	subs	r2, r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24

	motion_mode_t motion_mode = MOTION_TRAPEZ;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]

	initMovementVars(motor, motion_mode);
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	4619      	mov	r1, r3
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	f000 f821 	bl	8003122 <initMovementVars>

	if (motor->motion.const_steps < 0)	//If acceleration steps + deceleration steps are bigger than total steps
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da12      	bge.n	800310e <moveDegrees+0xca>
	{
		motor->motion.acc_steps = motor->motion.total_steps / 2;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	0fda      	lsrs	r2, r3, #31
 80030ee:	4413      	add	r3, r2
 80030f0:	105b      	asrs	r3, r3, #1
 80030f2:	461a      	mov	r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	629a      	str	r2, [r3, #40]	@ 0x28
		motor->motion.dec_steps = motor->motion.total_steps / 2;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	0fda      	lsrs	r2, r3, #31
 80030fe:	4413      	add	r3, r2
 8003100:	105b      	asrs	r3, r3, #1
 8003102:	461a      	mov	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	62da      	str	r2, [r3, #44]	@ 0x2c
		motor->motion.const_steps = 0;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	//Start timer in output compare with interrupt
	startMovement(motor);
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f000 f821 	bl	8003156 <startMovement>

	startStatusChecks(motor);
 8003114:	6838      	ldr	r0, [r7, #0]
 8003116:	f000 f83d 	bl	8003194 <startStatusChecks>
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <initMovementVars>:
		startStatusChecks(motor);
	}
}

void initMovementVars(motor_t * motor, motion_mode_t motion_mode)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	70fb      	strb	r3, [r7, #3]
	motor->motion.v = 0;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	61da      	str	r2, [r3, #28]
	motor->motion.step = 0;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->motion.motion_mode = motion_mode;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <startMovement>:

void startMovement(motor_t * motor)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_ports.step, motor->gpio_pins.step, GPIO_PIN_RESET);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 800316a:	2200      	movs	r2, #0
 800316c:	4619      	mov	r1, r3
 800316e:	f001 f8a1 	bl	80042b4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&motor->motion.motor_control_timer, TIM_CHANNEL_1, 1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003176:	2201      	movs	r2, #1
 8003178:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_OC_Start_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	333c      	adds	r3, #60	@ 0x3c
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f002 f957 	bl	8005434 <HAL_TIM_OC_Start_IT>

	motor->active_movement_flag = 1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	731a      	strb	r2, [r3, #12]
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <startStatusChecks>:

void startStatusChecks(motor_t * motor)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&motor->status_check_timer);  //Timer for periodical status checks
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3388      	adds	r3, #136	@ 0x88
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 f84f 	bl	8005244 <HAL_TIM_Base_Start_IT>

	motor->status_flag = 0;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	motor->stallguard.previous_smoothed_result = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

	while(motor->active_movement_flag)		//While motor is moving, periodically check driver status
 80031b8:	e002      	b.n	80031c0 <startStatusChecks+0x2c>
	{
		checkDriverStatus(motor);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8cc 	bl	8003358 <checkDriverStatus>
	while(motor->active_movement_flag)		//While motor is moving, periodically check driver status
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7b1b      	ldrb	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f8      	bne.n	80031ba <startStatusChecks+0x26>
	}
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <checkStall>:

/*
 * Also work in progress, now simply outputs stallguard result to monitor.
 */
void checkStall(uint16_t stallguard_result, motor_t* motor)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	80fb      	strh	r3, [r7, #6]
	stallguard_t* sg = &motor->stallguard;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	33d0      	adds	r3, #208	@ 0xd0
 80031e4:	617b      	str	r3, [r7, #20]
	float diff;

	sg->smoothed_result = ALPHA * stallguard_result + (1-ALPHA) * sg->previous_smoothed_result;
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f0:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80031f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80031fe:	eef6 6a08 	vmov.f32	s13, #104	@ 0x3f400000  0.750
 8003202:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	edc3 7a04 	vstr	s15, [r3, #16]

	smoothed_result_g = sg->smoothed_result;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	4a4a      	ldr	r2, [pc, #296]	@ (8003340 <checkStall+0x16c>)
 8003216:	6013      	str	r3, [r2, #0]
	stallguard_result_g = stallguard_result;
 8003218:	4a4a      	ldr	r2, [pc, #296]	@ (8003344 <checkStall+0x170>)
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	8013      	strh	r3, [r2, #0]


	diff = sg->smoothed_result - sg->previous_smoothed_result;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	ed93 7a04 	vldr	s14, [r3, #16]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	edd3 7a05 	vldr	s15, [r3, #20]
 800322a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322e:	edc7 7a04 	vstr	s15, [r7, #16]
	v_g = motor->motion.v;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4a44      	ldr	r2, [pc, #272]	@ (8003348 <checkStall+0x174>)
 8003238:	6013      	str	r3, [r2, #0]

	float k = sg->MAX_STALLGUARD_VALUE / (float) motor->motion.V_MAX;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800324c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003250:	edc7 7a03 	vstr	s15, [r7, #12]

	dynamic_stall_threshold_g = k * motor->motion.v - sg->STALL_BUFFER;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	ed93 7a07 	vldr	s14, [r3, #28]
 800325a:	edd7 7a03 	vldr	s15, [r7, #12]
 800325e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	899b      	ldrh	r3, [r3, #12]
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800326e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003272:	4b36      	ldr	r3, [pc, #216]	@ (800334c <checkStall+0x178>)
 8003274:	edc3 7a00 	vstr	s15, [r3]


	switch(sg->state)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	7f1b      	ldrb	r3, [r3, #28]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d043      	beq.n	8003308 <checkStall+0x134>
 8003280:	2b02      	cmp	r3, #2
 8003282:	dc4c      	bgt.n	800331e <checkStall+0x14a>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <checkStall+0xba>
 8003288:	2b01      	cmp	r3, #1
 800328a:	d00f      	beq.n	80032ac <checkStall+0xd8>
 800328c:	e047      	b.n	800331e <checkStall+0x14a>
	{
	case NORMAL:
		if (diff < 0)
 800328e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	d503      	bpl.n	80032a4 <checkStall+0xd0>
			sg->state = FALL_DOWN;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2201      	movs	r2, #1
 80032a0:	771a      	strb	r2, [r3, #28]
 80032a2:	e003      	b.n	80032ac <checkStall+0xd8>
		else
		{
			sg->negative_diff_counter = 0;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2200      	movs	r2, #0
 80032a8:	835a      	strh	r2, [r3, #26]
			break;
 80032aa:	e038      	b.n	800331e <checkStall+0x14a>
		}
	case FALL_DOWN:
		sg->negative_diff_counter++;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	8b5b      	ldrh	r3, [r3, #26]
 80032b0:	3301      	adds	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	835a      	strh	r2, [r3, #26]
		if (sg->negative_diff_counter > sg->MAX_NEGATIVE_DIFF_COUNTER && sg->smoothed_result < dynamic_stall_threshold_g)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	8b5a      	ldrh	r2, [r3, #26]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	889b      	ldrh	r3, [r3, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d91a      	bls.n	80032fa <checkStall+0x126>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <checkStall+0x178>)
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	d50f      	bpl.n	80032fa <checkStall+0x126>
		{
			sg->consecutive_low_counter++;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	8b1b      	ldrh	r3, [r3, #24]
 80032de:	3301      	adds	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	831a      	strh	r2, [r3, #24]
			if (sg->consecutive_low_counter > sg->MAX_CONSECUTIVE_LOW)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	8b1a      	ldrh	r2, [r3, #24]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	88db      	ldrh	r3, [r3, #6]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d914      	bls.n	800331c <checkStall+0x148>
				sg->state = LOW;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2202      	movs	r2, #2
 80032f6:	771a      	strb	r2, [r3, #28]
			if (sg->consecutive_low_counter > sg->MAX_CONSECUTIVE_LOW)
 80032f8:	e006      	b.n	8003308 <checkStall+0x134>
			else
				break;
		}
		else
		{
			sg->consecutive_low_counter = 0;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	831a      	strh	r2, [r3, #24]
			sg->state = NORMAL;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2200      	movs	r2, #0
 8003304:	771a      	strb	r2, [r3, #28]
			break;
 8003306:	e00a      	b.n	800331e <checkStall+0x14a>
		}
	case LOW:
		stopMotorMovement(motor);
 8003308:	6838      	ldr	r0, [r7, #0]
 800330a:	f7ff fd17 	bl	8002d3c <stopMotorMovement>
		sg->negative_diff_counter = 0;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	835a      	strh	r2, [r3, #26]
		sg->consecutive_low_counter = 0;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2200      	movs	r2, #0
 8003318:	831a      	strh	r2, [r3, #24]
 800331a:	e000      	b.n	800331e <checkStall+0x14a>
				break;
 800331c:	bf00      	nop
	}

	negative_diff_counter_g = sg->negative_diff_counter;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	8b5a      	ldrh	r2, [r3, #26]
 8003322:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <checkStall+0x17c>)
 8003324:	801a      	strh	r2, [r3, #0]
	consecutive_low_counter_g = (int)sg->state;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	7f1b      	ldrb	r3, [r3, #28]
 800332a:	461a      	mov	r2, r3
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <checkStall+0x180>)
 800332e:	601a      	str	r2, [r3, #0]
	sg->previous_smoothed_result = sg->smoothed_result;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	615a      	str	r2, [r3, #20]

}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000564 	.word	0x20000564
 8003344:	20000560 	.word	0x20000560
 8003348:	20000568 	.word	0x20000568
 800334c:	2000056c 	.word	0x2000056c
 8003350:	20000570 	.word	0x20000570
 8003354:	20000574 	.word	0x20000574

08003358 <checkDriverStatus>:
 * This function is continuously called while a motor is active.
 * It only does something when status_flag has been set to 1.
 * Then it calls the checkOverheat and Load functions.
 */
void checkDriverStatus(motor_t* motor)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	if (motor->status_flag)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <checkDriverStatus+0x34>
	{
//		tmc2209_status_t status;
		uint16_t stallguard_result;

		motor->status_flag = 0;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
//		status = get_status(motor->driver);
//
//		checkOverheating(status);

		stallguard_result = get_stall_guard_result(motor->driver);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f8a6 	bl	80024ca <get_stall_guard_result>
 800337e:	4603      	mov	r3, r0
 8003380:	81fb      	strh	r3, [r7, #14]
		checkStall(stallguard_result, motor);
 8003382:	89fb      	ldrh	r3, [r7, #14]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff24 	bl	80031d4 <checkStall>
	}
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <toggle_inverse_motor_direction>:

void toggle_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 1 - stepper_driver->global_config_.shaft;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80033a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f1c3 0301 	rsb	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	b2d9      	uxtb	r1, r3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 80033ba:	f361 03c3 	bfi	r3, r1, #3, #1
 80033be:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff faa0 	bl	8002908 <write_stored_global_config>
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <init_motor_1>:
extern UART_HandleTypeDef huart5;

void initializeDefaults(motor_t * motor);

void init_motor_1(motor_t *motor1, tmc2209_stepper_driver_t *driver1)
{
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	b093      	sub	sp, #76	@ 0x4c
 80033d4:	af10      	add	r7, sp, #64	@ 0x40
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor1);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fbae 	bl	8003b3c <initializeDefaults>
	motor1->ID = '1';
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2231      	movs	r2, #49	@ 0x31
 80033e4:	701a      	strb	r2, [r3, #0]

	motor1->gear_ratio = GEAR_RATIO_M_1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003524 <init_motor_1+0x154>)
 80033ea:	605a      	str	r2, [r3, #4]
	motor1->microsteps = MICROSTEPS_M_1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	609a      	str	r2, [r3, #8]
	motor1->motion.V_MAX 	= V_MAX_M_1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80033f8:	611a      	str	r2, [r3, #16]
	motor1->motion.ACC_MAX = ACC_MAX_M_1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003400:	615a      	str	r2, [r3, #20]
	motor1->motion.DEC_MAX = DEC_MAX_M_1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003408:	619a      	str	r2, [r3, #24]

	motor1->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2214      	movs	r2, #20
 800340e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor1->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2246      	movs	r2, #70	@ 0x46
 8003416:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor1->gpio_pins.step 		= STEP_1_Pin;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003420:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor1->gpio_pins.dir 		= DIR_1_Pin;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800342a:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor1->gpio_pins.mot_en 	= MOT_EN_1_Pin;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003434:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
//	motor1->gpio_pins.diag 		= DIAG_1_Pin;
	motor1->gpio_ports.step 	= STEP_1_GPIO_Port;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3b      	ldr	r2, [pc, #236]	@ (8003528 <init_motor_1+0x158>)
 800343c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor1->gpio_ports.dir 		= DIR_1_GPIO_Port;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a39      	ldr	r2, [pc, #228]	@ (8003528 <init_motor_1+0x158>)
 8003444:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor1->gpio_ports.mot_en 	= MOT_EN_1_GPIO_Port;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a37      	ldr	r2, [pc, #220]	@ (8003528 <init_motor_1+0x158>)
 800344c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor1->gpio_ports.diag		= DIAG_1_GPIO_Port;

	motor1->motion.motor_control_timer = htim12;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a36      	ldr	r2, [pc, #216]	@ (800352c <init_motor_1+0x15c>)
 8003454:	333c      	adds	r3, #60	@ 0x3c
 8003456:	4611      	mov	r1, r2
 8003458:	2248      	movs	r2, #72	@ 0x48
 800345a:	4618      	mov	r0, r3
 800345c:	f003 fcde 	bl	8006e1c <memcpy>
	motor1->status_check_timer = htim1;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a33      	ldr	r2, [pc, #204]	@ (8003530 <init_motor_1+0x160>)
 8003464:	3388      	adds	r3, #136	@ 0x88
 8003466:	4611      	mov	r1, r2
 8003468:	2248      	movs	r2, #72	@ 0x48
 800346a:	4618      	mov	r0, r3
 800346c:	f003 fcd6 	bl	8006e1c <memcpy>
	motor1->uart = huart1;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a30      	ldr	r2, [pc, #192]	@ (8003534 <init_motor_1+0x164>)
 8003474:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003478:	4611      	mov	r1, r2
 800347a:	2248      	movs	r2, #72	@ 0x48
 800347c:	4618      	mov	r0, r3
 800347e:	f003 fccd 	bl	8006e1c <memcpy>

	motor1->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f64e 7295 	movw	r2, #61333	@ 0xef95
 8003488:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor1->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_1;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2204      	movs	r2, #4
 8003490:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
	motor1->stallguard.MAX_NEGATIVE_DIFF_COUNTER = NEGATIVE_DIFF_COUNTER_THRESHOLD_M_1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2204      	movs	r2, #4
 8003498:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor1->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_1;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a26      	ldr	r2, [pc, #152]	@ (8003538 <init_motor_1+0x168>)
 80034a0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor1->stallguard.STALL_BUFFER = STALL_BUFFER_M_1;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2228      	movs	r2, #40	@ 0x28
 80034a8:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver1, huart1);
 80034ac:	4e21      	ldr	r6, [pc, #132]	@ (8003534 <init_motor_1+0x164>)
 80034ae:	466d      	mov	r5, sp
 80034b0:	f106 040c 	add.w	r4, r6, #12
 80034b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80034c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80034c8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80034cc:	6838      	ldr	r0, [r7, #0]
 80034ce:	f7ff fa7a 	bl	80029c6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver1, motor1->gpio_pins.mot_en, motor1->gpio_ports.mot_en);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80034de:	461a      	mov	r2, r3
 80034e0:	6838      	ldr	r0, [r7, #0]
 80034e2:	f7ff fa88 	bl	80029f6 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80034ec:	6838      	ldr	r0, [r7, #0]
 80034ee:	f7fe fe55 	bl	800219c <tmc2209_setup>
	set_micro_steps_per_step(driver1, motor1->microsteps);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4619      	mov	r1, r3
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f7fe fe9e 	bl	800223c <set_micro_steps_per_step>
	set_all_current_percent_values(driver1, motor1->current_settings.RUN_CURRENT_PERCENT, motor1->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 800350c:	2300      	movs	r3, #0
 800350e:	6838      	ldr	r0, [r7, #0]
 8003510:	f7fe ff30 	bl	8002374 <set_all_current_percent_values>

	motor1->driver = driver1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003524:	41200000 	.word	0x41200000
 8003528:	40020400 	.word	0x40020400
 800352c:	2000030c 	.word	0x2000030c
 8003530:	200000cc 	.word	0x200000cc
 8003534:	2000042c 	.word	0x2000042c
 8003538:	43480000 	.word	0x43480000

0800353c <init_motor_2>:

void init_motor_2(motor_t *motor2, tmc2209_stepper_driver_t *driver2)
{
 800353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353e:	b093      	sub	sp, #76	@ 0x4c
 8003540:	af10      	add	r7, sp, #64	@ 0x40
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor2);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 faf8 	bl	8003b3c <initializeDefaults>
	motor2->ID = '2';
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2232      	movs	r2, #50	@ 0x32
 8003550:	701a      	strb	r2, [r3, #0]

	motor2->gear_ratio = GEAR_RATIO_M_2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a5c      	ldr	r2, [pc, #368]	@ (80036c8 <init_motor_2+0x18c>)
 8003556:	605a      	str	r2, [r3, #4]
	motor2->microsteps = MICROSTEPS_M_2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	609a      	str	r2, [r3, #8]
	motor2->motion.V_MAX 	= V_MAX_M_2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8003564:	611a      	str	r2, [r3, #16]
	motor2->motion.ACC_MAX = ACC_MAX_M_2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800356c:	615a      	str	r2, [r3, #20]
	motor2->motion.DEC_MAX = DEC_MAX_M_2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8003574:	619a      	str	r2, [r3, #24]

	motor2->motion.v = 0;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	61da      	str	r2, [r3, #28]
	motor2->motion.total_steps = 0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	621a      	str	r2, [r3, #32]
	motor2->motion.const_steps = 0;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24
	motor2->motion.acc_steps = 0;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28
	motor2->motion.dec_steps = 0;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor2->motion.step = 0;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
	motor2->motion.cycle = 0;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	635a      	str	r2, [r3, #52]	@ 0x34

	motor2->active_movement_flag = 0;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	731a      	strb	r2, [r3, #12]

	motor2->status_flag = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

	motor2->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	225a      	movs	r2, #90	@ 0x5a
 80035b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor2->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2264      	movs	r2, #100	@ 0x64
 80035bc:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor2->gpio_pins.step 		= STEP_2_Pin;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2280      	movs	r2, #128	@ 0x80
 80035c4:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor2->gpio_pins.dir 		= DIR_2_Pin;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035ce:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor2->gpio_pins.mot_en 	= MOT_EN_2_Pin;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2240      	movs	r2, #64	@ 0x40
 80035d6:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
//	motor2->gpio_pins.diag 		= DIAG_2_Pin;
	motor2->gpio_ports.step 	= STEP_2_GPIO_Port;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a3b      	ldr	r2, [pc, #236]	@ (80036cc <init_motor_2+0x190>)
 80035de:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor2->gpio_ports.dir 		= DIR_2_GPIO_Port;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a39      	ldr	r2, [pc, #228]	@ (80036cc <init_motor_2+0x190>)
 80035e6:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor2->gpio_ports.mot_en 	= MOT_EN_2_GPIO_Port;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a37      	ldr	r2, [pc, #220]	@ (80036cc <init_motor_2+0x190>)
 80035ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor2->gpio_ports.diag 	= DIAG_2_GPIO_Port;

	motor2->motion.motor_control_timer = htim13;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a36      	ldr	r2, [pc, #216]	@ (80036d0 <init_motor_2+0x194>)
 80035f6:	333c      	adds	r3, #60	@ 0x3c
 80035f8:	4611      	mov	r1, r2
 80035fa:	2248      	movs	r2, #72	@ 0x48
 80035fc:	4618      	mov	r0, r3
 80035fe:	f003 fc0d 	bl	8006e1c <memcpy>
	motor2->status_check_timer = htim6;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a33      	ldr	r2, [pc, #204]	@ (80036d4 <init_motor_2+0x198>)
 8003606:	3388      	adds	r3, #136	@ 0x88
 8003608:	4611      	mov	r1, r2
 800360a:	2248      	movs	r2, #72	@ 0x48
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fc05 	bl	8006e1c <memcpy>

	motor2->uart = huart6;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a30      	ldr	r2, [pc, #192]	@ (80036d8 <init_motor_2+0x19c>)
 8003616:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800361a:	4611      	mov	r1, r2
 800361c:	2248      	movs	r2, #72	@ 0x48
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fbfc 	bl	8006e1c <memcpy>

	motor2->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 800362a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor2->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2204      	movs	r2, #4
 8003632:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
	motor2->stallguard.MAX_NEGATIVE_DIFF_COUNTER = NEGATIVE_DIFF_COUNTER_THRESHOLD_M_2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2204      	movs	r2, #4
 800363a:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor2->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a26      	ldr	r2, [pc, #152]	@ (80036dc <init_motor_2+0x1a0>)
 8003642:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor2->stallguard.STALL_BUFFER = STALL_BUFFER_M_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2228      	movs	r2, #40	@ 0x28
 800364a:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver2, motor2->uart);
 800364e:	687e      	ldr	r6, [r7, #4]
 8003650:	466d      	mov	r5, sp
 8003652:	f506 748a 	add.w	r4, r6, #276	@ 0x114
 8003656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003662:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003666:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800366a:	f506 7384 	add.w	r3, r6, #264	@ 0x108
 800366e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f7ff f9a8 	bl	80029c6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver2, motor2->gpio_pins.mot_en, motor2->gpio_ports.mot_en);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003682:	461a      	mov	r2, r3
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	f7ff f9b6 	bl	80029f6 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_0);
 800368a:	2200      	movs	r2, #0
 800368c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003690:	6838      	ldr	r0, [r7, #0]
 8003692:	f7fe fd83 	bl	800219c <tmc2209_setup>
//	disable_stealth_chop(motor2->driver);
	set_micro_steps_per_step(driver2, motor2->microsteps);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	b29b      	uxth	r3, r3
 800369c:	4619      	mov	r1, r3
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f7fe fdcc 	bl	800223c <set_micro_steps_per_step>
	set_all_current_percent_values(driver2, motor2->current_settings.RUN_CURRENT_PERCENT, motor2->current_settings.HOLD_CURRENT_PERCENT, 0);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 80036b0:	2300      	movs	r3, #0
 80036b2:	6838      	ldr	r0, [r7, #0]
 80036b4:	f7fe fe5e 	bl	8002374 <set_all_current_percent_values>

	motor2->driver = driver2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c8:	40f00000 	.word	0x40f00000
 80036cc:	40020000 	.word	0x40020000
 80036d0:	20000354 	.word	0x20000354
 80036d4:	200001a4 	.word	0x200001a4
 80036d8:	20000504 	.word	0x20000504
 80036dc:	43480000 	.word	0x43480000

080036e0 <init_motor_3>:

void init_motor_3(motor_t *motor3, tmc2209_stepper_driver_t *driver3)
{
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e2:	b093      	sub	sp, #76	@ 0x4c
 80036e4:	af10      	add	r7, sp, #64	@ 0x40
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor3);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fa26 	bl	8003b3c <initializeDefaults>

	motor3->ID = '3';
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2233      	movs	r2, #51	@ 0x33
 80036f4:	701a      	strb	r2, [r3, #0]

	motor3->gear_ratio = GEAR_RATIO_M_3;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a52      	ldr	r2, [pc, #328]	@ (8003844 <init_motor_3+0x164>)
 80036fa:	605a      	str	r2, [r3, #4]
	motor3->microsteps = MICROSTEPS_M_3;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	609a      	str	r2, [r3, #8]
	motor3->motion.V_MAX 	= V_MAX_M_3;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8003708:	611a      	str	r2, [r3, #16]
	motor3->motion.ACC_MAX = ACC_MAX_M_3;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003710:	615a      	str	r2, [r3, #20]
	motor3->motion.DEC_MAX = DEC_MAX_M_3;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8003718:	619a      	str	r2, [r3, #24]

	motor3->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_3;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2228      	movs	r2, #40	@ 0x28
 800371e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor3->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_3;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223c      	movs	r2, #60	@ 0x3c
 8003726:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor3->gpio_pins.step 		= STEP_3_Pin;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2208      	movs	r2, #8
 800372e:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor3->gpio_pins.dir 		= DIR_3_Pin;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003738:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor3->gpio_pins.mot_en 	= MOT_EN_3_Pin;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2204      	movs	r2, #4
 8003740:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	motor3->gpio_pins.diag 		= DIAG_3_Pin;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800374a:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
	motor3->gpio_ports.step 	= STEP_3_GPIO_Port;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a3d      	ldr	r2, [pc, #244]	@ (8003848 <init_motor_3+0x168>)
 8003752:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor3->gpio_ports.dir 		= DIR_3_GPIO_Port;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a3b      	ldr	r2, [pc, #236]	@ (8003848 <init_motor_3+0x168>)
 800375a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor3->gpio_ports.mot_en 	= MOT_EN_3_GPIO_Port;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a39      	ldr	r2, [pc, #228]	@ (8003848 <init_motor_3+0x168>)
 8003762:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor3->gpio_ports.diag 	= DIAG_3_GPIO_Port;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a38      	ldr	r2, [pc, #224]	@ (800384c <init_motor_3+0x16c>)
 800376a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

	motor3->motion.motor_control_timer = htim3;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a37      	ldr	r2, [pc, #220]	@ (8003850 <init_motor_3+0x170>)
 8003772:	333c      	adds	r3, #60	@ 0x3c
 8003774:	4611      	mov	r1, r2
 8003776:	2248      	movs	r2, #72	@ 0x48
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fb4f 	bl	8006e1c <memcpy>
	motor3->status_check_timer = htim7;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a34      	ldr	r2, [pc, #208]	@ (8003854 <init_motor_3+0x174>)
 8003782:	3388      	adds	r3, #136	@ 0x88
 8003784:	4611      	mov	r1, r2
 8003786:	2248      	movs	r2, #72	@ 0x48
 8003788:	4618      	mov	r0, r3
 800378a:	f003 fb47 	bl	8006e1c <memcpy>

	motor3->uart = huart3;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <init_motor_3+0x178>)
 8003792:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003796:	4611      	mov	r1, r2
 8003798:	2248      	movs	r2, #72	@ 0x48
 800379a:	4618      	mov	r0, r3
 800379c:	f003 fb3e 	bl	8006e1c <memcpy>

	motor3->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_3;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 80037a6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor3->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_3;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2204      	movs	r2, #4
 80037ae:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
	motor3->stallguard.MAX_NEGATIVE_DIFF_COUNTER = NEGATIVE_DIFF_COUNTER_THRESHOLD_M_3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor3->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a27      	ldr	r2, [pc, #156]	@ (800385c <init_motor_3+0x17c>)
 80037be:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor3->stallguard.STALL_BUFFER = STALL_BUFFER_M_3;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2228      	movs	r2, #40	@ 0x28
 80037c6:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver3, huart3);
 80037ca:	4e23      	ldr	r6, [pc, #140]	@ (8003858 <init_motor_3+0x178>)
 80037cc:	466d      	mov	r5, sp
 80037ce:	f106 040c 	add.w	r4, r6, #12
 80037d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80037e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80037e6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80037ea:	6838      	ldr	r0, [r7, #0]
 80037ec:	f7ff f8eb 	bl	80029c6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver3, motor3->gpio_pins.mot_en, motor3->gpio_ports.mot_en);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80037fc:	461a      	mov	r2, r3
 80037fe:	6838      	ldr	r0, [r7, #0]
 8003800:	f7ff f8f9 	bl	80029f6 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_0);
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f7fe fcc6 	bl	800219c <tmc2209_setup>
	set_micro_steps_per_step(driver3, motor3->microsteps);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	b29b      	uxth	r3, r3
 8003816:	4619      	mov	r1, r3
 8003818:	6838      	ldr	r0, [r7, #0]
 800381a:	f7fe fd0f 	bl	800223c <set_micro_steps_per_step>
	set_all_current_percent_values(driver3, motor3->current_settings.RUN_CURRENT_PERCENT, motor3->current_settings.HOLD_CURRENT_PERCENT, 0);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 800382a:	2300      	movs	r3, #0
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f7fe fda1 	bl	8002374 <set_all_current_percent_values>

	motor3->driver = driver3;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003842:	bf00      	nop
 8003844:	40f00000 	.word	0x40f00000
 8003848:	40020800 	.word	0x40020800
 800384c:	40020400 	.word	0x40020400
 8003850:	20000114 	.word	0x20000114
 8003854:	200001ec 	.word	0x200001ec
 8003858:	200004bc 	.word	0x200004bc
 800385c:	43480000 	.word	0x43480000

08003860 <init_motor_4>:

void init_motor_4(motor_t *motor4, tmc2209_stepper_driver_t *driver4)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b093      	sub	sp, #76	@ 0x4c
 8003864:	af10      	add	r7, sp, #64	@ 0x40
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor4);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f966 	bl	8003b3c <initializeDefaults>

	motor4->ID = '4';
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2234      	movs	r2, #52	@ 0x34
 8003874:	701a      	strb	r2, [r3, #0]

	motor4->gear_ratio = GEAR_RATIO_M_4;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4f      	ldr	r2, [pc, #316]	@ (80039b8 <init_motor_4+0x158>)
 800387a:	605a      	str	r2, [r3, #4]
	motor4->microsteps = MICROSTEPS_M_4;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2208      	movs	r2, #8
 8003880:	609a      	str	r2, [r3, #8]
	motor4->motion.V_MAX 	= V_MAX_M_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003888:	611a      	str	r2, [r3, #16]
	motor4->motion.ACC_MAX = ACC_MAX_M_4;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8003890:	615a      	str	r2, [r3, #20]
	motor4->motion.DEC_MAX = DEC_MAX_M_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8003898:	619a      	str	r2, [r3, #24]

	motor4->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_4;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	221e      	movs	r2, #30
 800389e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor4->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_4;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2246      	movs	r2, #70	@ 0x46
 80038a6:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor4->gpio_pins.step 		= STEP_4_Pin;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor4->gpio_pins.dir 		= DIR_4_Pin;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2210      	movs	r2, #16
 80038b6:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor4->gpio_pins.mot_en 	= MOT_EN_4_Pin;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
//	motor4->gpio_pins.diag 		= DIAG_4_Pin;
	motor4->gpio_ports.step 	= STEP_4_GPIO_Port;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a3d      	ldr	r2, [pc, #244]	@ (80039bc <init_motor_4+0x15c>)
 80038c6:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	motor4->gpio_ports.dir 		= DIR_4_GPIO_Port;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a3b      	ldr	r2, [pc, #236]	@ (80039bc <init_motor_4+0x15c>)
 80038ce:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor4->gpio_ports.mot_en 	= MOT_EN_4_GPIO_Port;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a39      	ldr	r2, [pc, #228]	@ (80039bc <init_motor_4+0x15c>)
 80038d6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor4->gpio_ports.diag 		= DIAG_4_GPIO_Port;

	motor4->motion.motor_control_timer = htim4;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a38      	ldr	r2, [pc, #224]	@ (80039c0 <init_motor_4+0x160>)
 80038de:	333c      	adds	r3, #60	@ 0x3c
 80038e0:	4611      	mov	r1, r2
 80038e2:	2248      	movs	r2, #72	@ 0x48
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 fa99 	bl	8006e1c <memcpy>
	motor4->status_check_timer = htim9;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a35      	ldr	r2, [pc, #212]	@ (80039c4 <init_motor_4+0x164>)
 80038ee:	3388      	adds	r3, #136	@ 0x88
 80038f0:	4611      	mov	r1, r2
 80038f2:	2248      	movs	r2, #72	@ 0x48
 80038f4:	4618      	mov	r0, r3
 80038f6:	f003 fa91 	bl	8006e1c <memcpy>

	motor4->uart = huart4;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a32      	ldr	r2, [pc, #200]	@ (80039c8 <init_motor_4+0x168>)
 80038fe:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003902:	4611      	mov	r1, r2
 8003904:	2248      	movs	r2, #72	@ 0x48
 8003906:	4618      	mov	r0, r3
 8003908:	f003 fa88 	bl	8006e1c <memcpy>

	motor4->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_4;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003912:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor4->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_4;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2204      	movs	r2, #4
 800391a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
	motor4->stallguard.MAX_NEGATIVE_DIFF_COUNTER = NEGATIVE_DIFF_COUNTER_THRESHOLD_M_4;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2204      	movs	r2, #4
 8003922:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor4->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_4;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a28      	ldr	r2, [pc, #160]	@ (80039cc <init_motor_4+0x16c>)
 800392a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor4->stallguard.STALL_BUFFER = STALL_BUFFER_M_4;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2228      	movs	r2, #40	@ 0x28
 8003932:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver4, huart4);
 8003936:	4e24      	ldr	r6, [pc, #144]	@ (80039c8 <init_motor_4+0x168>)
 8003938:	466d      	mov	r5, sp
 800393a:	f106 040c 	add.w	r4, r6, #12
 800393e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800394e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003952:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003956:	6838      	ldr	r0, [r7, #0]
 8003958:	f7ff f835 	bl	80029c6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver4, motor4->gpio_pins.mot_en, motor4->gpio_ports.mot_en);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003968:	461a      	mov	r2, r3
 800396a:	6838      	ldr	r0, [r7, #0]
 800396c:	f7ff f843 	bl	80029f6 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8003970:	2200      	movs	r2, #0
 8003972:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f7fe fc10 	bl	800219c <tmc2209_setup>
	enable_cool_step(driver4, 0, 1);
 800397c:	2201      	movs	r2, #1
 800397e:	2100      	movs	r1, #0
 8003980:	6838      	ldr	r0, [r7, #0]
 8003982:	f7fe fd65 	bl	8002450 <enable_cool_step>
	set_micro_steps_per_step(driver4, motor4->microsteps);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	b29b      	uxth	r3, r3
 800398c:	4619      	mov	r1, r3
 800398e:	6838      	ldr	r0, [r7, #0]
 8003990:	f7fe fc54 	bl	800223c <set_micro_steps_per_step>
	set_all_current_percent_values(driver4, motor4->current_settings.RUN_CURRENT_PERCENT, motor4->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 80039a0:	2300      	movs	r3, #0
 80039a2:	6838      	ldr	r0, [r7, #0]
 80039a4:	f7fe fce6 	bl	8002374 <set_all_current_percent_values>

	motor4->driver = driver4;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b8:	40f00000 	.word	0x40f00000
 80039bc:	40020400 	.word	0x40020400
 80039c0:	2000015c 	.word	0x2000015c
 80039c4:	2000027c 	.word	0x2000027c
 80039c8:	2000039c 	.word	0x2000039c
 80039cc:	43480000 	.word	0x43480000

080039d0 <init_motor_5>:

void init_motor_5(motor_t *motor5, tmc2209_stepper_driver_t *driver5)
{
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d2:	b093      	sub	sp, #76	@ 0x4c
 80039d4:	af10      	add	r7, sp, #64	@ 0x40
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
	initializeDefaults(motor5);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8ae 	bl	8003b3c <initializeDefaults>

	motor5->ID = '5';
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2235      	movs	r2, #53	@ 0x35
 80039e4:	701a      	strb	r2, [r3, #0]

	motor5->gear_ratio = GEAR_RATIO_M_5;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039ec:	605a      	str	r2, [r3, #4]
	motor5->microsteps = MICROSTEPS_M_5;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	609a      	str	r2, [r3, #8]
	motor5->motion.V_MAX 	= V_MAX_M_5;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039fa:	611a      	str	r2, [r3, #16]
	motor5->motion.ACC_MAX = ACC_MAX_M_5;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003a02:	615a      	str	r2, [r3, #20]
	motor5->motion.DEC_MAX = DEC_MAX_M_5;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003a0a:	619a      	str	r2, [r3, #24]

	motor5->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_5;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2232      	movs	r2, #50	@ 0x32
 8003a10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	motor5->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_5;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2264      	movs	r2, #100	@ 0x64
 8003a18:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

	motor5->gpio_pins.step 		= STEP_5_Pin;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a22:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	motor5->gpio_pins.dir 		= DIR_5_Pin;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a2c:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	motor5->gpio_pins.mot_en 	= MOT_EN_5_Pin;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2210      	movs	r2, #16
 8003a34:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	motor5->gpio_ports.step 	= STEP_5_GPIO_Port;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3a      	ldr	r2, [pc, #232]	@ (8003b24 <init_motor_5+0x154>)
 8003a3c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
//	motor5->gpio_pins.diag 		= DIAG_5_Pin;
	motor5->gpio_ports.dir 		= DIR_5_GPIO_Port;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a38      	ldr	r2, [pc, #224]	@ (8003b24 <init_motor_5+0x154>)
 8003a44:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	motor5->gpio_ports.mot_en 	= MOT_EN_5_GPIO_Port;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a36      	ldr	r2, [pc, #216]	@ (8003b24 <init_motor_5+0x154>)
 8003a4c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor5->gpio_ports.diag 		= DIAG_5_GPIO_Port;

	motor5->motion.motor_control_timer = htim8;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a35      	ldr	r2, [pc, #212]	@ (8003b28 <init_motor_5+0x158>)
 8003a54:	333c      	adds	r3, #60	@ 0x3c
 8003a56:	4611      	mov	r1, r2
 8003a58:	2248      	movs	r2, #72	@ 0x48
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 f9de 	bl	8006e1c <memcpy>
	motor5->status_check_timer = htim10;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a32      	ldr	r2, [pc, #200]	@ (8003b2c <init_motor_5+0x15c>)
 8003a64:	3388      	adds	r3, #136	@ 0x88
 8003a66:	4611      	mov	r1, r2
 8003a68:	2248      	movs	r2, #72	@ 0x48
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 f9d6 	bl	8006e1c <memcpy>

	motor5->uart = huart5;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <init_motor_5+0x160>)
 8003a74:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003a78:	4611      	mov	r1, r2
 8003a7a:	2248      	movs	r2, #72	@ 0x48
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 f9cd 	bl	8006e1c <memcpy>

	motor5->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_5;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2b      	ldr	r2, [pc, #172]	@ (8003b34 <init_motor_5+0x164>)
 8003a86:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor5->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_5;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
	motor5->stallguard.MAX_NEGATIVE_DIFF_COUNTER = NEGATIVE_DIFF_COUNTER_THRESHOLD_M_5;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2204      	movs	r2, #4
 8003a96:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor5->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_5;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	@ (8003b38 <init_motor_5+0x168>)
 8003a9e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor5->stallguard.STALL_BUFFER = STALL_BUFFER_M_5;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2228      	movs	r2, #40	@ 0x28
 8003aa6:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc

	tmc2209_set_uart(driver5, huart5);
 8003aaa:	4e21      	ldr	r6, [pc, #132]	@ (8003b30 <init_motor_5+0x160>)
 8003aac:	466d      	mov	r5, sp
 8003aae:	f106 040c 	add.w	r4, r6, #12
 8003ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003abe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003ac2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ac6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003aca:	6838      	ldr	r0, [r7, #0]
 8003acc:	f7fe ff7b 	bl	80029c6 <tmc2209_set_uart>
	tmc2209_set_hardware_enable_pin(driver5, motor5->gpio_pins.mot_en, motor5->gpio_ports.mot_en);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 10f4 	ldrh.w	r1, [r3, #244]	@ 0xf4
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003adc:	461a      	mov	r2, r3
 8003ade:	6838      	ldr	r0, [r7, #0]
 8003ae0:	f7fe ff89 	bl	80029f6 <tmc2209_set_hardware_enable_pin>
	tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003aea:	6838      	ldr	r0, [r7, #0]
 8003aec:	f7fe fb56 	bl	800219c <tmc2209_setup>
	set_micro_steps_per_step(driver5, motor5->microsteps);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4619      	mov	r1, r3
 8003af8:	6838      	ldr	r0, [r7, #0]
 8003afa:	f7fe fb9f 	bl	800223c <set_micro_steps_per_step>
	set_all_current_percent_values(driver5, motor5->current_settings.RUN_CURRENT_PERCENT, motor5->current_settings.HOLD_CURRENT_PERCENT, 0);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 1085 	ldrb.w	r1, [r3, #133]	@ 0x85
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6838      	ldr	r0, [r7, #0]
 8003b0e:	f7fe fc31 	bl	8002374 <set_all_current_percent_values>

	motor5->driver = driver5;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40020800 	.word	0x40020800
 8003b28:	20000234 	.word	0x20000234
 8003b2c:	200002c4 	.word	0x200002c4
 8003b30:	200003e4 	.word	0x200003e4
 8003b34:	00027100 	.word	0x00027100
 8003b38:	43480000 	.word	0x43480000

08003b3c <initializeDefaults>:

void initializeDefaults(motor_t * motor)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	motor->motion.v = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	61da      	str	r2, [r3, #28]
	motor->motion.total_steps = 0;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	621a      	str	r2, [r3, #32]
	motor->motion.const_steps = 0;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->motion.acc_steps = 0;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = 0;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.step = 0;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	635a      	str	r2, [r3, #52]	@ 0x34

	motor->active_movement_flag = 0;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	731a      	strb	r2, [r3, #12]

	motor->status_flag = 0;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

	motor->stallguard.smoothed_result = 0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	motor->stallguard.previous_smoothed_result = 0;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor->stallguard.negative_diff_counter = 0;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
	motor->stallguard.consecutive_low_counter = 0;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
	motor->stallguard.state = NORMAL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003bbc:	f7fe fadc 	bl	8002178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bc0:	480c      	ldr	r0, [pc, #48]	@ (8003bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bc2:	490d      	ldr	r1, [pc, #52]	@ (8003bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bc8:	e002      	b.n	8003bd0 <LoopCopyDataInit>

08003bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bce:	3304      	adds	r3, #4

08003bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bd4:	d3f9      	bcc.n	8003bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8003c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bdc:	e001      	b.n	8003be2 <LoopFillZerobss>

08003bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be0:	3204      	adds	r2, #4

08003be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003be4:	d3fb      	bcc.n	8003bde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003be6:	f003 f8f5 	bl	8006dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bea:	f7fd f897 	bl	8000d1c <main>
  bx  lr    
 8003bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bf8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003bfc:	08006e78 	.word	0x08006e78
  ldr r2, =_sbss
 8003c00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003c04:	200006b4 	.word	0x200006b4

08003c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c08:	e7fe      	b.n	8003c08 <ADC_IRQHandler>
	...

08003c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c10:	4b0e      	ldr	r3, [pc, #56]	@ (8003c4c <HAL_Init+0x40>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0d      	ldr	r2, [pc, #52]	@ (8003c4c <HAL_Init+0x40>)
 8003c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_Init+0x40>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0a      	ldr	r2, [pc, #40]	@ (8003c4c <HAL_Init+0x40>)
 8003c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c28:	4b08      	ldr	r3, [pc, #32]	@ (8003c4c <HAL_Init+0x40>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a07      	ldr	r2, [pc, #28]	@ (8003c4c <HAL_Init+0x40>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c34:	2003      	movs	r0, #3
 8003c36:	f000 f94f 	bl	8003ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f000 f808 	bl	8003c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c40:	f7fd fea4 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023c00 	.word	0x40023c00

08003c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c58:	4b12      	ldr	r3, [pc, #72]	@ (8003ca4 <HAL_InitTick+0x54>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <HAL_InitTick+0x58>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	4619      	mov	r1, r3
 8003c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f967 	bl	8003f42 <HAL_SYSTICK_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00e      	b.n	8003c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b0f      	cmp	r3, #15
 8003c82:	d80a      	bhi.n	8003c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c84:	2200      	movs	r2, #0
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	f000 f92f 	bl	8003eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c90:	4a06      	ldr	r2, [pc, #24]	@ (8003cac <HAL_InitTick+0x5c>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	20000008 	.word	0x20000008
 8003cac:	20000004 	.word	0x20000004

08003cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cb4:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <HAL_IncTick+0x20>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <HAL_IncTick+0x24>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4a04      	ldr	r2, [pc, #16]	@ (8003cd4 <HAL_IncTick+0x24>)
 8003cc2:	6013      	str	r3, [r2, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000008 	.word	0x20000008
 8003cd4:	20000578 	.word	0x20000578

08003cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return uwTick;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <HAL_GetTick+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000578 	.word	0x20000578

08003cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff ffee 	bl	8003cd8 <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d005      	beq.n	8003d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d34 <HAL_Delay+0x44>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d16:	bf00      	nop
 8003d18:	f7ff ffde 	bl	8003cd8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d8f7      	bhi.n	8003d18 <HAL_Delay+0x28>
  {
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000008 	.word	0x20000008

08003d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d48:	4b0c      	ldr	r3, [pc, #48]	@ (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d54:	4013      	ands	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d6a:	4a04      	ldr	r2, [pc, #16]	@ (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	60d3      	str	r3, [r2, #12]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d84:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <__NVIC_GetPriorityGrouping+0x18>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	f003 0307 	and.w	r3, r3, #7
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db0b      	blt.n	8003dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4907      	ldr	r1, [pc, #28]	@ (8003dd4 <__NVIC_EnableIRQ+0x38>)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000e100 	.word	0xe000e100

08003dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	6039      	str	r1, [r7, #0]
 8003de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	db0a      	blt.n	8003e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	490c      	ldr	r1, [pc, #48]	@ (8003e24 <__NVIC_SetPriority+0x4c>)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	0112      	lsls	r2, r2, #4
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e00:	e00a      	b.n	8003e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4908      	ldr	r1, [pc, #32]	@ (8003e28 <__NVIC_SetPriority+0x50>)
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	3b04      	subs	r3, #4
 8003e10:	0112      	lsls	r2, r2, #4
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	440b      	add	r3, r1
 8003e16:	761a      	strb	r2, [r3, #24]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	e000e100 	.word	0xe000e100
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	@ 0x24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f1c3 0307 	rsb	r3, r3, #7
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	bf28      	it	cs
 8003e4a:	2304      	movcs	r3, #4
 8003e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2b06      	cmp	r3, #6
 8003e54:	d902      	bls.n	8003e5c <NVIC_EncodePriority+0x30>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3b03      	subs	r3, #3
 8003e5a:	e000      	b.n	8003e5e <NVIC_EncodePriority+0x32>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e60:	f04f 32ff 	mov.w	r2, #4294967295
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	401a      	ands	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e74:	f04f 31ff 	mov.w	r1, #4294967295
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	43d9      	mvns	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e84:	4313      	orrs	r3, r2
         );
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3724      	adds	r7, #36	@ 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ea4:	d301      	bcc.n	8003eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e00f      	b.n	8003eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed4 <SysTick_Config+0x40>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eb2:	210f      	movs	r1, #15
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb8:	f7ff ff8e 	bl	8003dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <SysTick_Config+0x40>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ec2:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <SysTick_Config+0x40>)
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	e000e010 	.word	0xe000e010

08003ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ff29 	bl	8003d38 <__NVIC_SetPriorityGrouping>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f00:	f7ff ff3e 	bl	8003d80 <__NVIC_GetPriorityGrouping>
 8003f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	6978      	ldr	r0, [r7, #20]
 8003f0c:	f7ff ff8e 	bl	8003e2c <NVIC_EncodePriority>
 8003f10:	4602      	mov	r2, r0
 8003f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff5d 	bl	8003dd8 <__NVIC_SetPriority>
}
 8003f1e:	bf00      	nop
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff31 	bl	8003d9c <__NVIC_EnableIRQ>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ffa2 	bl	8003e94 <SysTick_Config>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	@ 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e165      	b.n	8004244 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	f040 8154 	bne.w	800423e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d005      	beq.n	8003fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d130      	bne.n	8004010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2203      	movs	r2, #3
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 0201 	and.w	r2, r3, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b03      	cmp	r3, #3
 800401a:	d017      	beq.n	800404c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	2203      	movs	r2, #3
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d123      	bne.n	80040a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	08da      	lsrs	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3208      	adds	r2, #8
 8004060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	220f      	movs	r2, #15
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	08da      	lsrs	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3208      	adds	r2, #8
 800409a:	69b9      	ldr	r1, [r7, #24]
 800409c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2203      	movs	r2, #3
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0203 	and.w	r2, r3, #3
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80ae 	beq.w	800423e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b5d      	ldr	r3, [pc, #372]	@ (800425c <HAL_GPIO_Init+0x300>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	4a5c      	ldr	r2, [pc, #368]	@ (800425c <HAL_GPIO_Init+0x300>)
 80040ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040f2:	4b5a      	ldr	r3, [pc, #360]	@ (800425c <HAL_GPIO_Init+0x300>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040fe:	4a58      	ldr	r2, [pc, #352]	@ (8004260 <HAL_GPIO_Init+0x304>)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	3302      	adds	r3, #2
 8004106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	220f      	movs	r2, #15
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4f      	ldr	r2, [pc, #316]	@ (8004264 <HAL_GPIO_Init+0x308>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d025      	beq.n	8004176 <HAL_GPIO_Init+0x21a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4e      	ldr	r2, [pc, #312]	@ (8004268 <HAL_GPIO_Init+0x30c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01f      	beq.n	8004172 <HAL_GPIO_Init+0x216>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4d      	ldr	r2, [pc, #308]	@ (800426c <HAL_GPIO_Init+0x310>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d019      	beq.n	800416e <HAL_GPIO_Init+0x212>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4c      	ldr	r2, [pc, #304]	@ (8004270 <HAL_GPIO_Init+0x314>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_GPIO_Init+0x20e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4b      	ldr	r2, [pc, #300]	@ (8004274 <HAL_GPIO_Init+0x318>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00d      	beq.n	8004166 <HAL_GPIO_Init+0x20a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4a      	ldr	r2, [pc, #296]	@ (8004278 <HAL_GPIO_Init+0x31c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <HAL_GPIO_Init+0x206>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a49      	ldr	r2, [pc, #292]	@ (800427c <HAL_GPIO_Init+0x320>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_GPIO_Init+0x202>
 800415a:	2306      	movs	r3, #6
 800415c:	e00c      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 800415e:	2307      	movs	r3, #7
 8004160:	e00a      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 8004162:	2305      	movs	r3, #5
 8004164:	e008      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 8004166:	2304      	movs	r3, #4
 8004168:	e006      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 800416a:	2303      	movs	r3, #3
 800416c:	e004      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 800416e:	2302      	movs	r3, #2
 8004170:	e002      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 8004176:	2300      	movs	r3, #0
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	f002 0203 	and.w	r2, r2, #3
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	4093      	lsls	r3, r2
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004188:	4935      	ldr	r1, [pc, #212]	@ (8004260 <HAL_GPIO_Init+0x304>)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	3302      	adds	r3, #2
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004196:	4b3a      	ldr	r3, [pc, #232]	@ (8004280 <HAL_GPIO_Init+0x324>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ba:	4a31      	ldr	r2, [pc, #196]	@ (8004280 <HAL_GPIO_Init+0x324>)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004280 <HAL_GPIO_Init+0x324>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041e4:	4a26      	ldr	r2, [pc, #152]	@ (8004280 <HAL_GPIO_Init+0x324>)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ea:	4b25      	ldr	r3, [pc, #148]	@ (8004280 <HAL_GPIO_Init+0x324>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800420e:	4a1c      	ldr	r2, [pc, #112]	@ (8004280 <HAL_GPIO_Init+0x324>)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004214:	4b1a      	ldr	r3, [pc, #104]	@ (8004280 <HAL_GPIO_Init+0x324>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004238:	4a11      	ldr	r2, [pc, #68]	@ (8004280 <HAL_GPIO_Init+0x324>)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3301      	adds	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	f67f ae96 	bls.w	8003f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3724      	adds	r7, #36	@ 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	40013800 	.word	0x40013800
 8004264:	40020000 	.word	0x40020000
 8004268:	40020400 	.word	0x40020400
 800426c:	40020800 	.word	0x40020800
 8004270:	40020c00 	.word	0x40020c00
 8004274:	40021000 	.word	0x40021000
 8004278:	40021400 	.word	0x40021400
 800427c:	40021800 	.word	0x40021800
 8004280:	40013c00 	.word	0x40013c00

08004284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	887b      	ldrh	r3, [r7, #2]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
 80042a0:	e001      	b.n	80042a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
 80042c0:	4613      	mov	r3, r2
 80042c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c4:	787b      	ldrb	r3, [r7, #1]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ca:	887a      	ldrh	r2, [r7, #2]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d0:	e003      	b.n	80042da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042d2:	887b      	ldrh	r3, [r7, #2]
 80042d4:	041a      	lsls	r2, r3, #16
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	619a      	str	r2, [r3, #24]
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042f8:	887a      	ldrh	r2, [r7, #2]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4013      	ands	r3, r2
 80042fe:	041a      	lsls	r2, r3, #16
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	43d9      	mvns	r1, r3
 8004304:	887b      	ldrh	r3, [r7, #2]
 8004306:	400b      	ands	r3, r1
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	619a      	str	r2, [r3, #24]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004326:	4b08      	ldr	r3, [pc, #32]	@ (8004348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d006      	beq.n	8004340 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004332:	4a05      	ldr	r2, [pc, #20]	@ (8004348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fe6c 	bl	8003018 <HAL_GPIO_EXTI_Callback>
  }
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40013c00 	.word	0x40013c00

0800434c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e12b      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd fb32 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	@ 0x24
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800439e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043b0:	f000 fa02 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a81      	ldr	r2, [pc, #516]	@ (80045c0 <HAL_I2C_Init+0x274>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d807      	bhi.n	80043d0 <HAL_I2C_Init+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a80      	ldr	r2, [pc, #512]	@ (80045c4 <HAL_I2C_Init+0x278>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bf94      	ite	ls
 80043c8:	2301      	movls	r3, #1
 80043ca:	2300      	movhi	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e006      	b.n	80043de <HAL_I2C_Init+0x92>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a7d      	ldr	r2, [pc, #500]	@ (80045c8 <HAL_I2C_Init+0x27c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf94      	ite	ls
 80043d8:	2301      	movls	r3, #1
 80043da:	2300      	movhi	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0e7      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a78      	ldr	r2, [pc, #480]	@ (80045cc <HAL_I2C_Init+0x280>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
 80043f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a6a      	ldr	r2, [pc, #424]	@ (80045c0 <HAL_I2C_Init+0x274>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d802      	bhi.n	8004420 <HAL_I2C_Init+0xd4>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	e009      	b.n	8004434 <HAL_I2C_Init+0xe8>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	4a69      	ldr	r2, [pc, #420]	@ (80045d0 <HAL_I2C_Init+0x284>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	3301      	adds	r3, #1
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	430b      	orrs	r3, r1
 800443a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004446:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	495c      	ldr	r1, [pc, #368]	@ (80045c0 <HAL_I2C_Init+0x274>)
 8004450:	428b      	cmp	r3, r1
 8004452:	d819      	bhi.n	8004488 <HAL_I2C_Init+0x13c>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e59      	subs	r1, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004468:	400b      	ands	r3, r1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_I2C_Init+0x138>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e59      	subs	r1, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fbb1 f3f3 	udiv	r3, r1, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	e051      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004484:	2304      	movs	r3, #4
 8004486:	e04f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_I2C_Init+0x168>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e012      	b.n	80044da <HAL_I2C_Init+0x18e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e58      	subs	r0, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	0099      	lsls	r1, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Init+0x196>
 80044de:	2301      	movs	r3, #1
 80044e0:	e022      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10e      	bne.n	8004508 <HAL_I2C_Init+0x1bc>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e58      	subs	r0, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	0099      	lsls	r1, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	6809      	ldr	r1, [r1, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004556:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6911      	ldr	r1, [r2, #16]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	4311      	orrs	r1, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	430b      	orrs	r3, r1
 800456a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	000186a0 	.word	0x000186a0
 80045c4:	001e847f 	.word	0x001e847f
 80045c8:	003d08ff 	.word	0x003d08ff
 80045cc:	431bde83 	.word	0x431bde83
 80045d0:	10624dd3 	.word	0x10624dd3

080045d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0cc      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b68      	ldr	r3, [pc, #416]	@ (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d90c      	bls.n	8004610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b65      	ldr	r3, [pc, #404]	@ (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b63      	ldr	r3, [pc, #396]	@ (800478c <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0b8      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004628:	4b59      	ldr	r3, [pc, #356]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a58      	ldr	r2, [pc, #352]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004640:	4b53      	ldr	r3, [pc, #332]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a52      	ldr	r2, [pc, #328]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800464a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464c:	4b50      	ldr	r3, [pc, #320]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	494d      	ldr	r1, [pc, #308]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d044      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b47      	ldr	r3, [pc, #284]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d119      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e07f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d003      	beq.n	8004692 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468e:	2b03      	cmp	r3, #3
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004692:	4b3f      	ldr	r3, [pc, #252]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e06f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e067      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b2:	4b37      	ldr	r3, [pc, #220]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4934      	ldr	r1, [pc, #208]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c4:	f7ff fb08 	bl	8003cd8 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7ff fb04 	bl	8003cd8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e04f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 020c 	and.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1eb      	bne.n	80046cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f4:	4b25      	ldr	r3, [pc, #148]	@ (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d20c      	bcs.n	800471c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b22      	ldr	r3, [pc, #136]	@ (800478c <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b20      	ldr	r3, [pc, #128]	@ (800478c <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e032      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004728:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4916      	ldr	r1, [pc, #88]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004746:	4b12      	ldr	r3, [pc, #72]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	490e      	ldr	r1, [pc, #56]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800475a:	f000 f855 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 800475e:	4602      	mov	r2, r0
 8004760:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	490a      	ldr	r1, [pc, #40]	@ (8004794 <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	5ccb      	ldrb	r3, [r1, r3]
 800476e:	fa22 f303 	lsr.w	r3, r2, r3
 8004772:	4a09      	ldr	r2, [pc, #36]	@ (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004776:	4b09      	ldr	r3, [pc, #36]	@ (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fa68 	bl	8003c50 <HAL_InitTick>

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023c00 	.word	0x40023c00
 8004790:	40023800 	.word	0x40023800
 8004794:	08006e50 	.word	0x08006e50
 8004798:	20000000 	.word	0x20000000
 800479c:	20000004 	.word	0x20000004

080047a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a4:	4b03      	ldr	r3, [pc, #12]	@ (80047b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000000 	.word	0x20000000

080047b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047bc:	f7ff fff0 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	0a9b      	lsrs	r3, r3, #10
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4903      	ldr	r1, [pc, #12]	@ (80047dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40023800 	.word	0x40023800
 80047dc:	08006e60 	.word	0x08006e60

080047e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047e4:	f7ff ffdc 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b05      	ldr	r3, [pc, #20]	@ (8004800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0b5b      	lsrs	r3, r3, #13
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4903      	ldr	r1, [pc, #12]	@ (8004804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800
 8004804:	08006e60 	.word	0x08006e60

08004808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800480c:	b0ae      	sub	sp, #184	@ 0xb8
 800480e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800482e:	4bcb      	ldr	r3, [pc, #812]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b0c      	cmp	r3, #12
 8004838:	f200 8206 	bhi.w	8004c48 <HAL_RCC_GetSysClockFreq+0x440>
 800483c:	a201      	add	r2, pc, #4	@ (adr r2, 8004844 <HAL_RCC_GetSysClockFreq+0x3c>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004879 	.word	0x08004879
 8004848:	08004c49 	.word	0x08004c49
 800484c:	08004c49 	.word	0x08004c49
 8004850:	08004c49 	.word	0x08004c49
 8004854:	08004881 	.word	0x08004881
 8004858:	08004c49 	.word	0x08004c49
 800485c:	08004c49 	.word	0x08004c49
 8004860:	08004c49 	.word	0x08004c49
 8004864:	08004889 	.word	0x08004889
 8004868:	08004c49 	.word	0x08004c49
 800486c:	08004c49 	.word	0x08004c49
 8004870:	08004c49 	.word	0x08004c49
 8004874:	08004a79 	.word	0x08004a79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4bb9      	ldr	r3, [pc, #740]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x358>)
 800487a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800487e:	e1e7      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004880:	4bb8      	ldr	r3, [pc, #736]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004886:	e1e3      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004888:	4bb4      	ldr	r3, [pc, #720]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004890:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004894:	4bb1      	ldr	r3, [pc, #708]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d071      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a0:	4bae      	ldr	r3, [pc, #696]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80048b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048bc:	2300      	movs	r3, #0
 80048be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048c6:	4622      	mov	r2, r4
 80048c8:	462b      	mov	r3, r5
 80048ca:	f04f 0000 	mov.w	r0, #0
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	0159      	lsls	r1, r3, #5
 80048d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d8:	0150      	lsls	r0, r2, #5
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4621      	mov	r1, r4
 80048e0:	1a51      	subs	r1, r2, r1
 80048e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80048e4:	4629      	mov	r1, r5
 80048e6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80048f8:	4649      	mov	r1, r9
 80048fa:	018b      	lsls	r3, r1, #6
 80048fc:	4641      	mov	r1, r8
 80048fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004902:	4641      	mov	r1, r8
 8004904:	018a      	lsls	r2, r1, #6
 8004906:	4641      	mov	r1, r8
 8004908:	1a51      	subs	r1, r2, r1
 800490a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800490c:	4649      	mov	r1, r9
 800490e:	eb63 0301 	sbc.w	r3, r3, r1
 8004912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004920:	4649      	mov	r1, r9
 8004922:	00cb      	lsls	r3, r1, #3
 8004924:	4641      	mov	r1, r8
 8004926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492a:	4641      	mov	r1, r8
 800492c:	00ca      	lsls	r2, r1, #3
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4603      	mov	r3, r0
 8004934:	4622      	mov	r2, r4
 8004936:	189b      	adds	r3, r3, r2
 8004938:	633b      	str	r3, [r7, #48]	@ 0x30
 800493a:	462b      	mov	r3, r5
 800493c:	460a      	mov	r2, r1
 800493e:	eb42 0303 	adc.w	r3, r2, r3
 8004942:	637b      	str	r3, [r7, #52]	@ 0x34
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004950:	4629      	mov	r1, r5
 8004952:	024b      	lsls	r3, r1, #9
 8004954:	4621      	mov	r1, r4
 8004956:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800495a:	4621      	mov	r1, r4
 800495c:	024a      	lsls	r2, r1, #9
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800496c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004970:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004974:	f7fc f83c 	bl	80009f0 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004982:	e067      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004984:	4b75      	ldr	r3, [pc, #468]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004990:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004994:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800499e:	2300      	movs	r3, #0
 80049a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80049a6:	4622      	mov	r2, r4
 80049a8:	462b      	mov	r3, r5
 80049aa:	f04f 0000 	mov.w	r0, #0
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	0159      	lsls	r1, r3, #5
 80049b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049b8:	0150      	lsls	r0, r2, #5
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4621      	mov	r1, r4
 80049c0:	1a51      	subs	r1, r2, r1
 80049c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049c4:	4629      	mov	r1, r5
 80049c6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80049d8:	4649      	mov	r1, r9
 80049da:	018b      	lsls	r3, r1, #6
 80049dc:	4641      	mov	r1, r8
 80049de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e2:	4641      	mov	r1, r8
 80049e4:	018a      	lsls	r2, r1, #6
 80049e6:	4641      	mov	r1, r8
 80049e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ec:	4649      	mov	r1, r9
 80049ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a06:	4692      	mov	sl, r2
 8004a08:	469b      	mov	fp, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	eb1a 0303 	adds.w	r3, sl, r3
 8004a10:	623b      	str	r3, [r7, #32]
 8004a12:	462b      	mov	r3, r5
 8004a14:	eb4b 0303 	adc.w	r3, fp, r3
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a26:	4629      	mov	r1, r5
 8004a28:	028b      	lsls	r3, r1, #10
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a30:	4621      	mov	r1, r4
 8004a32:	028a      	lsls	r2, r1, #10
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a40:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004a46:	f7fb ffd3 	bl	80009f0 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4613      	mov	r3, r2
 8004a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a54:	4b41      	ldr	r3, [pc, #260]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a76:	e0eb      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b38      	ldr	r3, [pc, #224]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a84:	4b35      	ldr	r3, [pc, #212]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d06b      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a90:	4b32      	ldr	r3, [pc, #200]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	2200      	movs	r2, #0
 8004a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aa8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004aac:	4622      	mov	r2, r4
 8004aae:	462b      	mov	r3, r5
 8004ab0:	f04f 0000 	mov.w	r0, #0
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	0159      	lsls	r1, r3, #5
 8004aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004abe:	0150      	lsls	r0, r2, #5
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	1a51      	subs	r1, r2, r1
 8004ac8:	61b9      	str	r1, [r7, #24]
 8004aca:	4629      	mov	r1, r5
 8004acc:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004ade:	4659      	mov	r1, fp
 8004ae0:	018b      	lsls	r3, r1, #6
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ae8:	4651      	mov	r1, sl
 8004aea:	018a      	lsls	r2, r1, #6
 8004aec:	4651      	mov	r1, sl
 8004aee:	ebb2 0801 	subs.w	r8, r2, r1
 8004af2:	4659      	mov	r1, fp
 8004af4:	eb63 0901 	sbc.w	r9, r3, r1
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0c:	4690      	mov	r8, r2
 8004b0e:	4699      	mov	r9, r3
 8004b10:	4623      	mov	r3, r4
 8004b12:	eb18 0303 	adds.w	r3, r8, r3
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	462b      	mov	r3, r5
 8004b1a:	eb49 0303 	adc.w	r3, r9, r3
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	024b      	lsls	r3, r1, #9
 8004b30:	4621      	mov	r1, r4
 8004b32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b36:	4621      	mov	r1, r4
 8004b38:	024a      	lsls	r2, r1, #9
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b42:	2200      	movs	r2, #0
 8004b44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b46:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004b48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b4c:	f7fb ff50 	bl	80009f0 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b5a:	e065      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x420>
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	00f42400 	.word	0x00f42400
 8004b64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b68:	4b3d      	ldr	r3, [pc, #244]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	099b      	lsrs	r3, r3, #6
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	4611      	mov	r1, r2
 8004b74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b78:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004b82:	4642      	mov	r2, r8
 8004b84:	464b      	mov	r3, r9
 8004b86:	f04f 0000 	mov.w	r0, #0
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	0159      	lsls	r1, r3, #5
 8004b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b94:	0150      	lsls	r0, r2, #5
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	1a51      	subs	r1, r2, r1
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	018b      	lsls	r3, r1, #6
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	018a      	lsls	r2, r1, #6
 8004bc2:	4651      	mov	r1, sl
 8004bc4:	1a54      	subs	r4, r2, r1
 8004bc6:	4659      	mov	r1, fp
 8004bc8:	eb63 0501 	sbc.w	r5, r3, r1
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	00eb      	lsls	r3, r5, #3
 8004bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bda:	00e2      	lsls	r2, r4, #3
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	4643      	mov	r3, r8
 8004be2:	18e3      	adds	r3, r4, r3
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	464b      	mov	r3, r9
 8004be8:	eb45 0303 	adc.w	r3, r5, r3
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	028b      	lsls	r3, r1, #10
 8004bfe:	4621      	mov	r1, r4
 8004c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c04:	4621      	mov	r1, r4
 8004c06:	028a      	lsls	r2, r1, #10
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c10:	2200      	movs	r2, #0
 8004c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c1a:	f7fb fee9 	bl	80009f0 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4613      	mov	r3, r2
 8004c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c28:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	0f1b      	lsrs	r3, r3, #28
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c46:	e003      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b06      	ldr	r3, [pc, #24]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	37b8      	adds	r7, #184	@ 0xb8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop
 8004c60:	40023800 	.word	0x40023800
 8004c64:	00f42400 	.word	0x00f42400

08004c68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e28d      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8083 	beq.w	8004d8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c88:	4b94      	ldr	r3, [pc, #592]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d019      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c94:	4b91      	ldr	r3, [pc, #580]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d106      	bne.n	8004cae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ca0:	4b8e      	ldr	r3, [pc, #568]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cac:	d00c      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cae:	4b8b      	ldr	r3, [pc, #556]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004cb6:	2b0c      	cmp	r3, #12
 8004cb8:	d112      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cba:	4b88      	ldr	r3, [pc, #544]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	4b84      	ldr	r3, [pc, #528]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d05b      	beq.n	8004d8c <HAL_RCC_OscConfig+0x124>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d157      	bne.n	8004d8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e25a      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce8:	d106      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x90>
 8004cea:	4b7c      	ldr	r3, [pc, #496]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a7b      	ldr	r2, [pc, #492]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e01d      	b.n	8004d34 <HAL_RCC_OscConfig+0xcc>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0xb4>
 8004d02:	4b76      	ldr	r3, [pc, #472]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a75      	ldr	r2, [pc, #468]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b73      	ldr	r3, [pc, #460]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a72      	ldr	r2, [pc, #456]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0xcc>
 8004d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a6e      	ldr	r2, [pc, #440]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b6c      	ldr	r3, [pc, #432]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fe ffcc 	bl	8003cd8 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fe ffc8 	bl	8003cd8 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	@ 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e21f      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b61      	ldr	r3, [pc, #388]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0xdc>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe ffb8 	bl	8003cd8 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fe ffb4 	bl	8003cd8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	@ 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e20b      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7e:	4b57      	ldr	r3, [pc, #348]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x104>
 8004d8a:	e000      	b.n	8004d8e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d06f      	beq.n	8004e7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d9a:	4b50      	ldr	r3, [pc, #320]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d017      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004da6:	4b4d      	ldr	r3, [pc, #308]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
        || \
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d105      	bne.n	8004dbe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004db2:	4b4a      	ldr	r3, [pc, #296]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dbe:	4b47      	ldr	r3, [pc, #284]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d11c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dca:	4b44      	ldr	r3, [pc, #272]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d116      	bne.n	8004e04 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd6:	4b41      	ldr	r3, [pc, #260]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_RCC_OscConfig+0x186>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d001      	beq.n	8004dee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e1d3      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dee:	4b3b      	ldr	r3, [pc, #236]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4937      	ldr	r1, [pc, #220]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e02:	e03a      	b.n	8004e7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b34      	ldr	r3, [pc, #208]	@ (8004ee0 <HAL_RCC_OscConfig+0x278>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fe ff61 	bl	8003cd8 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1a:	f7fe ff5d 	bl	8003cd8 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e1b4      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b28      	ldr	r3, [pc, #160]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4925      	ldr	r1, [pc, #148]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ee0 <HAL_RCC_OscConfig+0x278>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fe ff40 	bl	8003cd8 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5c:	f7fe ff3c 	bl	8003cd8 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e193      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d036      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d016      	beq.n	8004ebc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <HAL_RCC_OscConfig+0x27c>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fe ff20 	bl	8003cd8 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fe ff1c 	bl	8003cd8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e173      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eae:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <HAL_RCC_OscConfig+0x274>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x234>
 8004eba:	e01b      	b.n	8004ef4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ebc:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <HAL_RCC_OscConfig+0x27c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec2:	f7fe ff09 	bl	8003cd8 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec8:	e00e      	b.n	8004ee8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eca:	f7fe ff05 	bl	8003cd8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d907      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e15c      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	42470000 	.word	0x42470000
 8004ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee8:	4b8a      	ldr	r3, [pc, #552]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ea      	bne.n	8004eca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8097 	beq.w	8005030 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f06:	4b83      	ldr	r3, [pc, #524]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	4b7f      	ldr	r3, [pc, #508]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f22:	4b7c      	ldr	r3, [pc, #496]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f32:	4b79      	ldr	r3, [pc, #484]	@ (8005118 <HAL_RCC_OscConfig+0x4b0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d118      	bne.n	8004f70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f3e:	4b76      	ldr	r3, [pc, #472]	@ (8005118 <HAL_RCC_OscConfig+0x4b0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a75      	ldr	r2, [pc, #468]	@ (8005118 <HAL_RCC_OscConfig+0x4b0>)
 8004f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4a:	f7fe fec5 	bl	8003cd8 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f52:	f7fe fec1 	bl	8003cd8 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e118      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f64:	4b6c      	ldr	r3, [pc, #432]	@ (8005118 <HAL_RCC_OscConfig+0x4b0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d106      	bne.n	8004f86 <HAL_RCC_OscConfig+0x31e>
 8004f78:	4b66      	ldr	r3, [pc, #408]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7c:	4a65      	ldr	r2, [pc, #404]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f84:	e01c      	b.n	8004fc0 <HAL_RCC_OscConfig+0x358>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x340>
 8004f8e:	4b61      	ldr	r3, [pc, #388]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f92:	4a60      	ldr	r2, [pc, #384]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	4a5d      	ldr	r2, [pc, #372]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x358>
 8004fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fac:	4a59      	ldr	r2, [pc, #356]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb4:	4b57      	ldr	r3, [pc, #348]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	4a56      	ldr	r2, [pc, #344]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	f023 0304 	bic.w	r3, r3, #4
 8004fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fe fe86 	bl	8003cd8 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7fe fe82 	bl	8003cd8 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0d7      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ee      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x368>
 8004ff2:	e014      	b.n	800501e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fe fe70 	bl	8003cd8 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffc:	f7fe fe6c 	bl	8003cd8 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e0c1      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005012:	4b40      	ldr	r3, [pc, #256]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1ee      	bne.n	8004ffc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005024:	4b3b      	ldr	r3, [pc, #236]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8005026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005028:	4a3a      	ldr	r2, [pc, #232]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800502e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80ad 	beq.w	8005194 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800503a:	4b36      	ldr	r3, [pc, #216]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b08      	cmp	r3, #8
 8005044:	d060      	beq.n	8005108 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d145      	bne.n	80050da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	4b33      	ldr	r3, [pc, #204]	@ (800511c <HAL_RCC_OscConfig+0x4b4>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fe fe40 	bl	8003cd8 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fe fe3c 	bl	8003cd8 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e093      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506e:	4b29      	ldr	r3, [pc, #164]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	019b      	lsls	r3, r3, #6
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	3b01      	subs	r3, #1
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a4:	071b      	lsls	r3, r3, #28
 80050a6:	491b      	ldr	r1, [pc, #108]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ac:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <HAL_RCC_OscConfig+0x4b4>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fe fe11 	bl	8003cd8 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fe fe0d 	bl	8003cd8 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e064      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050cc:	4b11      	ldr	r3, [pc, #68]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x452>
 80050d8:	e05c      	b.n	8005194 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b10      	ldr	r3, [pc, #64]	@ (800511c <HAL_RCC_OscConfig+0x4b4>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fe fdfa 	bl	8003cd8 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fe fdf6 	bl	8003cd8 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e04d      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <HAL_RCC_OscConfig+0x4ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x480>
 8005106:	e045      	b.n	8005194 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e040      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
 8005114:	40023800 	.word	0x40023800
 8005118:	40007000 	.word	0x40007000
 800511c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005120:	4b1f      	ldr	r3, [pc, #124]	@ (80051a0 <HAL_RCC_OscConfig+0x538>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d030      	beq.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d129      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d122      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005158:	4293      	cmp	r3, r2
 800515a:	d119      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	3b01      	subs	r3, #1
 800516a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d10f      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d107      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40023800 	.word	0x40023800

080051a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e041      	b.n	800523a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fc fc4e 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f000 fd2c 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d001      	beq.n	800525c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e04e      	b.n	80052fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a23      	ldr	r2, [pc, #140]	@ (8005308 <HAL_TIM_Base_Start_IT+0xc4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005286:	d01d      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1f      	ldr	r2, [pc, #124]	@ (800530c <HAL_TIM_Base_Start_IT+0xc8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1e      	ldr	r2, [pc, #120]	@ (8005310 <HAL_TIM_Base_Start_IT+0xcc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005314 <HAL_TIM_Base_Start_IT+0xd0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005318 <HAL_TIM_Base_Start_IT+0xd4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a19      	ldr	r2, [pc, #100]	@ (800531c <HAL_TIM_Base_Start_IT+0xd8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a18      	ldr	r2, [pc, #96]	@ (8005320 <HAL_TIM_Base_Start_IT+0xdc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d111      	bne.n	80052e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d010      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e6:	e007      	b.n	80052f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40010400 	.word	0x40010400
 800531c:	40014000 	.word	0x40014000
 8005320:	40001800 	.word	0x40001800

08005324 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10f      	bne.n	800536c <HAL_TIM_Base_Stop_IT+0x48>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a1a      	ldr	r2, [r3, #32]
 8005352:	f240 4344 	movw	r3, #1092	@ 0x444
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d107      	bne.n	800536c <HAL_TIM_Base_Stop_IT+0x48>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e041      	b.n	8005418 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f839 	bl	8005420 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f000 fc3d 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <HAL_TIM_OC_Start_IT+0x28>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	bf14      	ite	ne
 8005454:	2301      	movne	r3, #1
 8005456:	2300      	moveq	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e022      	b.n	80054a2 <HAL_TIM_OC_Start_IT+0x6e>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b04      	cmp	r3, #4
 8005460:	d109      	bne.n	8005476 <HAL_TIM_OC_Start_IT+0x42>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b01      	cmp	r3, #1
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	e015      	b.n	80054a2 <HAL_TIM_OC_Start_IT+0x6e>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d109      	bne.n	8005490 <HAL_TIM_OC_Start_IT+0x5c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	e008      	b.n	80054a2 <HAL_TIM_OC_Start_IT+0x6e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	bf14      	ite	ne
 800549c:	2301      	movne	r3, #1
 800549e:	2300      	moveq	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e0c7      	b.n	800563a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_OC_Start_IT+0x86>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054b8:	e013      	b.n	80054e2 <HAL_TIM_OC_Start_IT+0xae>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d104      	bne.n	80054ca <HAL_TIM_OC_Start_IT+0x96>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054c8:	e00b      	b.n	80054e2 <HAL_TIM_OC_Start_IT+0xae>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d104      	bne.n	80054da <HAL_TIM_OC_Start_IT+0xa6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054d8:	e003      	b.n	80054e2 <HAL_TIM_OC_Start_IT+0xae>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	d841      	bhi.n	800556c <HAL_TIM_OC_Start_IT+0x138>
 80054e8:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <HAL_TIM_OC_Start_IT+0xbc>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005525 	.word	0x08005525
 80054f4:	0800556d 	.word	0x0800556d
 80054f8:	0800556d 	.word	0x0800556d
 80054fc:	0800556d 	.word	0x0800556d
 8005500:	08005537 	.word	0x08005537
 8005504:	0800556d 	.word	0x0800556d
 8005508:	0800556d 	.word	0x0800556d
 800550c:	0800556d 	.word	0x0800556d
 8005510:	08005549 	.word	0x08005549
 8005514:	0800556d 	.word	0x0800556d
 8005518:	0800556d 	.word	0x0800556d
 800551c:	0800556d 	.word	0x0800556d
 8005520:	0800555b 	.word	0x0800555b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0202 	orr.w	r2, r2, #2
 8005532:	60da      	str	r2, [r3, #12]
      break;
 8005534:	e01d      	b.n	8005572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0204 	orr.w	r2, r2, #4
 8005544:	60da      	str	r2, [r3, #12]
      break;
 8005546:	e014      	b.n	8005572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0208 	orr.w	r2, r2, #8
 8005556:	60da      	str	r2, [r3, #12]
      break;
 8005558:	e00b      	b.n	8005572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0210 	orr.w	r2, r2, #16
 8005568:	60da      	str	r2, [r3, #12]
      break;
 800556a:	e002      	b.n	8005572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      break;
 8005570:	bf00      	nop
  }

  if (status == HAL_OK)
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d15f      	bne.n	8005638 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2201      	movs	r2, #1
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fe4d 	bl	8006220 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2e      	ldr	r2, [pc, #184]	@ (8005644 <HAL_TIM_OC_Start_IT+0x210>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIM_OC_Start_IT+0x166>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2c      	ldr	r2, [pc, #176]	@ (8005648 <HAL_TIM_OC_Start_IT+0x214>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_TIM_OC_Start_IT+0x16a>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <HAL_TIM_OC_Start_IT+0x16c>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a22      	ldr	r2, [pc, #136]	@ (8005644 <HAL_TIM_OC_Start_IT+0x210>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <HAL_TIM_OC_Start_IT+0x1d0>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c6:	d01d      	beq.n	8005604 <HAL_TIM_OC_Start_IT+0x1d0>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <HAL_TIM_OC_Start_IT+0x218>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_TIM_OC_Start_IT+0x1d0>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005650 <HAL_TIM_OC_Start_IT+0x21c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <HAL_TIM_OC_Start_IT+0x1d0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <HAL_TIM_OC_Start_IT+0x220>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_TIM_OC_Start_IT+0x1d0>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <HAL_TIM_OC_Start_IT+0x214>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_TIM_OC_Start_IT+0x1d0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a18      	ldr	r2, [pc, #96]	@ (8005658 <HAL_TIM_OC_Start_IT+0x224>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_TIM_OC_Start_IT+0x1d0>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a17      	ldr	r2, [pc, #92]	@ (800565c <HAL_TIM_OC_Start_IT+0x228>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d111      	bne.n	8005628 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b06      	cmp	r3, #6
 8005614:	d010      	beq.n	8005638 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005626:	e007      	b.n	8005638 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40010400 	.word	0x40010400
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40014000 	.word	0x40014000
 800565c:	40001800 	.word	0x40001800

08005660 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b0c      	cmp	r3, #12
 8005672:	d841      	bhi.n	80056f8 <HAL_TIM_OC_Stop_IT+0x98>
 8005674:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <HAL_TIM_OC_Stop_IT+0x1c>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056b1 	.word	0x080056b1
 8005680:	080056f9 	.word	0x080056f9
 8005684:	080056f9 	.word	0x080056f9
 8005688:	080056f9 	.word	0x080056f9
 800568c:	080056c3 	.word	0x080056c3
 8005690:	080056f9 	.word	0x080056f9
 8005694:	080056f9 	.word	0x080056f9
 8005698:	080056f9 	.word	0x080056f9
 800569c:	080056d5 	.word	0x080056d5
 80056a0:	080056f9 	.word	0x080056f9
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	080056f9 	.word	0x080056f9
 80056ac:	080056e7 	.word	0x080056e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0202 	bic.w	r2, r2, #2
 80056be:	60da      	str	r2, [r3, #12]
      break;
 80056c0:	e01d      	b.n	80056fe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0204 	bic.w	r2, r2, #4
 80056d0:	60da      	str	r2, [r3, #12]
      break;
 80056d2:	e014      	b.n	80056fe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0208 	bic.w	r2, r2, #8
 80056e2:	60da      	str	r2, [r3, #12]
      break;
 80056e4:	e00b      	b.n	80056fe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0210 	bic.w	r2, r2, #16
 80056f4:	60da      	str	r2, [r3, #12]
      break;
 80056f6:	e002      	b.n	80056fe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d161      	bne.n	80057c8 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2200      	movs	r2, #0
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fd87 	bl	8006220 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2f      	ldr	r2, [pc, #188]	@ (80057d4 <HAL_TIM_OC_Stop_IT+0x174>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d004      	beq.n	8005726 <HAL_TIM_OC_Stop_IT+0xc6>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2d      	ldr	r2, [pc, #180]	@ (80057d8 <HAL_TIM_OC_Stop_IT+0x178>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d101      	bne.n	800572a <HAL_TIM_OC_Stop_IT+0xca>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <HAL_TIM_OC_Stop_IT+0xcc>
 800572a:	2300      	movs	r3, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d017      	beq.n	8005760 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	f241 1311 	movw	r3, #4369	@ 0x1111
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10f      	bne.n	8005760 <HAL_TIM_OC_Stop_IT+0x100>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	f240 4344 	movw	r3, #1092	@ 0x444
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_TIM_OC_Stop_IT+0x100>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800575e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1a      	ldr	r2, [r3, #32]
 8005766:	f241 1311 	movw	r3, #4369	@ 0x1111
 800576a:	4013      	ands	r3, r2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10f      	bne.n	8005790 <HAL_TIM_OC_Stop_IT+0x130>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	f240 4344 	movw	r3, #1092	@ 0x444
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <HAL_TIM_OC_Stop_IT+0x130>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <HAL_TIM_OC_Stop_IT+0x140>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800579e:	e013      	b.n	80057c8 <HAL_TIM_OC_Stop_IT+0x168>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d104      	bne.n	80057b0 <HAL_TIM_OC_Stop_IT+0x150>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ae:	e00b      	b.n	80057c8 <HAL_TIM_OC_Stop_IT+0x168>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d104      	bne.n	80057c0 <HAL_TIM_OC_Stop_IT+0x160>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057be:	e003      	b.n	80057c8 <HAL_TIM_OC_Stop_IT+0x168>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40010400 	.word	0x40010400

080057dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d020      	beq.n	8005840 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0202 	mvn.w	r2, #2
 8005810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9eb 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fd fb02 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f9ee 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01b      	beq.n	800588c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0204 	mvn.w	r2, #4
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9c5 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fd fadc 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f9c8 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d020      	beq.n	80058d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0208 	mvn.w	r2, #8
 80058a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2204      	movs	r2, #4
 80058ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f99f 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 80058c4:	e005      	b.n	80058d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fd fab6 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f9a2 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d020      	beq.n	8005924 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01b      	beq.n	8005924 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0210 	mvn.w	r2, #16
 80058f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2208      	movs	r2, #8
 80058fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f979 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005910:	e005      	b.n	800591e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fd fa90 	bl	8002e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f97c 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00c      	beq.n	8005948 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0201 	mvn.w	r2, #1
 8005940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fd fb32 	bl	8002fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00c      	beq.n	800596c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fd58 	bl	800641c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f94d 	bl	8005c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00c      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0220 	mvn.w	r2, #32
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fd2a 	bl	8006408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_TIM_OC_ConfigChannel+0x1e>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e048      	b.n	8005a6c <HAL_TIM_OC_ConfigChannel+0xb0>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b0c      	cmp	r3, #12
 80059e6:	d839      	bhi.n	8005a5c <HAL_TIM_OC_ConfigChannel+0xa0>
 80059e8:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a25 	.word	0x08005a25
 80059f4:	08005a5d 	.word	0x08005a5d
 80059f8:	08005a5d 	.word	0x08005a5d
 80059fc:	08005a5d 	.word	0x08005a5d
 8005a00:	08005a33 	.word	0x08005a33
 8005a04:	08005a5d 	.word	0x08005a5d
 8005a08:	08005a5d 	.word	0x08005a5d
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	08005a41 	.word	0x08005a41
 8005a14:	08005a5d 	.word	0x08005a5d
 8005a18:	08005a5d 	.word	0x08005a5d
 8005a1c:	08005a5d 	.word	0x08005a5d
 8005a20:	08005a4f 	.word	0x08005a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f9ae 	bl	8005d8c <TIM_OC1_SetConfig>
      break;
 8005a30:	e017      	b.n	8005a62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fa17 	bl	8005e6c <TIM_OC2_SetConfig>
      break;
 8005a3e:	e010      	b.n	8005a62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fa86 	bl	8005f58 <TIM_OC3_SetConfig>
      break;
 8005a4c:	e009      	b.n	8005a62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 faf3 	bl	8006040 <TIM_OC4_SetConfig>
      break;
 8005a5a:	e002      	b.n	8005a62 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIM_ConfigClockSource+0x1c>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e0b4      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x186>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac8:	d03e      	beq.n	8005b48 <HAL_TIM_ConfigClockSource+0xd4>
 8005aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ace:	f200 8087 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad6:	f000 8086 	beq.w	8005be6 <HAL_TIM_ConfigClockSource+0x172>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ade:	d87f      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b70      	cmp	r3, #112	@ 0x70
 8005ae2:	d01a      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0xa6>
 8005ae4:	2b70      	cmp	r3, #112	@ 0x70
 8005ae6:	d87b      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b60      	cmp	r3, #96	@ 0x60
 8005aea:	d050      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x11a>
 8005aec:	2b60      	cmp	r3, #96	@ 0x60
 8005aee:	d877      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b50      	cmp	r3, #80	@ 0x50
 8005af2:	d03c      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0xfa>
 8005af4:	2b50      	cmp	r3, #80	@ 0x50
 8005af6:	d873      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b40      	cmp	r3, #64	@ 0x40
 8005afa:	d058      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0x13a>
 8005afc:	2b40      	cmp	r3, #64	@ 0x40
 8005afe:	d86f      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b30      	cmp	r3, #48	@ 0x30
 8005b02:	d064      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x15a>
 8005b04:	2b30      	cmp	r3, #48	@ 0x30
 8005b06:	d86b      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d060      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x15a>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d867      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05c      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x15a>
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d05a      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x15a>
 8005b18:	e062      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b2a:	f000 fb59 	bl	80061e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	609a      	str	r2, [r3, #8]
      break;
 8005b46:	e04f      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b58:	f000 fb42 	bl	80061e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b6a:	609a      	str	r2, [r3, #8]
      break;
 8005b6c:	e03c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f000 fab6 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2150      	movs	r1, #80	@ 0x50
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fb0f 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005b8c:	e02c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f000 fad5 	bl	800614a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2160      	movs	r1, #96	@ 0x60
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 faff 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005bac:	e01c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 fa96 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2140      	movs	r1, #64	@ 0x40
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 faef 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e00c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f000 fae6 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005bde:	e003      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      break;
 8005be4:	e000      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a43      	ldr	r2, [pc, #268]	@ (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5e:	d00f      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a40      	ldr	r2, [pc, #256]	@ (8005d64 <TIM_Base_SetConfig+0x124>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8005d68 <TIM_Base_SetConfig+0x128>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3e      	ldr	r2, [pc, #248]	@ (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3d      	ldr	r2, [pc, #244]	@ (8005d70 <TIM_Base_SetConfig+0x130>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a32      	ldr	r2, [pc, #200]	@ (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca0:	d027      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8005d64 <TIM_Base_SetConfig+0x124>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d023      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	@ (8005d68 <TIM_Base_SetConfig+0x128>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01f      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <TIM_Base_SetConfig+0x130>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d017      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005d74 <TIM_Base_SetConfig+0x134>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8005d78 <TIM_Base_SetConfig+0x138>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a29      	ldr	r2, [pc, #164]	@ (8005d7c <TIM_Base_SetConfig+0x13c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <TIM_Base_SetConfig+0x140>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a27      	ldr	r2, [pc, #156]	@ (8005d84 <TIM_Base_SetConfig+0x144>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a26      	ldr	r2, [pc, #152]	@ (8005d88 <TIM_Base_SetConfig+0x148>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a0e      	ldr	r2, [pc, #56]	@ (8005d60 <TIM_Base_SetConfig+0x120>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_Base_SetConfig+0xf2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a10      	ldr	r2, [pc, #64]	@ (8005d70 <TIM_Base_SetConfig+0x130>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d103      	bne.n	8005d3a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f043 0204 	orr.w	r2, r3, #4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	601a      	str	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40010400 	.word	0x40010400
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800
 8005d80:	40001800 	.word	0x40001800
 8005d84:	40001c00 	.word	0x40001c00
 8005d88:	40002000 	.word	0x40002000

08005d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f023 0201 	bic.w	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 0302 	bic.w	r3, r3, #2
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a20      	ldr	r2, [pc, #128]	@ (8005e64 <TIM_OC1_SetConfig+0xd8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC1_SetConfig+0x64>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1f      	ldr	r2, [pc, #124]	@ (8005e68 <TIM_OC1_SetConfig+0xdc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10c      	bne.n	8005e0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0308 	bic.w	r3, r3, #8
 8005df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <TIM_OC1_SetConfig+0xd8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_OC1_SetConfig+0x8e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a14      	ldr	r2, [pc, #80]	@ (8005e68 <TIM_OC1_SetConfig+0xdc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d111      	bne.n	8005e3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40010400 	.word	0x40010400

08005e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f023 0210 	bic.w	r2, r3, #16
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0320 	bic.w	r3, r3, #32
 8005eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a22      	ldr	r2, [pc, #136]	@ (8005f50 <TIM_OC2_SetConfig+0xe4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC2_SetConfig+0x68>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a21      	ldr	r2, [pc, #132]	@ (8005f54 <TIM_OC2_SetConfig+0xe8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10d      	bne.n	8005ef0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	@ (8005f50 <TIM_OC2_SetConfig+0xe4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC2_SetConfig+0x94>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a16      	ldr	r2, [pc, #88]	@ (8005f54 <TIM_OC2_SetConfig+0xe8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d113      	bne.n	8005f28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40010400 	.word	0x40010400

08005f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a21      	ldr	r2, [pc, #132]	@ (8006038 <TIM_OC3_SetConfig+0xe0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_OC3_SetConfig+0x66>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a20      	ldr	r2, [pc, #128]	@ (800603c <TIM_OC3_SetConfig+0xe4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10d      	bne.n	8005fda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a16      	ldr	r2, [pc, #88]	@ (8006038 <TIM_OC3_SetConfig+0xe0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC3_SetConfig+0x92>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a15      	ldr	r2, [pc, #84]	@ (800603c <TIM_OC3_SetConfig+0xe4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d113      	bne.n	8006012 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	621a      	str	r2, [r3, #32]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400

08006040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800608a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a12      	ldr	r2, [pc, #72]	@ (80060e4 <TIM_OC4_SetConfig+0xa4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC4_SetConfig+0x68>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a11      	ldr	r2, [pc, #68]	@ (80060e8 <TIM_OC4_SetConfig+0xa8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d109      	bne.n	80060bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	019b      	lsls	r3, r3, #6
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40010400 	.word	0x40010400

080060ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 030a 	bic.w	r3, r3, #10
 8006128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f023 0210 	bic.w	r2, r3, #16
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f043 0307 	orr.w	r3, r3, #7
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	431a      	orrs	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2201      	movs	r2, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1a      	ldr	r2, [r3, #32]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	431a      	orrs	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e05a      	b.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a21      	ldr	r2, [pc, #132]	@ (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d022      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d0:	d01d      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1d      	ldr	r2, [pc, #116]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d018      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a18      	ldr	r2, [pc, #96]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a17      	ldr	r2, [pc, #92]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a15      	ldr	r2, [pc, #84]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10c      	bne.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4313      	orrs	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40010000 	.word	0x40010000
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40000c00 	.word	0x40000c00
 8006358:	40010400 	.word	0x40010400
 800635c:	40014000 	.word	0x40014000
 8006360:	40001800 	.word	0x40001800

08006364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800637c:	2302      	movs	r3, #2
 800637e:	e03d      	b.n	80063fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e042      	b.n	80064c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fb fc56 	bl	8001d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2224      	movs	r2, #36	@ 0x24
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fa09 	bl	800688c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	@ 0x28
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d175      	bne.n	80065dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_UART_Transmit+0x2c>
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e06e      	b.n	80065de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2221      	movs	r2, #33	@ 0x21
 800650a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800650e:	f7fd fbe3 	bl	8003cd8 <HAL_GetTick>
 8006512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	88fa      	ldrh	r2, [r7, #6]
 800651e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006528:	d108      	bne.n	800653c <HAL_UART_Transmit+0x6c>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	e003      	b.n	8006544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006544:	e02e      	b.n	80065a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2200      	movs	r2, #0
 800654e:	2180      	movs	r1, #128	@ 0x80
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f8df 	bl	8006714 <UART_WaitOnFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e03a      	b.n	80065de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800657c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	3302      	adds	r3, #2
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e007      	b.n	8006596 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	3301      	adds	r3, #1
 8006594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1cb      	bne.n	8006546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2200      	movs	r2, #0
 80065b6:	2140      	movs	r1, #64	@ 0x40
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f8ab 	bl	8006714 <UART_WaitOnFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e006      	b.n	80065de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b08a      	sub	sp, #40	@ 0x28
 80065ea:	af02      	add	r7, sp, #8
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b20      	cmp	r3, #32
 8006604:	f040 8081 	bne.w	800670a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <HAL_UART_Receive+0x2e>
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e079      	b.n	800670c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2222      	movs	r2, #34	@ 0x22
 8006622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800662c:	f7fd fb54 	bl	8003cd8 <HAL_GetTick>
 8006630:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	88fa      	ldrh	r2, [r7, #6]
 800663c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006646:	d108      	bne.n	800665a <HAL_UART_Receive+0x74>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	e003      	b.n	8006662 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006662:	e047      	b.n	80066f4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	2120      	movs	r1, #32
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f850 	bl	8006714 <UART_WaitOnFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e042      	b.n	800670c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10c      	bne.n	80066a6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006698:	b29a      	uxth	r2, r3
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	3302      	adds	r3, #2
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e01f      	b.n	80066e6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ae:	d007      	beq.n	80066c0 <HAL_UART_Receive+0xda>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <HAL_UART_Receive+0xe8>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e008      	b.n	80066e0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1b2      	bne.n	8006664 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	e000      	b.n	800670c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800670a:	2302      	movs	r3, #2
  }
}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	4613      	mov	r3, r2
 8006722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006724:	e03b      	b.n	800679e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d037      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672e:	f7fd fad3 	bl	8003cd8 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	6a3a      	ldr	r2, [r7, #32]
 800673a:	429a      	cmp	r2, r3
 800673c:	d302      	bcc.n	8006744 <UART_WaitOnFlagUntilTimeout+0x30>
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e03a      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d023      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b80      	cmp	r3, #128	@ 0x80
 800675a:	d020      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x8a>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	d01d      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b08      	cmp	r3, #8
 800676e:	d116      	bne.n	800679e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f81d 	bl	80067c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2208      	movs	r2, #8
 8006790:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e00f      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	bf0c      	ite	eq
 80067ae:	2301      	moveq	r3, #1
 80067b0:	2300      	movne	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d0b4      	beq.n	8006726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b095      	sub	sp, #84	@ 0x54
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80067f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e5      	bne.n	80067ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	61fb      	str	r3, [r7, #28]
   return(result);
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3314      	adds	r3, #20
 8006820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006824:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e5      	bne.n	8006802 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683a:	2b01      	cmp	r3, #1
 800683c:	d119      	bne.n	8006872 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	60bb      	str	r3, [r7, #8]
   return(result);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f023 0310 	bic.w	r3, r3, #16
 8006854:	647b      	str	r3, [r7, #68]	@ 0x44
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800685e:	61ba      	str	r2, [r7, #24]
 8006860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6979      	ldr	r1, [r7, #20]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	613b      	str	r3, [r7, #16]
   return(result);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006880:	bf00      	nop
 8006882:	3754      	adds	r7, #84	@ 0x54
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800688c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006890:	b0c0      	sub	sp, #256	@ 0x100
 8006892:	af00      	add	r7, sp, #0
 8006894:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a8:	68d9      	ldr	r1, [r3, #12]
 80068aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	ea40 0301 	orr.w	r3, r0, r1
 80068b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80068e4:	f021 010c 	bic.w	r1, r1, #12
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068f2:	430b      	orrs	r3, r1
 80068f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006906:	6999      	ldr	r1, [r3, #24]
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	ea40 0301 	orr.w	r3, r0, r1
 8006912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b8f      	ldr	r3, [pc, #572]	@ (8006b58 <UART_SetConfig+0x2cc>)
 800691c:	429a      	cmp	r2, r3
 800691e:	d005      	beq.n	800692c <UART_SetConfig+0xa0>
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b8d      	ldr	r3, [pc, #564]	@ (8006b5c <UART_SetConfig+0x2d0>)
 8006928:	429a      	cmp	r2, r3
 800692a:	d104      	bne.n	8006936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800692c:	f7fd ff58 	bl	80047e0 <HAL_RCC_GetPCLK2Freq>
 8006930:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006934:	e003      	b.n	800693e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006936:	f7fd ff3f 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 800693a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800693e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006948:	f040 810c 	bne.w	8006b64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800694c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006950:	2200      	movs	r2, #0
 8006952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006956:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800695a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	1891      	adds	r1, r2, r2
 8006964:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006966:	415b      	adcs	r3, r3
 8006968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800696a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800696e:	4621      	mov	r1, r4
 8006970:	eb12 0801 	adds.w	r8, r2, r1
 8006974:	4629      	mov	r1, r5
 8006976:	eb43 0901 	adc.w	r9, r3, r1
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800698a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800698e:	4690      	mov	r8, r2
 8006990:	4699      	mov	r9, r3
 8006992:	4623      	mov	r3, r4
 8006994:	eb18 0303 	adds.w	r3, r8, r3
 8006998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800699c:	462b      	mov	r3, r5
 800699e:	eb49 0303 	adc.w	r3, r9, r3
 80069a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80069b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069ba:	460b      	mov	r3, r1
 80069bc:	18db      	adds	r3, r3, r3
 80069be:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c0:	4613      	mov	r3, r2
 80069c2:	eb42 0303 	adc.w	r3, r2, r3
 80069c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80069c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80069d0:	f7fa f80e 	bl	80009f0 <__aeabi_uldivmod>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4b61      	ldr	r3, [pc, #388]	@ (8006b60 <UART_SetConfig+0x2d4>)
 80069da:	fba3 2302 	umull	r2, r3, r3, r2
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	011c      	lsls	r4, r3, #4
 80069e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	1891      	adds	r1, r2, r2
 80069fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069fc:	415b      	adcs	r3, r3
 80069fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a04:	4641      	mov	r1, r8
 8006a06:	eb12 0a01 	adds.w	sl, r2, r1
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a24:	4692      	mov	sl, r2
 8006a26:	469b      	mov	fp, r3
 8006a28:	4643      	mov	r3, r8
 8006a2a:	eb1a 0303 	adds.w	r3, sl, r3
 8006a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a32:	464b      	mov	r3, r9
 8006a34:	eb4b 0303 	adc.w	r3, fp, r3
 8006a38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a50:	460b      	mov	r3, r1
 8006a52:	18db      	adds	r3, r3, r3
 8006a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a56:	4613      	mov	r3, r2
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a66:	f7f9 ffc3 	bl	80009f0 <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4b3b      	ldr	r3, [pc, #236]	@ (8006b60 <UART_SetConfig+0x2d4>)
 8006a72:	fba3 2301 	umull	r2, r3, r3, r1
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	2264      	movs	r2, #100	@ 0x64
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	1acb      	subs	r3, r1, r3
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a86:	4b36      	ldr	r3, [pc, #216]	@ (8006b60 <UART_SetConfig+0x2d4>)
 8006a88:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a94:	441c      	add	r4, r3
 8006a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006aa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	1891      	adds	r1, r2, r2
 8006aae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ab0:	415b      	adcs	r3, r3
 8006ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ab8:	4641      	mov	r1, r8
 8006aba:	1851      	adds	r1, r2, r1
 8006abc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006abe:	4649      	mov	r1, r9
 8006ac0:	414b      	adcs	r3, r1
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ad0:	4659      	mov	r1, fp
 8006ad2:	00cb      	lsls	r3, r1, #3
 8006ad4:	4651      	mov	r1, sl
 8006ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ada:	4651      	mov	r1, sl
 8006adc:	00ca      	lsls	r2, r1, #3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	189b      	adds	r3, r3, r2
 8006ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aec:	464b      	mov	r3, r9
 8006aee:	460a      	mov	r2, r1
 8006af0:	eb42 0303 	adc.w	r3, r2, r3
 8006af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	18db      	adds	r3, r3, r3
 8006b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b12:	4613      	mov	r3, r2
 8006b14:	eb42 0303 	adc.w	r3, r2, r3
 8006b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b22:	f7f9 ff65 	bl	80009f0 <__aeabi_uldivmod>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <UART_SetConfig+0x2d4>)
 8006b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b30:	095b      	lsrs	r3, r3, #5
 8006b32:	2164      	movs	r1, #100	@ 0x64
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	3332      	adds	r3, #50	@ 0x32
 8006b3e:	4a08      	ldr	r2, [pc, #32]	@ (8006b60 <UART_SetConfig+0x2d4>)
 8006b40:	fba2 2303 	umull	r2, r3, r2, r3
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	f003 0207 	and.w	r2, r3, #7
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4422      	add	r2, r4
 8006b52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b54:	e106      	b.n	8006d64 <UART_SetConfig+0x4d8>
 8006b56:	bf00      	nop
 8006b58:	40011000 	.word	0x40011000
 8006b5c:	40011400 	.word	0x40011400
 8006b60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b76:	4642      	mov	r2, r8
 8006b78:	464b      	mov	r3, r9
 8006b7a:	1891      	adds	r1, r2, r2
 8006b7c:	6239      	str	r1, [r7, #32]
 8006b7e:	415b      	adcs	r3, r3
 8006b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b86:	4641      	mov	r1, r8
 8006b88:	1854      	adds	r4, r2, r1
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	eb43 0501 	adc.w	r5, r3, r1
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	00eb      	lsls	r3, r5, #3
 8006b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b9e:	00e2      	lsls	r2, r4, #3
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	4643      	mov	r3, r8
 8006ba6:	18e3      	adds	r3, r4, r3
 8006ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bac:	464b      	mov	r3, r9
 8006bae:	eb45 0303 	adc.w	r3, r5, r3
 8006bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006bc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	008b      	lsls	r3, r1, #2
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bdc:	4621      	mov	r1, r4
 8006bde:	008a      	lsls	r2, r1, #2
 8006be0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006be4:	f7f9 ff04 	bl	80009f0 <__aeabi_uldivmod>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4b60      	ldr	r3, [pc, #384]	@ (8006d70 <UART_SetConfig+0x4e4>)
 8006bee:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	011c      	lsls	r4, r3, #4
 8006bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	1891      	adds	r1, r2, r2
 8006c0e:	61b9      	str	r1, [r7, #24]
 8006c10:	415b      	adcs	r3, r3
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c18:	4641      	mov	r1, r8
 8006c1a:	1851      	adds	r1, r2, r1
 8006c1c:	6139      	str	r1, [r7, #16]
 8006c1e:	4649      	mov	r1, r9
 8006c20:	414b      	adcs	r3, r1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c30:	4659      	mov	r1, fp
 8006c32:	00cb      	lsls	r3, r1, #3
 8006c34:	4651      	mov	r1, sl
 8006c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	00ca      	lsls	r2, r1, #3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	4642      	mov	r2, r8
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	460a      	mov	r2, r1
 8006c50:	eb42 0303 	adc.w	r3, r2, r3
 8006c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c70:	4649      	mov	r1, r9
 8006c72:	008b      	lsls	r3, r1, #2
 8006c74:	4641      	mov	r1, r8
 8006c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	008a      	lsls	r2, r1, #2
 8006c7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c82:	f7f9 feb5 	bl	80009f0 <__aeabi_uldivmod>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4b38      	ldr	r3, [pc, #224]	@ (8006d70 <UART_SetConfig+0x4e4>)
 8006c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	2264      	movs	r2, #100	@ 0x64
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	1acb      	subs	r3, r1, r3
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	3332      	adds	r3, #50	@ 0x32
 8006ca0:	4a33      	ldr	r2, [pc, #204]	@ (8006d70 <UART_SetConfig+0x4e4>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cac:	441c      	add	r4, r3
 8006cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	1891      	adds	r1, r2, r2
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	415b      	adcs	r3, r3
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ccc:	4641      	mov	r1, r8
 8006cce:	1851      	adds	r1, r2, r1
 8006cd0:	6039      	str	r1, [r7, #0]
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	414b      	adcs	r3, r1
 8006cd6:	607b      	str	r3, [r7, #4]
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	00cb      	lsls	r3, r1, #3
 8006ce8:	4651      	mov	r1, sl
 8006cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cee:	4651      	mov	r1, sl
 8006cf0:	00ca      	lsls	r2, r1, #3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	189b      	adds	r3, r3, r2
 8006cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cfe:	464b      	mov	r3, r9
 8006d00:	460a      	mov	r2, r1
 8006d02:	eb42 0303 	adc.w	r3, r2, r3
 8006d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d12:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d20:	4649      	mov	r1, r9
 8006d22:	008b      	lsls	r3, r1, #2
 8006d24:	4641      	mov	r1, r8
 8006d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	008a      	lsls	r2, r1, #2
 8006d2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d32:	f7f9 fe5d 	bl	80009f0 <__aeabi_uldivmod>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <UART_SetConfig+0x4e4>)
 8006d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	2164      	movs	r1, #100	@ 0x64
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	3332      	adds	r3, #50	@ 0x32
 8006d4e:	4a08      	ldr	r2, [pc, #32]	@ (8006d70 <UART_SetConfig+0x4e4>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f003 020f 	and.w	r2, r3, #15
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4422      	add	r2, r4
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d70:	51eb851f 	.word	0x51eb851f

08006d74 <sqrtf>:
 8006d74:	b508      	push	{r3, lr}
 8006d76:	ed2d 8b02 	vpush	{d8}
 8006d7a:	eeb0 8a40 	vmov.f32	s16, s0
 8006d7e:	f000 f817 	bl	8006db0 <__ieee754_sqrtf>
 8006d82:	eeb4 8a48 	vcmp.f32	s16, s16
 8006d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8a:	d60c      	bvs.n	8006da6 <sqrtf+0x32>
 8006d8c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006dac <sqrtf+0x38>
 8006d90:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d98:	d505      	bpl.n	8006da6 <sqrtf+0x32>
 8006d9a:	f000 f815 	bl	8006dc8 <__errno>
 8006d9e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006da2:	2321      	movs	r3, #33	@ 0x21
 8006da4:	6003      	str	r3, [r0, #0]
 8006da6:	ecbd 8b02 	vpop	{d8}
 8006daa:	bd08      	pop	{r3, pc}
 8006dac:	00000000 	.word	0x00000000

08006db0 <__ieee754_sqrtf>:
 8006db0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006db4:	4770      	bx	lr

08006db6 <memset>:
 8006db6:	4402      	add	r2, r0
 8006db8:	4603      	mov	r3, r0
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d100      	bne.n	8006dc0 <memset+0xa>
 8006dbe:	4770      	bx	lr
 8006dc0:	f803 1b01 	strb.w	r1, [r3], #1
 8006dc4:	e7f9      	b.n	8006dba <memset+0x4>
	...

08006dc8 <__errno>:
 8006dc8:	4b01      	ldr	r3, [pc, #4]	@ (8006dd0 <__errno+0x8>)
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	2000000c 	.word	0x2000000c

08006dd4 <__libc_init_array>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8006e0c <__libc_init_array+0x38>)
 8006dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8006e10 <__libc_init_array+0x3c>)
 8006dda:	1b64      	subs	r4, r4, r5
 8006ddc:	10a4      	asrs	r4, r4, #2
 8006dde:	2600      	movs	r6, #0
 8006de0:	42a6      	cmp	r6, r4
 8006de2:	d109      	bne.n	8006df8 <__libc_init_array+0x24>
 8006de4:	4d0b      	ldr	r5, [pc, #44]	@ (8006e14 <__libc_init_array+0x40>)
 8006de6:	4c0c      	ldr	r4, [pc, #48]	@ (8006e18 <__libc_init_array+0x44>)
 8006de8:	f000 f826 	bl	8006e38 <_init>
 8006dec:	1b64      	subs	r4, r4, r5
 8006dee:	10a4      	asrs	r4, r4, #2
 8006df0:	2600      	movs	r6, #0
 8006df2:	42a6      	cmp	r6, r4
 8006df4:	d105      	bne.n	8006e02 <__libc_init_array+0x2e>
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
 8006df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfc:	4798      	blx	r3
 8006dfe:	3601      	adds	r6, #1
 8006e00:	e7ee      	b.n	8006de0 <__libc_init_array+0xc>
 8006e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e06:	4798      	blx	r3
 8006e08:	3601      	adds	r6, #1
 8006e0a:	e7f2      	b.n	8006df2 <__libc_init_array+0x1e>
 8006e0c:	08006e70 	.word	0x08006e70
 8006e10:	08006e70 	.word	0x08006e70
 8006e14:	08006e70 	.word	0x08006e70
 8006e18:	08006e74 	.word	0x08006e74

08006e1c <memcpy>:
 8006e1c:	440a      	add	r2, r1
 8006e1e:	4291      	cmp	r1, r2
 8006e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e24:	d100      	bne.n	8006e28 <memcpy+0xc>
 8006e26:	4770      	bx	lr
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e32:	4291      	cmp	r1, r2
 8006e34:	d1f9      	bne.n	8006e2a <memcpy+0xe>
 8006e36:	bd10      	pop	{r4, pc}

08006e38 <_init>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr

08006e44 <_fini>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr
