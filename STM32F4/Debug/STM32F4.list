
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b700  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001068  0800b8d0  0800b8d0  0000c8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c938  0800c938  0000e05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c938  0800c938  0000d938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c940  0800c940  0000e05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c944  0800c944  0000d944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800c948  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  2000005c  0800c9a4  0000e05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  0800c9a4  0000eabc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c468  00000000  00000000  0000e08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d44  00000000  00000000  0002a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0002e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d1  00000000  00000000  0002f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025289  00000000  00000000  000308a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d62c  00000000  00000000  00055b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77c8  00000000  00000000  0007315e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000651c  00000000  00000000  0014a96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00150e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b8b8 	.word	0x0800b8b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800b8b8 	.word	0x0800b8b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <HAL_UART_RxCpltCallback>:
    }
    return crc;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x20>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d102      	bne.n	8000fcc <HAL_UART_RxCpltCallback+0x18>
	{
		writeDisplay("Hello World");
 8000fc6:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x24>)
 8000fc8:	f002 f840 	bl	800304c <writeDisplay>
//		writeDisplay(feedback_msg);
//		HAL_UART_Receive_IT(huart, datagram, 10);
	}


}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	0800b8d0 	.word	0x0800b8d0

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	f5ad 6d10 	sub.w	sp, sp, #2304	@ 0x900
 8000fe2:	af00      	add	r7, sp, #0
	motor_t motor1;
	motor_t motor2;
	motor_t motor3;
	motor_t motor4;
	motor_t motor5;
	motors[0] = &motor1;
 8000fe4:	4a52      	ldr	r2, [pc, #328]	@ (8001130 <main+0x154>)
 8000fe6:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8000fea:	6013      	str	r3, [r2, #0]
	motors[1] = &motor2;
 8000fec:	4a50      	ldr	r2, [pc, #320]	@ (8001130 <main+0x154>)
 8000fee:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8000ff2:	6053      	str	r3, [r2, #4]
	motors[2] = &motor3;
 8000ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8001130 <main+0x154>)
 8000ff6:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8000ffa:	6093      	str	r3, [r2, #8]
	motors[3] = &motor4;
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	@ (8001130 <main+0x154>)
 8000ffe:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8001002:	60d3      	str	r3, [r2, #12]
	motors[4] = &motor5;
 8001004:	4a4a      	ldr	r2, [pc, #296]	@ (8001130 <main+0x154>)
 8001006:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 800100a:	6113      	str	r3, [r2, #16]
	tmc2209_stepper_driver_t driver2;
	tmc2209_stepper_driver_t driver3;
	tmc2209_stepper_driver_t driver4;
	tmc2209_stepper_driver_t driver5;

	motors[0]->driver = &driver1;
 800100c:	4b48      	ldr	r3, [pc, #288]	@ (8001130 <main+0x154>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 8001014:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	motors[1]->driver = &driver2;
 8001018:	4b45      	ldr	r3, [pc, #276]	@ (8001130 <main+0x154>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8001020:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	motors[2]->driver = &driver3;
 8001024:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <main+0x154>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 800102c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	motors[3]->driver = &driver4;
 8001030:	4b3f      	ldr	r3, [pc, #252]	@ (8001130 <main+0x154>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001038:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	motors[4]->driver = &driver5;
 800103c:	4b3c      	ldr	r3, [pc, #240]	@ (8001130 <main+0x154>)
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	1d3a      	adds	r2, r7, #4
 8001042:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f004 f91b 	bl	8005280 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f883 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 fd63 	bl	8001b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001052:	f000 fce3 	bl	8001a1c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001056:	f000 fcb7 	bl	80019c8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800105a:	f000 f8e9 	bl	8001230 <MX_I2C1_Init>
  MX_UART4_Init();
 800105e:	f000 fc5f 	bl	8001920 <MX_UART4_Init>
  MX_TIM3_Init();
 8001062:	f000 f963 	bl	800132c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001066:	f000 f9d5 	bl	8001414 <MX_TIM4_Init>
  MX_TIM9_Init();
 800106a:	f000 fb51 	bl	8001710 <MX_TIM9_Init>
  MX_TIM8_Init();
 800106e:	f000 fab1 	bl	80015d4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001072:	f000 fbab 	bl	80017cc <MX_TIM12_Init>
  MX_TIM13_Init();
 8001076:	f000 fc09 	bl	800188c <MX_TIM13_Init>
  MX_TIM1_Init();
 800107a:	f000 f907 	bl	800128c <MX_TIM1_Init>
  MX_TIM6_Init();
 800107e:	f000 fa3d 	bl	80014fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8001082:	f000 fa71 	bl	8001568 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001086:	f000 fb7d 	bl	8001784 <MX_TIM10_Init>
  MX_UART5_Init();
 800108a:	f000 fc73 	bl	8001974 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800108e:	f000 fcef 	bl	8001a70 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001092:	f000 fd17 	bl	8001ac4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  initAllMotors(MODE_5_UART);
 8001096:	2001      	movs	r0, #1
 8001098:	f003 fb6a 	bl	8004770 <initAllMotors>

  while(start_flag == 0);
 800109c:	bf00      	nop
 800109e:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <main+0x158>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0fb      	beq.n	800109e <main+0xc2>


  goHome();
 80010a6:	f003 fa9d 	bl	80045e4 <goHome>

  moveToCoordinates(190, -70, 205, 90);
 80010aa:	eddf 1a23 	vldr	s3, [pc, #140]	@ 8001138 <main+0x15c>
 80010ae:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 800113c <main+0x160>
 80010b2:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8001140 <main+0x164>
 80010b6:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001144 <main+0x168>
 80010ba:	f003 f983 	bl	80043c4 <moveToCoordinates>
  moveToCoordinates(190, -70, 145, 90);
 80010be:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 8001138 <main+0x15c>
 80010c2:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8001148 <main+0x16c>
 80010c6:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8001140 <main+0x164>
 80010ca:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001144 <main+0x168>
 80010ce:	f003 f979 	bl	80043c4 <moveToCoordinates>

  grip();
 80010d2:	f003 fa04 	bl	80044de <grip>

  moveToCoordinates(190, -70, 205, 90);
 80010d6:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8001138 <main+0x15c>
 80010da:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 800113c <main+0x160>
 80010de:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001140 <main+0x164>
 80010e2:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001144 <main+0x168>
 80010e6:	f003 f96d 	bl	80043c4 <moveToCoordinates>

  moveToCoordinates(160, 30, 205, 90);
 80010ea:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8001138 <main+0x15c>
 80010ee:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 800113c <main+0x160>
 80010f2:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80010f6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800114c <main+0x170>
 80010fa:	f003 f963 	bl	80043c4 <moveToCoordinates>
  moveToCoordinates(160, 30, 95, 90);
 80010fe:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 8001138 <main+0x15c>
 8001102:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001150 <main+0x174>
 8001106:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800110a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800114c <main+0x170>
 800110e:	f003 f959 	bl	80043c4 <moveToCoordinates>

  openGripper();
 8001112:	f003 f9d5 	bl	80044c0 <openGripper>

  moveToCoordinates(160, 30, 205, 90);
 8001116:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8001138 <main+0x15c>
 800111a:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800113c <main+0x160>
 800111e:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8001122:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800114c <main+0x170>
 8001126:	f003 f94d 	bl	80043c4 <moveToCoordinates>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800112a:	bf00      	nop
 800112c:	e7fd      	b.n	800112a <main+0x14e>
 800112e:	bf00      	nop
 8001130:	2000054c 	.word	0x2000054c
 8001134:	20000560 	.word	0x20000560
 8001138:	42b40000 	.word	0x42b40000
 800113c:	434d0000 	.word	0x434d0000
 8001140:	c28c0000 	.word	0xc28c0000
 8001144:	433e0000 	.word	0x433e0000
 8001148:	43110000 	.word	0x43110000
 800114c:	43200000 	.word	0x43200000
 8001150:	42be0000 	.word	0x42be0000

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	@ 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2234      	movs	r2, #52	@ 0x34
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f009 fff2 	bl	800b14c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <SystemClock_Config+0xd4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	4a29      	ldr	r2, [pc, #164]	@ (8001228 <SystemClock_Config+0xd4>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	@ 0x40
 8001188:	4b27      	ldr	r3, [pc, #156]	@ (8001228 <SystemClock_Config+0xd4>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <SystemClock_Config+0xd8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011a0:	4a22      	ldr	r2, [pc, #136]	@ (800122c <SystemClock_Config+0xd8>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <SystemClock_Config+0xd8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011bc:	2310      	movs	r3, #16
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011c8:	2310      	movs	r3, #16
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011d2:	2304      	movs	r3, #4
 80011d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011da:	2302      	movs	r3, #2
 80011dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 fc76 	bl	8006ad4 <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011ee:	f000 fd81 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f2:	230f      	movs	r3, #15
 80011f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f6:	2302      	movs	r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001202:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2102      	movs	r1, #2
 800120e:	4618      	mov	r0, r3
 8001210:	f005 f916 	bl	8006440 <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800121a:	f000 fd6b 	bl	8001cf4 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3750      	adds	r7, #80	@ 0x50
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40007000 	.word	0x40007000

08001230 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <MX_I2C1_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_I2C1_Init+0x50>)
 800123c:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_I2C1_Init+0x58>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_I2C1_Init+0x50>)
 800124e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_I2C1_Init+0x50>)
 800126e:	f004 fc39 	bl	8005ae4 <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fd3c 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000078 	.word	0x20000078
 8001284:	40005400 	.word	0x40005400
 8001288:	000186a0 	.word	0x000186a0

0800128c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <MX_TIM1_Init+0x9c>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012b0:	2253      	movs	r2, #83	@ 0x53
 80012b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d4:	4813      	ldr	r0, [pc, #76]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012d6:	f005 fe9b 	bl	8007010 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012e0:	f000 fd08 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <MX_TIM1_Init+0x98>)
 80012f2:	f006 faf5 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012fc:	f000 fcfa 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_TIM1_Init+0x98>)
 800130e:	f006 fee3 	bl	80080d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001318:	f000 fcec 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000cc 	.word	0x200000cc
 8001328:	40010000 	.word	0x40010000

0800132c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	@ 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <MX_TIM3_Init+0xe0>)
 800135e:	4a2c      	ldr	r2, [pc, #176]	@ (8001410 <MX_TIM3_Init+0xe4>)
 8001360:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_TIM3_Init+0xe0>)
 8001364:	2229      	movs	r2, #41	@ 0x29
 8001366:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <MX_TIM3_Init+0xe0>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800136e:	4b27      	ldr	r3, [pc, #156]	@ (800140c <MX_TIM3_Init+0xe0>)
 8001370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001374:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b25      	ldr	r3, [pc, #148]	@ (800140c <MX_TIM3_Init+0xe0>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <MX_TIM3_Init+0xe0>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001382:	4822      	ldr	r0, [pc, #136]	@ (800140c <MX_TIM3_Init+0xe0>)
 8001384:	f005 fe44 	bl	8007010 <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800138e:	f000 fcb1 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001398:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139c:	4619      	mov	r1, r3
 800139e:	481b      	ldr	r0, [pc, #108]	@ (800140c <MX_TIM3_Init+0xe0>)
 80013a0:	f006 fa9e 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013aa:	f000 fca3 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80013ae:	4817      	ldr	r0, [pc, #92]	@ (800140c <MX_TIM3_Init+0xe0>)
 80013b0:	f005 ff1d 	bl	80071ee <HAL_TIM_OC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013ba:	f000 fc9b 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	4619      	mov	r1, r3
 80013cc:	480f      	ldr	r0, [pc, #60]	@ (800140c <MX_TIM3_Init+0xe0>)
 80013ce:	f006 fe83 	bl	80080d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013d8:	f000 fc8c 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	@ (800140c <MX_TIM3_Init+0xe0>)
 80013f4:	f006 fa18 	bl	8007828 <HAL_TIM_OC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013fe:	f000 fc79 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	@ 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000114 	.word	0x20000114
 8001410:	40000400 	.word	0x40000400

08001414 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	@ 0x38
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001444:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 8001446:	4a2c      	ldr	r2, [pc, #176]	@ (80014f8 <MX_TIM4_Init+0xe4>)
 8001448:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 800144a:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 800144c:	2229      	movs	r2, #41	@ 0x29
 800144e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 8001458:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800145c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800146a:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 800146c:	f005 fdd0 	bl	8007010 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001476:	f000 fc3d 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001484:	4619      	mov	r1, r3
 8001486:	481b      	ldr	r0, [pc, #108]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 8001488:	f006 fa2a 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001492:	f000 fc2f 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001496:	4817      	ldr	r0, [pc, #92]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 8001498:	f005 fea9 	bl	80071ee <HAL_TIM_OC_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014a2:	f000 fc27 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	4619      	mov	r1, r3
 80014b4:	480f      	ldr	r0, [pc, #60]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 80014b6:	f006 fe0f 	bl	80080d8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014c0:	f000 fc18 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	@ (80014f4 <MX_TIM4_Init+0xe0>)
 80014dc:	f006 f9a4 	bl	8007828 <HAL_TIM_OC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80014e6:	f000 fc05 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3738      	adds	r7, #56	@ 0x38
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000015c 	.word	0x2000015c
 80014f8:	40000800 	.word	0x40000800

080014fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	463b      	mov	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_TIM6_Init+0x64>)
 800150c:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <MX_TIM6_Init+0x68>)
 800150e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 839;
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_TIM6_Init+0x64>)
 8001512:	f240 3247 	movw	r2, #839	@ 0x347
 8001516:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_TIM6_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_TIM6_Init+0x64>)
 8001520:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001524:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_TIM6_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <MX_TIM6_Init+0x64>)
 800152e:	f005 fd6f 	bl	8007010 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001538:	f000 fbdc 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_TIM6_Init+0x64>)
 800154a:	f006 fdc5 	bl	80080d8 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001554:	f000 fbce 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200001a4 	.word	0x200001a4
 8001564:	40001000 	.word	0x40001000

08001568 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_TIM7_Init+0x64>)
 8001578:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <MX_TIM7_Init+0x68>)
 800157a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 839;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_TIM7_Init+0x64>)
 800157e:	f240 3247 	movw	r2, #839	@ 0x347
 8001582:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_TIM7_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <MX_TIM7_Init+0x64>)
 800158c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001590:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_TIM7_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <MX_TIM7_Init+0x64>)
 800159a:	f005 fd39 	bl	8007010 <HAL_TIM_Base_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015a4:	f000 fba6 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_TIM7_Init+0x64>)
 80015b6:	f006 fd8f 	bl	80080d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015c0:	f000 fb98 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200001ec 	.word	0x200001ec
 80015d0:	40001400 	.word	0x40001400

080015d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b096      	sub	sp, #88	@ 0x58
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2220      	movs	r2, #32
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f009 fd9d 	bl	800b14c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001612:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <MX_TIM8_Init+0x134>)
 8001614:	4a3d      	ldr	r2, [pc, #244]	@ (800170c <MX_TIM8_Init+0x138>)
 8001616:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 8001618:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <MX_TIM8_Init+0x134>)
 800161a:	2229      	movs	r2, #41	@ 0x29
 800161c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <MX_TIM8_Init+0x134>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001624:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <MX_TIM8_Init+0x134>)
 8001626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800162a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <MX_TIM8_Init+0x134>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001632:	4b35      	ldr	r3, [pc, #212]	@ (8001708 <MX_TIM8_Init+0x134>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <MX_TIM8_Init+0x134>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800163e:	4832      	ldr	r0, [pc, #200]	@ (8001708 <MX_TIM8_Init+0x134>)
 8001640:	f005 fce6 	bl	8007010 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800164a:	f000 fb53 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001652:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001658:	4619      	mov	r1, r3
 800165a:	482b      	ldr	r0, [pc, #172]	@ (8001708 <MX_TIM8_Init+0x134>)
 800165c:	f006 f940 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001666:	f000 fb45 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800166a:	4827      	ldr	r0, [pc, #156]	@ (8001708 <MX_TIM8_Init+0x134>)
 800166c:	f005 fdbf 	bl	80071ee <HAL_TIM_OC_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001676:	f000 fb3d 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001682:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001686:	4619      	mov	r1, r3
 8001688:	481f      	ldr	r0, [pc, #124]	@ (8001708 <MX_TIM8_Init+0x134>)
 800168a:	f006 fd25 	bl	80080d8 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001694:	f000 fb2e 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4812      	ldr	r0, [pc, #72]	@ (8001708 <MX_TIM8_Init+0x134>)
 80016be:	f006 f8b3 	bl	8007828 <HAL_TIM_OC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80016c8:	f000 fb14 	bl	8001cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	@ (8001708 <MX_TIM8_Init+0x134>)
 80016f0:	f006 fd6e 	bl	80081d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80016fa:	f000 fafb 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3758      	adds	r7, #88	@ 0x58
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000234 	.word	0x20000234
 800170c:	40010400 	.word	0x40010400

08001710 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_TIM9_Init+0x6c>)
 8001724:	4a16      	ldr	r2, [pc, #88]	@ (8001780 <MX_TIM9_Init+0x70>)
 8001726:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_TIM9_Init+0x6c>)
 800172a:	f240 3247 	movw	r2, #839	@ 0x347
 800172e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <MX_TIM9_Init+0x6c>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_TIM9_Init+0x6c>)
 8001738:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800173c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_TIM9_Init+0x6c>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <MX_TIM9_Init+0x6c>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800174a:	480c      	ldr	r0, [pc, #48]	@ (800177c <MX_TIM9_Init+0x6c>)
 800174c:	f005 fc60 	bl	8007010 <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001756:	f000 facd 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_TIM9_Init+0x6c>)
 8001766:	f006 f8bb 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001770:	f000 fac0 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000027c 	.word	0x2000027c
 8001780:	40014000 	.word	0x40014000

08001784 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001788:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_TIM10_Init+0x40>)
 800178a:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <MX_TIM10_Init+0x44>)
 800178c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <MX_TIM10_Init+0x40>)
 8001790:	f240 3247 	movw	r2, #839	@ 0x347
 8001794:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <MX_TIM10_Init+0x40>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_TIM10_Init+0x40>)
 800179e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <MX_TIM10_Init+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_TIM10_Init+0x40>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_TIM10_Init+0x40>)
 80017b2:	f005 fc2d 	bl	8007010 <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80017bc:	f000 fa9a 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200002c4 	.word	0x200002c4
 80017c8:	40014400 	.word	0x40014400

080017cc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	@ 0x30
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017f2:	4b24      	ldr	r3, [pc, #144]	@ (8001884 <MX_TIM12_Init+0xb8>)
 80017f4:	4a24      	ldr	r2, [pc, #144]	@ (8001888 <MX_TIM12_Init+0xbc>)
 80017f6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 80017f8:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <MX_TIM12_Init+0xb8>)
 80017fa:	2229      	movs	r2, #41	@ 0x29
 80017fc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <MX_TIM12_Init+0xb8>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <MX_TIM12_Init+0xb8>)
 8001806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800180a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <MX_TIM12_Init+0xb8>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <MX_TIM12_Init+0xb8>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001818:	481a      	ldr	r0, [pc, #104]	@ (8001884 <MX_TIM12_Init+0xb8>)
 800181a:	f005 fbf9 	bl	8007010 <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001824:	f000 fa66 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800182c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	4619      	mov	r1, r3
 8001834:	4813      	ldr	r0, [pc, #76]	@ (8001884 <MX_TIM12_Init+0xb8>)
 8001836:	f006 f853 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001840:	f000 fa58 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8001844:	480f      	ldr	r0, [pc, #60]	@ (8001884 <MX_TIM12_Init+0xb8>)
 8001846:	f005 fcd2 	bl	80071ee <HAL_TIM_OC_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001850:	f000 fa50 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <MX_TIM12_Init+0xb8>)
 800186c:	f005 ffdc 	bl	8007828 <HAL_TIM_OC_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001876:	f000 fa3d 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3730      	adds	r7, #48	@ 0x30
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000030c 	.word	0x2000030c
 8001888:	40001800 	.word	0x40001800

0800188c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <MX_TIM13_Init+0x8c>)
 80018a6:	4a1d      	ldr	r2, [pc, #116]	@ (800191c <MX_TIM13_Init+0x90>)
 80018a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 41;
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <MX_TIM13_Init+0x8c>)
 80018ac:	2229      	movs	r2, #41	@ 0x29
 80018ae:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <MX_TIM13_Init+0x8c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80018b6:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <MX_TIM13_Init+0x8c>)
 80018b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018bc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <MX_TIM13_Init+0x8c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <MX_TIM13_Init+0x8c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80018ca:	4813      	ldr	r0, [pc, #76]	@ (8001918 <MX_TIM13_Init+0x8c>)
 80018cc:	f005 fba0 	bl	8007010 <HAL_TIM_Base_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80018d6:	f000 fa0d 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 80018da:	480f      	ldr	r0, [pc, #60]	@ (8001918 <MX_TIM13_Init+0x8c>)
 80018dc:	f005 fc87 	bl	80071ee <HAL_TIM_OC_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80018e6:	f000 fa05 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_TIM13_Init+0x8c>)
 8001902:	f005 ff91 	bl	8007828 <HAL_TIM_OC_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800190c:	f000 f9f2 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000354 	.word	0x20000354
 800191c:	40001c00 	.word	0x40001c00

08001920 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <MX_UART4_Init+0x4c>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <MX_UART4_Init+0x50>)
 8001928:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <MX_UART4_Init+0x4c>)
 800192c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001930:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <MX_UART4_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <MX_UART4_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <MX_UART4_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <MX_UART4_Init+0x4c>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <MX_UART4_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_UART4_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_UART4_Init+0x4c>)
 8001958:	f006 fca0 	bl	800829c <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001962:	f000 f9c7 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000039c 	.word	0x2000039c
 8001970:	40004c00 	.word	0x40004c00

08001974 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_UART5_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <MX_UART5_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <MX_UART5_Init+0x4c>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_UART5_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_UART5_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <MX_UART5_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_UART5_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <MX_UART5_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <MX_UART5_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <MX_UART5_Init+0x4c>)
 80019ac:	f006 fc76 	bl	800829c <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80019b6:	f000 f99d 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200003e4 	.word	0x200003e4
 80019c4:	40005000 	.word	0x40005000

080019c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <MX_USART1_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_USART1_UART_Init+0x4c>)
 8001a00:	f006 fc4c 	bl	800829c <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f000 f973 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000042c 	.word	0x2000042c
 8001a18:	40011000 	.word	0x40011000

08001a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <MX_USART2_UART_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f006 fc22 	bl	800829c <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f949 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000474 	.word	0x20000474
 8001a6c:	40004400 	.word	0x40004400

08001a70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <MX_USART3_UART_Init+0x50>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_USART3_UART_Init+0x4c>)
 8001aa8:	f006 fbf8 	bl	800829c <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ab2:	f000 f91f 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200004bc 	.word	0x200004bc
 8001ac0:	40004800 	.word	0x40004800

08001ac4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_USART6_UART_Init+0x50>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001afc:	f006 fbce 	bl	800829c <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b06:	f000 f8f5 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000504 	.word	0x20000504
 8001b14:	40011400 	.word	0x40011400

08001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b62      	ldr	r3, [pc, #392]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a61      	ldr	r2, [pc, #388]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a5a      	ldr	r2, [pc, #360]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b58      	ldr	r3, [pc, #352]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	4b54      	ldr	r3, [pc, #336]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a53      	ldr	r2, [pc, #332]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b51      	ldr	r3, [pc, #324]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b4d      	ldr	r3, [pc, #308]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a4c      	ldr	r2, [pc, #304]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4b46      	ldr	r3, [pc, #280]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a45      	ldr	r2, [pc, #276]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b43      	ldr	r3, [pc, #268]	@ (8001cbc <MX_GPIO_Init+0x1a4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f640 311f 	movw	r1, #2847	@ 0xb1f
 8001bc0:	483f      	ldr	r0, [pc, #252]	@ (8001cc0 <MX_GPIO_Init+0x1a8>)
 8001bc2:	f003 ff43 	bl	8005a4c <HAL_GPIO_WritePin>
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001bcc:	483d      	ldr	r0, [pc, #244]	@ (8001cc4 <MX_GPIO_Init+0x1ac>)
 8001bce:	f003 ff3d 	bl	8005a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f247 0117 	movw	r1, #28695	@ 0x7017
 8001bd8:	483b      	ldr	r0, [pc, #236]	@ (8001cc8 <MX_GPIO_Init+0x1b0>)
 8001bda:	f003 ff37 	bl	8005a4c <HAL_GPIO_WritePin>
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4832      	ldr	r0, [pc, #200]	@ (8001cc0 <MX_GPIO_Init+0x1a8>)
 8001bf6:	f003 fd7d 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_yellow_Pin LED_green_Pin MOT_EN_3_Pin STEP_3_Pin
                           MOT_EN_5_Pin STEP_5_Pin DIR_5_Pin DIR_3_Pin */
  GPIO_InitStruct.Pin = LED_yellow_Pin|LED_green_Pin|MOT_EN_3_Pin|STEP_3_Pin
 8001bfa:	f640 331f 	movw	r3, #2847	@ 0xb1f
 8001bfe:	617b      	str	r3, [r7, #20]
                          |MOT_EN_5_Pin|STEP_5_Pin|DIR_5_Pin|DIR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	482b      	ldr	r0, [pc, #172]	@ (8001cc0 <MX_GPIO_Init+0x1a8>)
 8001c14:	f003 fd6e 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8001c18:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4825      	ldr	r0, [pc, #148]	@ (8001cc4 <MX_GPIO_Init+0x1ac>)
 8001c2e:	f003 fd61 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_EN_2_Pin STEP_2_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_EN_2_Pin|STEP_2_Pin|DIR_2_Pin;
 8001c32:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481e      	ldr	r0, [pc, #120]	@ (8001cc4 <MX_GPIO_Init+0x1ac>)
 8001c4c:	f003 fd52 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin MOT_EN_4_Pin STEP_4_Pin MOT_EN_1_Pin
                           STEP_1_Pin DIR_1_Pin DIR_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|MOT_EN_4_Pin|STEP_4_Pin|MOT_EN_1_Pin
 8001c50:	f247 0317 	movw	r3, #28695	@ 0x7017
 8001c54:	617b      	str	r3, [r7, #20]
                          |STEP_1_Pin|DIR_1_Pin|DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4817      	ldr	r0, [pc, #92]	@ (8001cc8 <MX_GPIO_Init+0x1b0>)
 8001c6a:	f003 fd43 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB5 DIAG_3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|DIAG_3_Pin;
 8001c6e:	f248 2320 	movw	r3, #33312	@ 0x8220
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4811      	ldr	r0, [pc, #68]	@ (8001cc8 <MX_GPIO_Init+0x1b0>)
 8001c84:	f003 fd36 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4808      	ldr	r0, [pc, #32]	@ (8001cc0 <MX_GPIO_Init+0x1a8>)
 8001c9e:	f003 fd29 	bl	80056f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2028      	movs	r0, #40	@ 0x28
 8001ca8:	f003 fc5b 	bl	8005562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cac:	2028      	movs	r0, #40	@ 0x28
 8001cae:	f003 fc74 	bl	800559a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	@ 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400

08001ccc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)  // Check if User Button
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cdc:	d102      	bne.n	8001ce4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start_flag = 1;
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <HAL_GPIO_EXTI_Callback+0x24>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
	}
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	20000560 	.word	0x20000560

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <Error_Handler+0x8>

08001d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d3e:	2007      	movs	r0, #7
 8001d40:	f003 fc04 	bl	800554c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <HAL_I2C_MspInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d12b      	bne.n	8001dca <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d8e:	23c0      	movs	r3, #192	@ 0xc0
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d92:	2312      	movs	r3, #18
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <HAL_I2C_MspInit+0x8c>)
 8001daa:	f003 fca3 	bl	80056f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a08      	ldr	r2, [pc, #32]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001db8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	3728      	adds	r7, #40	@ 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	@ 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a98      	ldr	r2, [pc, #608]	@ (8002050 <HAL_TIM_Base_MspInit+0x270>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d11e      	bne.n	8001e30 <HAL_TIM_Base_MspInit+0x50>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df6:	4b97      	ldr	r3, [pc, #604]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4a96      	ldr	r2, [pc, #600]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e02:	4b94      	ldr	r3, [pc, #592]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2018      	movs	r0, #24
 8001e14:	f003 fba5 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e18:	2018      	movs	r0, #24
 8001e1a:	f003 fbbe 	bl	800559a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2019      	movs	r0, #25
 8001e24:	f003 fb9d 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e28:	2019      	movs	r0, #25
 8001e2a:	f003 fbb6 	bl	800559a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001e2e:	e10a      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM3)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a88      	ldr	r2, [pc, #544]	@ (8002058 <HAL_TIM_Base_MspInit+0x278>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d116      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e3e:	4b85      	ldr	r3, [pc, #532]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4a84      	ldr	r2, [pc, #528]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4a:	4b82      	ldr	r3, [pc, #520]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	201d      	movs	r0, #29
 8001e5c:	f003 fb81 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e60:	201d      	movs	r0, #29
 8001e62:	f003 fb9a 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8001e66:	e0ee      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM4)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a7b      	ldr	r2, [pc, #492]	@ (800205c <HAL_TIM_Base_MspInit+0x27c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d116      	bne.n	8001ea0 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e76:	4b77      	ldr	r3, [pc, #476]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	4a76      	ldr	r2, [pc, #472]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e82:	4b74      	ldr	r3, [pc, #464]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	201e      	movs	r0, #30
 8001e94:	f003 fb65 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e98:	201e      	movs	r0, #30
 8001e9a:	f003 fb7e 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8001e9e:	e0d2      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM6)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	@ (8002060 <HAL_TIM_Base_MspInit+0x280>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d116      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	4b69      	ldr	r3, [pc, #420]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a68      	ldr	r2, [pc, #416]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001eb4:	f043 0310 	orr.w	r3, r3, #16
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eba:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2036      	movs	r0, #54	@ 0x36
 8001ecc:	f003 fb49 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ed0:	2036      	movs	r0, #54	@ 0x36
 8001ed2:	f003 fb62 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8001ed6:	e0b6      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM7)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a61      	ldr	r2, [pc, #388]	@ (8002064 <HAL_TIM_Base_MspInit+0x284>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d116      	bne.n	8001f10 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4a5a      	ldr	r2, [pc, #360]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001eec:	f043 0320 	orr.w	r3, r3, #32
 8001ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef2:	4b58      	ldr	r3, [pc, #352]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	2037      	movs	r0, #55	@ 0x37
 8001f04:	f003 fb2d 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f08:	2037      	movs	r0, #55	@ 0x37
 8001f0a:	f003 fb46 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8001f0e:	e09a      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM8)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a54      	ldr	r2, [pc, #336]	@ (8002068 <HAL_TIM_Base_MspInit+0x288>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d126      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	4a4c      	ldr	r2, [pc, #304]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	202b      	movs	r0, #43	@ 0x2b
 8001f3c:	f003 fb11 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001f40:	202b      	movs	r0, #43	@ 0x2b
 8001f42:	f003 fb2a 	bl	800559a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	202c      	movs	r0, #44	@ 0x2c
 8001f4c:	f003 fb09 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f50:	202c      	movs	r0, #44	@ 0x2c
 8001f52:	f003 fb22 	bl	800559a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	202e      	movs	r0, #46	@ 0x2e
 8001f5c:	f003 fb01 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001f60:	202e      	movs	r0, #46	@ 0x2e
 8001f62:	f003 fb1a 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8001f66:	e06e      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM9)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800206c <HAL_TIM_Base_MspInit+0x28c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d116      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	4b37      	ldr	r3, [pc, #220]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	4a36      	ldr	r2, [pc, #216]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f82:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	2018      	movs	r0, #24
 8001f94:	f003 fae5 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f98:	2018      	movs	r0, #24
 8001f9a:	f003 fafe 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8001f9e:	e052      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM10)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a32      	ldr	r2, [pc, #200]	@ (8002070 <HAL_TIM_Base_MspInit+0x290>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d116      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b29      	ldr	r3, [pc, #164]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	4a28      	ldr	r2, [pc, #160]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fba:	4b26      	ldr	r3, [pc, #152]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2019      	movs	r0, #25
 8001fcc:	f003 fac9 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fd0:	2019      	movs	r0, #25
 8001fd2:	f003 fae2 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8001fd6:	e036      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM12)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	@ (8002074 <HAL_TIM_Base_MspInit+0x294>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d116      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x230>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a1a      	ldr	r2, [pc, #104]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	202b      	movs	r0, #43	@ 0x2b
 8002004:	f003 faad 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002008:	202b      	movs	r0, #43	@ 0x2b
 800200a:	f003 fac6 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 800200e:	e01a      	b.n	8002046 <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM13)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <HAL_TIM_Base_MspInit+0x298>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d115      	bne.n	8002046 <HAL_TIM_Base_MspInit+0x266>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	4a0c      	ldr	r2, [pc, #48]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 8002024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002028:	6413      	str	r3, [r2, #64]	@ 0x40
 800202a:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <HAL_TIM_Base_MspInit+0x274>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	202c      	movs	r0, #44	@ 0x2c
 800203c:	f003 fa91 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002040:	202c      	movs	r0, #44	@ 0x2c
 8002042:	f003 faaa 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3730      	adds	r7, #48	@ 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40010000 	.word	0x40010000
 8002054:	40023800 	.word	0x40023800
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800
 8002060:	40001000 	.word	0x40001000
 8002064:	40001400 	.word	0x40001400
 8002068:	40010400 	.word	0x40010400
 800206c:	40014000 	.word	0x40014000
 8002070:	40014400 	.word	0x40014400
 8002074:	40001800 	.word	0x40001800
 8002078:	40001c00 	.word	0x40001c00

0800207c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b096      	sub	sp, #88	@ 0x58
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a9f      	ldr	r2, [pc, #636]	@ (8002318 <HAL_UART_MspInit+0x29c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12c      	bne.n	80020f8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80020a2:	4b9e      	ldr	r3, [pc, #632]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	4a9d      	ldr	r2, [pc, #628]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80020a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ae:	4b9b      	ldr	r3, [pc, #620]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80020b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020be:	4b97      	ldr	r3, [pc, #604]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a96      	ldr	r2, [pc, #600]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b94      	ldr	r3, [pc, #592]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020d6:	2303      	movs	r3, #3
 80020d8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020e6:	2308      	movs	r3, #8
 80020e8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020ee:	4619      	mov	r1, r3
 80020f0:	488b      	ldr	r0, [pc, #556]	@ (8002320 <HAL_UART_MspInit+0x2a4>)
 80020f2:	f003 faff 	bl	80056f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80020f6:	e154      	b.n	80023a2 <HAL_UART_MspInit+0x326>
  else if(huart->Instance==UART5)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a89      	ldr	r2, [pc, #548]	@ (8002324 <HAL_UART_MspInit+0x2a8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d14b      	bne.n	800219a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002106:	4b85      	ldr	r3, [pc, #532]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	4a84      	ldr	r2, [pc, #528]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 800210c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002110:	6413      	str	r3, [r2, #64]	@ 0x40
 8002112:	4b82      	ldr	r3, [pc, #520]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800211a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800211c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	@ 0x34
 8002122:	4b7e      	ldr	r3, [pc, #504]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a7d      	ldr	r2, [pc, #500]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b7b      	ldr	r3, [pc, #492]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
 8002138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
 800213e:	4b77      	ldr	r3, [pc, #476]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a76      	ldr	r2, [pc, #472]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b74      	ldr	r3, [pc, #464]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	633b      	str	r3, [r7, #48]	@ 0x30
 8002154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002156:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800215a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002168:	2308      	movs	r3, #8
 800216a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002170:	4619      	mov	r1, r3
 8002172:	486d      	ldr	r0, [pc, #436]	@ (8002328 <HAL_UART_MspInit+0x2ac>)
 8002174:	f003 fabe 	bl	80056f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002178:	2304      	movs	r3, #4
 800217a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002188:	2308      	movs	r3, #8
 800218a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002190:	4619      	mov	r1, r3
 8002192:	4866      	ldr	r0, [pc, #408]	@ (800232c <HAL_UART_MspInit+0x2b0>)
 8002194:	f003 faae 	bl	80056f4 <HAL_GPIO_Init>
}
 8002198:	e103      	b.n	80023a2 <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a64      	ldr	r2, [pc, #400]	@ (8002330 <HAL_UART_MspInit+0x2b4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d12d      	bne.n	8002200 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021a8:	4b5c      	ldr	r3, [pc, #368]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	4a5b      	ldr	r2, [pc, #364]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b4:	4b59      	ldr	r3, [pc, #356]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c4:	4b55      	ldr	r3, [pc, #340]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	4a54      	ldr	r2, [pc, #336]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d0:	4b52      	ldr	r3, [pc, #328]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021e0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021ee:	2307      	movs	r3, #7
 80021f0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80021f6:	4619      	mov	r1, r3
 80021f8:	4849      	ldr	r0, [pc, #292]	@ (8002320 <HAL_UART_MspInit+0x2a4>)
 80021fa:	f003 fa7b 	bl	80056f4 <HAL_GPIO_Init>
}
 80021fe:	e0d0      	b.n	80023a2 <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a4b      	ldr	r2, [pc, #300]	@ (8002334 <HAL_UART_MspInit+0x2b8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d134      	bne.n	8002274 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
 800220e:	4b43      	ldr	r3, [pc, #268]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	4a42      	ldr	r2, [pc, #264]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002218:	6413      	str	r3, [r2, #64]	@ 0x40
 800221a:	4b40      	ldr	r3, [pc, #256]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	4b3c      	ldr	r3, [pc, #240]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a3b      	ldr	r2, [pc, #236]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b39      	ldr	r3, [pc, #228]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002242:	230c      	movs	r3, #12
 8002244:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002252:	2307      	movs	r3, #7
 8002254:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800225a:	4619      	mov	r1, r3
 800225c:	4830      	ldr	r0, [pc, #192]	@ (8002320 <HAL_UART_MspInit+0x2a4>)
 800225e:	f003 fa49 	bl	80056f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	2026      	movs	r0, #38	@ 0x26
 8002268:	f003 f97b 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800226c:	2026      	movs	r0, #38	@ 0x26
 800226e:	f003 f994 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8002272:	e096      	b.n	80023a2 <HAL_UART_MspInit+0x326>
  else if(huart->Instance==USART3)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2f      	ldr	r2, [pc, #188]	@ (8002338 <HAL_UART_MspInit+0x2bc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d160      	bne.n	8002340 <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	4b26      	ldr	r3, [pc, #152]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	4a25      	ldr	r2, [pc, #148]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
 800228e:	4b23      	ldr	r3, [pc, #140]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	4b18      	ldr	r3, [pc, #96]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <HAL_UART_MspInit+0x2a0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022d2:	2320      	movs	r3, #32
 80022d4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022e2:	2307      	movs	r3, #7
 80022e4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80022ea:	4619      	mov	r1, r3
 80022ec:	480e      	ldr	r0, [pc, #56]	@ (8002328 <HAL_UART_MspInit+0x2ac>)
 80022ee:	f003 fa01 	bl	80056f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002304:	2307      	movs	r3, #7
 8002306:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800230c:	4619      	mov	r1, r3
 800230e:	480b      	ldr	r0, [pc, #44]	@ (800233c <HAL_UART_MspInit+0x2c0>)
 8002310:	f003 f9f0 	bl	80056f4 <HAL_GPIO_Init>
}
 8002314:	e045      	b.n	80023a2 <HAL_UART_MspInit+0x326>
 8002316:	bf00      	nop
 8002318:	40004c00 	.word	0x40004c00
 800231c:	40023800 	.word	0x40023800
 8002320:	40020000 	.word	0x40020000
 8002324:	40005000 	.word	0x40005000
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40011000 	.word	0x40011000
 8002334:	40004400 	.word	0x40004400
 8002338:	40004800 	.word	0x40004800
 800233c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <HAL_UART_MspInit+0x330>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d12b      	bne.n	80023a2 <HAL_UART_MspInit+0x326>
    __HAL_RCC_USART6_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <HAL_UART_MspInit+0x334>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	4a17      	ldr	r2, [pc, #92]	@ (80023b0 <HAL_UART_MspInit+0x334>)
 8002354:	f043 0320 	orr.w	r3, r3, #32
 8002358:	6453      	str	r3, [r2, #68]	@ 0x44
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_UART_MspInit+0x334>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_UART_MspInit+0x334>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a10      	ldr	r2, [pc, #64]	@ (80023b0 <HAL_UART_MspInit+0x334>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <HAL_UART_MspInit+0x334>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002382:	23c0      	movs	r3, #192	@ 0xc0
 8002384:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002392:	2308      	movs	r3, #8
 8002394:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002396:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800239a:	4619      	mov	r1, r3
 800239c:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <HAL_UART_MspInit+0x338>)
 800239e:	f003 f9a9 	bl	80056f4 <HAL_GPIO_Init>
}
 80023a2:	bf00      	nop
 80023a4:	3758      	adds	r7, #88	@ 0x58
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40011400 	.word	0x40011400
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020800 	.word	0x40020800

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <NMI_Handler+0x4>

080023c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <MemManage_Handler+0x4>

080023d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <UsageFault_Handler+0x4>

080023e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240e:	f002 ff89 	bl	8005324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4803      	ldr	r0, [pc, #12]	@ (800242c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800241e:	f005 f913 	bl	8007648 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002422:	4803      	ldr	r0, [pc, #12]	@ (8002430 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002424:	f005 f910 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200000cc 	.word	0x200000cc
 8002430:	2000027c 	.word	0x2000027c

08002434 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002438:	4803      	ldr	r0, [pc, #12]	@ (8002448 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800243a:	f005 f905 	bl	8007648 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800243e:	4803      	ldr	r0, [pc, #12]	@ (800244c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002440:	f005 f902 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200000cc 	.word	0x200000cc
 800244c:	200002c4 	.word	0x200002c4

08002450 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <TIM3_IRQHandler+0x10>)
 8002456:	f005 f8f7 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000114 	.word	0x20000114

08002464 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <TIM4_IRQHandler+0x10>)
 800246a:	f005 f8ed 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000015c 	.word	0x2000015c

08002478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <USART2_IRQHandler+0x10>)
 800247e:	f006 f87f 	bl	8008580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000474 	.word	0x20000474

0800248c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002490:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002494:	f003 fb0e 	bl	8005ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024a0:	4803      	ldr	r0, [pc, #12]	@ (80024b0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80024a2:	f005 f8d1 	bl	8007648 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80024a6:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80024a8:	f005 f8ce 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000234 	.word	0x20000234
 80024b4:	2000030c 	.word	0x2000030c

080024b8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024bc:	4803      	ldr	r0, [pc, #12]	@ (80024cc <TIM8_UP_TIM13_IRQHandler+0x14>)
 80024be:	f005 f8c3 	bl	8007648 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80024c2:	4803      	ldr	r0, [pc, #12]	@ (80024d0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80024c4:	f005 f8c0 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000234 	.word	0x20000234
 80024d0:	20000354 	.word	0x20000354

080024d4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024d8:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <TIM8_CC_IRQHandler+0x10>)
 80024da:	f005 f8b5 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000234 	.word	0x20000234

080024e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024ec:	4802      	ldr	r0, [pc, #8]	@ (80024f8 <TIM6_DAC_IRQHandler+0x10>)
 80024ee:	f005 f8ab 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200001a4 	.word	0x200001a4

080024fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <TIM7_IRQHandler+0x10>)
 8002502:	f005 f8a1 	bl	8007648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200001ec 	.word	0x200001ec

08002510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002518:	4a14      	ldr	r2, [pc, #80]	@ (800256c <_sbrk+0x5c>)
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <_sbrk+0x60>)
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002524:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <_sbrk+0x64>)
 800252e:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <_sbrk+0x68>)
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d207      	bcs.n	8002550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002540:	f008 fe1c 	bl	800b17c <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	220c      	movs	r2, #12
 8002548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	e009      	b.n	8002564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002550:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002556:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <_sbrk+0x64>)
 8002560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20020000 	.word	0x20020000
 8002570:	00000400 	.word	0x00000400
 8002574:	20000564 	.word	0x20000564
 8002578:	20000ac0 	.word	0x20000ac0

0800257c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <SystemInit+0x20>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <SystemInit+0x20>)
 8002588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800258c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <tmc2209_setup>:
#include "tmc2209.h"


void tmc2209_setup(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	4613      	mov	r3, r2
 80025ac:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_  = serial_baud_rate;
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]
  stepper_driver->serial_address_    = serial_address;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	79fa      	ldrb	r2, [r7, #7]
 80025b8:	711a      	strb	r2, [r3, #4]
  stepper_driver->cool_step_enabled_ = false;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

  tmc2209_initialize(stepper_driver, serial_baud_rate, serial_address);
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f975 	bl	80028b8 <tmc2209_initialize>
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <map>:

// unidirectional methods

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	69b9      	ldr	r1, [r7, #24]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	1a8a      	subs	r2, r1, r2
 80025f0:	fb03 f202 	mul.w	r2, r3, r2
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1acb      	subs	r3, r1, r3
 80025fa:	fb92 f2f3 	sdiv	r2, r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	4413      	add	r3, r2
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <constrain>:

long constrain(long x, long a, long b)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  if (x < a)
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	da01      	bge.n	8002626 <constrain+0x18>
  {
    return a;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	e006      	b.n	8002634 <constrain+0x26>
  }
  else if (b < x)
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	429a      	cmp	r2, r3
 800262c:	da01      	bge.n	8002632 <constrain+0x24>
  {
    return b;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	e000      	b.n	8002634 <constrain+0x26>
  }
  else
  {
    return x;
 8002632:	68fb      	ldr	r3, [r7, #12]
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <set_micro_steps_per_step>:

void set_micro_steps_per_step(tmc2209_stepper_driver_t *stepper_driver, uint16_t microsteps_per_step)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
  uint16_t microsteps_per_step_shifted = constrain(microsteps_per_step, MICROSTEPS_PER_STEP_MIN, MICROSTEPS_PER_STEP_MAX);
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ffda 	bl	800260e <constrain>
 800265a:	4603      	mov	r3, r0
 800265c:	81fb      	strh	r3, [r7, #14]
  microsteps_per_step_shifted          = microsteps_per_step >> 1;
 800265e:	887b      	ldrh	r3, [r7, #2]
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	81fb      	strh	r3, [r7, #14]
  uint16_t exponent                    = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8002668:	e005      	b.n	8002676 <set_micro_steps_per_step+0x36>
  {
    microsteps_per_step_shifted = microsteps_per_step_shifted >> 1;
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	81fb      	strh	r3, [r7, #14]
    ++exponent;
 8002670:	89bb      	ldrh	r3, [r7, #12]
 8002672:	3301      	adds	r3, #1
 8002674:	81bb      	strh	r3, [r7, #12]
  while (microsteps_per_step_shifted > 0)
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f6      	bne.n	800266a <set_micro_steps_per_step+0x2a>
  }
  set_micro_steps_per_step_power_of_two(stepper_driver, exponent);
 800267c:	89bb      	ldrh	r3, [r7, #12]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f804 	bl	8002690 <set_micro_steps_per_step_power_of_two>
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <set_micro_steps_per_step_power_of_two>:

void set_micro_steps_per_step_power_of_two(tmc2209_stepper_driver_t *stepper_driver, uint8_t exponent)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
  switch (exponent)
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	2b07      	cmp	r3, #7
 80026a0:	d85a      	bhi.n	8002758 <set_micro_steps_per_step_power_of_two+0xc8>
 80026a2:	a201      	add	r2, pc, #4	@ (adr r2, 80026a8 <set_micro_steps_per_step_power_of_two+0x18>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026c9 	.word	0x080026c9
 80026ac:	080026db 	.word	0x080026db
 80026b0:	080026ed 	.word	0x080026ed
 80026b4:	080026ff 	.word	0x080026ff
 80026b8:	08002711 	.word	0x08002711
 80026bc:	08002723 	.word	0x08002723
 80026c0:	08002735 	.word	0x08002735
 80026c4:	08002747 	.word	0x08002747
  {
    case 0: {
      stepper_driver->chopper_config_.mres = MRES_001;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80026ce:	2108      	movs	r1, #8
 80026d0:	f361 0303 	bfi	r3, r1, #0, #4
 80026d4:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80026d8:	e046      	b.n	8002768 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 1: {
      stepper_driver->chopper_config_.mres = MRES_002;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80026e0:	2107      	movs	r1, #7
 80026e2:	f361 0303 	bfi	r3, r1, #0, #4
 80026e6:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80026ea:	e03d      	b.n	8002768 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 2: {
      stepper_driver->chopper_config_.mres = MRES_004;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 80026f2:	2106      	movs	r1, #6
 80026f4:	f361 0303 	bfi	r3, r1, #0, #4
 80026f8:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 80026fc:	e034      	b.n	8002768 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 3: {
      stepper_driver->chopper_config_.mres = MRES_008;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002704:	2105      	movs	r1, #5
 8002706:	f361 0303 	bfi	r3, r1, #0, #4
 800270a:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 800270e:	e02b      	b.n	8002768 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 4: {
      stepper_driver->chopper_config_.mres = MRES_016;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002716:	2104      	movs	r1, #4
 8002718:	f361 0303 	bfi	r3, r1, #0, #4
 800271c:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002720:	e022      	b.n	8002768 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 5: {
      stepper_driver->chopper_config_.mres = MRES_032;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 8002728:	2103      	movs	r1, #3
 800272a:	f361 0303 	bfi	r3, r1, #0, #4
 800272e:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002732:	e019      	b.n	8002768 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 6: {
      stepper_driver->chopper_config_.mres = MRES_064;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800273a:	2102      	movs	r1, #2
 800273c:	f361 0303 	bfi	r3, r1, #0, #4
 8002740:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002744:	e010      	b.n	8002768 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 7: {
      stepper_driver->chopper_config_.mres = MRES_128;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800274c:	2101      	movs	r1, #1
 800274e:	f361 0303 	bfi	r3, r1, #0, #4
 8002752:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002756:	e007      	b.n	8002768 <set_micro_steps_per_step_power_of_two+0xd8>
    }
    case 8:
    default: {
      stepper_driver->chopper_config_.mres = MRES_256;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	f892 305b 	ldrb.w	r3, [r2, #91]	@ 0x5b
 800275e:	f023 030f 	bic.w	r3, r3, #15
 8002762:	f882 305b 	strb.w	r3, [r2, #91]	@ 0x5b
      break;
 8002766:	bf00      	nop
    }
  }
  write_stored_chopper_config(stepper_driver);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 faf8 	bl	8002d5e <write_stored_chopper_config>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop

08002778 <set_all_current_percent_values>:

void set_all_current_percent_values(tmc2209_stepper_driver_t *stepper_driver,
                                    uint8_t                   run_current_percent,
                                    uint8_t                   hold_current_percent,
                                    uint8_t                   hold_delay_percent)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	70fb      	strb	r3, [r7, #3]
 800278a:	460b      	mov	r3, r1
 800278c:	70bb      	strb	r3, [r7, #2]
 800278e:	4613      	mov	r3, r2
 8002790:	707b      	strb	r3, [r7, #1]
  uint8_t run_current  = percent_to_current_settings(stepper_driver, run_current_percent);
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa66 	bl	8002c68 <percent_to_current_settings>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_current = percent_to_current_settings(stepper_driver, hold_current_percent);
 80027a0:	78bb      	ldrb	r3, [r7, #2]
 80027a2:	4619      	mov	r1, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fa5f 	bl	8002c68 <percent_to_current_settings>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73bb      	strb	r3, [r7, #14]
  uint8_t hold_delay   = percent_to_hold_delay_setting(stepper_driver, hold_delay_percent);
 80027ae:	787b      	ldrb	r3, [r7, #1]
 80027b0:	4619      	mov	r1, r3
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa75 	bl	8002ca2 <percent_to_hold_delay_setting>
 80027b8:	4603      	mov	r3, r0
 80027ba:	737b      	strb	r3, [r7, #13]

  stepper_driver->driver_current_.irun       = run_current;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	b2d9      	uxtb	r1, r3
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80027ca:	f361 0304 	bfi	r3, r1, #0, #5
 80027ce:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold      = hold_current;
 80027d2:	7bbb      	ldrb	r3, [r7, #14]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	b2d9      	uxtb	r1, r3
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80027e0:	f361 0304 	bfi	r3, r1, #0, #5
 80027e4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.iholddelay = hold_delay;
 80027e8:	7b7b      	ldrb	r3, [r7, #13]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	b2d9      	uxtb	r1, r3
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80027f6:	f361 0303 	bfi	r3, r1, #0, #4
 80027fa:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  write_stored_driver_current(stepper_driver);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa7b 	bl	8002cfa <write_stored_driver_current>
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <enable_inverse_motor_direction>:

void enable_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 1;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800281a:	f043 0308 	orr.w	r3, r3, #8
 800281e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa5a 	bl	8002cdc <write_stored_global_config>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <disable_inverse_motor_direction>:

void disable_inverse_motor_direction(tmc2209_stepper_driver_t *stepper_driver)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  stepper_driver->global_config_.shaft = 0;
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800283e:	f023 0308 	bic.w	r3, r3, #8
 8002842:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  write_stored_global_config(stepper_driver);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa48 	bl	8002cdc <write_stored_global_config>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <enable_automatic_current_scaling>:
  stepper_driver->pwm_config_.freewheel = mode;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_current_scaling(tmc2209_stepper_driver_t *stepper_driver)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa86 	bl	8002d7c <write_stored_pwm_config>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <enable_automatic_gradient_adaptation>:
  stepper_driver->pwm_config_.pwm_freq = pwm_freq;
  write_stored_pwm_config(stepper_driver);
}

void enable_automatic_gradient_adaptation(tmc2209_stepper_driver_t *stepper_driver)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  stepper_driver->pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	f892 305e 	ldrb.w	r3, [r2, #94]	@ 0x5e
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	f882 305e 	strb.w	r3, [r2, #94]	@ 0x5e
  write_stored_pwm_config(stepper_driver);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa74 	bl	8002d7c <write_stored_pwm_config>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <get_stall_guard_result>:
{
  return tmc2209_read(stepper_driver, ADDRESS_TSTEP);
}

uint16_t get_stall_guard_result(tmc2209_stepper_driver_t *stepper_driver)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return tmc2209_read(stepper_driver, ADDRESS_SG_RESULT);
 80028a4:	2141      	movs	r1, #65	@ 0x41
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fb26 	bl	8002ef8 <tmc2209_read>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b29b      	uxth	r3, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <tmc2209_initialize>:
{
  return tmc2209_read(stepper_driver, ADDRESS_MSCNT);
}

void tmc2209_initialize(tmc2209_stepper_driver_t *stepper_driver, long serial_baud_rate, tmc2209_serial_address_t serial_address)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	4613      	mov	r3, r2
 80028c4:	71fb      	strb	r3, [r7, #7]
  stepper_driver->serial_baud_rate_ = serial_baud_rate;
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	601a      	str	r2, [r3, #0]

  set_operation_mode_to_serial(stepper_driver, serial_address);
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	4619      	mov	r1, r3
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f813 	bl	80028fc <set_operation_mode_to_serial>
  set_registers_to_default(stepper_driver);
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f840 	bl	800295c <set_registers_to_default>

  minimize_motor_current(stepper_driver);
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f8c3 	bl	8002a68 <minimize_motor_current>
  tmc2209_disable(stepper_driver);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa8f 	bl	8002e06 <tmc2209_disable>
  enable_automatic_current_scaling(stepper_driver);
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7ff ffb3 	bl	8002854 <enable_automatic_current_scaling>
  enable_automatic_gradient_adaptation(stepper_driver);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff ffc2 	bl	8002878 <enable_automatic_gradient_adaptation>
//  disable_automatic_current_scaling(stepper_driver);
//  disable_automatic_gradient_adaptation(stepper_driver);
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <set_operation_mode_to_serial>:

void set_operation_mode_to_serial(tmc2209_stepper_driver_t *stepper_driver, tmc2209_serial_address_t serial_address)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  stepper_driver->serial_address_ = serial_address;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	711a      	strb	r2, [r3, #4]

  stepper_driver->global_config_.bytes            = 0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	66da      	str	r2, [r3, #108]	@ 0x6c
  stepper_driver->global_config_.i_scale_analog   = 1;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.pdn_disable      = 1;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800292c:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.mstep_reg_select = 1;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 8002936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800293a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
  stepper_driver->global_config_.multistep_filt   = 1;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

  write_stored_global_config(stepper_driver);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f9c5 	bl	8002cdc <write_stored_global_config>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <set_registers_to_default>:

void set_registers_to_default(tmc2209_stepper_driver_t *stepper_driver)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.bytes      = 0;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	669a      	str	r2, [r3, #104]	@ 0x68
  stepper_driver->driver_current_.ihold      = IHOLD_DEFAULT;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002970:	2110      	movs	r1, #16
 8002972:	f361 0304 	bfi	r3, r1, #0, #5
 8002976:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  stepper_driver->driver_current_.irun       = IRUN_DEFAULT;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002980:	f043 031f 	orr.w	r3, r3, #31
 8002984:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800298e:	2101      	movs	r1, #1
 8002990:	f361 0303 	bfi	r3, r1, #0, #4
 8002994:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800299c:	461a      	mov	r2, r3
 800299e:	2110      	movs	r1, #16
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa4a 	bl	8002e3a <tmc2209_write>

  stepper_driver->chopper_config_.bytes  = CHOPPER_CONFIG_DEFAULT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002a60 <set_registers_to_default+0x104>)
 80029aa:	659a      	str	r2, [r3, #88]	@ 0x58
  stepper_driver->chopper_config_.tbl    = TBL_DEFAULT;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80029b0:	2102      	movs	r1, #2
 80029b2:	f361 33d0 	bfi	r3, r1, #15, #2
 80029b6:	6593      	str	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hend   = HEND_DEFAULT;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 80029be:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
 80029c2:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.hstart = HSTART_DEFAULT;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80029cc:	2105      	movs	r1, #5
 80029ce:	f361 1306 	bfi	r3, r1, #4, #3
 80029d2:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  stepper_driver->chopper_config_.toff   = TOFF_DEFAULT;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80029dc:	2103      	movs	r1, #3
 80029de:	f361 0303 	bfi	r3, r1, #0, #4
 80029e2:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	461a      	mov	r2, r3
 80029ec:	216c      	movs	r1, #108	@ 0x6c
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa23 	bl	8002e3a <tmc2209_write>

  stepper_driver->pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <set_registers_to_default+0x108>)
 80029f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	461a      	mov	r2, r3
 8002a00:	2170      	movs	r1, #112	@ 0x70
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa19 	bl	8002e3a <tmc2209_write>

  stepper_driver->cool_config_.bytes = COOLCONF_DEFAULT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	661a      	str	r2, [r3, #96]	@ 0x60
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	461a      	mov	r2, r3
 8002a14:	2142      	movs	r1, #66	@ 0x42
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa0f 	bl	8002e3a <tmc2209_write>

  tmc2209_write(stepper_driver, ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002a1c:	2214      	movs	r2, #20
 8002a1e:	2111      	movs	r1, #17
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fa0a 	bl	8002e3a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2113      	movs	r1, #19
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fa05 	bl	8002e3a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2122      	movs	r1, #34	@ 0x22
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa00 	bl	8002e3a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2114      	movs	r1, #20
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f9fb 	bl	8002e3a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2140      	movs	r1, #64	@ 0x40
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f9f6 	bl	8002e3a <tmc2209_write>
  tmc2209_write(stepper_driver, ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2142      	movs	r1, #66	@ 0x42
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f9f1 	bl	8002e3a <tmc2209_write>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	10000053 	.word	0x10000053
 8002a64:	c10d0024 	.word	0xc10d0024

08002a68 <minimize_motor_current>:

  return global_config.pdn_disable;
}

void minimize_motor_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  stepper_driver->driver_current_.irun  = CURRENT_SETTING_MIN;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002a76:	f023 031f 	bic.w	r3, r3, #31
 8002a7a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
  stepper_driver->driver_current_.ihold = CURRENT_SETTING_MIN;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8002a84:	f023 031f 	bic.w	r3, r3, #31
 8002a88:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
  write_stored_driver_current(stepper_driver);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f934 	bl	8002cfa <write_stored_driver_current>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <reverse_data>:

uint32_t reverse_data(uint32_t data)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  uint32_t reversed_data = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
  uint8_t  right_shift;
  uint8_t  left_shift;
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	72fb      	strb	r3, [r7, #11]
 8002aaa:	e016      	b.n	8002ada <reverse_data+0x40>
  {
    right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	f1c3 0303 	rsb	r3, r3, #3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	72bb      	strb	r3, [r7, #10]
    left_shift  = i * BITS_PER_BYTE;
 8002ab8:	7afb      	ldrb	r3, [r7, #11]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	727b      	strb	r3, [r7, #9]
    reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8002abe:	7abb      	ldrb	r3, [r7, #10]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	7a7b      	ldrb	r3, [r7, #9]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < DATA_SIZE; ++i)
 8002ad4:	7afb      	ldrb	r3, [r7, #11]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	72fb      	strb	r3, [r7, #11]
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d9e5      	bls.n	8002aac <reverse_data+0x12>
  }
  return reversed_data;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <calculate_crc_write>:

uint8_t calculate_crc_write(write_read_reply_datagram_t *datagram, uint8_t datagram_size)
{
 8002aee:	b4f0      	push	{r4, r5, r6, r7}
 8002af0:	b088      	sub	sp, #32
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	70f9      	strb	r1, [r7, #3]
  uint8_t crc = 0;
 8002af8:	2100      	movs	r1, #0
 8002afa:	77f9      	strb	r1, [r7, #31]
  uint8_t byte;
  uint8_t datagram_bytes[7];
  for (int i = 0; i < datagram_size - 1; i++)
 8002afc:	2100      	movs	r1, #0
 8002afe:	61b9      	str	r1, [r7, #24]
 8002b00:	e01c      	b.n	8002b3c <calculate_crc_write+0x4e>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b08:	69bc      	ldr	r4, [r7, #24]
 8002b0a:	00e4      	lsls	r4, r4, #3
 8002b0c:	f1c4 0620 	rsb	r6, r4, #32
 8002b10:	f1a4 0520 	sub.w	r5, r4, #32
 8002b14:	fa20 f204 	lsr.w	r2, r0, r4
 8002b18:	fa01 f606 	lsl.w	r6, r1, r6
 8002b1c:	4332      	orrs	r2, r6
 8002b1e:	fa21 f505 	lsr.w	r5, r1, r5
 8002b22:	432a      	orrs	r2, r5
 8002b24:	fa21 f304 	lsr.w	r3, r1, r4
 8002b28:	b2d4      	uxtb	r4, r2
 8002b2a:	f107 000c 	add.w	r0, r7, #12
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	4401      	add	r1, r0
 8002b32:	4620      	mov	r0, r4
 8002b34:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < datagram_size - 1; i++)
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	3101      	adds	r1, #1
 8002b3a:	61b9      	str	r1, [r7, #24]
 8002b3c:	78f9      	ldrb	r1, [r7, #3]
 8002b3e:	3901      	subs	r1, #1
 8002b40:	69b8      	ldr	r0, [r7, #24]
 8002b42:	4288      	cmp	r0, r1
 8002b44:	dbdd      	blt.n	8002b02 <calculate_crc_write+0x14>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
 8002b4a:	e029      	b.n	8002ba0 <calculate_crc_write+0xb2>
  {
    byte = datagram_bytes[i];
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	3320      	adds	r3, #32
 8002b50:	443b      	add	r3, r7
 8002b52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002b56:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75bb      	strb	r3, [r7, #22]
 8002b5c:	e01a      	b.n	8002b94 <calculate_crc_write+0xa6>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002b5e:	7ffb      	ldrb	r3, [r7, #31]
 8002b60:	09db      	lsrs	r3, r3, #7
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	7fbb      	ldrb	r3, [r7, #30]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d008      	beq.n	8002b82 <calculate_crc_write+0x94>
      {
        crc = (crc << 1) ^ 0x07;
 8002b70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	f083 0307 	eor.w	r3, r3, #7
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e002      	b.n	8002b88 <calculate_crc_write+0x9a>
      }
      else
      {
        crc = crc << 1;
 8002b82:	7ffb      	ldrb	r3, [r7, #31]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	77fb      	strb	r3, [r7, #31]
      }
      byte = byte >> 1;
 8002b88:	7fbb      	ldrb	r3, [r7, #30]
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	77bb      	strb	r3, [r7, #30]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002b8e:	7dbb      	ldrb	r3, [r7, #22]
 8002b90:	3301      	adds	r3, #1
 8002b92:	75bb      	strb	r3, [r7, #22]
 8002b94:	7dbb      	ldrb	r3, [r7, #22]
 8002b96:	2b07      	cmp	r3, #7
 8002b98:	d9e1      	bls.n	8002b5e <calculate_crc_write+0x70>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	75fb      	strb	r3, [r7, #23]
 8002ba0:	7dfa      	ldrb	r2, [r7, #23]
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	dbd0      	blt.n	8002b4c <calculate_crc_write+0x5e>
    }
  }
  return crc;
 8002baa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8002bb4:	4770      	bx	lr

08002bb6 <calculate_crc_read>:

uint8_t calculate_crc_read(read_request_datagram_t *datagram, uint8_t datagram_size)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b087      	sub	sp, #28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
  uint8_t byte;
  uint8_t datagram_bytes[4];
  for (int i = 0; i < (datagram_size - 1); i++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	e00f      	b.n	8002bec <calculate_crc_read+0x36>
  {
    datagram_bytes[i] = (datagram->bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	b2d9      	uxtb	r1, r3
 8002bda:	f107 0208 	add.w	r2, r7, #8
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	460a      	mov	r2, r1
 8002be4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < (datagram_size - 1); i++)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3301      	adds	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	dbea      	blt.n	8002bcc <calculate_crc_read+0x16>
  }
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e029      	b.n	8002c50 <calculate_crc_read+0x9a>
  {
    byte = datagram_bytes[i];
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	3318      	adds	r3, #24
 8002c00:	443b      	add	r3, r7
 8002c02:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c06:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73bb      	strb	r3, [r7, #14]
 8002c0c:	e01a      	b.n	8002c44 <calculate_crc_read+0x8e>
    {
      if ((crc >> 7) ^ (byte & 0x01))
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	09db      	lsrs	r3, r3, #7
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	7dbb      	ldrb	r3, [r7, #22]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d008      	beq.n	8002c32 <calculate_crc_read+0x7c>
      {
        crc = (crc << 1) ^ 0x07;
 8002c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	f083 0307 	eor.w	r3, r3, #7
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	75fb      	strb	r3, [r7, #23]
 8002c30:	e002      	b.n	8002c38 <calculate_crc_read+0x82>
      }
      else
      {
        crc = crc << 1;
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	75fb      	strb	r3, [r7, #23]
      }
      byte = byte >> 1;
 8002c38:	7dbb      	ldrb	r3, [r7, #22]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	75bb      	strb	r3, [r7, #22]
    for (uint8_t j = 0; j < BITS_PER_BYTE; ++j)
 8002c3e:	7bbb      	ldrb	r3, [r7, #14]
 8002c40:	3301      	adds	r3, #1
 8002c42:	73bb      	strb	r3, [r7, #14]
 8002c44:	7bbb      	ldrb	r3, [r7, #14]
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	d9e1      	bls.n	8002c0e <calculate_crc_read+0x58>
  for (uint8_t i = 0; i < (datagram_size - 1); ++i)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	429a      	cmp	r2, r3
 8002c58:	dbd0      	blt.n	8002bfc <calculate_crc_read+0x46>
    }
  }
  return crc;
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <percent_to_current_settings>:

uint8_t percent_to_current_settings(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	2264      	movs	r2, #100	@ 0x64
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fcc7 	bl	800260e <constrain>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint8_t current_setting     = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
 8002c84:	7bf8      	ldrb	r0, [r7, #15]
 8002c86:	231f      	movs	r3, #31
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2264      	movs	r2, #100	@ 0x64
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f7ff fca1 	bl	80025d6 <map>
 8002c94:	4603      	mov	r3, r0
 8002c96:	73bb      	strb	r3, [r7, #14]
  return current_setting;
 8002c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <percent_to_hold_delay_setting>:
  uint8_t percent = map(current_setting, CURRENT_SETTING_MIN, CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

uint8_t percent_to_hold_delay_setting(tmc2209_stepper_driver_t *stepper_driver, uint8_t percent)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70fb      	strb	r3, [r7, #3]
  uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	2264      	movs	r2, #100	@ 0x64
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fcaa 	bl	800260e <constrain>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  uint8_t hold_delay_setting  = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
 8002cbe:	7bf8      	ldrb	r0, [r7, #15]
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2264      	movs	r2, #100	@ 0x64
 8002cc8:	2100      	movs	r1, #0
 8002cca:	f7ff fc84 	bl	80025d6 <map>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	73bb      	strb	r3, [r7, #14]
  return hold_delay_setting;
 8002cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <write_stored_global_config>:
  uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
  return percent;
}

void write_stored_global_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_GCONF, stepper_driver->global_config_.bytes);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2100      	movs	r1, #0
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8a4 	bl	8002e3a <tmc2209_write>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <write_stored_driver_current>:
{
  return tmc2209_read(stepper_driver, ADDRESS_GCONF);
}

void write_stored_driver_current(tmc2209_stepper_driver_t *stepper_driver)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_IHOLD_IRUN, stepper_driver->driver_current_.bytes);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d06:	461a      	mov	r2, r3
 8002d08:	2110      	movs	r1, #16
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f895 	bl	8002e3a <tmc2209_write>

  if (stepper_driver->driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8002d16:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b13      	cmp	r3, #19
 8002d1e:	d907      	bls.n	8002d30 <write_stored_driver_current+0x36>
  {
    stepper_driver->cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d2a:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
 8002d2e:	e006      	b.n	8002d3e <write_stored_driver_current+0x44>
  }
  else
  {
    stepper_driver->cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	f892 3061 	ldrb.w	r3, [r2, #97]	@ 0x61
 8002d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d3a:	f882 3061 	strb.w	r3, [r2, #97]	@ 0x61
  }
  if (stepper_driver->cool_step_enabled_)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <write_stored_driver_current+0x5c>
  {
    tmc2209_write(stepper_driver, ADDRESS_COOLCONF, stepper_driver->cool_config_.bytes);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2142      	movs	r1, #66	@ 0x42
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f872 	bl	8002e3a <tmc2209_write>
  }
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <write_stored_chopper_config>:

void write_stored_chopper_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_CHOPCONF, stepper_driver->chopper_config_.bytes);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	216c      	movs	r1, #108	@ 0x6c
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f863 	bl	8002e3a <tmc2209_write>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <write_stored_pwm_config>:
{
  return tmc2209_read(stepper_driver, ADDRESS_CHOPCONF);
}

void write_stored_pwm_config(tmc2209_stepper_driver_t *stepper_driver)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  tmc2209_write(stepper_driver, ADDRESS_PWMCONF, stepper_driver->pwm_config_.bytes);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2170      	movs	r1, #112	@ 0x70
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f854 	bl	8002e3a <tmc2209_write>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <tmc2209_set_hardware_enable_pin>:

extern UART_HandleTypeDef huart1;


void tmc2209_set_hardware_enable_pin(tmc2209_stepper_driver_t *stepper_driver, uint16_t hardware_enable_pin, GPIO_TypeDef* hardware_enable_gpio_port)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	460b      	mov	r3, r1
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	817b      	strh	r3, [r7, #10]
   stepper_driver->hardware_enable_pin_ = hardware_enable_pin;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	897a      	ldrh	r2, [r7, #10]
 8002dac:	80da      	strh	r2, [r3, #6]
   stepper_driver->hardware_enable_gpio_port_ = hardware_enable_gpio_port;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	651a      	str	r2, [r3, #80]	@ 0x50

   HAL_GPIO_WritePin(hardware_enable_gpio_port, hardware_enable_pin, GPIO_PIN_SET);
 8002db4:	897b      	ldrh	r3, [r7, #10]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f002 fe46 	bl	8005a4c <HAL_GPIO_WritePin>
 }
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <tmc2209_enable>:

 void tmc2209_enable(tmc2209_stepper_driver_t *stepper_driver)
 {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
     HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_RESET);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	88db      	ldrh	r3, [r3, #6]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f002 fe36 	bl	8005a4c <HAL_GPIO_WritePin>
   }
   stepper_driver->toff_                = TOFF_DEFAULT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2203      	movs	r2, #3
 8002de4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
   stepper_driver->chopper_config_.toff = TOFF_DEFAULT;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002dee:	2103      	movs	r1, #3
 8002df0:	f361 0303 	bfi	r3, r1, #0, #4
 8002df4:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffb0 	bl	8002d5e <write_stored_chopper_config>
 }
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <tmc2209_disable>:

 void tmc2209_disable(tmc2209_stepper_driver_t* stepper_driver)
 {
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
   if (stepper_driver->hardware_enable_pin_ >= 0)
   {
   HAL_GPIO_WritePin(stepper_driver->hardware_enable_gpio_port_, stepper_driver->hardware_enable_pin_, GPIO_PIN_SET);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	88db      	ldrh	r3, [r3, #6]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f002 fe17 	bl	8005a4c <HAL_GPIO_WritePin>
   }
   stepper_driver->chopper_config_.toff = TOFF_DISABLE;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8002e24:	f023 030f 	bic.w	r3, r3, #15
 8002e28:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
   write_stored_chopper_config(stepper_driver);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff96 	bl	8002d5e <write_stored_chopper_config>
 }
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <tmc2209_write>:

 void tmc2209_write(tmc2209_stepper_driver_t *stepper_driver, uint8_t register_address, uint32_t data)
 {
 8002e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3c:	b08b      	sub	sp, #44	@ 0x2c
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	460b      	mov	r3, r1
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	72fb      	strb	r3, [r7, #11]
   write_read_reply_datagram_t write_datagram;
   write_datagram.bytes            = 0;
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9c7 2306 	strd	r2, r3, [r7, #24]
   write_datagram.sync             = SYNC;
 8002e54:	7e3b      	ldrb	r3, [r7, #24]
 8002e56:	2205      	movs	r2, #5
 8002e58:	f362 0303 	bfi	r3, r2, #0, #4
 8002e5c:	763b      	strb	r3, [r7, #24]
   write_datagram.serial_address   = stepper_driver->serial_address_;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	791b      	ldrb	r3, [r3, #4]
 8002e62:	767b      	strb	r3, [r7, #25]
   write_datagram.register_address = register_address;
 8002e64:	7afb      	ldrb	r3, [r7, #11]
 8002e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	7ebb      	ldrb	r3, [r7, #26]
 8002e6e:	f362 0306 	bfi	r3, r2, #0, #7
 8002e72:	76bb      	strb	r3, [r7, #26]
   write_datagram.rw               = RW_WRITE;
 8002e74:	7ebb      	ldrb	r3, [r7, #26]
 8002e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7a:	76bb      	strb	r3, [r7, #26]
   write_datagram.data             = reverse_data(data);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fe0c 	bl	8002a9a <reverse_data>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f8c7 301b 	str.w	r3, [r7, #27]
   write_datagram.crc              = calculate_crc_write(&write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002e88:	f107 0318 	add.w	r3, r7, #24
 8002e8c:	2108      	movs	r1, #8
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fe2d 	bl	8002aee <calculate_crc_write>
 8002e94:	4603      	mov	r3, r0
 8002e96:	77fb      	strb	r3, [r7, #31]

   uint8_t datagram_bytes[8];
   for (int i = 0; i < 8; i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9c:	e01b      	b.n	8002ed6 <tmc2209_write+0x9c>
   {
     datagram_bytes[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ea4:	00c9      	lsls	r1, r1, #3
 8002ea6:	f1c1 0620 	rsb	r6, r1, #32
 8002eaa:	f1a1 0020 	sub.w	r0, r1, #32
 8002eae:	fa22 f401 	lsr.w	r4, r2, r1
 8002eb2:	fa03 f606 	lsl.w	r6, r3, r6
 8002eb6:	4334      	orrs	r4, r6
 8002eb8:	fa23 f000 	lsr.w	r0, r3, r0
 8002ebc:	4304      	orrs	r4, r0
 8002ebe:	fa23 f501 	lsr.w	r5, r3, r1
 8002ec2:	b2e1      	uxtb	r1, r4
 8002ec4:	f107 0210 	add.w	r2, r7, #16
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	4413      	add	r3, r2
 8002ecc:	460a      	mov	r2, r1
 8002ece:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < 8; i++)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	2b07      	cmp	r3, #7
 8002eda:	dde0      	ble.n	8002e9e <tmc2209_write+0x64>
   }
   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, WRITE_READ_REPLY_DATAGRAM_SIZE, 0XFFFF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f103 0008 	add.w	r0, r3, #8
 8002ee2:	f107 0110 	add.w	r1, r7, #16
 8002ee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002eea:	2208      	movs	r2, #8
 8002eec:	f005 fa26 	bl	800833c <HAL_UART_Transmit>
   //   printf("Write Data Request: %s", datagram_bytes);
 }
 8002ef0:	bf00      	nop
 8002ef2:	372c      	adds	r7, #44	@ 0x2c
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ef8 <tmc2209_read>:

 uint32_t tmc2209_read(tmc2209_stepper_driver_t * stepper_driver, uint8_t register_address)
 {
 8002ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002efc:	b090      	sub	sp, #64	@ 0x40
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
   read_request_datagram_t read_request_datagram;
   read_request_datagram.bytes            = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   read_request_datagram.sync             = SYNC;
 8002f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f0e:	2205      	movs	r2, #5
 8002f10:	f362 0303 	bfi	r3, r2, #0, #4
 8002f14:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
   read_request_datagram.serial_address   = stepper_driver->serial_address_;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	791b      	ldrb	r3, [r3, #4]
 8002f1c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
   read_request_datagram.register_address = register_address;
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f2c:	f362 0306 	bfi	r3, r2, #0, #7
 8002f30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.rw               = RW_READ;
 8002f34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
   read_request_datagram.crc              = calculate_crc_read(&read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 8002f40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f44:	2104      	movs	r1, #4
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fe35 	bl	8002bb6 <calculate_crc_read>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

   uint8_t datagram_bytes[WRITE_READ_REPLY_DATAGRAM_SIZE];
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8002f52:	2300      	movs	r3, #0
 8002f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f56:	e00e      	b.n	8002f76 <tmc2209_read+0x7e>
   {
     datagram_bytes[i] = (read_request_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	b2d9      	uxtb	r1, r3
 8002f64:	f107 0220 	add.w	r2, r7, #32
 8002f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6a:	4413      	add	r3, r2
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < READ_REQUEST_DATAGRAM_SIZE; ++i)
 8002f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f72:	3301      	adds	r3, #1
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	dded      	ble.n	8002f58 <tmc2209_read+0x60>
   }

   HAL_UART_Transmit(&stepper_driver->uart_, datagram_bytes, READ_REQUEST_DATAGRAM_SIZE, 0XFFFF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f103 0008 	add.w	r0, r3, #8
 8002f82:	f107 0120 	add.w	r1, r7, #32
 8002f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	f005 f9d6 	bl	800833c <HAL_UART_Transmit>
//   printf("Write Data Request: %s", datagram_bytes);


   uint8_t                     byte_count = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
   write_read_reply_datagram_t read_reply_datagram;
   read_reply_datagram.bytes = 0;
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
//   {
//     HAL_UART_Receive(&huart1, (uint8_t *)&byte, 1, 100);
//     datagram_bytes[i] = byte;
//   }
   uint8_t uart_reply[WRITE_READ_REPLY_DATAGRAM_SIZE + 1];
   HAL_UART_Receive(&stepper_driver->uart_, uart_reply, 9, 100);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f103 0008 	add.w	r0, r3, #8
 8002fa8:	f107 010c 	add.w	r1, r7, #12
 8002fac:	2364      	movs	r3, #100	@ 0x64
 8002fae:	2209      	movs	r2, #9
 8002fb0:	f005 fa4f 	bl	8008452 <HAL_UART_Receive>
   uint8_t* datagram = uart_reply + sizeof(uint8_t);
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	3301      	adds	r3, #1
 8002fba:	637b      	str	r3, [r7, #52]	@ 0x34

   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002fc2:	e029      	b.n	8003018 <tmc2209_read+0x120>
   {
     read_reply_datagram.bytes |= ((uint64_t)datagram[i] << (byte_count++ * BITS_PER_BYTE));
 8002fc4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4698      	mov	r8, r3
 8002fd4:	4691      	mov	r9, r2
 8002fd6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	f1a3 0120 	sub.w	r1, r3, #32
 8002fe6:	f1c3 0220 	rsb	r2, r3, #32
 8002fea:	fa09 f503 	lsl.w	r5, r9, r3
 8002fee:	fa08 f101 	lsl.w	r1, r8, r1
 8002ff2:	430d      	orrs	r5, r1
 8002ff4:	fa28 f202 	lsr.w	r2, r8, r2
 8002ff8:	4315      	orrs	r5, r2
 8002ffa:	fa08 f403 	lsl.w	r4, r8, r3
 8002ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003002:	ea44 0a02 	orr.w	sl, r4, r2
 8003006:	ea45 0b03 	orr.w	fp, r5, r3
 800300a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
   for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i)
 800300e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003012:	3301      	adds	r3, #1
 8003014:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8003018:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800301c:	2b07      	cmp	r3, #7
 800301e:	d9d1      	bls.n	8002fc4 <tmc2209_read+0xcc>
   }
   uint32_t reversed_data = reverse_data(read_reply_datagram.data);
 8003020:	f8d7 301b 	ldr.w	r3, [r7, #27]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fd38 	bl	8002a9a <reverse_data>
 800302a:	6338      	str	r0, [r7, #48]	@ 0x30
   uint8_t  crc           = calculate_crc_write(&read_reply_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800302c:	f107 0318 	add.w	r3, r7, #24
 8003030:	2108      	movs	r1, #8
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fd5b 	bl	8002aee <calculate_crc_write>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
   if (crc != read_reply_datagram.crc)
   {
   }
   return reversed_data;
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 }
 8003040:	4618      	mov	r0, r3
 8003042:	3740      	adds	r7, #64	@ 0x40
 8003044:	46bd      	mov	sp, r7
 8003046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800304c <writeDisplay>:
 * To write to external display with only one parameter, the string.
 * Also wraps the text around the edges if string size is bigger than the width of the monitor
 */

void writeDisplay(char* str)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	@ 0x30
 8003050:	af02      	add	r7, sp, #8
 8003052:	6078      	str	r0, [r7, #4]
	ssd1306_Init();
 8003054:	f000 f8b8 	bl	80031c8 <ssd1306_Init>
	SSD1306_Font_t font = Font_11x18; //Set font size
 8003058:	4a3d      	ldr	r2, [pc, #244]	@ (8003150 <writeDisplay+0x104>)
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003060:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t y = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int8_t str_length = strlen(str);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd f8d0 	bl	8000210 <strlen>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t display_length = 128;
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	77fb      	strb	r3, [r7, #31]
	uint8_t display_height = 64;
 800307a:	2340      	movs	r3, #64	@ 0x40
 800307c:	77bb      	strb	r3, [r7, #30]
	uint8_t max_char = (display_length-2)/font.width; //Calculate maximum number of characters that fit in one line
 800307e:	7ffb      	ldrb	r3, [r7, #31]
 8003080:	3b02      	subs	r3, #2
 8003082:	7b3a      	ldrb	r2, [r7, #12]
 8003084:	fb93 f3f2 	sdiv	r3, r3, r2
 8003088:	777b      	strb	r3, [r7, #29]
	uint8_t max_lines = display_height/font.height;
 800308a:	7b7b      	ldrb	r3, [r7, #13]
 800308c:	7fba      	ldrb	r2, [r7, #30]
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	773b      	strb	r3, [r7, #28]
	uint8_t line = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	ssd1306_Fill(Black);
 800309a:	2000      	movs	r0, #0
 800309c:	f000 f8fe 	bl	800329c <ssd1306_Fill>

	while(str_length > 0 && line < max_lines)
 80030a0:	e047      	b.n	8003132 <writeDisplay+0xe6>
	{
		ssd1306_SetCursor(2, y); //Set cursor to start of the line
 80030a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030a6:	4619      	mov	r1, r3
 80030a8:	2002      	movs	r0, #2
 80030aa:	f000 fa43 	bl	8003534 <ssd1306_SetCursor>

		char* sub_str = malloc(max_char + 1); //Variable needed to store the string of the current line
 80030ae:	7f7b      	ldrb	r3, [r7, #29]
 80030b0:	3301      	adds	r3, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f007 ff3c 	bl	800af30 <malloc>
 80030b8:	4603      	mov	r3, r0
 80030ba:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < max_char; i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	e011      	b.n	80030e6 <writeDisplay+0x9a>
		{
			sub_str[i] = str[i + max_char * line];
 80030c2:	7f7b      	ldrb	r3, [r7, #29]
 80030c4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80030c8:	fb03 f202 	mul.w	r2, r3, r2
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	4413      	add	r3, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	441a      	add	r2, r3
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	69b9      	ldr	r1, [r7, #24]
 80030da:	440b      	add	r3, r1
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < max_char; i++)
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	3301      	adds	r3, #1
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	7f7b      	ldrb	r3, [r7, #29]
 80030e8:	6a3a      	ldr	r2, [r7, #32]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	dbe9      	blt.n	80030c2 <writeDisplay+0x76>
		}
		sub_str[max_char] = '\0';	//At the end of the string, add a null terminator
 80030ee:	7f7b      	ldrb	r3, [r7, #29]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4413      	add	r3, r2
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(sub_str, font, White); //Write the current line to the buffer
 80030f8:	2301      	movs	r3, #1
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003102:	69b8      	ldr	r0, [r7, #24]
 8003104:	f000 f9f0 	bl	80034e8 <ssd1306_WriteString>
		str_length = str_length - max_char;
 8003108:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800310c:	7f7b      	ldrb	r3, [r7, #29]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		y += font.height;
 8003116:	7b7a      	ldrb	r2, [r7, #13]
 8003118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800311c:	4413      	add	r3, r2
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		line++;
 8003122:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003126:	3301      	adds	r3, #1
 8003128:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		free(sub_str);
 800312c:	69b8      	ldr	r0, [r7, #24]
 800312e:	f007 ff07 	bl	800af40 <free>
	while(str_length > 0 && line < max_lines)
 8003132:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8003136:	2b00      	cmp	r3, #0
 8003138:	dd04      	ble.n	8003144 <writeDisplay+0xf8>
 800313a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800313e:	7f3b      	ldrb	r3, [r7, #28]
 8003140:	429a      	cmp	r2, r3
 8003142:	d3ae      	bcc.n	80030a2 <writeDisplay+0x56>
	}
	ssd1306_UpdateScreen();
 8003144:	f000 f8c2 	bl	80032cc <ssd1306_UpdateScreen>
}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	@ 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	0800c6cc 	.word	0x0800c6cc

08003154 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af04      	add	r7, sp, #16
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
 8003172:	9302      	str	r3, [sp, #8]
 8003174:	2301      	movs	r3, #1
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2301      	movs	r3, #1
 800317e:	2200      	movs	r2, #0
 8003180:	2178      	movs	r1, #120	@ 0x78
 8003182:	4803      	ldr	r0, [pc, #12]	@ (8003190 <ssd1306_WriteCommand+0x2c>)
 8003184:	f002 fdf2 	bl	8005d6c <HAL_I2C_Mem_Write>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000078 	.word	0x20000078

08003194 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af04      	add	r7, sp, #16
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f04f 32ff 	mov.w	r2, #4294967295
 80031a6:	9202      	str	r2, [sp, #8]
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2301      	movs	r3, #1
 80031b0:	2240      	movs	r2, #64	@ 0x40
 80031b2:	2178      	movs	r1, #120	@ 0x78
 80031b4:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <ssd1306_WriteData+0x30>)
 80031b6:	f002 fdd9 	bl	8005d6c <HAL_I2C_Mem_Write>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000078 	.word	0x20000078

080031c8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80031cc:	f7ff ffc2 	bl	8003154 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80031d0:	2064      	movs	r0, #100	@ 0x64
 80031d2:	f002 f8c7 	bl	8005364 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 f9d8 	bl	800358c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80031dc:	2020      	movs	r0, #32
 80031de:	f7ff ffc1 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7ff ffbe 	bl	8003164 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80031e8:	20b0      	movs	r0, #176	@ 0xb0
 80031ea:	f7ff ffbb 	bl	8003164 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80031ee:	20c8      	movs	r0, #200	@ 0xc8
 80031f0:	f7ff ffb8 	bl	8003164 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7ff ffb5 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80031fa:	2010      	movs	r0, #16
 80031fc:	f7ff ffb2 	bl	8003164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003200:	2040      	movs	r0, #64	@ 0x40
 8003202:	f7ff ffaf 	bl	8003164 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003206:	20ff      	movs	r0, #255	@ 0xff
 8003208:	f000 f9ac 	bl	8003564 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800320c:	20a1      	movs	r0, #161	@ 0xa1
 800320e:	f7ff ffa9 	bl	8003164 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003212:	20a6      	movs	r0, #166	@ 0xa6
 8003214:	f7ff ffa6 	bl	8003164 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003218:	20a8      	movs	r0, #168	@ 0xa8
 800321a:	f7ff ffa3 	bl	8003164 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800321e:	203f      	movs	r0, #63	@ 0x3f
 8003220:	f7ff ffa0 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003224:	20a4      	movs	r0, #164	@ 0xa4
 8003226:	f7ff ff9d 	bl	8003164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800322a:	20d3      	movs	r0, #211	@ 0xd3
 800322c:	f7ff ff9a 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003230:	2000      	movs	r0, #0
 8003232:	f7ff ff97 	bl	8003164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003236:	20d5      	movs	r0, #213	@ 0xd5
 8003238:	f7ff ff94 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800323c:	20f0      	movs	r0, #240	@ 0xf0
 800323e:	f7ff ff91 	bl	8003164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003242:	20d9      	movs	r0, #217	@ 0xd9
 8003244:	f7ff ff8e 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003248:	2022      	movs	r0, #34	@ 0x22
 800324a:	f7ff ff8b 	bl	8003164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800324e:	20da      	movs	r0, #218	@ 0xda
 8003250:	f7ff ff88 	bl	8003164 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003254:	2012      	movs	r0, #18
 8003256:	f7ff ff85 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800325a:	20db      	movs	r0, #219	@ 0xdb
 800325c:	f7ff ff82 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003260:	2020      	movs	r0, #32
 8003262:	f7ff ff7f 	bl	8003164 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003266:	208d      	movs	r0, #141	@ 0x8d
 8003268:	f7ff ff7c 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800326c:	2014      	movs	r0, #20
 800326e:	f7ff ff79 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003272:	2001      	movs	r0, #1
 8003274:	f000 f98a 	bl	800358c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003278:	2000      	movs	r0, #0
 800327a:	f000 f80f 	bl	800329c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800327e:	f000 f825 	bl	80032cc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003282:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <ssd1306_Init+0xd0>)
 8003284:	2200      	movs	r2, #0
 8003286:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003288:	4b03      	ldr	r3, [pc, #12]	@ (8003298 <ssd1306_Init+0xd0>)
 800328a:	2200      	movs	r2, #0
 800328c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800328e:	4b02      	ldr	r3, [pc, #8]	@ (8003298 <ssd1306_Init+0xd0>)
 8003290:	2201      	movs	r2, #1
 8003292:	711a      	strb	r2, [r3, #4]
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000968 	.word	0x20000968

0800329c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <ssd1306_Fill+0x14>
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <ssd1306_Fill+0x16>
 80032b0:	23ff      	movs	r3, #255	@ 0xff
 80032b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032b6:	4619      	mov	r1, r3
 80032b8:	4803      	ldr	r0, [pc, #12]	@ (80032c8 <ssd1306_Fill+0x2c>)
 80032ba:	f007 ff47 	bl	800b14c <memset>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000568 	.word	0x20000568

080032cc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80032d2:	2300      	movs	r3, #0
 80032d4:	71fb      	strb	r3, [r7, #7]
 80032d6:	e016      	b.n	8003306 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	3b50      	subs	r3, #80	@ 0x50
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff40 	bl	8003164 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7ff ff3d 	bl	8003164 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80032ea:	2010      	movs	r0, #16
 80032ec:	f7ff ff3a 	bl	8003164 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	01db      	lsls	r3, r3, #7
 80032f4:	4a08      	ldr	r2, [pc, #32]	@ (8003318 <ssd1306_UpdateScreen+0x4c>)
 80032f6:	4413      	add	r3, r2
 80032f8:	2180      	movs	r1, #128	@ 0x80
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff4a 	bl	8003194 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	3301      	adds	r3, #1
 8003304:	71fb      	strb	r3, [r7, #7]
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	2b07      	cmp	r3, #7
 800330a:	d9e5      	bls.n	80032d8 <ssd1306_UpdateScreen+0xc>
    }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000568 	.word	0x20000568

0800331c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
 8003326:	460b      	mov	r3, r1
 8003328:	71bb      	strb	r3, [r7, #6]
 800332a:	4613      	mov	r3, r2
 800332c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	2b00      	cmp	r3, #0
 8003334:	db3d      	blt.n	80033b2 <ssd1306_DrawPixel+0x96>
 8003336:	79bb      	ldrb	r3, [r7, #6]
 8003338:	2b3f      	cmp	r3, #63	@ 0x3f
 800333a:	d83a      	bhi.n	80033b2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800333c:	797b      	ldrb	r3, [r7, #5]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d11a      	bne.n	8003378 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003342:	79fa      	ldrb	r2, [r7, #7]
 8003344:	79bb      	ldrb	r3, [r7, #6]
 8003346:	08db      	lsrs	r3, r3, #3
 8003348:	b2d8      	uxtb	r0, r3
 800334a:	4603      	mov	r3, r0
 800334c:	01db      	lsls	r3, r3, #7
 800334e:	4413      	add	r3, r2
 8003350:	4a1b      	ldr	r2, [pc, #108]	@ (80033c0 <ssd1306_DrawPixel+0xa4>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	b25a      	sxtb	r2, r3
 8003356:	79bb      	ldrb	r3, [r7, #6]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	b25b      	sxtb	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	b259      	sxtb	r1, r3
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	4603      	mov	r3, r0
 800336c:	01db      	lsls	r3, r3, #7
 800336e:	4413      	add	r3, r2
 8003370:	b2c9      	uxtb	r1, r1
 8003372:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <ssd1306_DrawPixel+0xa4>)
 8003374:	54d1      	strb	r1, [r2, r3]
 8003376:	e01d      	b.n	80033b4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003378:	79fa      	ldrb	r2, [r7, #7]
 800337a:	79bb      	ldrb	r3, [r7, #6]
 800337c:	08db      	lsrs	r3, r3, #3
 800337e:	b2d8      	uxtb	r0, r3
 8003380:	4603      	mov	r3, r0
 8003382:	01db      	lsls	r3, r3, #7
 8003384:	4413      	add	r3, r2
 8003386:	4a0e      	ldr	r2, [pc, #56]	@ (80033c0 <ssd1306_DrawPixel+0xa4>)
 8003388:	5cd3      	ldrb	r3, [r2, r3]
 800338a:	b25a      	sxtb	r2, r3
 800338c:	79bb      	ldrb	r3, [r7, #6]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	2101      	movs	r1, #1
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	b25b      	sxtb	r3, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	b25b      	sxtb	r3, r3
 800339e:	4013      	ands	r3, r2
 80033a0:	b259      	sxtb	r1, r3
 80033a2:	79fa      	ldrb	r2, [r7, #7]
 80033a4:	4603      	mov	r3, r0
 80033a6:	01db      	lsls	r3, r3, #7
 80033a8:	4413      	add	r3, r2
 80033aa:	b2c9      	uxtb	r1, r1
 80033ac:	4a04      	ldr	r2, [pc, #16]	@ (80033c0 <ssd1306_DrawPixel+0xa4>)
 80033ae:	54d1      	strb	r1, [r2, r3]
 80033b0:	e000      	b.n	80033b4 <ssd1306_DrawPixel+0x98>
        return;
 80033b2:	bf00      	nop
    }
}
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000568 	.word	0x20000568

080033c4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b089      	sub	sp, #36	@ 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4604      	mov	r4, r0
 80033cc:	4638      	mov	r0, r7
 80033ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80033d2:	4623      	mov	r3, r4
 80033d4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b1f      	cmp	r3, #31
 80033da:	d902      	bls.n	80033e2 <ssd1306_WriteChar+0x1e>
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b7e      	cmp	r3, #126	@ 0x7e
 80033e0:	d901      	bls.n	80033e6 <ssd1306_WriteChar+0x22>
        return 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e079      	b.n	80034da <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <ssd1306_WriteChar+0x34>
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	3b20      	subs	r3, #32
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	e000      	b.n	80033fa <ssd1306_WriteChar+0x36>
 80033f8:	783b      	ldrb	r3, [r7, #0]
 80033fa:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80033fc:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <ssd1306_WriteChar+0x120>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	4413      	add	r3, r2
 8003406:	2b80      	cmp	r3, #128	@ 0x80
 8003408:	dc06      	bgt.n	8003418 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800340a:	4b36      	ldr	r3, [pc, #216]	@ (80034e4 <ssd1306_WriteChar+0x120>)
 800340c:	885b      	ldrh	r3, [r3, #2]
 800340e:	461a      	mov	r2, r3
 8003410:	787b      	ldrb	r3, [r7, #1]
 8003412:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003414:	2b40      	cmp	r3, #64	@ 0x40
 8003416:	dd01      	ble.n	800341c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8003418:	2300      	movs	r3, #0
 800341a:	e05e      	b.n	80034da <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	e04d      	b.n	80034be <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	3b20      	subs	r3, #32
 8003428:	7879      	ldrb	r1, [r7, #1]
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4619      	mov	r1, r3
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	440b      	add	r3, r1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e036      	b.n	80034b0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d013      	beq.n	800347a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003452:	4b24      	ldr	r3, [pc, #144]	@ (80034e4 <ssd1306_WriteChar+0x120>)
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	4413      	add	r3, r2
 800345e:	b2d8      	uxtb	r0, r3
 8003460:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <ssd1306_WriteChar+0x120>)
 8003462:	885b      	ldrh	r3, [r3, #2]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4413      	add	r3, r2
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003472:	4619      	mov	r1, r3
 8003474:	f7ff ff52 	bl	800331c <ssd1306_DrawPixel>
 8003478:	e017      	b.n	80034aa <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800347a:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <ssd1306_WriteChar+0x120>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4413      	add	r3, r2
 8003486:	b2d8      	uxtb	r0, r3
 8003488:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <ssd1306_WriteChar+0x120>)
 800348a:	885b      	ldrh	r3, [r3, #2]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4413      	add	r3, r2
 8003494:	b2d9      	uxtb	r1, r3
 8003496:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	f7ff ff39 	bl	800331c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	3301      	adds	r3, #1
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d3c4      	bcc.n	8003442 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	787b      	ldrb	r3, [r7, #1]
 80034c0:	461a      	mov	r2, r3
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d3ac      	bcc.n	8003422 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80034c8:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <ssd1306_WriteChar+0x120>)
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b03      	ldr	r3, [pc, #12]	@ (80034e4 <ssd1306_WriteChar+0x120>)
 80034d6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	@ 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000968 	.word	0x20000968

080034e8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	4638      	mov	r0, r7
 80034f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80034f6:	e013      	b.n	8003520 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	7818      	ldrb	r0, [r3, #0]
 80034fc:	7e3b      	ldrb	r3, [r7, #24]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	463b      	mov	r3, r7
 8003502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003504:	f7ff ff5e 	bl	80033c4 <ssd1306_WriteChar>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d002      	beq.n	800351a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	e008      	b.n	800352c <ssd1306_WriteString+0x44>
        }
        str++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3301      	adds	r3, #1
 800351e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e7      	bne.n	80034f8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	781b      	ldrb	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	460a      	mov	r2, r1
 800353e:	71fb      	strb	r3, [r7, #7]
 8003540:	4613      	mov	r3, r2
 8003542:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	b29a      	uxth	r2, r3
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <ssd1306_SetCursor+0x2c>)
 800354a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	b29a      	uxth	r2, r3
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <ssd1306_SetCursor+0x2c>)
 8003552:	805a      	strh	r2, [r3, #2]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20000968 	.word	0x20000968

08003564 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800356e:	2381      	movs	r3, #129	@ 0x81
 8003570:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fdf5 	bl	8003164 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fdf1 	bl	8003164 <ssd1306_WriteCommand>
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800359c:	23af      	movs	r3, #175	@ 0xaf
 800359e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80035a0:	4b08      	ldr	r3, [pc, #32]	@ (80035c4 <ssd1306_SetDisplayOn+0x38>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	715a      	strb	r2, [r3, #5]
 80035a6:	e004      	b.n	80035b2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80035a8:	23ae      	movs	r3, #174	@ 0xae
 80035aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <ssd1306_SetDisplayOn+0x38>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fdd5 	bl	8003164 <ssd1306_WriteCommand>
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000968 	.word	0x20000968

080035c8 <toGrad>:
 */
#include "motor/helper.h"
#include "math.h"

float toGrad(float degrees_rad)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	ed87 0a01 	vstr	s0, [r7, #4]
	return degrees_rad * 180/M_PI;
 80035d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80035d6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003618 <toGrad+0x50>
 80035da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035de:	ee17 0a90 	vmov	r0, s15
 80035e2:	f7fc ffd1 	bl	8000588 <__aeabi_f2d>
 80035e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8003610 <toGrad+0x48>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f7fd f94e 	bl	800088c <__aeabi_ddiv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	f7fd faf6 	bl	8000be8 <__aeabi_d2f>
 80035fc:	4603      	mov	r3, r0
 80035fe:	ee07 3a90 	vmov	s15, r3
}
 8003602:	eeb0 0a67 	vmov.f32	s0, s15
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	f3af 8000 	nop.w
 8003610:	54442d18 	.word	0x54442d18
 8003614:	400921fb 	.word	0x400921fb
 8003618:	43340000 	.word	0x43340000
 800361c:	00000000 	.word	0x00000000

08003620 <toRad>:

float toRad(float degrees_grad)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	ed87 0a01 	vstr	s0, [r7, #4]
	return degrees_grad * M_PI/180;
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fc ffac 	bl	8000588 <__aeabi_f2d>
 8003630:	a30e      	add	r3, pc, #56	@ (adr r3, 800366c <toRad+0x4c>)
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f7fc ffff 	bl	8000638 <__aeabi_dmul>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <toRad+0x48>)
 8003648:	f7fd f920 	bl	800088c <__aeabi_ddiv>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	f7fd fac8 	bl	8000be8 <__aeabi_d2f>
 8003658:	4603      	mov	r3, r0
 800365a:	ee07 3a90 	vmov	s15, r3
}
 800365e:	eeb0 0a67 	vmov.f32	s0, s15
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40668000 	.word	0x40668000
 800366c:	54442d18 	.word	0x54442d18
 8003670:	400921fb 	.word	0x400921fb

08003674 <toSteps>:

/*
 * Calculates the steps needed to rotate the amount stated in the variable degrees.
 */
int32_t toSteps(float degrees, motor_t* motor)
{
 8003674:	b5b0      	push	{r4, r5, r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	ed87 0a01 	vstr	s0, [r7, #4]
 800367e:	6038      	str	r0, [r7, #0]
	int32_t steps;
	steps = ((200.0 * (float)(motor->microsteps)/360.0)*degrees) * motor->gear_ratio;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368c:	ee17 0a90 	vmov	r0, s15
 8003690:	f7fc ff7a 	bl	8000588 <__aeabi_f2d>
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	4b1a      	ldr	r3, [pc, #104]	@ (8003704 <toSteps+0x90>)
 800369a:	f7fc ffcd 	bl	8000638 <__aeabi_dmul>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	4b17      	ldr	r3, [pc, #92]	@ (8003708 <toSteps+0x94>)
 80036ac:	f7fd f8ee 	bl	800088c <__aeabi_ddiv>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4614      	mov	r4, r2
 80036b6:	461d      	mov	r5, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fc ff65 	bl	8000588 <__aeabi_f2d>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4620      	mov	r0, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	f7fc ffb7 	bl	8000638 <__aeabi_dmul>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4614      	mov	r4, r2
 80036d0:	461d      	mov	r5, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc ff56 	bl	8000588 <__aeabi_f2d>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4620      	mov	r0, r4
 80036e2:	4629      	mov	r1, r5
 80036e4:	f7fc ffa8 	bl	8000638 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	f7fd fa52 	bl	8000b98 <__aeabi_d2iz>
 80036f4:	4603      	mov	r3, r0
 80036f6:	60fb      	str	r3, [r7, #12]
	return steps;
 80036f8:	68fb      	ldr	r3, [r7, #12]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bdb0      	pop	{r4, r5, r7, pc}
 8003702:	bf00      	nop
 8003704:	40690000 	.word	0x40690000
 8003708:	40768000 	.word	0x40768000
 800370c:	00000000 	.word	0x00000000

08003710 <toPolar>:
 * Converts cartesian coordinates to polar coordinates depending on the quadrant.
 * Angles in degrees.
 * Coordinates in mm.
 */
void toPolar(float x, float y, float * theta_p, float * r_p)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	ed87 0a03 	vstr	s0, [r7, #12]
 800371a:	edc7 0a02 	vstr	s1, [r7, #8]
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	if (x < 0 && y >= 0)
 8003722:	edd7 7a03 	vldr	s15, [r7, #12]
 8003726:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	d525      	bpl.n	800377c <toPolar+0x6c>
 8003730:	edd7 7a02 	vldr	s15, [r7, #8]
 8003734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	db1e      	blt.n	800377c <toPolar+0x6c>
		*theta_p = -atan(y/x);
 800373e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003742:	edd7 7a03 	vldr	s15, [r7, #12]
 8003746:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800374a:	ee16 0a90 	vmov	r0, s13
 800374e:	f7fc ff1b 	bl	8000588 <__aeabi_f2d>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	ec43 2b10 	vmov	d0, r2, r3
 800375a:	f005 fe79 	bl	8009450 <atan>
 800375e:	ec53 2b10 	vmov	r2, r3, d0
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	f7fd fa3f 	bl	8000be8 <__aeabi_d2f>
 800376a:	4603      	mov	r3, r0
 800376c:	ee07 3a90 	vmov	s15, r3
 8003770:	eef1 7a67 	vneg.f32	s15, s15
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	edc3 7a00 	vstr	s15, [r3]
 800377a:	e08b      	b.n	8003894 <toPolar+0x184>
	else if (x >= 0 && y > 0)
 800377c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003788:	db27      	blt.n	80037da <toPolar+0xca>
 800378a:	edd7 7a02 	vldr	s15, [r7, #8]
 800378e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003796:	dd20      	ble.n	80037da <toPolar+0xca>
		*theta_p = atan(x/y) + M_PI/2;
 8003798:	ed97 7a03 	vldr	s14, [r7, #12]
 800379c:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037a4:	ee16 0a90 	vmov	r0, s13
 80037a8:	f7fc feee 	bl	8000588 <__aeabi_f2d>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	ec43 2b10 	vmov	d0, r2, r3
 80037b4:	f005 fe4c 	bl	8009450 <atan>
 80037b8:	ec51 0b10 	vmov	r0, r1, d0
 80037bc:	a342      	add	r3, pc, #264	@ (adr r3, 80038c8 <toPolar+0x1b8>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f7fc fd83 	bl	80002cc <__adddf3>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4610      	mov	r0, r2
 80037cc:	4619      	mov	r1, r3
 80037ce:	f7fd fa0b 	bl	8000be8 <__aeabi_d2f>
 80037d2:	4602      	mov	r2, r0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e05c      	b.n	8003894 <toPolar+0x184>
	else if (x > 0 && y <= 0)
 80037da:	edd7 7a03 	vldr	s15, [r7, #12]
 80037de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	dd27      	ble.n	8003838 <toPolar+0x128>
 80037e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	d820      	bhi.n	8003838 <toPolar+0x128>
		*theta_p = -atan(y/x) + M_PI;
 80037f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80037fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80037fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003802:	ee16 0a90 	vmov	r0, s13
 8003806:	f7fc febf 	bl	8000588 <__aeabi_f2d>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	ec43 2b10 	vmov	d0, r2, r3
 8003812:	f005 fe1d 	bl	8009450 <atan>
 8003816:	ec53 2b10 	vmov	r2, r3, d0
 800381a:	a12d      	add	r1, pc, #180	@ (adr r1, 80038d0 <toPolar+0x1c0>)
 800381c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003820:	f7fc fd52 	bl	80002c8 <__aeabi_dsub>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f7fd f9dc 	bl	8000be8 <__aeabi_d2f>
 8003830:	4602      	mov	r2, r0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e02d      	b.n	8003894 <toPolar+0x184>
	else if (x <= 0 && y < 0)
 8003838:	edd7 7a03 	vldr	s15, [r7, #12]
 800383c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003844:	d826      	bhi.n	8003894 <toPolar+0x184>
 8003846:	edd7 7a02 	vldr	s15, [r7, #8]
 800384a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800384e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003852:	d51f      	bpl.n	8003894 <toPolar+0x184>
		*theta_p = atan(x/y) + 3*M_PI/2;
 8003854:	ed97 7a03 	vldr	s14, [r7, #12]
 8003858:	edd7 7a02 	vldr	s15, [r7, #8]
 800385c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003860:	ee16 0a90 	vmov	r0, s13
 8003864:	f7fc fe90 	bl	8000588 <__aeabi_f2d>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	ec43 2b10 	vmov	d0, r2, r3
 8003870:	f005 fdee 	bl	8009450 <atan>
 8003874:	ec51 0b10 	vmov	r0, r1, d0
 8003878:	a317      	add	r3, pc, #92	@ (adr r3, 80038d8 <toPolar+0x1c8>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f7fc fd25 	bl	80002cc <__adddf3>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	f7fd f9ad 	bl	8000be8 <__aeabi_d2f>
 800388e:	4602      	mov	r2, r0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	601a      	str	r2, [r3, #0]

	*r_p = sqrtf(x*x + y*y);
 8003894:	edd7 7a03 	vldr	s15, [r7, #12]
 8003898:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800389c:	edd7 7a02 	vldr	s15, [r7, #8]
 80038a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a8:	eeb0 0a67 	vmov.f32	s0, s15
 80038ac:	f006 f818 	bl	80098e0 <sqrtf>
 80038b0:	eef0 7a40 	vmov.f32	s15, s0
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	edc3 7a00 	vstr	s15, [r3]
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	f3af 8000 	nop.w
 80038c8:	54442d18 	.word	0x54442d18
 80038cc:	3ff921fb 	.word	0x3ff921fb
 80038d0:	54442d18 	.word	0x54442d18
 80038d4:	400921fb 	.word	0x400921fb
 80038d8:	7f3321d2 	.word	0x7f3321d2
 80038dc:	4012d97c 	.word	0x4012d97c

080038e0 <checkPositionLimits>:

/*
 * Detects, whether the desired angles are possible to reach and writes a message to the display if not.
 */
motor_error_t checkPositionLimits(float phi, float LOW_LIMIT, float HIGH_LIMIT, uint8_t id)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b096      	sub	sp, #88	@ 0x58
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80038ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80038ee:	ed87 1a01 	vstr	s2, [r7, #4]
 80038f2:	4603      	mov	r3, r0
 80038f4:	70fb      	strb	r3, [r7, #3]
	motor_error_t error = NO_ERROR;
 80038f6:	2302      	movs	r3, #2
 80038f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (phi < LOW_LIMIT)
 80038fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003900:	edd7 7a02 	vldr	s15, [r7, #8]
 8003904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	d514      	bpl.n	8003938 <checkPositionLimits+0x58>
	{
		HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET); //Turn the red LED on.
 800390e:	2201      	movs	r2, #1
 8003910:	2101      	movs	r1, #1
 8003912:	481b      	ldr	r0, [pc, #108]	@ (8003980 <checkPositionLimits+0xa0>)
 8003914:	f002 f89a 	bl	8005a4c <HAL_GPIO_WritePin>
		char limit_position_msg[64];
		snprintf(limit_position_msg, sizeof(limit_position_msg), "phi %d is too low", id); //Used to store variables in a string.
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f107 0014 	add.w	r0, r7, #20
 800391e:	4a19      	ldr	r2, [pc, #100]	@ (8003984 <checkPositionLimits+0xa4>)
 8003920:	2140      	movs	r1, #64	@ 0x40
 8003922:	f007 fbc3 	bl	800b0ac <sniprintf>
		writeDisplay(limit_position_msg);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fb8e 	bl	800304c <writeDisplay>
		error = MOTOR_ERROR;
 8003930:	2300      	movs	r3, #0
 8003932:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8003936:	e01c      	b.n	8003972 <checkPositionLimits+0x92>
	}
	else if (phi > HIGH_LIMIT)
 8003938:	ed97 7a03 	vldr	s14, [r7, #12]
 800393c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	dd13      	ble.n	8003972 <checkPositionLimits+0x92>
	{
		HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET);
 800394a:	2201      	movs	r2, #1
 800394c:	2101      	movs	r1, #1
 800394e:	480c      	ldr	r0, [pc, #48]	@ (8003980 <checkPositionLimits+0xa0>)
 8003950:	f002 f87c 	bl	8005a4c <HAL_GPIO_WritePin>
		char limit_position_msg[64];
		snprintf(limit_position_msg, sizeof(limit_position_msg), "phi %d is too high", id);
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f107 0014 	add.w	r0, r7, #20
 800395a:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <checkPositionLimits+0xa8>)
 800395c:	2140      	movs	r1, #64	@ 0x40
 800395e:	f007 fba5 	bl	800b0ac <sniprintf>
		writeDisplay(limit_position_msg);
 8003962:	f107 0314 	add.w	r3, r7, #20
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fb70 	bl	800304c <writeDisplay>
		error = MOTOR_ERROR;
 800396c:	2300      	movs	r3, #0
 800396e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	}
	return error;
 8003972:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8003976:	4618      	mov	r0, r3
 8003978:	3758      	adds	r7, #88	@ 0x58
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40020400 	.word	0x40020400
 8003984:	0800b8dc 	.word	0x0800b8dc
 8003988:	0800b8f0 	.word	0x0800b8f0
 800398c:	00000000 	.word	0x00000000

08003990 <calculateAngles>:
 * To move the motor to the desired coordinates, we need to calculate the degrees each motor has to rotate.
 * Angles in degrees.
 * Coordinates in mm.
 */
motor_error_t calculateAngles(float phi[], float theta, float r, float z, float gripper_direction)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b08c      	sub	sp, #48	@ 0x30
 8003994:	af00      	add	r7, sp, #0
 8003996:	6178      	str	r0, [r7, #20]
 8003998:	ed87 0a04 	vstr	s0, [r7, #16]
 800399c:	edc7 0a03 	vstr	s1, [r7, #12]
 80039a0:	ed87 1a02 	vstr	s2, [r7, #8]
 80039a4:	edc7 1a01 	vstr	s3, [r7, #4]
	motor_error_t error = NO_ERROR;
 80039a8:	2302      	movs	r3, #2
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	gripper_direction = toRad(gripper_direction);
 80039ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80039b2:	f7ff fe35 	bl	8003620 <toRad>
 80039b6:	ed87 0a01 	vstr	s0, [r7, #4]

	//Calculate r and z to joint C as following calculations demand only length till joint C
	z += LENGTH_SEGMENT_4 * sin(gripper_direction);
 80039ba:	68b8      	ldr	r0, [r7, #8]
 80039bc:	f7fc fde4 	bl	8000588 <__aeabi_f2d>
 80039c0:	4604      	mov	r4, r0
 80039c2:	460d      	mov	r5, r1
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fc fddf 	bl	8000588 <__aeabi_f2d>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	ec43 2b10 	vmov	d0, r2, r3
 80039d2:	f005 ff31 	bl	8009838 <sin>
 80039d6:	ec51 0b10 	vmov	r0, r1, d0
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	4baa      	ldr	r3, [pc, #680]	@ (8003c88 <calculateAngles+0x2f8>)
 80039e0:	f7fc fe2a 	bl	8000638 <__aeabi_dmul>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4620      	mov	r0, r4
 80039ea:	4629      	mov	r1, r5
 80039ec:	f7fc fc6e 	bl	80002cc <__adddf3>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4610      	mov	r0, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	f7fd f8f6 	bl	8000be8 <__aeabi_d2f>
 80039fc:	4603      	mov	r3, r0
 80039fe:	60bb      	str	r3, [r7, #8]
	r -= LENGTH_SEGMENT_4 * cos(gripper_direction);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7fc fdc1 	bl	8000588 <__aeabi_f2d>
 8003a06:	4604      	mov	r4, r0
 8003a08:	460d      	mov	r5, r1
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fc fdbc 	bl	8000588 <__aeabi_f2d>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	ec43 2b10 	vmov	d0, r2, r3
 8003a18:	f005 feb2 	bl	8009780 <cos>
 8003a1c:	ec51 0b10 	vmov	r0, r1, d0
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	4b98      	ldr	r3, [pc, #608]	@ (8003c88 <calculateAngles+0x2f8>)
 8003a26:	f7fc fe07 	bl	8000638 <__aeabi_dmul>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4629      	mov	r1, r5
 8003a32:	f7fc fc49 	bl	80002c8 <__aeabi_dsub>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f7fd f8d3 	bl	8000be8 <__aeabi_d2f>
 8003a42:	4603      	mov	r3, r0
 8003a44:	60fb      	str	r3, [r7, #12]

	if (motors[0]->active_movement_flag ||
 8003a46:	4b91      	ldr	r3, [pc, #580]	@ (8003c8c <calculateAngles+0x2fc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	7b1b      	ldrb	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10e      	bne.n	8003a6e <calculateAngles+0xde>
			motors[1]->active_movement_flag ||
 8003a50:	4b8e      	ldr	r3, [pc, #568]	@ (8003c8c <calculateAngles+0x2fc>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	7b1b      	ldrb	r3, [r3, #12]
	if (motors[0]->active_movement_flag ||
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <calculateAngles+0xde>
			motors[2]->active_movement_flag ||
 8003a5a:	4b8c      	ldr	r3, [pc, #560]	@ (8003c8c <calculateAngles+0x2fc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	7b1b      	ldrb	r3, [r3, #12]
			motors[1]->active_movement_flag ||
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <calculateAngles+0xde>
			motors[3]->active_movement_flag)
 8003a64:	4b89      	ldr	r3, [pc, #548]	@ (8003c8c <calculateAngles+0x2fc>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	7b1b      	ldrb	r3, [r3, #12]
			motors[2]->active_movement_flag ||
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <calculateAngles+0xea>
	{
		error = MOTOR_MOVING_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		return error;
 8003a74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a78:	e1c4      	b.n	8003e04 <calculateAngles+0x474>
	}

	float h = abs(z-LENGTH_SEGMENT_1); //height (vertical distance between joint C and joint A)
 8003a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a7e:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8003c90 <calculateAngles+0x300>
 8003a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a8a:	ee17 3a90 	vmov	r3, s15
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bfb8      	it	lt
 8003a92:	425b      	neglt	r3, r3
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float d = sqrtf(r*r + h*h); //distance (distance between joint C and joint A)
 8003aa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003aa8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003aac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab8:	f005 ff12 	bl	80098e0 <sqrtf>
 8003abc:	ed87 0a08 	vstr	s0, [r7, #32]

	if (d > LENGTH_SEGMENT_2 + LENGTH_SEGMENT_3 + 1e-9 || d < fabs(LENGTH_SEGMENT_2 - LENGTH_SEGMENT_3) - 1e-9)
 8003ac0:	6a38      	ldr	r0, [r7, #32]
 8003ac2:	f7fc fd61 	bl	8000588 <__aeabi_f2d>
 8003ac6:	f244 42b8 	movw	r2, #17592	@ 0x44b8
 8003aca:	4b72      	ldr	r3, [pc, #456]	@ (8003c94 <calculateAngles+0x304>)
 8003acc:	f7fd f844 	bl	8000b58 <__aeabi_dcmpgt>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <calculateAngles+0x15c>
 8003ad6:	6a38      	ldr	r0, [r7, #32]
 8003ad8:	f7fc fd56 	bl	8000588 <__aeabi_f2d>
 8003adc:	a366      	add	r3, pc, #408	@ (adr r3, 8003c78 <calculateAngles+0x2e8>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fd f81b 	bl	8000b1c <__aeabi_dcmplt>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <calculateAngles+0x170>
		//The arm reaches its maximum length when stretched or
		//if the TCP is too close to the base origin, this will not work either.
	{
		HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET);
 8003aec:	2201      	movs	r2, #1
 8003aee:	2101      	movs	r1, #1
 8003af0:	4869      	ldr	r0, [pc, #420]	@ (8003c98 <calculateAngles+0x308>)
 8003af2:	f001 ffab 	bl	8005a4c <HAL_GPIO_WritePin>
		writeDisplay("Arm reaches max/min length");
 8003af6:	4869      	ldr	r0, [pc, #420]	@ (8003c9c <calculateAngles+0x30c>)
 8003af8:	f7ff faa8 	bl	800304c <writeDisplay>
		return MOTOR_ERROR;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e181      	b.n	8003e04 <calculateAngles+0x474>
	}


	phi[0] = theta;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	601a      	str	r2, [r3, #0]

	phi[2] = acos(((r*r) + (h*h) - LENGTH_SEGMENT_3 * LENGTH_SEGMENT_3 - LENGTH_SEGMENT_2 * LENGTH_SEGMENT_2) / (2 * LENGTH_SEGMENT_3 * LENGTH_SEGMENT_2));
 8003b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b0a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003b0e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1a:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8003ca0 <calculateAngles+0x310>
 8003b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b22:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8003ca0 <calculateAngles+0x310>
 8003b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b2a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003ca4 <calculateAngles+0x314>
 8003b2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b32:	ee16 0a90 	vmov	r0, s13
 8003b36:	f7fc fd27 	bl	8000588 <__aeabi_f2d>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	ec43 2b10 	vmov	d0, r2, r3
 8003b42:	f005 fc4f 	bl	80093e4 <acos>
 8003b46:	ec51 0b10 	vmov	r0, r1, d0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f103 0408 	add.w	r4, r3, #8
 8003b50:	f7fd f84a 	bl	8000be8 <__aeabi_d2f>
 8003b54:	4603      	mov	r3, r0
 8003b56:	6023      	str	r3, [r4, #0]

	float gamma = acos(r/d);
 8003b58:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b64:	ee16 0a90 	vmov	r0, s13
 8003b68:	f7fc fd0e 	bl	8000588 <__aeabi_f2d>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	ec43 2b10 	vmov	d0, r2, r3
 8003b74:	f005 fc36 	bl	80093e4 <acos>
 8003b78:	ec53 2b10 	vmov	r2, r3, d0
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f7fd f832 	bl	8000be8 <__aeabi_d2f>
 8003b84:	4603      	mov	r3, r0
 8003b86:	61fb      	str	r3, [r7, #28]
	float beta = atan(LENGTH_SEGMENT_3 * sin(phi[2]) / (LENGTH_SEGMENT_2 + cos(phi[2])*LENGTH_SEGMENT_3));
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fcfa 	bl	8000588 <__aeabi_f2d>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	ec43 2b10 	vmov	d0, r2, r3
 8003b9c:	f005 fe4c 	bl	8009838 <sin>
 8003ba0:	ec51 0b10 	vmov	r0, r1, d0
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca8 <calculateAngles+0x318>)
 8003baa:	f7fc fd45 	bl	8000638 <__aeabi_dmul>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4614      	mov	r4, r2
 8003bb4:	461d      	mov	r5, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fce3 	bl	8000588 <__aeabi_f2d>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	ec43 2b10 	vmov	d0, r2, r3
 8003bca:	f005 fdd9 	bl	8009780 <cos>
 8003bce:	ec51 0b10 	vmov	r0, r1, d0
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	4b34      	ldr	r3, [pc, #208]	@ (8003ca8 <calculateAngles+0x318>)
 8003bd8:	f7fc fd2e 	bl	8000638 <__aeabi_dmul>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca8 <calculateAngles+0x318>)
 8003bea:	f7fc fb6f 	bl	80002cc <__adddf3>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc fe49 	bl	800088c <__aeabi_ddiv>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	ec43 2b17 	vmov	d7, r2, r3
 8003c02:	eeb0 0a47 	vmov.f32	s0, s14
 8003c06:	eef0 0a67 	vmov.f32	s1, s15
 8003c0a:	f005 fc21 	bl	8009450 <atan>
 8003c0e:	ec53 2b10 	vmov	r2, r3, d0
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	f7fc ffe7 	bl	8000be8 <__aeabi_d2f>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	61bb      	str	r3, [r7, #24]

	if (z >= LENGTH_SEGMENT_1)
 8003c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c22:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003c90 <calculateAngles+0x300>
 8003c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2e:	db3d      	blt.n	8003cac <calculateAngles+0x31c>
		phi[1] = M_PI/2 - gamma - beta;
 8003c30:	69f8      	ldr	r0, [r7, #28]
 8003c32:	f7fc fca9 	bl	8000588 <__aeabi_f2d>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	a111      	add	r1, pc, #68	@ (adr r1, 8003c80 <calculateAngles+0x2f0>)
 8003c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c40:	f7fc fb42 	bl	80002c8 <__aeabi_dsub>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4614      	mov	r4, r2
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	69b8      	ldr	r0, [r7, #24]
 8003c4e:	f7fc fc9b 	bl	8000588 <__aeabi_f2d>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4620      	mov	r0, r4
 8003c58:	4629      	mov	r1, r5
 8003c5a:	f7fc fb35 	bl	80002c8 <__aeabi_dsub>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1d1c      	adds	r4, r3, #4
 8003c6a:	f7fc ffbd 	bl	8000be8 <__aeabi_d2f>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	e03a      	b.n	8003cea <calculateAngles+0x35a>
 8003c74:	f3af 8000 	nop.w
 8003c78:	e826d695 	.word	0xe826d695
 8003c7c:	be112e0b 	.word	0xbe112e0b
 8003c80:	54442d18 	.word	0x54442d18
 8003c84:	3ff921fb 	.word	0x3ff921fb
 8003c88:	405c0000 	.word	0x405c0000
 8003c8c:	2000054c 	.word	0x2000054c
 8003c90:	435f0000 	.word	0x435f0000
 8003c94:	40740000 	.word	0x40740000
 8003c98:	40020400 	.word	0x40020400
 8003c9c:	0800b904 	.word	0x0800b904
 8003ca0:	46c80000 	.word	0x46c80000
 8003ca4:	47480000 	.word	0x47480000
 8003ca8:	40640000 	.word	0x40640000
	else
		phi[1] = M_PI/2 + gamma -beta;
 8003cac:	69f8      	ldr	r0, [r7, #28]
 8003cae:	f7fc fc6b 	bl	8000588 <__aeabi_f2d>
 8003cb2:	a358      	add	r3, pc, #352	@ (adr r3, 8003e14 <calculateAngles+0x484>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fb08 	bl	80002cc <__adddf3>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4614      	mov	r4, r2
 8003cc2:	461d      	mov	r5, r3
 8003cc4:	69b8      	ldr	r0, [r7, #24]
 8003cc6:	f7fc fc5f 	bl	8000588 <__aeabi_f2d>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4620      	mov	r0, r4
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f7fc faf9 	bl	80002c8 <__aeabi_dsub>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1d1c      	adds	r4, r3, #4
 8003ce2:	f7fc ff81 	bl	8000be8 <__aeabi_d2f>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	6023      	str	r3, [r4, #0]

	phi[3] = gripper_direction - (phi[1] + phi[2]) + M_PI;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3304      	adds	r3, #4
 8003cee:	ed93 7a00 	vldr	s14, [r3]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d06:	ee17 0a90 	vmov	r0, s15
 8003d0a:	f7fc fc3d 	bl	8000588 <__aeabi_f2d>
 8003d0e:	a343      	add	r3, pc, #268	@ (adr r3, 8003e1c <calculateAngles+0x48c>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f7fc fada 	bl	80002cc <__adddf3>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f103 040c 	add.w	r4, r3, #12
 8003d26:	f7fc ff5f 	bl	8000be8 <__aeabi_d2f>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	6023      	str	r3, [r4, #0]

	phi[0] = toGrad(phi[0]);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	eeb0 0a67 	vmov.f32	s0, s15
 8003d38:	f7ff fc46 	bl	80035c8 <toGrad>
 8003d3c:	eef0 7a40 	vmov.f32	s15, s0
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	edc3 7a00 	vstr	s15, [r3]
	phi[1] = toGrad(phi[1]);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	edd3 7a00 	vldr	s15, [r3]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	1d1c      	adds	r4, r3, #4
 8003d52:	eeb0 0a67 	vmov.f32	s0, s15
 8003d56:	f7ff fc37 	bl	80035c8 <toGrad>
 8003d5a:	eef0 7a40 	vmov.f32	s15, s0
 8003d5e:	edc4 7a00 	vstr	s15, [r4]
	phi[2] = toGrad(phi[2]);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	3308      	adds	r3, #8
 8003d66:	edd3 7a00 	vldr	s15, [r3]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f103 0408 	add.w	r4, r3, #8
 8003d70:	eeb0 0a67 	vmov.f32	s0, s15
 8003d74:	f7ff fc28 	bl	80035c8 <toGrad>
 8003d78:	eef0 7a40 	vmov.f32	s15, s0
 8003d7c:	edc4 7a00 	vstr	s15, [r4]
	phi[3] = toGrad(phi[3]);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	330c      	adds	r3, #12
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f103 040c 	add.w	r4, r3, #12
 8003d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d92:	f7ff fc19 	bl	80035c8 <toGrad>
 8003d96:	eef0 7a40 	vmov.f32	s15, s0
 8003d9a:	edc4 7a00 	vstr	s15, [r4]

	for (int i= 0; i < NUMBER_JOINTS; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da2:	e02a      	b.n	8003dfa <calculateAngles+0x46a>
	{
		if (checkPositionLimits(phi[i], motors[i]->motion.LOW_LIMIT, motors[i]->motion.HIGH_LIMIT, i+1) == MOTOR_ERROR)
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <calculateAngles+0x480>)
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003dbc:	4a14      	ldr	r2, [pc, #80]	@ (8003e10 <calculateAngles+0x480>)
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	eeb0 1a66 	vmov.f32	s2, s13
 8003dd6:	eef0 0a47 	vmov.f32	s1, s14
 8003dda:	eeb0 0a67 	vmov.f32	s0, s15
 8003dde:	f7ff fd7f 	bl	80038e0 <checkPositionLimits>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <calculateAngles+0x464>
		{
			error = MOTOR_ERROR;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			return error;
 8003dee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003df2:	e007      	b.n	8003e04 <calculateAngles+0x474>
	for (int i= 0; i < NUMBER_JOINTS; i++)
 8003df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df6:	3301      	adds	r3, #1
 8003df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	ddd1      	ble.n	8003da4 <calculateAngles+0x414>
		}
	}

	return error;
 8003e00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3730      	adds	r7, #48	@ 0x30
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e0c:	f3af 8000 	nop.w
 8003e10:	2000054c 	.word	0x2000054c
 8003e14:	54442d18 	.word	0x54442d18
 8003e18:	3ff921fb 	.word	0x3ff921fb
 8003e1c:	54442d18 	.word	0x54442d18
 8003e20:	400921fb 	.word	0x400921fb

08003e24 <initMovementVars>:




void initMovementVars(motor_t * motor, motion_mode_t motion_mode)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
	motor->motion.v = 0;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	61da      	str	r2, [r3, #28]
	motor->motion.step = 0;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->motion.motion_mode = motion_mode;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	motor->stallguard.stall_flag = 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <startMovement>:

motor_error_t startMovement(motor_t * motor)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	motor_error_t error = NO_ERROR;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(motor->gpio_ports.step, motor->gpio_pins.step, GPIO_PIN_RESET);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 0100 	ldr.w	r0, [r3, #256]	@ 0x100
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f001 fde6 	bl	8005a4c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&motor->motion.motor_control_timer, TIM_CHANNEL_1, 1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e84:	2201      	movs	r2, #1
 8003e86:	635a      	str	r2, [r3, #52]	@ 0x34
	status = HAL_TIM_OC_Start_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3348      	adds	r3, #72	@ 0x48
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 fa06 	bl	80072a0 <HAL_TIM_OC_Start_IT>
 8003e94:	4603      	mov	r3, r0
 8003e96:	73bb      	strb	r3, [r7, #14]

	if (status != HAL_OK)
 8003e98:	7bbb      	ldrb	r3, [r7, #14]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <startMovement+0x42>
		error = MOTOR_ERROR;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]

	motor->active_movement_flag = 1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	731a      	strb	r2, [r3, #12]

	return error;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <stopMotorMovement>:

void stopMotorMovement(motor_t * motor)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(&motor->motion.motor_control_timer, TIM_CHANNEL_1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3348      	adds	r3, #72	@ 0x48
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 fb03 	bl	80074cc <HAL_TIM_OC_Stop_IT>
	motor->active_movement_flag = 0;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	731a      	strb	r2, [r3, #12]
	initializeDefaults(motor);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 f881 	bl	8004fd4 <initializeDefaults>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <trapezMove>:
 *       Accel: v = sqrt(2 * a_acc * s)
 *       Const: v = v_max
 *       Decel: v = sqrt(2 * a_dec * s_remaining)
 */
static inline void trapezMove(motion_t* mt)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	if (mt->step >= 0 && mt->step < mt->acc_steps)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db1b      	blt.n	8003f22 <trapezMove+0x48>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	da15      	bge.n	8003f22 <trapezMove+0x48>
	{
		mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a12      	ldr	r2, [r2, #32]
 8003efe:	3201      	adds	r2, #1
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f12:	f005 fce5 	bl	80098e0 <sqrtf>
 8003f16:	eef0 7a40 	vmov.f32	s15, s0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	edc3 7a03 	vstr	s15, [r3, #12]
 8003f20:	e043      	b.n	8003faa <trapezMove+0xd0>
		// motion.v = acc_ramp[motion.step]
	}
	else if (mt->const_steps != 0 && mt->step >= mt->acc_steps && mt->step < (mt->total_steps - mt->dec_steps))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d018      	beq.n	8003f5c <trapezMove+0x82>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	db12      	blt.n	8003f5c <trapezMove+0x82>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6919      	ldr	r1, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	1acb      	subs	r3, r1, r3
 8003f44:	429a      	cmp	r2, r3
 8003f46:	da09      	bge.n	8003f5c <trapezMove+0x82>
		mt->v = mt->V_MAX;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	edc3 7a03 	vstr	s15, [r3, #12]
 8003f5a:	e026      	b.n	8003faa <trapezMove+0xd0>
	else if (mt->step >= (mt->total_steps - mt->dec_steps) && mt->step < mt->total_steps)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6919      	ldr	r1, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	1acb      	subs	r3, r1, r3
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	db1d      	blt.n	8003faa <trapezMove+0xd0>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1a      	ldr	r2, [r3, #32]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	da17      	bge.n	8003faa <trapezMove+0xd0>
	{
		mt->v = sqrtf(2 * mt->DEC_MAX * (mt->total_steps - mt->step));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6911      	ldr	r1, [r2, #16]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6a12      	ldr	r2, [r2, #32]
 8003f86:	1a8a      	subs	r2, r1, r2
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	eeb0 0a67 	vmov.f32	s0, s15
 8003f9a:	f005 fca1 	bl	80098e0 <sqrtf>
 8003f9e:	eef0 7a40 	vmov.f32	s15, s0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	edc3 7a03 	vstr	s15, [r3, #12]
		// motion.v = acc_ramp[motion.total_steps - motion.step]
	}
}
 8003fa8:	e7ff      	b.n	8003faa <trapezMove+0xd0>
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_TIM_OC_DelayElapsedCallback>:
 * Every other motion.cycle, as motion.step only triggers on rising edge,
 * the velocity and the compare value is changed depending on current state of velocity ramp.
 *
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	int8_t index;
	motor_t* motor;

	//To know which timer and thus which motor caused the interrupt
	if (htim->Instance == motors[0]->motion.motor_control_timer.Instance){ index = 0; }
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b62      	ldr	r3, [pc, #392]	@ (800414c <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d102      	bne.n	8003fd0 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e026      	b.n	800401e <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[1]->motion.motor_control_timer.Instance){ index = 1; }
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b5d      	ldr	r3, [pc, #372]	@ (800414c <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d102      	bne.n	8003fe4 <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e01c      	b.n	800401e <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[2]->motion.motor_control_timer.Instance){ index = 2; }
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b58      	ldr	r3, [pc, #352]	@ (800414c <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d102      	bne.n	8003ff8 <HAL_TIM_OC_DelayElapsedCallback+0x44>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e012      	b.n	800401e <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[3]->motion.motor_control_timer.Instance){ index = 3; }
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b53      	ldr	r3, [pc, #332]	@ (800414c <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004002:	429a      	cmp	r2, r3
 8004004:	d102      	bne.n	800400c <HAL_TIM_OC_DelayElapsedCallback+0x58>
 8004006:	2303      	movs	r3, #3
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e008      	b.n	800401e <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	else if (htim->Instance == motors[4]->motion.motor_control_timer.Instance){ index = 4; }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b4e      	ldr	r3, [pc, #312]	@ (800414c <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004016:	429a      	cmp	r2, r3
 8004018:	d101      	bne.n	800401e <HAL_TIM_OC_DelayElapsedCallback+0x6a>
 800401a:	2304      	movs	r3, #4
 800401c:	77fb      	strb	r3, [r7, #31]

	motor = motors[index];
 800401e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004022:	4a4a      	ldr	r2, [pc, #296]	@ (800414c <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8004024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004028:	61bb      	str	r3, [r7, #24]
	motion_t* mt = &motor->motion;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	3310      	adds	r3, #16
 800402e:	617b      	str	r3, [r7, #20]

	//Stop timer and movement if the robot reaches its destination
	if (mt->motion_mode == MOTION_TRAPEZ && mt->step >= mt->total_steps)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_TIM_OC_DelayElapsedCallback+0x9a>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	db03      	blt.n	800404e <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	{
		stopMotorMovement(motor);
 8004046:	69b8      	ldr	r0, [r7, #24]
 8004048:	f7ff ff33 	bl	8003eb2 <stopMotorMovement>
		return;
 800404c:	e07a      	b.n	8004144 <HAL_TIM_OC_DelayElapsedCallback+0x190>
	}

	if (mt->cycle % 2 == 0) //Change velocity only every other cycle because step only triggers on rising edge
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d14d      	bne.n	80040f6 <HAL_TIM_OC_DelayElapsedCallback+0x142>
	{
		switch(mt->motion_mode)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_TIM_OC_DelayElapsedCallback+0xbc>
 8004064:	2b00      	cmp	r3, #0
 8004066:	db31      	blt.n	80040cc <HAL_TIM_OC_DelayElapsedCallback+0x118>
 8004068:	3b01      	subs	r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d82e      	bhi.n	80040cc <HAL_TIM_OC_DelayElapsedCallback+0x118>
 800406e:	e003      	b.n	8004078 <HAL_TIM_OC_DelayElapsedCallback+0xc4>
		{
		case MOTION_TRAPEZ:
			trapezMove(mt);
 8004070:	6978      	ldr	r0, [r7, #20]
 8004072:	f7ff ff32 	bl	8003eda <trapezMove>
			break;
 8004076:	e029      	b.n	80040cc <HAL_TIM_OC_DelayElapsedCallback+0x118>
		case MOTION_HOME:	//Since we don't know the exact distance to move in these 2 following cases, there's no deceleration
		case MOTION_GRIP:
			if (mt->step >= 0 && mt->step < mt->acc_steps)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db1b      	blt.n	80040b8 <HAL_TIM_OC_DelayElapsedCallback+0x104>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	6a1a      	ldr	r2, [r3, #32]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	429a      	cmp	r2, r3
 800408a:	da15      	bge.n	80040b8 <HAL_TIM_OC_DelayElapsedCallback+0x104>
				mt->v = sqrtf(2 * mt->ACC_MAX * (mt->step + 1));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	6a12      	ldr	r2, [r2, #32]
 8004094:	3201      	adds	r2, #1
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a4:	eeb0 0a67 	vmov.f32	s0, s15
 80040a8:	f005 fc1a 	bl	80098e0 <sqrtf>
 80040ac:	eef0 7a40 	vmov.f32	s15, s0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	edc3 7a03 	vstr	s15, [r3, #12]
			else
				mt->v = mt->V_MAX;
			break;
 80040b6:	e008      	b.n	80040ca <HAL_TIM_OC_DelayElapsedCallback+0x116>
				mt->v = mt->V_MAX;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 80040ca:	bf00      	nop
		}
		mt->step++;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	621a      	str	r2, [r3, #32]
		if (mt->inverse_motor_direction)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_TIM_OC_DelayElapsedCallback+0x138>
			mt->position--;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	1e5a      	subs	r2, r3, #1
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ea:	e004      	b.n	80040f6 <HAL_TIM_OC_DelayElapsedCallback+0x142>
		else
			mt->position++;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	629a      	str	r2, [r3, #40]	@ 0x28

	}

	mt->cycle++;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_GPIO_TogglePin(motor->gpio_ports.step, motor->gpio_pins.step);
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f001 fcb5 	bl	8005a7e <HAL_GPIO_TogglePin>
	 *	But this is not the answer since the time has to be converted into timer ticks.
	 *	The timer runs at 2 MHz so we need to divide our current period duration by 1 / 2000000 s or 0.5 µs.
	 *	-> delay in ticks = 1/(2*v)/0.0000005 = 2000000/(2*v)
	 */

	int32_t delay = 2000000 / (2 * mt->v);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	edd3 7a03 	vldr	s15, [r3, #12]
 800411a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800411e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8004150 <HAL_TIM_OC_DelayElapsedCallback+0x19c>
 8004122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412a:	ee17 3a90 	vmov	r3, s15
 800412e:	613b      	str	r3, [r7, #16]
	//Add delay to current compare value in register
	int32_t total_delay = __HAL_TIM_GET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1) + delay;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&mt->motor_control_timer, TIM_CHANNEL_1, total_delay);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	2000054c 	.word	0x2000054c
 8004150:	49f42400 	.word	0x49f42400

08004154 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupt service routine for status_check_timers, which periodically invokes status checks.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e024      	b.n	80041ac <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if (htim->Instance == motors[i]->status_check_timer.Instance)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4915      	ldr	r1, [pc, #84]	@ (80041bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800416e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004172:	429a      	cmp	r2, r3
 8004174:	d117      	bne.n	80041a6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if (motors[i]->active_movement_flag)
 8004176:	4a11      	ldr	r2, [pc, #68]	@ (80041bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	7b1b      	ldrb	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <HAL_TIM_PeriodElapsedCallback+0x40>
				motors[i]->status_flag = 1;
 8004184:	4a0d      	ldr	r2, [pc, #52]	@ (80041bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
			else
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);

			break;
 8004192:	e00f      	b.n	80041b4 <HAL_TIM_PeriodElapsedCallback+0x60>
				HAL_TIM_Base_Stop_IT(&motors[i]->status_check_timer);
 8004194:	4a09      	ldr	r2, [pc, #36]	@ (80041bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419c:	3394      	adds	r3, #148	@ 0x94
 800419e:	4618      	mov	r0, r3
 80041a0:	f002 fff6 	bl	8007190 <HAL_TIM_Base_Stop_IT>
			break;
 80041a4:	e006      	b.n	80041b4 <HAL_TIM_PeriodElapsedCallback+0x60>
	for(int i = 0; i < NUMBER_OF_MOTOR; i++)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	ddd7      	ble.n	8004162 <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
//	writeDisplay("HAHA");
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	2000054c 	.word	0x2000054c

080041c0 <moveAbsolute>:


motor_error_t moveAbsolute(float degrees, motor_t* motor)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80041ca:	6038      	str	r0, [r7, #0]
	motor_error_t error = NO_ERROR;
 80041cc:	2302      	movs	r3, #2
 80041ce:	75fb      	strb	r3, [r7, #23]
	if (motor->active_movement_flag)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	7b1b      	ldrb	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <moveAbsolute+0x20>
	{
		error = MOTOR_MOVING_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
		return error;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	e098      	b.n	8004312 <moveAbsolute+0x152>
	}
	if (degrees <= 0)
 80041e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80041e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ec:	d803      	bhi.n	80041f6 <moveAbsolute+0x36>
	{
		error = MOTOR_ERROR;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75fb      	strb	r3, [r7, #23]
		return error;
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	e08d      	b.n	8004312 <moveAbsolute+0x152>
	}

	if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f001 fc09 	bl	8005a1c <HAL_GPIO_ReadPin>
 800420a:	4603      	mov	r3, r0
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <moveAbsolute+0x5c>
		tmc2209_enable(motor->driver);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fdd6 	bl	8002dc8 <tmc2209_enable>

	int actualSteps = toSteps(degrees, motor); //Convert degrees to steps
 800421c:	6838      	ldr	r0, [r7, #0]
 800421e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004222:	f7ff fa27 	bl	8003674 <toSteps>
 8004226:	6138      	str	r0, [r7, #16]

	if (actualSteps > motor->motion.position)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	dd10      	ble.n	8004254 <moveAbsolute+0x94>
	{
		motor->motion.inverse_motor_direction = 0;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		enable_inverse_motor_direction(motor->driver);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe fae3 	bl	800280c <enable_inverse_motor_direction>
		motor->motion.total_steps = actualSteps - motor->motion.position;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	1ad2      	subs	r2, r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	621a      	str	r2, [r3, #32]
 8004252:	e00f      	b.n	8004274 <moveAbsolute+0xb4>
	}
	else
	{
		motor->motion.inverse_motor_direction = 1;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		disable_inverse_motor_direction(motor->driver);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fae4 	bl	8002830 <disable_inverse_motor_direction>
		motor->motion.total_steps = motor->motion.position - actualSteps;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad2      	subs	r2, r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	621a      	str	r2, [r3, #32]
	}

	motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration and deceleration steps
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	6912      	ldr	r2, [r2, #16]
 800427c:	fb03 f202 	mul.w	r2, r3, r2
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	461a      	mov	r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.DEC_MAX);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	6912      	ldr	r2, [r2, #16]
 8004298:	fb03 f202 	mul.w	r2, r3, r2
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.const_steps = motor->motion.total_steps - (motor->motion.acc_steps + motor->motion.dec_steps);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	440b      	add	r3, r1
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	625a      	str	r2, [r3, #36]	@ 0x24

	motion_mode_t motion_mode = MOTION_TRAPEZ;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]

	initMovementVars(motor, motion_mode);
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	4619      	mov	r1, r3
 80042c8:	6838      	ldr	r0, [r7, #0]
 80042ca:	f7ff fdab 	bl	8003e24 <initMovementVars>

	if (motor->motion.const_steps < 0)	//If acceleration steps + deceleration steps are bigger than total steps
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da12      	bge.n	80042fc <moveAbsolute+0x13c>
	{
		motor->motion.acc_steps = motor->motion.total_steps / 2;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	0fda      	lsrs	r2, r3, #31
 80042dc:	4413      	add	r3, r2
 80042de:	105b      	asrs	r3, r3, #1
 80042e0:	461a      	mov	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	629a      	str	r2, [r3, #40]	@ 0x28
		motor->motion.dec_steps = motor->motion.total_steps / 2;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	0fda      	lsrs	r2, r3, #31
 80042ec:	4413      	add	r3, r2
 80042ee:	105b      	asrs	r3, r3, #1
 80042f0:	461a      	mov	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	62da      	str	r2, [r3, #44]	@ 0x2c
		motor->motion.const_steps = 0;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2200      	movs	r2, #0
 80042fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	//Start timer in output compare with interrupt
	error = startMovement(motor);
 80042fc:	6838      	ldr	r0, [r7, #0]
 80042fe:	f7ff fdaf 	bl	8003e60 <startMovement>
 8004302:	4603      	mov	r3, r0
 8004304:	75fb      	strb	r3, [r7, #23]

	error = startStatusChecks(motor);
 8004306:	6838      	ldr	r0, [r7, #0]
 8004308:	f000 fea1 	bl	800504e <startStatusChecks>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

	return error;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <movePolar>:

	return error;
}

motor_error_t movePolar(float theta, float r, float z, float gripper_direction)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	@ 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	ed87 0a03 	vstr	s0, [r7, #12]
 8004326:	edc7 0a02 	vstr	s1, [r7, #8]
 800432a:	ed87 1a01 	vstr	s2, [r7, #4]
 800432e:	edc7 1a00 	vstr	s3, [r7]
	float phi[4] = {0, 0, 0, 0};
 8004332:	f107 0314 	add.w	r3, r7, #20
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	609a      	str	r2, [r3, #8]
 800433e:	60da      	str	r2, [r3, #12]
	motor_error_t error;

	error = calculateAngles(phi, theta, r, z, gripper_direction);
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	edd7 1a00 	vldr	s3, [r7]
 8004348:	ed97 1a01 	vldr	s2, [r7, #4]
 800434c:	edd7 0a02 	vldr	s1, [r7, #8]
 8004350:	ed97 0a03 	vldr	s0, [r7, #12]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fb1b 	bl	8003990 <calculateAngles>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (error == MOTOR_ERROR)
 8004360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <movePolar+0x50>
		while(1);
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <movePolar+0x4c>


	moveAbsolute(phi[0], motors[0]);
 800436c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004370:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <movePolar+0xa4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	eeb0 0a67 	vmov.f32	s0, s15
 800437a:	f7ff ff21 	bl	80041c0 <moveAbsolute>
	moveAbsolute(phi[1], motors[1]);
 800437e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004382:	4b0f      	ldr	r3, [pc, #60]	@ (80043c0 <movePolar+0xa4>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4618      	mov	r0, r3
 8004388:	eeb0 0a67 	vmov.f32	s0, s15
 800438c:	f7ff ff18 	bl	80041c0 <moveAbsolute>
	moveAbsolute(phi[2], motors[2]);
 8004390:	edd7 7a07 	vldr	s15, [r7, #28]
 8004394:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <movePolar+0xa4>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	eeb0 0a67 	vmov.f32	s0, s15
 800439e:	f7ff ff0f 	bl	80041c0 <moveAbsolute>
	moveAbsolute(phi[3], motors[3]);
 80043a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80043a6:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <movePolar+0xa4>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	4618      	mov	r0, r3
 80043ac:	eeb0 0a67 	vmov.f32	s0, s15
 80043b0:	f7ff ff06 	bl	80041c0 <moveAbsolute>
	return error;
 80043b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	@ 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	2000054c 	.word	0x2000054c

080043c4 <moveToCoordinates>:
//	if (error == MOTOR_ERROR || error == MOTOR_MOVING_ERROR)
//		while(1);
//}

motor_error_t moveToCoordinates(float x, float y, float z, float gripper_direction)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b09a      	sub	sp, #104	@ 0x68
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80043ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80043d2:	ed87 1a01 	vstr	s2, [r7, #4]
 80043d6:	edc7 1a00 	vstr	s3, [r7]
	float theta;
	float r;

	motor_error_t error;
	toPolar(x, y, &theta, &r);
 80043da:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80043de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	edd7 0a02 	vldr	s1, [r7, #8]
 80043ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80043ee:	f7ff f98f 	bl	8003710 <toPolar>
	error = movePolar(theta, r, z, gripper_direction);
 80043f2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80043f6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80043fa:	edd7 1a00 	vldr	s3, [r7]
 80043fe:	ed97 1a01 	vldr	s2, [r7, #4]
 8004402:	eef0 0a47 	vmov.f32	s1, s14
 8004406:	eeb0 0a67 	vmov.f32	s0, s15
 800440a:	f7ff ff87 	bl	800431c <movePolar>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (error == NO_ERROR)
 8004414:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004418:	2b02      	cmp	r3, #2
 800441a:	d133      	bne.n	8004484 <moveToCoordinates+0xc0>
	{
		char movingMsg[64];
		snprintf(movingMsg, sizeof(movingMsg), "moving to %d x  %d y %d z", (int)x, (int)y, (int)z);
 800441c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004420:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004424:	edd7 7a02 	vldr	s15, [r7, #8]
 8004428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800442c:	ee17 3a90 	vmov	r3, s15
 8004430:	edd7 7a01 	vldr	s15, [r7, #4]
 8004434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004438:	ee17 2a90 	vmov	r2, s15
 800443c:	f107 0014 	add.w	r0, r7, #20
 8004440:	9201      	str	r2, [sp, #4]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	ee17 3a10 	vmov	r3, s14
 8004448:	4a1b      	ldr	r2, [pc, #108]	@ (80044b8 <moveToCoordinates+0xf4>)
 800444a:	2140      	movs	r1, #64	@ 0x40
 800444c:	f006 fe2e 	bl	800b0ac <sniprintf>
		writeDisplay(movingMsg);
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe fdf9 	bl	800304c <writeDisplay>
	}
 	while(motors[0] -> active_movement_flag ||
 800445a:	e013      	b.n	8004484 <moveToCoordinates+0xc0>
						motors[1] -> active_movement_flag ||
						motors[2] -> active_movement_flag ||
						motors[3] -> active_movement_flag )
  	{
  		checkDriverStatus(motors[0]);
 800445c:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <moveToCoordinates+0xf8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fe97 	bl	8005194 <checkDriverStatus>
  		checkDriverStatus(motors[1]);
 8004466:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <moveToCoordinates+0xf8>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fe92 	bl	8005194 <checkDriverStatus>
  		checkDriverStatus(motors[2]);
 8004470:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <moveToCoordinates+0xf8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fe8d 	bl	8005194 <checkDriverStatus>
  		checkDriverStatus(motors[3]);
 800447a:	4b10      	ldr	r3, [pc, #64]	@ (80044bc <moveToCoordinates+0xf8>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fe88 	bl	8005194 <checkDriverStatus>
 	while(motors[0] -> active_movement_flag ||
 8004484:	4b0d      	ldr	r3, [pc, #52]	@ (80044bc <moveToCoordinates+0xf8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	7b1b      	ldrb	r3, [r3, #12]
						motors[2] -> active_movement_flag ||
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e6      	bne.n	800445c <moveToCoordinates+0x98>
						motors[1] -> active_movement_flag ||
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <moveToCoordinates+0xf8>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	7b1b      	ldrb	r3, [r3, #12]
 	while(motors[0] -> active_movement_flag ||
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e1      	bne.n	800445c <moveToCoordinates+0x98>
						motors[2] -> active_movement_flag ||
 8004498:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <moveToCoordinates+0xf8>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	7b1b      	ldrb	r3, [r3, #12]
						motors[1] -> active_movement_flag ||
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1dc      	bne.n	800445c <moveToCoordinates+0x98>
						motors[3] -> active_movement_flag )
 80044a2:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <moveToCoordinates+0xf8>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	7b1b      	ldrb	r3, [r3, #12]
						motors[2] -> active_movement_flag ||
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1d7      	bne.n	800445c <moveToCoordinates+0x98>
  	}
	return error;
 80044ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3760      	adds	r7, #96	@ 0x60
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	0800b920 	.word	0x0800b920
 80044bc:	2000054c 	.word	0x2000054c

080044c0 <openGripper>:

motor_error_t openGripper()
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
	motor_error_t error = NO_ERROR;
 80044c6:	2302      	movs	r3, #2
 80044c8:	71fb      	strb	r3, [r7, #7]
	error = moveGripper(OPEN);
 80044ca:	2000      	movs	r0, #0
 80044cc:	f000 f816 	bl	80044fc <moveGripper>
 80044d0:	4603      	mov	r3, r0
 80044d2:	71fb      	strb	r3, [r7, #7]
	return error;
 80044d4:	79fb      	ldrb	r3, [r7, #7]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <grip>:

motor_error_t grip()
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
	motor_error_t error = NO_ERROR;
 80044e4:	2302      	movs	r3, #2
 80044e6:	71fb      	strb	r3, [r7, #7]
	error = moveGripper(CLOSE);
 80044e8:	2001      	movs	r0, #1
 80044ea:	f000 f807 	bl	80044fc <moveGripper>
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
	return error;
 80044f2:	79fb      	ldrb	r3, [r7, #7]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <moveGripper>:

motor_error_t moveGripper(gripper_close_open_t direction)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
	motor_error_t error = NO_ERROR;
 8004506:	2302      	movs	r3, #2
 8004508:	75fb      	strb	r3, [r7, #23]
	motor_t * motor5 = motors[4];
 800450a:	4b35      	ldr	r3, [pc, #212]	@ (80045e0 <moveGripper+0xe4>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	613b      	str	r3, [r7, #16]
	if (motor5->active_movement_flag)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	7b1b      	ldrb	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <moveGripper+0x24>
	{
		error = MOTOR_MOVING_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75fb      	strb	r3, [r7, #23]
		return error;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	e05a      	b.n	80045d6 <moveGripper+0xda>
	}

	if (direction == CLOSE)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10a      	bne.n	800453c <moveGripper+0x40>
	{
		enable_inverse_motor_direction(motor5->driver);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe f96d 	bl	800280c <enable_inverse_motor_direction>
		motor5->motion.inverse_motor_direction = 0;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800453a:	e011      	b.n	8004560 <moveGripper+0x64>
	}
	else if (direction == OPEN)
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <moveGripper+0x5c>
	{
		disable_inverse_motor_direction(motor5->driver);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe f971 	bl	8002830 <disable_inverse_motor_direction>
		motor5->motion.inverse_motor_direction = 1;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004556:	e003      	b.n	8004560 <moveGripper+0x64>
	}
	else
	{
		error = MOTOR_ERROR;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
		return error;
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	e03a      	b.n	80045d6 <moveGripper+0xda>
	}

	if (HAL_GPIO_ReadPin(motor5->gpio_ports.mot_en, motor5->gpio_pins.mot_en) == GPIO_PIN_SET)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f001 fa54 	bl	8005a1c <HAL_GPIO_ReadPin>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <moveGripper+0x8a>
		tmc2209_enable(motor5->driver);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe fc21 	bl	8002dc8 <tmc2209_enable>

	motor5->motion.acc_steps = (motor5->motion.V_MAX * motor5->motion.V_MAX) / (2 * motor5->motion.ACC_MAX); //Calculate total acceleration steps
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	6912      	ldr	r2, [r2, #16]
 800458e:	fb03 f202 	mul.w	r2, r3, r2
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	461a      	mov	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	629a      	str	r2, [r3, #40]	@ 0x28

	motion_mode_t motion_mode = MOTION_GRIP;
 80045a2:	2302      	movs	r3, #2
 80045a4:	73fb      	strb	r3, [r7, #15]
	initMovementVars(motor5, motion_mode);
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	4619      	mov	r1, r3
 80045aa:	6938      	ldr	r0, [r7, #16]
 80045ac:	f7ff fc3a 	bl	8003e24 <initMovementVars>

	error = startMovement(motor5);
 80045b0:	6938      	ldr	r0, [r7, #16]
 80045b2:	f7ff fc55 	bl	8003e60 <startMovement>
 80045b6:	4603      	mov	r3, r0
 80045b8:	75fb      	strb	r3, [r7, #23]
	error = startStatusChecks(motor5);
 80045ba:	6938      	ldr	r0, [r7, #16]
 80045bc:	f000 fd47 	bl	800504e <startStatusChecks>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]
	while (motor5->active_movement_flag)
 80045c4:	e002      	b.n	80045cc <moveGripper+0xd0>
	{
		checkDriverStatus(motor5);
 80045c6:	6938      	ldr	r0, [r7, #16]
 80045c8:	f000 fde4 	bl	8005194 <checkDriverStatus>
	while (motor5->active_movement_flag)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	7b1b      	ldrb	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f8      	bne.n	80045c6 <moveGripper+0xca>
	}
	return error;
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	2000054c 	.word	0x2000054c

080045e4 <goHome>:

motor_error_t goHome()
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
	motor_error_t error = NO_ERROR;
 80045ea:	2302      	movs	r3, #2
 80045ec:	73fb      	strb	r3, [r7, #15]

	if (motors[0]->active_movement_flag ||
 80045ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004764 <goHome+0x180>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	7b1b      	ldrb	r3, [r3, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d113      	bne.n	8004620 <goHome+0x3c>
			motors[1]->active_movement_flag ||
 80045f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004764 <goHome+0x180>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	7b1b      	ldrb	r3, [r3, #12]
	if (motors[0]->active_movement_flag ||
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10e      	bne.n	8004620 <goHome+0x3c>
			motors[2]->active_movement_flag ||
 8004602:	4b58      	ldr	r3, [pc, #352]	@ (8004764 <goHome+0x180>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	7b1b      	ldrb	r3, [r3, #12]
			motors[1]->active_movement_flag ||
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <goHome+0x3c>
			motors[3]->active_movement_flag ||
 800460c:	4b55      	ldr	r3, [pc, #340]	@ (8004764 <goHome+0x180>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	7b1b      	ldrb	r3, [r3, #12]
			motors[2]->active_movement_flag ||
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <goHome+0x3c>
			motors[4]->active_movement_flag)
 8004616:	4b53      	ldr	r3, [pc, #332]	@ (8004764 <goHome+0x180>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	7b1b      	ldrb	r3, [r3, #12]
			motors[3]->active_movement_flag ||
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <goHome+0x44>
	{
		error = MOTOR_MOVING_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
		return error;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	e098      	b.n	800475a <goHome+0x176>
	};

	writeDisplay("Homing...");
 8004628:	484f      	ldr	r0, [pc, #316]	@ (8004768 <goHome+0x184>)
 800462a:	f7fe fd0f 	bl	800304c <writeDisplay>

	for (int i = 0; i < NUMBER_OF_MOTOR; i++)
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	e039      	b.n	80046a8 <goHome+0xc4>
	{
		motor_t * motor = motors[i];
 8004634:	4a4b      	ldr	r2, [pc, #300]	@ (8004764 <goHome+0x180>)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463c:	607b      	str	r3, [r7, #4]
//		if (i == 3)
//			continue;

		motion_mode_t motion_mode = MOTION_HOME;
 800463e:	2301      	movs	r3, #1
 8004640:	70fb      	strb	r3, [r7, #3]

		if (HAL_GPIO_ReadPin(motor->gpio_ports.mot_en, motor->gpio_pins.mot_en) == GPIO_PIN_SET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f001 f9e3 	bl	8005a1c <HAL_GPIO_ReadPin>
 8004656:	4603      	mov	r3, r0
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <goHome+0x84>
			tmc2209_enable(motor->driver);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fbb0 	bl	8002dc8 <tmc2209_enable>

		motor->motion.acc_steps = (motor->motion.V_MAX * motor->motion.V_MAX) / (2 * motor->motion.ACC_MAX); //Calculate total acceleration steps
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6912      	ldr	r2, [r2, #16]
 8004670:	fb03 f202 	mul.w	r2, r3, r2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28

		initMovementVars(motor, motion_mode);
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fbcb 	bl	8003e24 <initMovementVars>

		error = startMovement(motor);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff fbe6 	bl	8003e60 <startMovement>
 8004694:	4603      	mov	r3, r0
 8004696:	73fb      	strb	r3, [r7, #15]
		error = startStatusChecks(motor);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fcd8 	bl	800504e <startStatusChecks>
 800469e:	4603      	mov	r3, r0
 80046a0:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < NUMBER_OF_MOTOR; i++)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	3301      	adds	r3, #1
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	ddc2      	ble.n	8004634 <goHome+0x50>
	}

	while(motors[0]->stallguard.stall_flag == 0
 80046ae:	e001      	b.n	80046b4 <goHome+0xd0>
			|| motors[2]->stallguard.stall_flag == 0
			|| motors[3]->stallguard.stall_flag == 0
			|| motors[4]->stallguard.stall_flag == 0) //If there is no flag and motors[4]->stallguard.stall_flag == 1 (and every other motors already stalled),
										// while loop breaks -> so openGripper() isn't called. It make sure even if motor 5 is the last one stalled, openGripper() always called.
	{
		checkAllDrivers();
 80046b0:	f000 fd84 	bl	80051bc <checkAllDrivers>
	while(motors[0]->stallguard.stall_flag == 0
 80046b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004764 <goHome+0x180>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
			|| motors[4]->stallguard.stall_flag == 0) //If there is no flag and motors[4]->stallguard.stall_flag == 1 (and every other motors already stalled),
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f7      	beq.n	80046b0 <goHome+0xcc>
			|| motors[1]->stallguard.stall_flag == 0
 80046c0:	4b28      	ldr	r3, [pc, #160]	@ (8004764 <goHome+0x180>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f1      	beq.n	80046b0 <goHome+0xcc>
			|| motors[2]->stallguard.stall_flag == 0
 80046cc:	4b25      	ldr	r3, [pc, #148]	@ (8004764 <goHome+0x180>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0eb      	beq.n	80046b0 <goHome+0xcc>
			|| motors[3]->stallguard.stall_flag == 0
 80046d8:	4b22      	ldr	r3, [pc, #136]	@ (8004764 <goHome+0x180>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0e5      	beq.n	80046b0 <goHome+0xcc>
			|| motors[4]->stallguard.stall_flag == 0) //If there is no flag and motors[4]->stallguard.stall_flag == 1 (and every other motors already stalled),
 80046e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004764 <goHome+0x180>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0df      	beq.n	80046b0 <goHome+0xcc>
	}

	writeDisplay("Homing finished");
 80046f0:	481e      	ldr	r0, [pc, #120]	@ (800476c <goHome+0x188>)
 80046f2:	f7fe fcab 	bl	800304c <writeDisplay>

	motors[0]->stallguard.stall_flag = 0;
 80046f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <goHome+0x180>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	motors[1]->stallguard.stall_flag = 0;
 8004700:	4b18      	ldr	r3, [pc, #96]	@ (8004764 <goHome+0x180>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	motors[2]->stallguard.stall_flag = 0;
 800470a:	4b16      	ldr	r3, [pc, #88]	@ (8004764 <goHome+0x180>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	motors[3]->stallguard.stall_flag = 0;
 8004714:	4b13      	ldr	r3, [pc, #76]	@ (8004764 <goHome+0x180>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
	motors[4]->stallguard.stall_flag = 0;
 800471e:	4b11      	ldr	r3, [pc, #68]	@ (8004764 <goHome+0x180>)
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea

	motors[0]->motion.position = 1245;
 8004728:	4b0e      	ldr	r3, [pc, #56]	@ (8004764 <goHome+0x180>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f240 42dd 	movw	r2, #1245	@ 0x4dd
 8004730:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[1]->motion.position = 0;
 8004732:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <goHome+0x180>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[2]->motion.position = 0;
 800473a:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <goHome+0x180>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2200      	movs	r2, #0
 8004740:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[3]->motion.position = 0;
 8004742:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <goHome+0x180>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[4]->motion.position = 0;
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <goHome+0x180>)
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2200      	movs	r2, #0
 8004750:	639a      	str	r2, [r3, #56]	@ 0x38

	writeDisplay("Homing finished");
 8004752:	4806      	ldr	r0, [pc, #24]	@ (800476c <goHome+0x188>)
 8004754:	f7fe fc7a 	bl	800304c <writeDisplay>

	return error;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	2000054c 	.word	0x2000054c
 8004768:	0800b93c 	.word	0x0800b93c
 800476c:	0800b948 	.word	0x0800b948

08004770 <initAllMotors>:
void initMotor3(uart_mode_t UART_MODE);
void initMotor4(uart_mode_t UART_MODE);
void initMotor5(uart_mode_t UART_MODE);

void initAllMotors(uart_mode_t UART_MODE)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
	initMotor1(UART_MODE);
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f815 	bl	80047ac <initMotor1>
	initMotor2(UART_MODE);
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f8e3 	bl	8004950 <initMotor2>
	initMotor3(UART_MODE);
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f9af 	bl	8004af0 <initMotor3>
	initMotor4(UART_MODE);
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fa87 	bl	8004ca8 <initMotor4>
	initMotor5(UART_MODE);
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fb51 	bl	8004e44 <initMotor5>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <initMotor1>:

void initMotor1(uart_mode_t UART_MODE)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]
	motor_t * motor1 = motors[0];
 80047b6:	4b5d      	ldr	r3, [pc, #372]	@ (800492c <initMotor1+0x180>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver1 = motor1->driver;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80047c2:	60bb      	str	r3, [r7, #8]

	motor1->gpio_pins.mot_en 	= MOT_EN_1_Pin;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80047ca:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor1->gpio_ports.mot_en 	= MOT_EN_1_GPIO_Port;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a57      	ldr	r2, [pc, #348]	@ (8004930 <initMotor1+0x184>)
 80047d2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver1, motor1->gpio_pins.mot_en, motor1->gpio_ports.mot_en);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80047e2:	461a      	mov	r2, r3
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f7fe fad8 	bl	8002d9a <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver1);
 80047ea:	68b8      	ldr	r0, [r7, #8]
 80047ec:	f7fe fb0b 	bl	8002e06 <tmc2209_disable>

	initializeDefaults(motor1);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fbef 	bl	8004fd4 <initializeDefaults>
	motor1->ID = '1';
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2231      	movs	r2, #49	@ 0x31
 80047fa:	701a      	strb	r2, [r3, #0]

	motor1->gear_ratio = GEAR_RATIO_M_1;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004934 <initMotor1+0x188>)
 8004800:	605a      	str	r2, [r3, #4]
	motor1->microsteps = MICROSTEPS_M_1;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	609a      	str	r2, [r3, #8]
	motor1->motion.V_MAX 	= V_MAX_M_1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800480e:	611a      	str	r2, [r3, #16]
	motor1->motion.ACC_MAX = ACC_MAX_M_1;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8004816:	615a      	str	r2, [r3, #20]
	motor1->motion.DEC_MAX = DEC_MAX_M_1;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800481e:	619a      	str	r2, [r3, #24]

	motor1->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_1;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	221e      	movs	r2, #30
 8004824:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor1->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_1;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2246      	movs	r2, #70	@ 0x46
 800482c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor1->gpio_pins.step 		= STEP_1_Pin;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004836:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor1->gpio_pins.dir 		= DIR_1_Pin;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004840:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
//	motor1->gpio_pins.diag 		= DIAG_1_Pin;
	motor1->gpio_ports.step 	= STEP_1_GPIO_Port;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a3a      	ldr	r2, [pc, #232]	@ (8004930 <initMotor1+0x184>)
 8004848:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor1->gpio_ports.dir 		= DIR_1_GPIO_Port;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a38      	ldr	r2, [pc, #224]	@ (8004930 <initMotor1+0x184>)
 8004850:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	motor1->gpio_ports.diag		= DIAG_1_GPIO_Port;

	motor1->motion.motor_control_timer = htim12;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a38      	ldr	r2, [pc, #224]	@ (8004938 <initMotor1+0x18c>)
 8004858:	3348      	adds	r3, #72	@ 0x48
 800485a:	4611      	mov	r1, r2
 800485c:	2248      	movs	r2, #72	@ 0x48
 800485e:	4618      	mov	r0, r3
 8004860:	f006 fcb8 	bl	800b1d4 <memcpy>
	motor1->status_check_timer = htim1;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a35      	ldr	r2, [pc, #212]	@ (800493c <initMotor1+0x190>)
 8004868:	3394      	adds	r3, #148	@ 0x94
 800486a:	4611      	mov	r1, r2
 800486c:	2248      	movs	r2, #72	@ 0x48
 800486e:	4618      	mov	r0, r3
 8004870:	f006 fcb0 	bl	800b1d4 <memcpy>
	if (UART_MODE == MODE_5_UART)
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10f      	bne.n	800489a <initMotor1+0xee>
	{
		motor1->uart = huart1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a30      	ldr	r2, [pc, #192]	@ (8004940 <initMotor1+0x194>)
 800487e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004882:	4611      	mov	r1, r2
 8004884:	2248      	movs	r2, #72	@ 0x48
 8004886:	4618      	mov	r0, r3
 8004888:	f006 fca4 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 800488c:	2200      	movs	r2, #0
 800488e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f7fd fe84 	bl	80025a0 <tmc2209_setup>
 8004898:	e011      	b.n	80048be <initMotor1+0x112>
	}
	else if (UART_MODE == MODE_2_UART)
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10e      	bne.n	80048be <initMotor1+0x112>
	{
		motor1->uart = huart1;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a27      	ldr	r2, [pc, #156]	@ (8004940 <initMotor1+0x194>)
 80048a4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80048a8:	4611      	mov	r1, r2
 80048aa:	2248      	movs	r2, #72	@ 0x48
 80048ac:	4618      	mov	r0, r3
 80048ae:	f006 fc91 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver1, 115200, SERIAL_ADDRESS_0);
 80048b2:	2200      	movs	r2, #0
 80048b4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80048b8:	68b8      	ldr	r0, [r7, #8]
 80048ba:	f7fd fe71 	bl	80025a0 <tmc2209_setup>
	}

	motor1->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f64e 7295 	movw	r2, #61333	@ 0xef95
 80048c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor1->motion.HIGH_LIMIT = HIGH_LIMIT_M_1;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004944 <initMotor1+0x198>)
 80048cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor1->motion.LOW_LIMIT = LOW_LIMIT_M_1;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004948 <initMotor1+0x19c>)
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

	motor1->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_1;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor1->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_1;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a1b      	ldr	r2, [pc, #108]	@ (800494c <initMotor1+0x1a0>)
 80048e0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor1->stallguard.STALL_BUFFER = STALL_BUFFER_M_1;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2219      	movs	r2, #25
 80048e8:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver1->uart_ = motor1->uart;
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f102 0008 	add.w	r0, r2, #8
 80048f4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80048f8:	2248      	movs	r2, #72	@ 0x48
 80048fa:	4619      	mov	r1, r3
 80048fc:	f006 fc6a 	bl	800b1d4 <memcpy>

	set_micro_steps_per_step(driver1, motor1->microsteps);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	b29b      	uxth	r3, r3
 8004906:	4619      	mov	r1, r3
 8004908:	68b8      	ldr	r0, [r7, #8]
 800490a:	f7fd fe99 	bl	8002640 <set_micro_steps_per_step>
	set_all_current_percent_values(driver1, motor1->current_settings.RUN_CURRENT_PERCENT, motor1->current_settings.HOLD_CURRENT_PERCENT, 0);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800491a:	2300      	movs	r3, #0
 800491c:	68b8      	ldr	r0, [r7, #8]
 800491e:	f7fd ff2b 	bl	8002778 <set_all_current_percent_values>

}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	2000054c 	.word	0x2000054c
 8004930:	40020400 	.word	0x40020400
 8004934:	41200000 	.word	0x41200000
 8004938:	2000030c 	.word	0x2000030c
 800493c:	200000cc 	.word	0x200000cc
 8004940:	2000042c 	.word	0x2000042c
 8004944:	43b0c8f6 	.word	0x43b0c8f6
 8004948:	40cdc28f 	.word	0x40cdc28f
 800494c:	43280000 	.word	0x43280000

08004950 <initMotor2>:

void initMotor2(uart_mode_t UART_MODE)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
	motor_t * motor2 = motors[1];
 800495a:	4b5c      	ldr	r3, [pc, #368]	@ (8004acc <initMotor2+0x17c>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver2 = motor2->driver;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004966:	60bb      	str	r3, [r7, #8]

	motor2->gpio_pins.mot_en 	= MOT_EN_2_Pin;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2240      	movs	r2, #64	@ 0x40
 800496c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor2->gpio_ports.mot_en 	= MOT_EN_2_GPIO_Port;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a57      	ldr	r2, [pc, #348]	@ (8004ad0 <initMotor2+0x180>)
 8004974:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver2, motor2->gpio_pins.mot_en, motor2->gpio_ports.mot_en);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004984:	461a      	mov	r2, r3
 8004986:	68b8      	ldr	r0, [r7, #8]
 8004988:	f7fe fa07 	bl	8002d9a <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver2);
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f7fe fa3a 	bl	8002e06 <tmc2209_disable>

	initializeDefaults(motor2);
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fb1e 	bl	8004fd4 <initializeDefaults>
	motor2->ID = '2';
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2232      	movs	r2, #50	@ 0x32
 800499c:	701a      	strb	r2, [r3, #0]

	motor2->gear_ratio = GEAR_RATIO_M_2;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a4c      	ldr	r2, [pc, #304]	@ (8004ad4 <initMotor2+0x184>)
 80049a2:	605a      	str	r2, [r3, #4]
	motor2->microsteps = MICROSTEPS_M_2;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	609a      	str	r2, [r3, #8]
	motor2->motion.V_MAX 	= V_MAX_M_2;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80049b0:	611a      	str	r2, [r3, #16]
	motor2->motion.ACC_MAX = ACC_MAX_M_2;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80049b8:	615a      	str	r2, [r3, #20]
	motor2->motion.DEC_MAX = DEC_MAX_M_2;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80049c0:	619a      	str	r2, [r3, #24]


	motor2->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_2;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	225a      	movs	r2, #90	@ 0x5a
 80049c6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor2->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_2;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2264      	movs	r2, #100	@ 0x64
 80049ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor2->gpio_pins.step 		= STEP_2_Pin;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2280      	movs	r2, #128	@ 0x80
 80049d6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor2->gpio_pins.dir 		= DIR_2_Pin;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049e0:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
//	motor2->gpio_pins.diag 		= DIAG_2_Pin;
	motor2->gpio_ports.step 	= STEP_2_GPIO_Port;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ad0 <initMotor2+0x180>)
 80049e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor2->gpio_ports.dir 		= DIR_2_GPIO_Port;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a38      	ldr	r2, [pc, #224]	@ (8004ad0 <initMotor2+0x180>)
 80049f0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	motor2->gpio_ports.diag 	= DIAG_2_GPIO_Port;

	motor2->motion.motor_control_timer = htim13;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a38      	ldr	r2, [pc, #224]	@ (8004ad8 <initMotor2+0x188>)
 80049f8:	3348      	adds	r3, #72	@ 0x48
 80049fa:	4611      	mov	r1, r2
 80049fc:	2248      	movs	r2, #72	@ 0x48
 80049fe:	4618      	mov	r0, r3
 8004a00:	f006 fbe8 	bl	800b1d4 <memcpy>
	motor2->status_check_timer = htim6;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a35      	ldr	r2, [pc, #212]	@ (8004adc <initMotor2+0x18c>)
 8004a08:	3394      	adds	r3, #148	@ 0x94
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	2248      	movs	r2, #72	@ 0x48
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f006 fbe0 	bl	800b1d4 <memcpy>

	if (UART_MODE == MODE_5_UART)
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10f      	bne.n	8004a3a <initMotor2+0xea>
	{
		motor2->uart = huart6;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4a30      	ldr	r2, [pc, #192]	@ (8004ae0 <initMotor2+0x190>)
 8004a1e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004a22:	4611      	mov	r1, r2
 8004a24:	2248      	movs	r2, #72	@ 0x48
 8004a26:	4618      	mov	r0, r3
 8004a28:	f006 fbd4 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_0);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004a32:	68b8      	ldr	r0, [r7, #8]
 8004a34:	f7fd fdb4 	bl	80025a0 <tmc2209_setup>
 8004a38:	e011      	b.n	8004a5e <initMotor2+0x10e>
	}
	else if (UART_MODE == MODE_2_UART)
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10e      	bne.n	8004a5e <initMotor2+0x10e>
	{
		motor2->uart = huart1;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a28      	ldr	r2, [pc, #160]	@ (8004ae4 <initMotor2+0x194>)
 8004a44:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004a48:	4611      	mov	r1, r2
 8004a4a:	2248      	movs	r2, #72	@ 0x48
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f006 fbc1 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver2, 115200, SERIAL_ADDRESS_1);
 8004a52:	2201      	movs	r2, #1
 8004a54:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004a58:	68b8      	ldr	r0, [r7, #8]
 8004a5a:	f7fd fda1 	bl	80025a0 <tmc2209_setup>
	}

	motor2->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_2;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8004a64:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor2->motion.HIGH_LIMIT = HIGH_LIMIT_M_2;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae8 <initMotor2+0x198>)
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor2->motion.LOW_LIMIT = LOW_LIMIT_M_2;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40

	motor2->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_2;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor2->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_2;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a1a      	ldr	r2, [pc, #104]	@ (8004aec <initMotor2+0x19c>)
 8004a82:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor2->stallguard.STALL_BUFFER = STALL_BUFFER_M_2;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2228      	movs	r2, #40	@ 0x28
 8004a8a:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver2->uart_ = motor2->uart;
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f102 0008 	add.w	r0, r2, #8
 8004a96:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004a9a:	2248      	movs	r2, #72	@ 0x48
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f006 fb99 	bl	800b1d4 <memcpy>


	set_micro_steps_per_step(driver2, motor2->microsteps);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68b8      	ldr	r0, [r7, #8]
 8004aac:	f7fd fdc8 	bl	8002640 <set_micro_steps_per_step>
	set_all_current_percent_values(driver2, motor2->current_settings.RUN_CURRENT_PERCENT, motor2->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004abc:	2300      	movs	r3, #0
 8004abe:	68b8      	ldr	r0, [r7, #8]
 8004ac0:	f7fd fe5a 	bl	8002778 <set_all_current_percent_values>

}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	2000054c 	.word	0x2000054c
 8004ad0:	40020000 	.word	0x40020000
 8004ad4:	40f00000 	.word	0x40f00000
 8004ad8:	20000354 	.word	0x20000354
 8004adc:	200001a4 	.word	0x200001a4
 8004ae0:	20000504 	.word	0x20000504
 8004ae4:	2000042c 	.word	0x2000042c
 8004ae8:	42e9d70a 	.word	0x42e9d70a
 8004aec:	42a4cccd 	.word	0x42a4cccd

08004af0 <initMotor3>:

void initMotor3(uart_mode_t UART_MODE)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	71fb      	strb	r3, [r7, #7]
	motor_t * motor3 = motors[2];
 8004afa:	4b61      	ldr	r3, [pc, #388]	@ (8004c80 <initMotor3+0x190>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver3 = motor3->driver;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004b06:	60bb      	str	r3, [r7, #8]

	motor3->gpio_pins.mot_en 	= MOT_EN_3_Pin;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor3->gpio_ports.mot_en 	= MOT_EN_3_GPIO_Port;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a5c      	ldr	r2, [pc, #368]	@ (8004c84 <initMotor3+0x194>)
 8004b14:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver3, motor3->gpio_pins.mot_en, motor3->gpio_ports.mot_en);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b24:	461a      	mov	r2, r3
 8004b26:	68b8      	ldr	r0, [r7, #8]
 8004b28:	f7fe f937 	bl	8002d9a <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver3);
 8004b2c:	68b8      	ldr	r0, [r7, #8]
 8004b2e:	f7fe f96a 	bl	8002e06 <tmc2209_disable>

	initializeDefaults(motor3);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fa4e 	bl	8004fd4 <initializeDefaults>

	motor3->ID = '3';
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2233      	movs	r2, #51	@ 0x33
 8004b3c:	701a      	strb	r2, [r3, #0]

	motor3->gear_ratio = GEAR_RATIO_M_3;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a51      	ldr	r2, [pc, #324]	@ (8004c88 <initMotor3+0x198>)
 8004b42:	605a      	str	r2, [r3, #4]
	motor3->microsteps = MICROSTEPS_M_3;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	609a      	str	r2, [r3, #8]
	motor3->motion.V_MAX 	= V_MAX_M_3;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8004b50:	611a      	str	r2, [r3, #16]
	motor3->motion.ACC_MAX = ACC_MAX_M_3;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8004b58:	615a      	str	r2, [r3, #20]
	motor3->motion.DEC_MAX = DEC_MAX_M_3;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8004b60:	619a      	str	r2, [r3, #24]

	motor3->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_3;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2228      	movs	r2, #40	@ 0x28
 8004b66:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor3->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_3;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	223c      	movs	r2, #60	@ 0x3c
 8004b6e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor3->gpio_pins.step 		= STEP_3_Pin;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2208      	movs	r2, #8
 8004b76:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor3->gpio_pins.dir 		= DIR_3_Pin;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b80:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor3->gpio_pins.diag 		= DIAG_3_Pin;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b8a:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
	motor3->gpio_ports.step 	= STEP_3_GPIO_Port;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a3c      	ldr	r2, [pc, #240]	@ (8004c84 <initMotor3+0x194>)
 8004b92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor3->gpio_ports.dir 		= DIR_3_GPIO_Port;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a3a      	ldr	r2, [pc, #232]	@ (8004c84 <initMotor3+0x194>)
 8004b9a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	motor3->gpio_ports.diag 	= DIAG_3_GPIO_Port;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8004c8c <initMotor3+0x19c>)
 8004ba2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	motor3->motion.motor_control_timer = htim3;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a39      	ldr	r2, [pc, #228]	@ (8004c90 <initMotor3+0x1a0>)
 8004baa:	3348      	adds	r3, #72	@ 0x48
 8004bac:	4611      	mov	r1, r2
 8004bae:	2248      	movs	r2, #72	@ 0x48
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f006 fb0f 	bl	800b1d4 <memcpy>
	motor3->status_check_timer = htim7;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a36      	ldr	r2, [pc, #216]	@ (8004c94 <initMotor3+0x1a4>)
 8004bba:	3394      	adds	r3, #148	@ 0x94
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	2248      	movs	r2, #72	@ 0x48
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f006 fb07 	bl	800b1d4 <memcpy>

	if (UART_MODE == MODE_5_UART)
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d10f      	bne.n	8004bec <initMotor3+0xfc>
	{
		motor3->uart = huart3;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a32      	ldr	r2, [pc, #200]	@ (8004c98 <initMotor3+0x1a8>)
 8004bd0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	2248      	movs	r2, #72	@ 0x48
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f006 fafb 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_0);
 8004bde:	2200      	movs	r2, #0
 8004be0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004be4:	68b8      	ldr	r0, [r7, #8]
 8004be6:	f7fd fcdb 	bl	80025a0 <tmc2209_setup>
 8004bea:	e011      	b.n	8004c10 <initMotor3+0x120>
	}
	else if (UART_MODE == MODE_2_UART)
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10e      	bne.n	8004c10 <initMotor3+0x120>
	{
		motor3->uart = huart1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a29      	ldr	r2, [pc, #164]	@ (8004c9c <initMotor3+0x1ac>)
 8004bf6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	2248      	movs	r2, #72	@ 0x48
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f006 fae8 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver3, 115200, SERIAL_ADDRESS_2);
 8004c04:	2202      	movs	r2, #2
 8004c06:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004c0a:	68b8      	ldr	r0, [r7, #8]
 8004c0c:	f7fd fcc8 	bl	80025a0 <tmc2209_setup>
	}

	motor3->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_3;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f643 426a 	movw	r2, #15466	@ 0x3c6a
 8004c16:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor3->motion.HIGH_LIMIT = HIGH_LIMIT_M_3;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a20      	ldr	r2, [pc, #128]	@ (8004ca0 <initMotor3+0x1b0>)
 8004c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor3->motion.LOW_LIMIT = LOW_LIMIT_M_3;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	641a      	str	r2, [r3, #64]	@ 0x40

	motor3->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_3;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor3->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_3;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca4 <initMotor3+0x1b4>)
 8004c34:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor3->stallguard.STALL_BUFFER = STALL_BUFFER_M_3;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2219      	movs	r2, #25
 8004c3c:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver3->uart_ = motor3->uart;
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f102 0008 	add.w	r0, r2, #8
 8004c48:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004c4c:	2248      	movs	r2, #72	@ 0x48
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f006 fac0 	bl	800b1d4 <memcpy>

	set_micro_steps_per_step(driver3, motor3->microsteps);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68b8      	ldr	r0, [r7, #8]
 8004c5e:	f7fd fcef 	bl	8002640 <set_micro_steps_per_step>
	set_all_current_percent_values(driver3, motor3->current_settings.RUN_CURRENT_PERCENT, motor3->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004c6e:	2300      	movs	r3, #0
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f7fd fd81 	bl	8002778 <set_all_current_percent_values>

}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	2000054c 	.word	0x2000054c
 8004c84:	40020800 	.word	0x40020800
 8004c88:	40f00000 	.word	0x40f00000
 8004c8c:	40020400 	.word	0x40020400
 8004c90:	20000114 	.word	0x20000114
 8004c94:	200001ec 	.word	0x200001ec
 8004c98:	200004bc 	.word	0x200004bc
 8004c9c:	2000042c 	.word	0x2000042c
 8004ca0:	430ac51f 	.word	0x430ac51f
 8004ca4:	430c0000 	.word	0x430c0000

08004ca8 <initMotor4>:

void initMotor4(uart_mode_t UART_MODE)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	71fb      	strb	r3, [r7, #7]
	motor_t * motor4 = motors[3];
 8004cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e24 <initMotor4+0x17c>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver4 = motor4->driver;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004cbe:	60bb      	str	r3, [r7, #8]

	motor4->gpio_pins.mot_en 	= MOT_EN_4_Pin;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor4->gpio_ports.mot_en 	= MOT_EN_4_GPIO_Port;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a57      	ldr	r2, [pc, #348]	@ (8004e28 <initMotor4+0x180>)
 8004ccc:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver4, motor4->gpio_pins.mot_en, motor4->gpio_ports.mot_en);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68b8      	ldr	r0, [r7, #8]
 8004ce0:	f7fe f85b 	bl	8002d9a <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver4);
 8004ce4:	68b8      	ldr	r0, [r7, #8]
 8004ce6:	f7fe f88e 	bl	8002e06 <tmc2209_disable>

	initializeDefaults(motor4);
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f972 	bl	8004fd4 <initializeDefaults>

	motor4->ID = '4';
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2234      	movs	r2, #52	@ 0x34
 8004cf4:	701a      	strb	r2, [r3, #0]

	motor4->gear_ratio = GEAR_RATIO_M_4;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a4c      	ldr	r2, [pc, #304]	@ (8004e2c <initMotor4+0x184>)
 8004cfa:	605a      	str	r2, [r3, #4]
	motor4->microsteps = MICROSTEPS_M_4;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2208      	movs	r2, #8
 8004d00:	609a      	str	r2, [r3, #8]
	motor4->motion.V_MAX 	= V_MAX_M_4;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004d08:	611a      	str	r2, [r3, #16]
	motor4->motion.ACC_MAX = ACC_MAX_M_4;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8004d10:	615a      	str	r2, [r3, #20]
	motor4->motion.DEC_MAX = DEC_MAX_M_4;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8004d18:	619a      	str	r2, [r3, #24]

	motor4->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_4;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2232      	movs	r2, #50	@ 0x32
 8004d1e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor4->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_4;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2246      	movs	r2, #70	@ 0x46
 8004d26:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor4->gpio_pins.step 		= STEP_4_Pin;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor4->gpio_pins.dir 		= DIR_4_Pin;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2210      	movs	r2, #16
 8004d36:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
//	motor4->gpio_pins.diag 		= DIAG_4_Pin;
	motor4->gpio_ports.step 	= STEP_4_GPIO_Port;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e28 <initMotor4+0x180>)
 8004d3e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	motor4->gpio_ports.dir 		= DIR_4_GPIO_Port;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4a38      	ldr	r2, [pc, #224]	@ (8004e28 <initMotor4+0x180>)
 8004d46:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	motor4->gpio_ports.diag 		= DIAG_4_GPIO_Port;

	motor4->motion.motor_control_timer = htim4;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a38      	ldr	r2, [pc, #224]	@ (8004e30 <initMotor4+0x188>)
 8004d4e:	3348      	adds	r3, #72	@ 0x48
 8004d50:	4611      	mov	r1, r2
 8004d52:	2248      	movs	r2, #72	@ 0x48
 8004d54:	4618      	mov	r0, r3
 8004d56:	f006 fa3d 	bl	800b1d4 <memcpy>
	motor4->status_check_timer = htim9;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4a35      	ldr	r2, [pc, #212]	@ (8004e34 <initMotor4+0x18c>)
 8004d5e:	3394      	adds	r3, #148	@ 0x94
 8004d60:	4611      	mov	r1, r2
 8004d62:	2248      	movs	r2, #72	@ 0x48
 8004d64:	4618      	mov	r0, r3
 8004d66:	f006 fa35 	bl	800b1d4 <memcpy>

	if (UART_MODE == MODE_5_UART)
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d10f      	bne.n	8004d90 <initMotor4+0xe8>
	{
		motor4->uart = huart4;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a31      	ldr	r2, [pc, #196]	@ (8004e38 <initMotor4+0x190>)
 8004d74:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004d78:	4611      	mov	r1, r2
 8004d7a:	2248      	movs	r2, #72	@ 0x48
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f006 fa29 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8004d82:	2200      	movs	r2, #0
 8004d84:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004d88:	68b8      	ldr	r0, [r7, #8]
 8004d8a:	f7fd fc09 	bl	80025a0 <tmc2209_setup>
 8004d8e:	e011      	b.n	8004db4 <initMotor4+0x10c>
	}
	else if (UART_MODE == MODE_2_UART)
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10e      	bne.n	8004db4 <initMotor4+0x10c>
	{
		motor4->uart = huart4;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <initMotor4+0x190>)
 8004d9a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004d9e:	4611      	mov	r1, r2
 8004da0:	2248      	movs	r2, #72	@ 0x48
 8004da2:	4618      	mov	r0, r3
 8004da4:	f006 fa16 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver4, 115200, SERIAL_ADDRESS_0);
 8004da8:	2200      	movs	r2, #0
 8004daa:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004dae:	68b8      	ldr	r0, [r7, #8]
 8004db0:	f7fd fbf6 	bl	80025a0 <tmc2209_setup>
	}

	motor4->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_4;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f241 7270 	movw	r2, #6000	@ 0x1770
 8004dba:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor4->motion.HIGH_LIMIT = HIGH_LIMIT_M_4;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e3c <initMotor4+0x194>)
 8004dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	motor4->motion.LOW_LIMIT = LOW_LIMIT_M_4;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40

	motor4->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_4;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor4->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_4;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e40 <initMotor4+0x198>)
 8004dd8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor4->stallguard.STALL_BUFFER = STALL_BUFFER_M_4;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2207      	movs	r2, #7
 8004de0:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver4->uart_ = motor4->uart;
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f102 0008 	add.w	r0, r2, #8
 8004dec:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004df0:	2248      	movs	r2, #72	@ 0x48
 8004df2:	4619      	mov	r1, r3
 8004df4:	f006 f9ee 	bl	800b1d4 <memcpy>

	set_micro_steps_per_step(driver4, motor4->microsteps);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	4619      	mov	r1, r3
 8004e00:	68b8      	ldr	r0, [r7, #8]
 8004e02:	f7fd fc1d 	bl	8002640 <set_micro_steps_per_step>
	set_all_current_percent_values(driver4, motor4->current_settings.RUN_CURRENT_PERCENT, motor4->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004e12:	2300      	movs	r3, #0
 8004e14:	68b8      	ldr	r0, [r7, #8]
 8004e16:	f7fd fcaf 	bl	8002778 <set_all_current_percent_values>

}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	2000054c 	.word	0x2000054c
 8004e28:	40020400 	.word	0x40020400
 8004e2c:	40f00000 	.word	0x40f00000
 8004e30:	2000015c 	.word	0x2000015c
 8004e34:	2000027c 	.word	0x2000027c
 8004e38:	2000039c 	.word	0x2000039c
 8004e3c:	43340000 	.word	0x43340000
 8004e40:	421c0000 	.word	0x421c0000

08004e44 <initMotor5>:

void initMotor5(uart_mode_t UART_MODE)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
	motor_t * motor5 = motors[4];
 8004e4e:	4b59      	ldr	r3, [pc, #356]	@ (8004fb4 <initMotor5+0x170>)
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	60fb      	str	r3, [r7, #12]
	tmc2209_stepper_driver_t * driver5 = motor5->driver;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004e5a:	60bb      	str	r3, [r7, #8]

	motor5->gpio_pins.mot_en 	= MOT_EN_5_Pin;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2210      	movs	r2, #16
 8004e60:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
	motor5->gpio_ports.mot_en 	= MOT_EN_5_GPIO_Port;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a54      	ldr	r2, [pc, #336]	@ (8004fb8 <initMotor5+0x174>)
 8004e68:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	tmc2209_set_hardware_enable_pin(driver5, motor5->gpio_pins.mot_en, motor5->gpio_ports.mot_en);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	@ 0xfc
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68b8      	ldr	r0, [r7, #8]
 8004e7c:	f7fd ff8d 	bl	8002d9a <tmc2209_set_hardware_enable_pin>
	tmc2209_disable(driver5);
 8004e80:	68b8      	ldr	r0, [r7, #8]
 8004e82:	f7fd ffc0 	bl	8002e06 <tmc2209_disable>

	initializeDefaults(motor5);
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f8a4 	bl	8004fd4 <initializeDefaults>

	motor5->ID = '5';
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2235      	movs	r2, #53	@ 0x35
 8004e90:	701a      	strb	r2, [r3, #0]

	motor5->gear_ratio = GEAR_RATIO_M_5;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004e98:	605a      	str	r2, [r3, #4]
	motor5->microsteps = MICROSTEPS_M_5;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	609a      	str	r2, [r3, #8]
	motor5->motion.V_MAX 	= V_MAX_M_5;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea6:	611a      	str	r2, [r3, #16]
	motor5->motion.ACC_MAX = ACC_MAX_M_5;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004eae:	615a      	str	r2, [r3, #20]
	motor5->motion.DEC_MAX = DEC_MAX_M_5;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004eb6:	619a      	str	r2, [r3, #24]

	motor5->current_settings.HOLD_CURRENT_PERCENT = HOLD_CURRENT_PERCENT_M_5;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2214      	movs	r2, #20
 8004ebc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	motor5->current_settings.RUN_CURRENT_PERCENT = RUN_CURRENT_PERCENT_M_5;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2214      	movs	r2, #20
 8004ec4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	motor5->gpio_pins.step 		= STEP_5_Pin;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ece:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	motor5->gpio_pins.dir 		= DIR_5_Pin;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ed8:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	motor5->gpio_ports.step 	= STEP_5_GPIO_Port;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a36      	ldr	r2, [pc, #216]	@ (8004fb8 <initMotor5+0x174>)
 8004ee0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
//	motor5->gpio_pins.diag 		= DIAG_5_Pin;
	motor5->gpio_ports.dir 		= DIR_5_GPIO_Port;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a34      	ldr	r2, [pc, #208]	@ (8004fb8 <initMotor5+0x174>)
 8004ee8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
//	motor5->gpio_ports.diag 		= DIAG_5_GPIO_Port;

	motor5->motion.motor_control_timer = htim8;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a33      	ldr	r2, [pc, #204]	@ (8004fbc <initMotor5+0x178>)
 8004ef0:	3348      	adds	r3, #72	@ 0x48
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	2248      	movs	r2, #72	@ 0x48
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f006 f96c 	bl	800b1d4 <memcpy>
	motor5->status_check_timer = htim10;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a30      	ldr	r2, [pc, #192]	@ (8004fc0 <initMotor5+0x17c>)
 8004f00:	3394      	adds	r3, #148	@ 0x94
 8004f02:	4611      	mov	r1, r2
 8004f04:	2248      	movs	r2, #72	@ 0x48
 8004f06:	4618      	mov	r0, r3
 8004f08:	f006 f964 	bl	800b1d4 <memcpy>

	if (UART_MODE == MODE_5_UART)
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10f      	bne.n	8004f32 <initMotor5+0xee>
	{
		motor5->uart = huart5;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc4 <initMotor5+0x180>)
 8004f16:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	2248      	movs	r2, #72	@ 0x48
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f006 f958 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_0);
 8004f24:	2200      	movs	r2, #0
 8004f26:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004f2a:	68b8      	ldr	r0, [r7, #8]
 8004f2c:	f7fd fb38 	bl	80025a0 <tmc2209_setup>
 8004f30:	e011      	b.n	8004f56 <initMotor5+0x112>
	}
	else if (UART_MODE == MODE_2_UART)
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10e      	bne.n	8004f56 <initMotor5+0x112>
	{
		motor5->uart = huart4;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a23      	ldr	r2, [pc, #140]	@ (8004fc8 <initMotor5+0x184>)
 8004f3c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004f40:	4611      	mov	r1, r2
 8004f42:	2248      	movs	r2, #72	@ 0x48
 8004f44:	4618      	mov	r0, r3
 8004f46:	f006 f945 	bl	800b1d4 <memcpy>
		tmc2209_setup(driver5, 115200, SERIAL_ADDRESS_1);
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004f50:	68b8      	ldr	r0, [r7, #8]
 8004f52:	f7fd fb25 	bl	80025a0 <tmc2209_setup>
	}

	motor5->stallguard.POSITION_LIMIT = POSITION_LIMIT_M_5;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <initMotor5+0x188>)
 8004f5a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	motor5->stallguard.MAX_CONSECUTIVE_LOW = LOW_COUNTER_THRESHOLD_M_5;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	motor5->stallguard.MAX_STALLGUARD_VALUE = STALL_MAX_M_5;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a19      	ldr	r2, [pc, #100]	@ (8004fd0 <initMotor5+0x18c>)
 8004f6a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	motor5->stallguard.STALL_BUFFER = STALL_BUFFER_M_5;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2228      	movs	r2, #40	@ 0x28
 8004f72:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

	driver5->uart_ = motor5->uart;
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f102 0008 	add.w	r0, r2, #8
 8004f7e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004f82:	2248      	movs	r2, #72	@ 0x48
 8004f84:	4619      	mov	r1, r3
 8004f86:	f006 f925 	bl	800b1d4 <memcpy>

	set_micro_steps_per_step(driver5, motor5->microsteps);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	4619      	mov	r1, r3
 8004f92:	68b8      	ldr	r0, [r7, #8]
 8004f94:	f7fd fb54 	bl	8002640 <set_micro_steps_per_step>
	set_all_current_percent_values(driver5, motor5->current_settings.RUN_CURRENT_PERCENT, motor5->current_settings.HOLD_CURRENT_PERCENT, 0);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 1091 	ldrb.w	r1, [r3, #145]	@ 0x91
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	68b8      	ldr	r0, [r7, #8]
 8004fa8:	f7fd fbe6 	bl	8002778 <set_all_current_percent_values>

}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2000054c 	.word	0x2000054c
 8004fb8:	40020800 	.word	0x40020800
 8004fbc:	20000234 	.word	0x20000234
 8004fc0:	200002c4 	.word	0x200002c4
 8004fc4:	200003e4 	.word	0x200003e4
 8004fc8:	2000039c 	.word	0x2000039c
 8004fcc:	00027100 	.word	0x00027100
 8004fd0:	433e0000 	.word	0x433e0000

08004fd4 <initializeDefaults>:

void initializeDefaults(motor_t * motor)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	motor->motion.v = 0;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	61da      	str	r2, [r3, #28]
	motor->motion.total_steps = 0;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	621a      	str	r2, [r3, #32]
	motor->motion.const_steps = 0;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->motion.acc_steps = 0;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	629a      	str	r2, [r3, #40]	@ 0x28
	motor->motion.dec_steps = 0;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->motion.step = 0;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
	motor->motion.cycle = 0;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->motion.inverse_motor_direction = 0;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

	motor->active_movement_flag = 0;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	731a      	strb	r2, [r3, #12]

	motor->status_flag = 0;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92

	motor->stallguard.smoothed_result = 0;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	motor->stallguard.previous_smoothed_result = 0;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	motor->stallguard.consecutive_low_counter = 0;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	motor->stallguard.stall_flag = 0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <startStatusChecks>:

/*
 * Starts the status_check_timer of the motor given by the parameter, which causes an interrupt every 10ms.
 */
motor_error_t startStatusChecks(motor_t * motor)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	motor_error_t error = NO_ERROR;
 8005056:	2302      	movs	r3, #2
 8005058:	73fb      	strb	r3, [r7, #15]

	status = HAL_TIM_Base_Start_IT(&motor->status_check_timer);  //Timer for periodical status checks
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3394      	adds	r3, #148	@ 0x94
 800505e:	4618      	mov	r0, r3
 8005060:	f002 f826 	bl	80070b0 <HAL_TIM_Base_Start_IT>
 8005064:	4603      	mov	r3, r0
 8005066:	73bb      	strb	r3, [r7, #14]

	if (status != HAL_OK)
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <startStatusChecks+0x24>
		error = MOTOR_ERROR;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]

	motor->status_flag = 0;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	motor->stallguard.previous_smoothed_result = 0;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	return error;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <checkStall>:
 * A dynamic threshold is calculated and if the stallguard_result
 * read from the driver is below this threshold for more than MAX_CONSECUTIVE_LOW,
 * a Stall will be detected.
 */
void checkStall(motor_t* motor)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
	stallguard_t* sg = &motor->stallguard;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	33dc      	adds	r3, #220	@ 0xdc
 800509a:	613b      	str	r3, [r7, #16]
	uint16_t stallguard_result = get_stall_guard_result(motor->driver); //Reads the stallguard_result via UART from driver.
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fd fbfa 	bl	800289c <get_stall_guard_result>
 80050a8:	4603      	mov	r3, r0
 80050aa:	82fb      	strh	r3, [r7, #22]

	//As motor 5 stallguard values have a lot of noise, a smoothed version of the stallguard result is used.
	if (motor->ID == '5')
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b35      	cmp	r3, #53	@ 0x35
 80050b2:	d124      	bne.n	80050fe <checkStall+0x70>
	{
		sg->smoothed_result = ALPHA * stallguard_result + (1-ALPHA) * sg->previous_smoothed_result; //Exponential smoothing/exponential moving average (EMA) filter
 80050b4:	8afb      	ldrh	r3, [r7, #22]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050be:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80050c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80050cc:	eef6 6a08 	vmov.f32	s13, #104	@ 0x3f400000  0.750
 80050d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	edc3 7a04 	vstr	s15, [r3, #16]
		stallguard_result = sg->smoothed_result;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80050e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e8:	ee17 3a90 	vmov	r3, s15
 80050ec:	82fb      	strh	r3, [r7, #22]
		if (motor->motion.motion_mode == MOTION_GRIP) //
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d102      	bne.n	80050fe <checkStall+0x70>
		{
			sg->STALL_BUFFER = STALL_GRIP_BUFFER_M_5;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2237      	movs	r2, #55	@ 0x37
 80050fc:	819a      	strh	r2, [r3, #12]
		}
	}

	//calculating  the dynamic threshold
	float k = sg->MAX_STALLGUARD_VALUE / (float) motor->motion.V_MAX;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	edd3 6a02 	vldr	s13, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	ee07 3a90 	vmov	s15, r3
 800510c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005114:	edc7 7a03 	vstr	s15, [r7, #12]
	float dynamic_stall_threshold = k * motor->motion.v - sg->STALL_BUFFER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	ed93 7a07 	vldr	s14, [r3, #28]
 800511e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	899b      	ldrh	r3, [r3, #12]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005136:	edc7 7a02 	vstr	s15, [r7, #8]
//		stallguard_value = stallguard_result;
//		dynamic_stallguard_value = dynamic_stall_threshold;
//	}


	if (stallguard_result < dynamic_stall_threshold)
 800513a:	8afb      	ldrh	r3, [r7, #22]
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005144:	ed97 7a02 	vldr	s14, [r7, #8]
 8005148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005150:	dd15      	ble.n	800517e <checkStall+0xf0>
	{
		sg->consecutive_low_counter++;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	8b1b      	ldrh	r3, [r3, #24]
 8005156:	3301      	adds	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	831a      	strh	r2, [r3, #24]
		//Set MAX_CONSECUTIVE_LOW to 1 to stop motor immediately after first stallguard value drop
		if (sg->consecutive_low_counter >= sg->MAX_CONSECUTIVE_LOW)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	8b1a      	ldrh	r2, [r3, #24]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	889b      	ldrh	r3, [r3, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d30c      	bcc.n	8005184 <checkStall+0xf6>
		{
			stopMotorMovement(motor);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fe fea1 	bl	8003eb2 <stopMotorMovement>
			sg->stall_flag = 1;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2201      	movs	r2, #1
 8005174:	739a      	strb	r2, [r3, #14]
			sg->consecutive_low_counter = 0;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2200      	movs	r2, #0
 800517a:	831a      	strh	r2, [r3, #24]
 800517c:	e002      	b.n	8005184 <checkStall+0xf6>
		}
	}
	else
	{
		sg->consecutive_low_counter = 0;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2200      	movs	r2, #0
 8005182:	831a      	strh	r2, [r3, #24]
	}
	//for smoothing, the current stallguard value needs to be stored for one cycle.
	sg->previous_smoothed_result = sg->smoothed_result;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	615a      	str	r2, [r3, #20]

}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <checkDriverStatus>:
 * This function should be continuously called while a motor is active.
 * It only does something when status_flag has been set to 1.
 * Then it calls the checkOverheat and checkStall functions.
 */
void checkDriverStatus(motor_t* motor)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	if (motor->status_flag)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d006      	beq.n	80051b4 <checkDriverStatus+0x20>
	{
		motor->status_flag = 0;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92

//		tmc2209_status_t status;
//		status = get_status(motor->driver);
//		checkOverheating(status);

		checkStall(motor);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ff6d 	bl	800508e <checkStall>
	}
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <checkAllDrivers>:

/*
 * Use this function in a while-Loop while the motors are moving to check StallGuard values and overheating of every moving motor.
 */
void checkAllDrivers()
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
	if (motors[0]->active_movement_flag)
 80051c0:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <checkAllDrivers+0x6c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	7b1b      	ldrb	r3, [r3, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <checkAllDrivers+0x18>
		checkDriverStatus(motors[0]);
 80051ca:	4b17      	ldr	r3, [pc, #92]	@ (8005228 <checkAllDrivers+0x6c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff ffe0 	bl	8005194 <checkDriverStatus>

	if (motors[1]->active_movement_flag)
 80051d4:	4b14      	ldr	r3, [pc, #80]	@ (8005228 <checkAllDrivers+0x6c>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	7b1b      	ldrb	r3, [r3, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <checkAllDrivers+0x2c>
		checkDriverStatus(motors[1]);
 80051de:	4b12      	ldr	r3, [pc, #72]	@ (8005228 <checkAllDrivers+0x6c>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff ffd6 	bl	8005194 <checkDriverStatus>

	if (motors[2]->active_movement_flag)
 80051e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <checkAllDrivers+0x6c>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	7b1b      	ldrb	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d004      	beq.n	80051fc <checkAllDrivers+0x40>
		checkDriverStatus(motors[2]);
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <checkAllDrivers+0x6c>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ffcc 	bl	8005194 <checkDriverStatus>

	if (motors[3]->active_movement_flag)
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <checkAllDrivers+0x6c>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	7b1b      	ldrb	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <checkAllDrivers+0x54>
		checkDriverStatus(motors[3]);
 8005206:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <checkAllDrivers+0x6c>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ffc2 	bl	8005194 <checkDriverStatus>

	if (motors[4]->active_movement_flag)
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <checkAllDrivers+0x6c>)
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	7b1b      	ldrb	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <checkAllDrivers+0x68>
		checkDriverStatus(motors[4]);
 800521a:	4b03      	ldr	r3, [pc, #12]	@ (8005228 <checkAllDrivers+0x6c>)
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff ffb8 	bl	8005194 <checkDriverStatus>
}
 8005224:	bf00      	nop
 8005226:	bd80      	pop	{r7, pc}
 8005228:	2000054c 	.word	0x2000054c

0800522c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800522c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005264 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005230:	f7fd f9a4 	bl	800257c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005234:	480c      	ldr	r0, [pc, #48]	@ (8005268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005236:	490d      	ldr	r1, [pc, #52]	@ (800526c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005238:	4a0d      	ldr	r2, [pc, #52]	@ (8005270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800523a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800523c:	e002      	b.n	8005244 <LoopCopyDataInit>

0800523e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800523e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005242:	3304      	adds	r3, #4

08005244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005248:	d3f9      	bcc.n	800523e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800524a:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800524c:	4c0a      	ldr	r4, [pc, #40]	@ (8005278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800524e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005250:	e001      	b.n	8005256 <LoopFillZerobss>

08005252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005254:	3204      	adds	r2, #4

08005256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005258:	d3fb      	bcc.n	8005252 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800525a:	f005 ff95 	bl	800b188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800525e:	f7fb febd 	bl	8000fdc <main>
  bx  lr    
 8005262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800526c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8005270:	0800c948 	.word	0x0800c948
  ldr r2, =_sbss
 8005274:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8005278:	20000abc 	.word	0x20000abc

0800527c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800527c:	e7fe      	b.n	800527c <ADC_IRQHandler>
	...

08005280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005284:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <HAL_Init+0x40>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a0d      	ldr	r2, [pc, #52]	@ (80052c0 <HAL_Init+0x40>)
 800528a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800528e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005290:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <HAL_Init+0x40>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a0a      	ldr	r2, [pc, #40]	@ (80052c0 <HAL_Init+0x40>)
 8005296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800529a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800529c:	4b08      	ldr	r3, [pc, #32]	@ (80052c0 <HAL_Init+0x40>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a07      	ldr	r2, [pc, #28]	@ (80052c0 <HAL_Init+0x40>)
 80052a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052a8:	2003      	movs	r0, #3
 80052aa:	f000 f94f 	bl	800554c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052ae:	2000      	movs	r0, #0
 80052b0:	f000 f808 	bl	80052c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052b4:	f7fc fd24 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40023c00 	.word	0x40023c00

080052c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052cc:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <HAL_InitTick+0x54>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b12      	ldr	r3, [pc, #72]	@ (800531c <HAL_InitTick+0x58>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	4619      	mov	r1, r3
 80052d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052da:	fbb3 f3f1 	udiv	r3, r3, r1
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f967 	bl	80055b6 <HAL_SYSTICK_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e00e      	b.n	8005310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d80a      	bhi.n	800530e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052f8:	2200      	movs	r2, #0
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	f000 f92f 	bl	8005562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005304:	4a06      	ldr	r2, [pc, #24]	@ (8005320 <HAL_InitTick+0x5c>)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000000 	.word	0x20000000
 800531c:	20000008 	.word	0x20000008
 8005320:	20000004 	.word	0x20000004

08005324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005328:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <HAL_IncTick+0x20>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <HAL_IncTick+0x24>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4413      	add	r3, r2
 8005334:	4a04      	ldr	r2, [pc, #16]	@ (8005348 <HAL_IncTick+0x24>)
 8005336:	6013      	str	r3, [r2, #0]
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000008 	.word	0x20000008
 8005348:	20000970 	.word	0x20000970

0800534c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return uwTick;
 8005350:	4b03      	ldr	r3, [pc, #12]	@ (8005360 <HAL_GetTick+0x14>)
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000970 	.word	0x20000970

08005364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800536c:	f7ff ffee 	bl	800534c <HAL_GetTick>
 8005370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d005      	beq.n	800538a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <HAL_Delay+0x44>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800538a:	bf00      	nop
 800538c:	f7ff ffde 	bl	800534c <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	429a      	cmp	r2, r3
 800539a:	d8f7      	bhi.n	800538c <HAL_Delay+0x28>
  {
  }
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000008 	.word	0x20000008

080053ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053bc:	4b0c      	ldr	r3, [pc, #48]	@ (80053f0 <__NVIC_SetPriorityGrouping+0x44>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053c8:	4013      	ands	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053de:	4a04      	ldr	r2, [pc, #16]	@ (80053f0 <__NVIC_SetPriorityGrouping+0x44>)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	60d3      	str	r3, [r2, #12]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053f8:	4b04      	ldr	r3, [pc, #16]	@ (800540c <__NVIC_GetPriorityGrouping+0x18>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0a1b      	lsrs	r3, r3, #8
 80053fe:	f003 0307 	and.w	r3, r3, #7
}
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	2b00      	cmp	r3, #0
 8005420:	db0b      	blt.n	800543a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	f003 021f 	and.w	r2, r3, #31
 8005428:	4907      	ldr	r1, [pc, #28]	@ (8005448 <__NVIC_EnableIRQ+0x38>)
 800542a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	2001      	movs	r0, #1
 8005432:	fa00 f202 	lsl.w	r2, r0, r2
 8005436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	e000e100 	.word	0xe000e100

0800544c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	6039      	str	r1, [r7, #0]
 8005456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545c:	2b00      	cmp	r3, #0
 800545e:	db0a      	blt.n	8005476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	b2da      	uxtb	r2, r3
 8005464:	490c      	ldr	r1, [pc, #48]	@ (8005498 <__NVIC_SetPriority+0x4c>)
 8005466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546a:	0112      	lsls	r2, r2, #4
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	440b      	add	r3, r1
 8005470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005474:	e00a      	b.n	800548c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4908      	ldr	r1, [pc, #32]	@ (800549c <__NVIC_SetPriority+0x50>)
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	3b04      	subs	r3, #4
 8005484:	0112      	lsls	r2, r2, #4
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	440b      	add	r3, r1
 800548a:	761a      	strb	r2, [r3, #24]
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	e000e100 	.word	0xe000e100
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f1c3 0307 	rsb	r3, r3, #7
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	bf28      	it	cs
 80054be:	2304      	movcs	r3, #4
 80054c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3304      	adds	r3, #4
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d902      	bls.n	80054d0 <NVIC_EncodePriority+0x30>
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	3b03      	subs	r3, #3
 80054ce:	e000      	b.n	80054d2 <NVIC_EncodePriority+0x32>
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43da      	mvns	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	401a      	ands	r2, r3
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054e8:	f04f 31ff 	mov.w	r1, #4294967295
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	fa01 f303 	lsl.w	r3, r1, r3
 80054f2:	43d9      	mvns	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f8:	4313      	orrs	r3, r2
         );
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3724      	adds	r7, #36	@ 0x24
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005518:	d301      	bcc.n	800551e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800551a:	2301      	movs	r3, #1
 800551c:	e00f      	b.n	800553e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800551e:	4a0a      	ldr	r2, [pc, #40]	@ (8005548 <SysTick_Config+0x40>)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005526:	210f      	movs	r1, #15
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	f7ff ff8e 	bl	800544c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005530:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <SysTick_Config+0x40>)
 8005532:	2200      	movs	r2, #0
 8005534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005536:	4b04      	ldr	r3, [pc, #16]	@ (8005548 <SysTick_Config+0x40>)
 8005538:	2207      	movs	r2, #7
 800553a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	e000e010 	.word	0xe000e010

0800554c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ff29 	bl	80053ac <__NVIC_SetPriorityGrouping>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	4603      	mov	r3, r0
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005574:	f7ff ff3e 	bl	80053f4 <__NVIC_GetPriorityGrouping>
 8005578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	6978      	ldr	r0, [r7, #20]
 8005580:	f7ff ff8e 	bl	80054a0 <NVIC_EncodePriority>
 8005584:	4602      	mov	r2, r0
 8005586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ff5d 	bl	800544c <__NVIC_SetPriority>
}
 8005592:	bf00      	nop
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff31 	bl	8005410 <__NVIC_EnableIRQ>
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff ffa2 	bl	8005508 <SysTick_Config>
 80055c4:	4603      	mov	r3, r0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055dc:	f7ff feb6 	bl	800534c <HAL_GetTick>
 80055e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d008      	beq.n	8005600 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2280      	movs	r2, #128	@ 0x80
 80055f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e052      	b.n	80056a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0216 	bic.w	r2, r2, #22
 800560e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800561e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <HAL_DMA_Abort+0x62>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0208 	bic.w	r2, r2, #8
 800563e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005650:	e013      	b.n	800567a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005652:	f7ff fe7b 	bl	800534c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b05      	cmp	r3, #5
 800565e:	d90c      	bls.n	800567a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2203      	movs	r2, #3
 800566a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e015      	b.n	80056a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e4      	bne.n	8005652 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800568c:	223f      	movs	r2, #63	@ 0x3f
 800568e:	409a      	lsls	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d004      	beq.n	80056cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2280      	movs	r2, #128	@ 0x80
 80056c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e00c      	b.n	80056e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2205      	movs	r2, #5
 80056d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b089      	sub	sp, #36	@ 0x24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e165      	b.n	80059dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005710:	2201      	movs	r2, #1
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4013      	ands	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	429a      	cmp	r2, r3
 800572a:	f040 8154 	bne.w	80059d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d005      	beq.n	8005746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005742:	2b02      	cmp	r3, #2
 8005744:	d130      	bne.n	80057a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	2203      	movs	r2, #3
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4313      	orrs	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800577c:	2201      	movs	r2, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 0201 	and.w	r2, r3, #1
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d017      	beq.n	80057e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	2203      	movs	r2, #3
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	4013      	ands	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4313      	orrs	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d123      	bne.n	8005838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	08da      	lsrs	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3208      	adds	r2, #8
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	220f      	movs	r2, #15
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	08da      	lsrs	r2, r3, #3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3208      	adds	r2, #8
 8005832:	69b9      	ldr	r1, [r7, #24]
 8005834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	2203      	movs	r2, #3
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0203 	and.w	r2, r3, #3
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80ae 	beq.w	80059d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	4b5d      	ldr	r3, [pc, #372]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 8005880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005882:	4a5c      	ldr	r2, [pc, #368]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 8005884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005888:	6453      	str	r3, [r2, #68]	@ 0x44
 800588a:	4b5a      	ldr	r3, [pc, #360]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005896:	4a58      	ldr	r2, [pc, #352]	@ (80059f8 <HAL_GPIO_Init+0x304>)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	089b      	lsrs	r3, r3, #2
 800589c:	3302      	adds	r3, #2
 800589e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	220f      	movs	r2, #15
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a4f      	ldr	r2, [pc, #316]	@ (80059fc <HAL_GPIO_Init+0x308>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d025      	beq.n	800590e <HAL_GPIO_Init+0x21a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a4e      	ldr	r2, [pc, #312]	@ (8005a00 <HAL_GPIO_Init+0x30c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <HAL_GPIO_Init+0x216>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a4d      	ldr	r2, [pc, #308]	@ (8005a04 <HAL_GPIO_Init+0x310>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d019      	beq.n	8005906 <HAL_GPIO_Init+0x212>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a4c      	ldr	r2, [pc, #304]	@ (8005a08 <HAL_GPIO_Init+0x314>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_GPIO_Init+0x20e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a4b      	ldr	r2, [pc, #300]	@ (8005a0c <HAL_GPIO_Init+0x318>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00d      	beq.n	80058fe <HAL_GPIO_Init+0x20a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005a10 <HAL_GPIO_Init+0x31c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <HAL_GPIO_Init+0x206>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a49      	ldr	r2, [pc, #292]	@ (8005a14 <HAL_GPIO_Init+0x320>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d101      	bne.n	80058f6 <HAL_GPIO_Init+0x202>
 80058f2:	2306      	movs	r3, #6
 80058f4:	e00c      	b.n	8005910 <HAL_GPIO_Init+0x21c>
 80058f6:	2307      	movs	r3, #7
 80058f8:	e00a      	b.n	8005910 <HAL_GPIO_Init+0x21c>
 80058fa:	2305      	movs	r3, #5
 80058fc:	e008      	b.n	8005910 <HAL_GPIO_Init+0x21c>
 80058fe:	2304      	movs	r3, #4
 8005900:	e006      	b.n	8005910 <HAL_GPIO_Init+0x21c>
 8005902:	2303      	movs	r3, #3
 8005904:	e004      	b.n	8005910 <HAL_GPIO_Init+0x21c>
 8005906:	2302      	movs	r3, #2
 8005908:	e002      	b.n	8005910 <HAL_GPIO_Init+0x21c>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_GPIO_Init+0x21c>
 800590e:	2300      	movs	r3, #0
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	f002 0203 	and.w	r2, r2, #3
 8005916:	0092      	lsls	r2, r2, #2
 8005918:	4093      	lsls	r3, r2
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005920:	4935      	ldr	r1, [pc, #212]	@ (80059f8 <HAL_GPIO_Init+0x304>)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	089b      	lsrs	r3, r3, #2
 8005926:	3302      	adds	r3, #2
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800592e:	4b3a      	ldr	r3, [pc, #232]	@ (8005a18 <HAL_GPIO_Init+0x324>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005952:	4a31      	ldr	r2, [pc, #196]	@ (8005a18 <HAL_GPIO_Init+0x324>)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005958:	4b2f      	ldr	r3, [pc, #188]	@ (8005a18 <HAL_GPIO_Init+0x324>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800597c:	4a26      	ldr	r2, [pc, #152]	@ (8005a18 <HAL_GPIO_Init+0x324>)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005982:	4b25      	ldr	r3, [pc, #148]	@ (8005a18 <HAL_GPIO_Init+0x324>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a18 <HAL_GPIO_Init+0x324>)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <HAL_GPIO_Init+0x324>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059d0:	4a11      	ldr	r2, [pc, #68]	@ (8005a18 <HAL_GPIO_Init+0x324>)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3301      	adds	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	f67f ae96 	bls.w	8005710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3724      	adds	r7, #36	@ 0x24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40013800 	.word	0x40013800
 80059fc:	40020000 	.word	0x40020000
 8005a00:	40020400 	.word	0x40020400
 8005a04:	40020800 	.word	0x40020800
 8005a08:	40020c00 	.word	0x40020c00
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40021400 	.word	0x40021400
 8005a14:	40021800 	.word	0x40021800
 8005a18:	40013c00 	.word	0x40013c00

08005a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	887b      	ldrh	r3, [r7, #2]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e001      	b.n	8005a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	807b      	strh	r3, [r7, #2]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a5c:	787b      	ldrb	r3, [r7, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a62:	887a      	ldrh	r2, [r7, #2]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a68:	e003      	b.n	8005a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	041a      	lsls	r2, r3, #16
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	619a      	str	r2, [r3, #24]
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a90:	887a      	ldrh	r2, [r7, #2]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4013      	ands	r3, r2
 8005a96:	041a      	lsls	r2, r3, #16
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	43d9      	mvns	r1, r3
 8005a9c:	887b      	ldrh	r3, [r7, #2]
 8005a9e:	400b      	ands	r3, r1
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	619a      	str	r2, [r3, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005abe:	4b08      	ldr	r3, [pc, #32]	@ (8005ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d006      	beq.n	8005ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005aca:	4a05      	ldr	r2, [pc, #20]	@ (8005ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fc f8fa 	bl	8001ccc <HAL_GPIO_EXTI_Callback>
  }
}
 8005ad8:	bf00      	nop
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40013c00 	.word	0x40013c00

08005ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e12b      	b.n	8005d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fc f920 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	@ 0x24
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b48:	f000 fd6c 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4a81      	ldr	r2, [pc, #516]	@ (8005d58 <HAL_I2C_Init+0x274>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d807      	bhi.n	8005b68 <HAL_I2C_Init+0x84>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a80      	ldr	r2, [pc, #512]	@ (8005d5c <HAL_I2C_Init+0x278>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	bf94      	ite	ls
 8005b60:	2301      	movls	r3, #1
 8005b62:	2300      	movhi	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e006      	b.n	8005b76 <HAL_I2C_Init+0x92>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8005d60 <HAL_I2C_Init+0x27c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	bf94      	ite	ls
 8005b70:	2301      	movls	r3, #1
 8005b72:	2300      	movhi	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e0e7      	b.n	8005d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a78      	ldr	r2, [pc, #480]	@ (8005d64 <HAL_I2C_Init+0x280>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0c9b      	lsrs	r3, r3, #18
 8005b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4a6a      	ldr	r2, [pc, #424]	@ (8005d58 <HAL_I2C_Init+0x274>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d802      	bhi.n	8005bb8 <HAL_I2C_Init+0xd4>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	e009      	b.n	8005bcc <HAL_I2C_Init+0xe8>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	4a69      	ldr	r2, [pc, #420]	@ (8005d68 <HAL_I2C_Init+0x284>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	099b      	lsrs	r3, r3, #6
 8005bca:	3301      	adds	r3, #1
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	495c      	ldr	r1, [pc, #368]	@ (8005d58 <HAL_I2C_Init+0x274>)
 8005be8:	428b      	cmp	r3, r1
 8005bea:	d819      	bhi.n	8005c20 <HAL_I2C_Init+0x13c>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	1e59      	subs	r1, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c00:	400b      	ands	r3, r1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <HAL_I2C_Init+0x138>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1e59      	subs	r1, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c14:	3301      	adds	r3, #1
 8005c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1a:	e051      	b.n	8005cc0 <HAL_I2C_Init+0x1dc>
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	e04f      	b.n	8005cc0 <HAL_I2C_Init+0x1dc>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d111      	bne.n	8005c4c <HAL_I2C_Init+0x168>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1e58      	subs	r0, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6859      	ldr	r1, [r3, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	440b      	add	r3, r1
 8005c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bf0c      	ite	eq
 8005c44:	2301      	moveq	r3, #1
 8005c46:	2300      	movne	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	e012      	b.n	8005c72 <HAL_I2C_Init+0x18e>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	1e58      	subs	r0, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	0099      	lsls	r1, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c62:	3301      	adds	r3, #1
 8005c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_I2C_Init+0x196>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e022      	b.n	8005cc0 <HAL_I2C_Init+0x1dc>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10e      	bne.n	8005ca0 <HAL_I2C_Init+0x1bc>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1e58      	subs	r0, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6859      	ldr	r1, [r3, #4]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	440b      	add	r3, r1
 8005c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c94:	3301      	adds	r3, #1
 8005c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c9e:	e00f      	b.n	8005cc0 <HAL_I2C_Init+0x1dc>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1e58      	subs	r0, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6859      	ldr	r1, [r3, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	0099      	lsls	r1, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	6809      	ldr	r1, [r1, #0]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69da      	ldr	r2, [r3, #28]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005cee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6911      	ldr	r1, [r2, #16]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68d2      	ldr	r2, [r2, #12]
 8005cfa:	4311      	orrs	r1, r2
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	000186a0 	.word	0x000186a0
 8005d5c:	001e847f 	.word	0x001e847f
 8005d60:	003d08ff 	.word	0x003d08ff
 8005d64:	431bde83 	.word	0x431bde83
 8005d68:	10624dd3 	.word	0x10624dd3

08005d6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	813b      	strh	r3, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d86:	f7ff fae1 	bl	800534c <HAL_GetTick>
 8005d8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	f040 80d9 	bne.w	8005f4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	2319      	movs	r3, #25
 8005da0:	2201      	movs	r2, #1
 8005da2:	496d      	ldr	r1, [pc, #436]	@ (8005f58 <HAL_I2C_Mem_Write+0x1ec>)
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f971 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
 8005db2:	e0cc      	b.n	8005f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_I2C_Mem_Write+0x56>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e0c5      	b.n	8005f4e <HAL_I2C_Mem_Write+0x1e2>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d007      	beq.n	8005de8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005df6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2221      	movs	r2, #33	@ 0x21
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2240      	movs	r2, #64	@ 0x40
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a4d      	ldr	r2, [pc, #308]	@ (8005f5c <HAL_I2C_Mem_Write+0x1f0>)
 8005e28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e2a:	88f8      	ldrh	r0, [r7, #6]
 8005e2c:	893a      	ldrh	r2, [r7, #8]
 8005e2e:	8979      	ldrh	r1, [r7, #10]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4603      	mov	r3, r0
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f890 	bl	8005f60 <I2C_RequestMemoryWrite>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d052      	beq.n	8005eec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e081      	b.n	8005f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fa36 	bl	80062c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d107      	bne.n	8005e72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e06b      	b.n	8005f4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d11b      	bne.n	8005eec <HAL_I2C_Mem_Write+0x180>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d017      	beq.n	8005eec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	781a      	ldrb	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1aa      	bne.n	8005e4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fa29 	bl	8006350 <I2C_WaitOnBTFFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00d      	beq.n	8005f20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d107      	bne.n	8005f1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e016      	b.n	8005f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e000      	b.n	8005f4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f4c:	2302      	movs	r3, #2
  }
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	00100002 	.word	0x00100002
 8005f5c:	ffff0000 	.word	0xffff0000

08005f60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	817b      	strh	r3, [r7, #10]
 8005f72:	460b      	mov	r3, r1
 8005f74:	813b      	strh	r3, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f878 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb0:	d103      	bne.n	8005fba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e05f      	b.n	800607e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fbe:	897b      	ldrh	r3, [r7, #10]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	492d      	ldr	r1, [pc, #180]	@ (8006088 <I2C_RequestMemoryWrite+0x128>)
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f8d3 	bl	8006180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e04c      	b.n	800607e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffc:	6a39      	ldr	r1, [r7, #32]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f95e 	bl	80062c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	2b04      	cmp	r3, #4
 8006010:	d107      	bne.n	8006022 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e02b      	b.n	800607e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d105      	bne.n	8006038 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800602c:	893b      	ldrh	r3, [r7, #8]
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	611a      	str	r2, [r3, #16]
 8006036:	e021      	b.n	800607c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006038:	893b      	ldrh	r3, [r7, #8]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	b29b      	uxth	r3, r3
 800603e:	b2da      	uxtb	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006048:	6a39      	ldr	r1, [r7, #32]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f938 	bl	80062c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00d      	beq.n	8006072 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	2b04      	cmp	r3, #4
 800605c:	d107      	bne.n	800606e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800606c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e005      	b.n	800607e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006072:	893b      	ldrh	r3, [r7, #8]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	00010002 	.word	0x00010002

0800608c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800609c:	e048      	b.n	8006130 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d044      	beq.n	8006130 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7ff f951 	bl	800534c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d139      	bne.n	8006130 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	0c1b      	lsrs	r3, r3, #16
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10d      	bne.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	43da      	mvns	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4013      	ands	r3, r2
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bf0c      	ite	eq
 80060d8:	2301      	moveq	r3, #1
 80060da:	2300      	movne	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	e00c      	b.n	80060fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	43da      	mvns	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4013      	ands	r3, r2
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d116      	bne.n	8006130 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	f043 0220 	orr.w	r2, r3, #32
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e023      	b.n	8006178 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b01      	cmp	r3, #1
 8006138:	d10d      	bne.n	8006156 <I2C_WaitOnFlagUntilTimeout+0xca>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	43da      	mvns	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4013      	ands	r3, r2
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	bf0c      	ite	eq
 800614c:	2301      	moveq	r3, #1
 800614e:	2300      	movne	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	e00c      	b.n	8006170 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	43da      	mvns	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	4013      	ands	r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	429a      	cmp	r2, r3
 8006174:	d093      	beq.n	800609e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800618e:	e071      	b.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800619a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800619e:	d123      	bne.n	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	f043 0204 	orr.w	r2, r3, #4
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e067      	b.n	80062b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d041      	beq.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f0:	f7ff f8ac 	bl	800534c <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d302      	bcc.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d136      	bne.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10c      	bne.n	800622a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	43da      	mvns	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	bf14      	ite	ne
 8006222:	2301      	movne	r3, #1
 8006224:	2300      	moveq	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	e00b      	b.n	8006242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	43da      	mvns	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4013      	ands	r3, r2
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d016      	beq.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006260:	f043 0220 	orr.w	r2, r3, #32
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e021      	b.n	80062b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	0c1b      	lsrs	r3, r3, #16
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d10c      	bne.n	8006298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	43da      	mvns	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	e00b      	b.n	80062b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	43da      	mvns	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bf14      	ite	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	2300      	moveq	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f47f af6d 	bne.w	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062cc:	e034      	b.n	8006338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f886 	bl	80063e0 <I2C_IsAcknowledgeFailed>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e034      	b.n	8006348 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d028      	beq.n	8006338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7ff f831 	bl	800534c <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d11d      	bne.n	8006338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006306:	2b80      	cmp	r3, #128	@ 0x80
 8006308:	d016      	beq.n	8006338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006324:	f043 0220 	orr.w	r2, r3, #32
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e007      	b.n	8006348 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006342:	2b80      	cmp	r3, #128	@ 0x80
 8006344:	d1c3      	bne.n	80062ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800635c:	e034      	b.n	80063c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f83e 	bl	80063e0 <I2C_IsAcknowledgeFailed>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e034      	b.n	80063d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d028      	beq.n	80063c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006376:	f7fe ffe9 	bl	800534c <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	429a      	cmp	r2, r3
 8006384:	d302      	bcc.n	800638c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d11d      	bne.n	80063c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b04      	cmp	r3, #4
 8006398:	d016      	beq.n	80063c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e007      	b.n	80063d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d1c3      	bne.n	800635e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f6:	d11b      	bne.n	8006430 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006400:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641c:	f043 0204 	orr.w	r2, r3, #4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0cc      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006454:	4b68      	ldr	r3, [pc, #416]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d90c      	bls.n	800647c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b65      	ldr	r3, [pc, #404]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800646a:	4b63      	ldr	r3, [pc, #396]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0b8      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d020      	beq.n	80064ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006494:	4b59      	ldr	r3, [pc, #356]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4a58      	ldr	r2, [pc, #352]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800649e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064ac:	4b53      	ldr	r3, [pc, #332]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a52      	ldr	r2, [pc, #328]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80064b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b8:	4b50      	ldr	r3, [pc, #320]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	494d      	ldr	r1, [pc, #308]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d044      	beq.n	8006560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d107      	bne.n	80064ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064de:	4b47      	ldr	r3, [pc, #284]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d119      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e07f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d003      	beq.n	80064fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064fe:	4b3f      	ldr	r3, [pc, #252]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e06f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800650e:	4b3b      	ldr	r3, [pc, #236]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e067      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800651e:	4b37      	ldr	r3, [pc, #220]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f023 0203 	bic.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4934      	ldr	r1, [pc, #208]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006530:	f7fe ff0c 	bl	800534c <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006536:	e00a      	b.n	800654e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006538:	f7fe ff08 	bl	800534c <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e04f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654e:	4b2b      	ldr	r3, [pc, #172]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 020c 	and.w	r2, r3, #12
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	429a      	cmp	r2, r3
 800655e:	d1eb      	bne.n	8006538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006560:	4b25      	ldr	r3, [pc, #148]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d20c      	bcs.n	8006588 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656e:	4b22      	ldr	r3, [pc, #136]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006576:	4b20      	ldr	r3, [pc, #128]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d001      	beq.n	8006588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e032      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006594:	4b19      	ldr	r3, [pc, #100]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	4916      	ldr	r1, [pc, #88]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065b2:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	490e      	ldr	r1, [pc, #56]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065c6:	f000 f855 	bl	8006674 <HAL_RCC_GetSysClockFreq>
 80065ca:	4602      	mov	r2, r0
 80065cc:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	091b      	lsrs	r3, r3, #4
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	490a      	ldr	r1, [pc, #40]	@ (8006600 <HAL_RCC_ClockConfig+0x1c0>)
 80065d8:	5ccb      	ldrb	r3, [r1, r3]
 80065da:	fa22 f303 	lsr.w	r3, r2, r3
 80065de:	4a09      	ldr	r2, [pc, #36]	@ (8006604 <HAL_RCC_ClockConfig+0x1c4>)
 80065e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80065e2:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <HAL_RCC_ClockConfig+0x1c8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fe6c 	bl	80052c4 <HAL_InitTick>

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40023c00 	.word	0x40023c00
 80065fc:	40023800 	.word	0x40023800
 8006600:	0800b958 	.word	0x0800b958
 8006604:	20000000 	.word	0x20000000
 8006608:	20000004 	.word	0x20000004

0800660c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006610:	4b03      	ldr	r3, [pc, #12]	@ (8006620 <HAL_RCC_GetHCLKFreq+0x14>)
 8006612:	681b      	ldr	r3, [r3, #0]
}
 8006614:	4618      	mov	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000000 	.word	0x20000000

08006624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006628:	f7ff fff0 	bl	800660c <HAL_RCC_GetHCLKFreq>
 800662c:	4602      	mov	r2, r0
 800662e:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	0a9b      	lsrs	r3, r3, #10
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	4903      	ldr	r1, [pc, #12]	@ (8006648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800663a:	5ccb      	ldrb	r3, [r1, r3]
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	0800b968 	.word	0x0800b968

0800664c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006650:	f7ff ffdc 	bl	800660c <HAL_RCC_GetHCLKFreq>
 8006654:	4602      	mov	r2, r0
 8006656:	4b05      	ldr	r3, [pc, #20]	@ (800666c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	0b5b      	lsrs	r3, r3, #13
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4903      	ldr	r1, [pc, #12]	@ (8006670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006662:	5ccb      	ldrb	r3, [r1, r3]
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40023800 	.word	0x40023800
 8006670:	0800b968 	.word	0x0800b968

08006674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006678:	b0ae      	sub	sp, #184	@ 0xb8
 800667a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800669a:	4bcb      	ldr	r3, [pc, #812]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b0c      	cmp	r3, #12
 80066a4:	f200 8206 	bhi.w	8006ab4 <HAL_RCC_GetSysClockFreq+0x440>
 80066a8:	a201      	add	r2, pc, #4	@ (adr r2, 80066b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	08006ab5 	.word	0x08006ab5
 80066b8:	08006ab5 	.word	0x08006ab5
 80066bc:	08006ab5 	.word	0x08006ab5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	08006ab5 	.word	0x08006ab5
 80066c8:	08006ab5 	.word	0x08006ab5
 80066cc:	08006ab5 	.word	0x08006ab5
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	08006ab5 	.word	0x08006ab5
 80066d8:	08006ab5 	.word	0x08006ab5
 80066dc:	08006ab5 	.word	0x08006ab5
 80066e0:	080068e5 	.word	0x080068e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066e4:	4bb9      	ldr	r3, [pc, #740]	@ (80069cc <HAL_RCC_GetSysClockFreq+0x358>)
 80066e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80066ea:	e1e7      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ec:	4bb8      	ldr	r3, [pc, #736]	@ (80069d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80066ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80066f2:	e1e3      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066f4:	4bb4      	ldr	r3, [pc, #720]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006700:	4bb1      	ldr	r3, [pc, #708]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d071      	beq.n	80067f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800670c:	4bae      	ldr	r3, [pc, #696]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	099b      	lsrs	r3, r3, #6
 8006712:	2200      	movs	r2, #0
 8006714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006718:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800671c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006724:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006728:	2300      	movs	r3, #0
 800672a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800672e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006732:	4622      	mov	r2, r4
 8006734:	462b      	mov	r3, r5
 8006736:	f04f 0000 	mov.w	r0, #0
 800673a:	f04f 0100 	mov.w	r1, #0
 800673e:	0159      	lsls	r1, r3, #5
 8006740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006744:	0150      	lsls	r0, r2, #5
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4621      	mov	r1, r4
 800674c:	1a51      	subs	r1, r2, r1
 800674e:	6439      	str	r1, [r7, #64]	@ 0x40
 8006750:	4629      	mov	r1, r5
 8006752:	eb63 0301 	sbc.w	r3, r3, r1
 8006756:	647b      	str	r3, [r7, #68]	@ 0x44
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006764:	4649      	mov	r1, r9
 8006766:	018b      	lsls	r3, r1, #6
 8006768:	4641      	mov	r1, r8
 800676a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800676e:	4641      	mov	r1, r8
 8006770:	018a      	lsls	r2, r1, #6
 8006772:	4641      	mov	r1, r8
 8006774:	1a51      	subs	r1, r2, r1
 8006776:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006778:	4649      	mov	r1, r9
 800677a:	eb63 0301 	sbc.w	r3, r3, r1
 800677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800678c:	4649      	mov	r1, r9
 800678e:	00cb      	lsls	r3, r1, #3
 8006790:	4641      	mov	r1, r8
 8006792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006796:	4641      	mov	r1, r8
 8006798:	00ca      	lsls	r2, r1, #3
 800679a:	4610      	mov	r0, r2
 800679c:	4619      	mov	r1, r3
 800679e:	4603      	mov	r3, r0
 80067a0:	4622      	mov	r2, r4
 80067a2:	189b      	adds	r3, r3, r2
 80067a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067a6:	462b      	mov	r3, r5
 80067a8:	460a      	mov	r2, r1
 80067aa:	eb42 0303 	adc.w	r3, r2, r3
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80067bc:	4629      	mov	r1, r5
 80067be:	024b      	lsls	r3, r1, #9
 80067c0:	4621      	mov	r1, r4
 80067c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067c6:	4621      	mov	r1, r4
 80067c8:	024a      	lsls	r2, r1, #9
 80067ca:	4610      	mov	r0, r2
 80067cc:	4619      	mov	r1, r3
 80067ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80067e0:	f7fa fa52 	bl	8000c88 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4613      	mov	r3, r2
 80067ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067ee:	e067      	b.n	80068c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f0:	4b75      	ldr	r3, [pc, #468]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	099b      	lsrs	r3, r3, #6
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006800:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	67bb      	str	r3, [r7, #120]	@ 0x78
 800680a:	2300      	movs	r3, #0
 800680c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800680e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006812:	4622      	mov	r2, r4
 8006814:	462b      	mov	r3, r5
 8006816:	f04f 0000 	mov.w	r0, #0
 800681a:	f04f 0100 	mov.w	r1, #0
 800681e:	0159      	lsls	r1, r3, #5
 8006820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006824:	0150      	lsls	r0, r2, #5
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4621      	mov	r1, r4
 800682c:	1a51      	subs	r1, r2, r1
 800682e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006830:	4629      	mov	r1, r5
 8006832:	eb63 0301 	sbc.w	r3, r3, r1
 8006836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006844:	4649      	mov	r1, r9
 8006846:	018b      	lsls	r3, r1, #6
 8006848:	4641      	mov	r1, r8
 800684a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800684e:	4641      	mov	r1, r8
 8006850:	018a      	lsls	r2, r1, #6
 8006852:	4641      	mov	r1, r8
 8006854:	ebb2 0a01 	subs.w	sl, r2, r1
 8006858:	4649      	mov	r1, r9
 800685a:	eb63 0b01 	sbc.w	fp, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800686a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800686e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006872:	4692      	mov	sl, r2
 8006874:	469b      	mov	fp, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb1a 0303 	adds.w	r3, sl, r3
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	462b      	mov	r3, r5
 8006880:	eb4b 0303 	adc.w	r3, fp, r3
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006892:	4629      	mov	r1, r5
 8006894:	028b      	lsls	r3, r1, #10
 8006896:	4621      	mov	r1, r4
 8006898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800689c:	4621      	mov	r1, r4
 800689e:	028a      	lsls	r2, r1, #10
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068a8:	2200      	movs	r2, #0
 80068aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80068ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80068ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80068b2:	f7fa f9e9 	bl	8000c88 <__aeabi_uldivmod>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4613      	mov	r3, r2
 80068bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068c0:	4b41      	ldr	r3, [pc, #260]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	3301      	adds	r3, #1
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80068d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068da:	fbb2 f3f3 	udiv	r3, r2, r3
 80068de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80068e2:	e0eb      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068e4:	4b38      	ldr	r3, [pc, #224]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068f0:	4b35      	ldr	r3, [pc, #212]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d06b      	beq.n	80069d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068fc:	4b32      	ldr	r3, [pc, #200]	@ (80069c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	099b      	lsrs	r3, r3, #6
 8006902:	2200      	movs	r2, #0
 8006904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006906:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800690a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006910:	2300      	movs	r3, #0
 8006912:	667b      	str	r3, [r7, #100]	@ 0x64
 8006914:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006918:	4622      	mov	r2, r4
 800691a:	462b      	mov	r3, r5
 800691c:	f04f 0000 	mov.w	r0, #0
 8006920:	f04f 0100 	mov.w	r1, #0
 8006924:	0159      	lsls	r1, r3, #5
 8006926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800692a:	0150      	lsls	r0, r2, #5
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4621      	mov	r1, r4
 8006932:	1a51      	subs	r1, r2, r1
 8006934:	61b9      	str	r1, [r7, #24]
 8006936:	4629      	mov	r1, r5
 8006938:	eb63 0301 	sbc.w	r3, r3, r1
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800694a:	4659      	mov	r1, fp
 800694c:	018b      	lsls	r3, r1, #6
 800694e:	4651      	mov	r1, sl
 8006950:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006954:	4651      	mov	r1, sl
 8006956:	018a      	lsls	r2, r1, #6
 8006958:	4651      	mov	r1, sl
 800695a:	ebb2 0801 	subs.w	r8, r2, r1
 800695e:	4659      	mov	r1, fp
 8006960:	eb63 0901 	sbc.w	r9, r3, r1
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006978:	4690      	mov	r8, r2
 800697a:	4699      	mov	r9, r3
 800697c:	4623      	mov	r3, r4
 800697e:	eb18 0303 	adds.w	r3, r8, r3
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	462b      	mov	r3, r5
 8006986:	eb49 0303 	adc.w	r3, r9, r3
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006998:	4629      	mov	r1, r5
 800699a:	024b      	lsls	r3, r1, #9
 800699c:	4621      	mov	r1, r4
 800699e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069a2:	4621      	mov	r1, r4
 80069a4:	024a      	lsls	r2, r1, #9
 80069a6:	4610      	mov	r0, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069ae:	2200      	movs	r2, #0
 80069b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80069b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80069b8:	f7fa f966 	bl	8000c88 <__aeabi_uldivmod>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4613      	mov	r3, r2
 80069c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069c6:	e065      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x420>
 80069c8:	40023800 	.word	0x40023800
 80069cc:	00f42400 	.word	0x00f42400
 80069d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069d4:	4b3d      	ldr	r3, [pc, #244]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x458>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	099b      	lsrs	r3, r3, #6
 80069da:	2200      	movs	r2, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	4611      	mov	r1, r2
 80069e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e6:	2300      	movs	r3, #0
 80069e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80069ee:	4642      	mov	r2, r8
 80069f0:	464b      	mov	r3, r9
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f04f 0100 	mov.w	r1, #0
 80069fa:	0159      	lsls	r1, r3, #5
 80069fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a00:	0150      	lsls	r0, r2, #5
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4641      	mov	r1, r8
 8006a08:	1a51      	subs	r1, r2, r1
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006a20:	4659      	mov	r1, fp
 8006a22:	018b      	lsls	r3, r1, #6
 8006a24:	4651      	mov	r1, sl
 8006a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a2a:	4651      	mov	r1, sl
 8006a2c:	018a      	lsls	r2, r1, #6
 8006a2e:	4651      	mov	r1, sl
 8006a30:	1a54      	subs	r4, r2, r1
 8006a32:	4659      	mov	r1, fp
 8006a34:	eb63 0501 	sbc.w	r5, r3, r1
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	00eb      	lsls	r3, r5, #3
 8006a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a46:	00e2      	lsls	r2, r4, #3
 8006a48:	4614      	mov	r4, r2
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	4643      	mov	r3, r8
 8006a4e:	18e3      	adds	r3, r4, r3
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	464b      	mov	r3, r9
 8006a54:	eb45 0303 	adc.w	r3, r5, r3
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a66:	4629      	mov	r1, r5
 8006a68:	028b      	lsls	r3, r1, #10
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a70:	4621      	mov	r1, r4
 8006a72:	028a      	lsls	r2, r1, #10
 8006a74:	4610      	mov	r0, r2
 8006a76:	4619      	mov	r1, r3
 8006a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a80:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006a82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a86:	f7fa f8ff 	bl	8000c88 <__aeabi_uldivmod>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4613      	mov	r3, r2
 8006a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a94:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x458>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	0f1b      	lsrs	r3, r3, #28
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006aa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006ab2:	e003      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ab4:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006aba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006abc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	37b8      	adds	r7, #184	@ 0xb8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aca:	bf00      	nop
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	00f42400 	.word	0x00f42400

08006ad4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e28d      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8083 	beq.w	8006bfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006af4:	4b94      	ldr	r3, [pc, #592]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 030c 	and.w	r3, r3, #12
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d019      	beq.n	8006b34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006b00:	4b91      	ldr	r3, [pc, #580]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 030c 	and.w	r3, r3, #12
        || \
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d106      	bne.n	8006b1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006b0c:	4b8e      	ldr	r3, [pc, #568]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b18:	d00c      	beq.n	8006b34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d112      	bne.n	8006b4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b26:	4b88      	ldr	r3, [pc, #544]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b32:	d10b      	bne.n	8006b4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b34:	4b84      	ldr	r3, [pc, #528]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d05b      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x124>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d157      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e25a      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b54:	d106      	bne.n	8006b64 <HAL_RCC_OscConfig+0x90>
 8006b56:	4b7c      	ldr	r3, [pc, #496]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a7b      	ldr	r2, [pc, #492]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	e01d      	b.n	8006ba0 <HAL_RCC_OscConfig+0xcc>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b6c:	d10c      	bne.n	8006b88 <HAL_RCC_OscConfig+0xb4>
 8006b6e:	4b76      	ldr	r3, [pc, #472]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a75      	ldr	r2, [pc, #468]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	4b73      	ldr	r3, [pc, #460]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a72      	ldr	r2, [pc, #456]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e00b      	b.n	8006ba0 <HAL_RCC_OscConfig+0xcc>
 8006b88:	4b6f      	ldr	r3, [pc, #444]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	4b6c      	ldr	r3, [pc, #432]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6b      	ldr	r2, [pc, #428]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d013      	beq.n	8006bd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fe fbd0 	bl	800534c <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb0:	f7fe fbcc 	bl	800534c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b64      	cmp	r3, #100	@ 0x64
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e21f      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bc2:	4b61      	ldr	r3, [pc, #388]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0xdc>
 8006bce:	e014      	b.n	8006bfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd0:	f7fe fbbc 	bl	800534c <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bd8:	f7fe fbb8 	bl	800534c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b64      	cmp	r3, #100	@ 0x64
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e20b      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bea:	4b57      	ldr	r3, [pc, #348]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f0      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x104>
 8006bf6:	e000      	b.n	8006bfa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d06f      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006c06:	4b50      	ldr	r3, [pc, #320]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d017      	beq.n	8006c42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006c12:	4b4d      	ldr	r3, [pc, #308]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 030c 	and.w	r3, r3, #12
        || \
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d105      	bne.n	8006c2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00b      	beq.n	8006c42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c2a:	4b47      	ldr	r3, [pc, #284]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006c32:	2b0c      	cmp	r3, #12
 8006c34:	d11c      	bne.n	8006c70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c36:	4b44      	ldr	r3, [pc, #272]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d116      	bne.n	8006c70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c42:	4b41      	ldr	r3, [pc, #260]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_RCC_OscConfig+0x186>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d001      	beq.n	8006c5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e1d3      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4937      	ldr	r1, [pc, #220]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c6e:	e03a      	b.n	8006ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d020      	beq.n	8006cba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c78:	4b34      	ldr	r3, [pc, #208]	@ (8006d4c <HAL_RCC_OscConfig+0x278>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7e:	f7fe fb65 	bl	800534c <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c86:	f7fe fb61 	bl	800534c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e1b4      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c98:	4b2b      	ldr	r3, [pc, #172]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0f0      	beq.n	8006c86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca4:	4b28      	ldr	r3, [pc, #160]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	4925      	ldr	r1, [pc, #148]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	600b      	str	r3, [r1, #0]
 8006cb8:	e015      	b.n	8006ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cba:	4b24      	ldr	r3, [pc, #144]	@ (8006d4c <HAL_RCC_OscConfig+0x278>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc0:	f7fe fb44 	bl	800534c <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc8:	f7fe fb40 	bl	800534c <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e193      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cda:	4b1b      	ldr	r3, [pc, #108]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d036      	beq.n	8006d60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d016      	beq.n	8006d28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cfa:	4b15      	ldr	r3, [pc, #84]	@ (8006d50 <HAL_RCC_OscConfig+0x27c>)
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d00:	f7fe fb24 	bl	800534c <HAL_GetTick>
 8006d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d08:	f7fe fb20 	bl	800534c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e173      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d48 <HAL_RCC_OscConfig+0x274>)
 8006d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f0      	beq.n	8006d08 <HAL_RCC_OscConfig+0x234>
 8006d26:	e01b      	b.n	8006d60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d28:	4b09      	ldr	r3, [pc, #36]	@ (8006d50 <HAL_RCC_OscConfig+0x27c>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2e:	f7fe fb0d 	bl	800534c <HAL_GetTick>
 8006d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d34:	e00e      	b.n	8006d54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d36:	f7fe fb09 	bl	800534c <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d907      	bls.n	8006d54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e15c      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	42470000 	.word	0x42470000
 8006d50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d54:	4b8a      	ldr	r3, [pc, #552]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1ea      	bne.n	8006d36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8097 	beq.w	8006e9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d72:	4b83      	ldr	r3, [pc, #524]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10f      	bne.n	8006d9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60bb      	str	r3, [r7, #8]
 8006d82:	4b7f      	ldr	r3, [pc, #508]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d86:	4a7e      	ldr	r2, [pc, #504]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d96:	60bb      	str	r3, [r7, #8]
 8006d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9e:	4b79      	ldr	r3, [pc, #484]	@ (8006f84 <HAL_RCC_OscConfig+0x4b0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d118      	bne.n	8006ddc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006daa:	4b76      	ldr	r3, [pc, #472]	@ (8006f84 <HAL_RCC_OscConfig+0x4b0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a75      	ldr	r2, [pc, #468]	@ (8006f84 <HAL_RCC_OscConfig+0x4b0>)
 8006db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006db6:	f7fe fac9 	bl	800534c <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dbe:	f7fe fac5 	bl	800534c <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e118      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8006f84 <HAL_RCC_OscConfig+0x4b0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0f0      	beq.n	8006dbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d106      	bne.n	8006df2 <HAL_RCC_OscConfig+0x31e>
 8006de4:	4b66      	ldr	r3, [pc, #408]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de8:	4a65      	ldr	r2, [pc, #404]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df0:	e01c      	b.n	8006e2c <HAL_RCC_OscConfig+0x358>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d10c      	bne.n	8006e14 <HAL_RCC_OscConfig+0x340>
 8006dfa:	4b61      	ldr	r3, [pc, #388]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfe:	4a60      	ldr	r2, [pc, #384]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e00:	f043 0304 	orr.w	r3, r3, #4
 8006e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e06:	4b5e      	ldr	r3, [pc, #376]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e0c:	f043 0301 	orr.w	r3, r3, #1
 8006e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e12:	e00b      	b.n	8006e2c <HAL_RCC_OscConfig+0x358>
 8006e14:	4b5a      	ldr	r3, [pc, #360]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e18:	4a59      	ldr	r2, [pc, #356]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e20:	4b57      	ldr	r3, [pc, #348]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e24:	4a56      	ldr	r2, [pc, #344]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e26:	f023 0304 	bic.w	r3, r3, #4
 8006e2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d015      	beq.n	8006e60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e34:	f7fe fa8a 	bl	800534c <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e3c:	f7fe fa86 	bl	800534c <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e0d7      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e52:	4b4b      	ldr	r3, [pc, #300]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0ee      	beq.n	8006e3c <HAL_RCC_OscConfig+0x368>
 8006e5e:	e014      	b.n	8006e8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e60:	f7fe fa74 	bl	800534c <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e68:	f7fe fa70 	bl	800534c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e0c1      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e7e:	4b40      	ldr	r3, [pc, #256]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1ee      	bne.n	8006e68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d105      	bne.n	8006e9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e90:	4b3b      	ldr	r3, [pc, #236]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e94:	4a3a      	ldr	r2, [pc, #232]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80ad 	beq.w	8007000 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ea6:	4b36      	ldr	r3, [pc, #216]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d060      	beq.n	8006f74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d145      	bne.n	8006f46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eba:	4b33      	ldr	r3, [pc, #204]	@ (8006f88 <HAL_RCC_OscConfig+0x4b4>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fe fa44 	bl	800534c <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec8:	f7fe fa40 	bl	800534c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e093      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eda:	4b29      	ldr	r3, [pc, #164]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69da      	ldr	r2, [r3, #28]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	019b      	lsls	r3, r3, #6
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	3b01      	subs	r3, #1
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	061b      	lsls	r3, r3, #24
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f10:	071b      	lsls	r3, r3, #28
 8006f12:	491b      	ldr	r1, [pc, #108]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f18:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <HAL_RCC_OscConfig+0x4b4>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1e:	f7fe fa15 	bl	800534c <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f26:	f7fe fa11 	bl	800534c <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e064      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f38:	4b11      	ldr	r3, [pc, #68]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0f0      	beq.n	8006f26 <HAL_RCC_OscConfig+0x452>
 8006f44:	e05c      	b.n	8007000 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f46:	4b10      	ldr	r3, [pc, #64]	@ (8006f88 <HAL_RCC_OscConfig+0x4b4>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4c:	f7fe f9fe 	bl	800534c <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f54:	f7fe f9fa 	bl	800534c <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e04d      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f66:	4b06      	ldr	r3, [pc, #24]	@ (8006f80 <HAL_RCC_OscConfig+0x4ac>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <HAL_RCC_OscConfig+0x480>
 8006f72:	e045      	b.n	8007000 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e040      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
 8006f80:	40023800 	.word	0x40023800
 8006f84:	40007000 	.word	0x40007000
 8006f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800700c <HAL_RCC_OscConfig+0x538>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d030      	beq.n	8006ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d129      	bne.n	8006ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d122      	bne.n	8006ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d119      	bne.n	8006ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d10f      	bne.n	8006ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d107      	bne.n	8006ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40023800 	.word	0x40023800

08007010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e041      	b.n	80070a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7fa fed2 	bl	8001de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3304      	adds	r3, #4
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	f000 fd2c 	bl	8007aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d001      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e04e      	b.n	8007166 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a23      	ldr	r2, [pc, #140]	@ (8007174 <HAL_TIM_Base_Start_IT+0xc4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d022      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f2:	d01d      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007178 <HAL_TIM_Base_Start_IT+0xc8>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d018      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a1e      	ldr	r2, [pc, #120]	@ (800717c <HAL_TIM_Base_Start_IT+0xcc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1c      	ldr	r2, [pc, #112]	@ (8007180 <HAL_TIM_Base_Start_IT+0xd0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00e      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1b      	ldr	r2, [pc, #108]	@ (8007184 <HAL_TIM_Base_Start_IT+0xd4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d009      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a19      	ldr	r2, [pc, #100]	@ (8007188 <HAL_TIM_Base_Start_IT+0xd8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d004      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a18      	ldr	r2, [pc, #96]	@ (800718c <HAL_TIM_Base_Start_IT+0xdc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d111      	bne.n	8007154 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b06      	cmp	r3, #6
 8007140:	d010      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0201 	orr.w	r2, r2, #1
 8007150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007152:	e007      	b.n	8007164 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40010000 	.word	0x40010000
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40010400 	.word	0x40010400
 8007188:	40014000 	.word	0x40014000
 800718c:	40001800 	.word	0x40001800

08007190 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0201 	bic.w	r2, r2, #1
 80071a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6a1a      	ldr	r2, [r3, #32]
 80071ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10f      	bne.n	80071d8 <HAL_TIM_Base_Stop_IT+0x48>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	f240 4344 	movw	r3, #1092	@ 0x444
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d107      	bne.n	80071d8 <HAL_TIM_Base_Stop_IT+0x48>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e041      	b.n	8007284 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d106      	bne.n	800721a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f839 	bl	800728c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	4619      	mov	r1, r3
 800722c:	4610      	mov	r0, r2
 800722e:	f000 fc3d 	bl	8007aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d109      	bne.n	80072c8 <HAL_TIM_OC_Start_IT+0x28>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	bf14      	ite	ne
 80072c0:	2301      	movne	r3, #1
 80072c2:	2300      	moveq	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	e022      	b.n	800730e <HAL_TIM_OC_Start_IT+0x6e>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d109      	bne.n	80072e2 <HAL_TIM_OC_Start_IT+0x42>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	bf14      	ite	ne
 80072da:	2301      	movne	r3, #1
 80072dc:	2300      	moveq	r3, #0
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	e015      	b.n	800730e <HAL_TIM_OC_Start_IT+0x6e>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d109      	bne.n	80072fc <HAL_TIM_OC_Start_IT+0x5c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	bf14      	ite	ne
 80072f4:	2301      	movne	r3, #1
 80072f6:	2300      	moveq	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	e008      	b.n	800730e <HAL_TIM_OC_Start_IT+0x6e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	bf14      	ite	ne
 8007308:	2301      	movne	r3, #1
 800730a:	2300      	moveq	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e0c7      	b.n	80074a6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d104      	bne.n	8007326 <HAL_TIM_OC_Start_IT+0x86>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007324:	e013      	b.n	800734e <HAL_TIM_OC_Start_IT+0xae>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b04      	cmp	r3, #4
 800732a:	d104      	bne.n	8007336 <HAL_TIM_OC_Start_IT+0x96>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007334:	e00b      	b.n	800734e <HAL_TIM_OC_Start_IT+0xae>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b08      	cmp	r3, #8
 800733a:	d104      	bne.n	8007346 <HAL_TIM_OC_Start_IT+0xa6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007344:	e003      	b.n	800734e <HAL_TIM_OC_Start_IT+0xae>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b0c      	cmp	r3, #12
 8007352:	d841      	bhi.n	80073d8 <HAL_TIM_OC_Start_IT+0x138>
 8007354:	a201      	add	r2, pc, #4	@ (adr r2, 800735c <HAL_TIM_OC_Start_IT+0xbc>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	08007391 	.word	0x08007391
 8007360:	080073d9 	.word	0x080073d9
 8007364:	080073d9 	.word	0x080073d9
 8007368:	080073d9 	.word	0x080073d9
 800736c:	080073a3 	.word	0x080073a3
 8007370:	080073d9 	.word	0x080073d9
 8007374:	080073d9 	.word	0x080073d9
 8007378:	080073d9 	.word	0x080073d9
 800737c:	080073b5 	.word	0x080073b5
 8007380:	080073d9 	.word	0x080073d9
 8007384:	080073d9 	.word	0x080073d9
 8007388:	080073d9 	.word	0x080073d9
 800738c:	080073c7 	.word	0x080073c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0202 	orr.w	r2, r2, #2
 800739e:	60da      	str	r2, [r3, #12]
      break;
 80073a0:	e01d      	b.n	80073de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0204 	orr.w	r2, r2, #4
 80073b0:	60da      	str	r2, [r3, #12]
      break;
 80073b2:	e014      	b.n	80073de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0208 	orr.w	r2, r2, #8
 80073c2:	60da      	str	r2, [r3, #12]
      break;
 80073c4:	e00b      	b.n	80073de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0210 	orr.w	r2, r2, #16
 80073d4:	60da      	str	r2, [r3, #12]
      break;
 80073d6:	e002      	b.n	80073de <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
      break;
 80073dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d15f      	bne.n	80074a4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2201      	movs	r2, #1
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fe4d 	bl	800808c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2e      	ldr	r2, [pc, #184]	@ (80074b0 <HAL_TIM_OC_Start_IT+0x210>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <HAL_TIM_OC_Start_IT+0x166>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a2c      	ldr	r2, [pc, #176]	@ (80074b4 <HAL_TIM_OC_Start_IT+0x214>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d101      	bne.n	800740a <HAL_TIM_OC_Start_IT+0x16a>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <HAL_TIM_OC_Start_IT+0x16c>
 800740a:	2300      	movs	r3, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800741e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a22      	ldr	r2, [pc, #136]	@ (80074b0 <HAL_TIM_OC_Start_IT+0x210>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <HAL_TIM_OC_Start_IT+0x1d0>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007432:	d01d      	beq.n	8007470 <HAL_TIM_OC_Start_IT+0x1d0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1f      	ldr	r2, [pc, #124]	@ (80074b8 <HAL_TIM_OC_Start_IT+0x218>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <HAL_TIM_OC_Start_IT+0x1d0>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1e      	ldr	r2, [pc, #120]	@ (80074bc <HAL_TIM_OC_Start_IT+0x21c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <HAL_TIM_OC_Start_IT+0x1d0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1c      	ldr	r2, [pc, #112]	@ (80074c0 <HAL_TIM_OC_Start_IT+0x220>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_TIM_OC_Start_IT+0x1d0>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a17      	ldr	r2, [pc, #92]	@ (80074b4 <HAL_TIM_OC_Start_IT+0x214>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_TIM_OC_Start_IT+0x1d0>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a18      	ldr	r2, [pc, #96]	@ (80074c4 <HAL_TIM_OC_Start_IT+0x224>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_TIM_OC_Start_IT+0x1d0>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a17      	ldr	r2, [pc, #92]	@ (80074c8 <HAL_TIM_OC_Start_IT+0x228>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d111      	bne.n	8007494 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b06      	cmp	r3, #6
 8007480:	d010      	beq.n	80074a4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0201 	orr.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007492:	e007      	b.n	80074a4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40010000 	.word	0x40010000
 80074b4:	40010400 	.word	0x40010400
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800
 80074c0:	40000c00 	.word	0x40000c00
 80074c4:	40014000 	.word	0x40014000
 80074c8:	40001800 	.word	0x40001800

080074cc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b0c      	cmp	r3, #12
 80074de:	d841      	bhi.n	8007564 <HAL_TIM_OC_Stop_IT+0x98>
 80074e0:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <HAL_TIM_OC_Stop_IT+0x1c>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	0800751d 	.word	0x0800751d
 80074ec:	08007565 	.word	0x08007565
 80074f0:	08007565 	.word	0x08007565
 80074f4:	08007565 	.word	0x08007565
 80074f8:	0800752f 	.word	0x0800752f
 80074fc:	08007565 	.word	0x08007565
 8007500:	08007565 	.word	0x08007565
 8007504:	08007565 	.word	0x08007565
 8007508:	08007541 	.word	0x08007541
 800750c:	08007565 	.word	0x08007565
 8007510:	08007565 	.word	0x08007565
 8007514:	08007565 	.word	0x08007565
 8007518:	08007553 	.word	0x08007553
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0202 	bic.w	r2, r2, #2
 800752a:	60da      	str	r2, [r3, #12]
      break;
 800752c:	e01d      	b.n	800756a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0204 	bic.w	r2, r2, #4
 800753c:	60da      	str	r2, [r3, #12]
      break;
 800753e:	e014      	b.n	800756a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0208 	bic.w	r2, r2, #8
 800754e:	60da      	str	r2, [r3, #12]
      break;
 8007550:	e00b      	b.n	800756a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0210 	bic.w	r2, r2, #16
 8007560:	60da      	str	r2, [r3, #12]
      break;
 8007562:	e002      	b.n	800756a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
      break;
 8007568:	bf00      	nop
  }

  if (status == HAL_OK)
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d161      	bne.n	8007634 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2200      	movs	r2, #0
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fd87 	bl	800808c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2f      	ldr	r2, [pc, #188]	@ (8007640 <HAL_TIM_OC_Stop_IT+0x174>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d004      	beq.n	8007592 <HAL_TIM_OC_Stop_IT+0xc6>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2d      	ldr	r2, [pc, #180]	@ (8007644 <HAL_TIM_OC_Stop_IT+0x178>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d101      	bne.n	8007596 <HAL_TIM_OC_Stop_IT+0xca>
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <HAL_TIM_OC_Stop_IT+0xcc>
 8007596:	2300      	movs	r3, #0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a1a      	ldr	r2, [r3, #32]
 80075a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10f      	bne.n	80075cc <HAL_TIM_OC_Stop_IT+0x100>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6a1a      	ldr	r2, [r3, #32]
 80075b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80075b6:	4013      	ands	r3, r2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d107      	bne.n	80075cc <HAL_TIM_OC_Stop_IT+0x100>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6a1a      	ldr	r2, [r3, #32]
 80075d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10f      	bne.n	80075fc <HAL_TIM_OC_Stop_IT+0x130>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a1a      	ldr	r2, [r3, #32]
 80075e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_OC_Stop_IT+0x130>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <HAL_TIM_OC_Stop_IT+0x140>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800760a:	e013      	b.n	8007634 <HAL_TIM_OC_Stop_IT+0x168>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b04      	cmp	r3, #4
 8007610:	d104      	bne.n	800761c <HAL_TIM_OC_Stop_IT+0x150>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800761a:	e00b      	b.n	8007634 <HAL_TIM_OC_Stop_IT+0x168>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b08      	cmp	r3, #8
 8007620:	d104      	bne.n	800762c <HAL_TIM_OC_Stop_IT+0x160>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800762a:	e003      	b.n	8007634 <HAL_TIM_OC_Stop_IT+0x168>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40010000 	.word	0x40010000
 8007644:	40010400 	.word	0x40010400

08007648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d020      	beq.n	80076ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01b      	beq.n	80076ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0202 	mvn.w	r2, #2
 800767c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f9eb 	bl	8007a6e <HAL_TIM_IC_CaptureCallback>
 8007698:	e005      	b.n	80076a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fc fc8a 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f9ee 	bl	8007a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f003 0304 	and.w	r3, r3, #4
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d020      	beq.n	80076f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01b      	beq.n	80076f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0204 	mvn.w	r2, #4
 80076c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9c5 	bl	8007a6e <HAL_TIM_IC_CaptureCallback>
 80076e4:	e005      	b.n	80076f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fc fc64 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f9c8 	bl	8007a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f003 0308 	and.w	r3, r3, #8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d020      	beq.n	8007744 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d01b      	beq.n	8007744 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f06f 0208 	mvn.w	r2, #8
 8007714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2204      	movs	r2, #4
 800771a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f99f 	bl	8007a6e <HAL_TIM_IC_CaptureCallback>
 8007730:	e005      	b.n	800773e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fc fc3e 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f9a2 	bl	8007a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b00      	cmp	r3, #0
 800774c:	d020      	beq.n	8007790 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01b      	beq.n	8007790 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0210 	mvn.w	r2, #16
 8007760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2208      	movs	r2, #8
 8007766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f979 	bl	8007a6e <HAL_TIM_IC_CaptureCallback>
 800777c:	e005      	b.n	800778a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fc fc18 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f97c 	bl	8007a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00c      	beq.n	80077b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f06f 0201 	mvn.w	r2, #1
 80077ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fc fcd0 	bl	8004154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00c      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80077d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fd58 	bl	8008288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00c      	beq.n	80077fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f94d 	bl	8007a96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0220 	mvn.w	r2, #32
 8007818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fd2a 	bl	8008274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007820:	bf00      	nop
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007842:	2302      	movs	r3, #2
 8007844:	e048      	b.n	80078d8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b0c      	cmp	r3, #12
 8007852:	d839      	bhi.n	80078c8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007854:	a201      	add	r2, pc, #4	@ (adr r2, 800785c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007891 	.word	0x08007891
 8007860:	080078c9 	.word	0x080078c9
 8007864:	080078c9 	.word	0x080078c9
 8007868:	080078c9 	.word	0x080078c9
 800786c:	0800789f 	.word	0x0800789f
 8007870:	080078c9 	.word	0x080078c9
 8007874:	080078c9 	.word	0x080078c9
 8007878:	080078c9 	.word	0x080078c9
 800787c:	080078ad 	.word	0x080078ad
 8007880:	080078c9 	.word	0x080078c9
 8007884:	080078c9 	.word	0x080078c9
 8007888:	080078c9 	.word	0x080078c9
 800788c:	080078bb 	.word	0x080078bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68b9      	ldr	r1, [r7, #8]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 f9ae 	bl	8007bf8 <TIM_OC1_SetConfig>
      break;
 800789c:	e017      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68b9      	ldr	r1, [r7, #8]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fa17 	bl	8007cd8 <TIM_OC2_SetConfig>
      break;
 80078aa:	e010      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fa86 	bl	8007dc4 <TIM_OC3_SetConfig>
      break;
 80078b8:	e009      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 faf3 	bl	8007eac <TIM_OC4_SetConfig>
      break;
 80078c6:	e002      	b.n	80078ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
      break;
 80078cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_TIM_ConfigClockSource+0x1c>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e0b4      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x186>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800791a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007934:	d03e      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0xd4>
 8007936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800793a:	f200 8087 	bhi.w	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800793e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007942:	f000 8086 	beq.w	8007a52 <HAL_TIM_ConfigClockSource+0x172>
 8007946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800794a:	d87f      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800794c:	2b70      	cmp	r3, #112	@ 0x70
 800794e:	d01a      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0xa6>
 8007950:	2b70      	cmp	r3, #112	@ 0x70
 8007952:	d87b      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 8007954:	2b60      	cmp	r3, #96	@ 0x60
 8007956:	d050      	beq.n	80079fa <HAL_TIM_ConfigClockSource+0x11a>
 8007958:	2b60      	cmp	r3, #96	@ 0x60
 800795a:	d877      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800795c:	2b50      	cmp	r3, #80	@ 0x50
 800795e:	d03c      	beq.n	80079da <HAL_TIM_ConfigClockSource+0xfa>
 8007960:	2b50      	cmp	r3, #80	@ 0x50
 8007962:	d873      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 8007964:	2b40      	cmp	r3, #64	@ 0x40
 8007966:	d058      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0x13a>
 8007968:	2b40      	cmp	r3, #64	@ 0x40
 800796a:	d86f      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800796c:	2b30      	cmp	r3, #48	@ 0x30
 800796e:	d064      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x15a>
 8007970:	2b30      	cmp	r3, #48	@ 0x30
 8007972:	d86b      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 8007974:	2b20      	cmp	r3, #32
 8007976:	d060      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x15a>
 8007978:	2b20      	cmp	r3, #32
 800797a:	d867      	bhi.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
 800797c:	2b00      	cmp	r3, #0
 800797e:	d05c      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x15a>
 8007980:	2b10      	cmp	r3, #16
 8007982:	d05a      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x15a>
 8007984:	e062      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007996:	f000 fb59 	bl	800804c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	609a      	str	r2, [r3, #8]
      break;
 80079b2:	e04f      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079c4:	f000 fb42 	bl	800804c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079d6:	609a      	str	r2, [r3, #8]
      break;
 80079d8:	e03c      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e6:	461a      	mov	r2, r3
 80079e8:	f000 fab6 	bl	8007f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2150      	movs	r1, #80	@ 0x50
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fb0f 	bl	8008016 <TIM_ITRx_SetConfig>
      break;
 80079f8:	e02c      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a06:	461a      	mov	r2, r3
 8007a08:	f000 fad5 	bl	8007fb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2160      	movs	r1, #96	@ 0x60
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 faff 	bl	8008016 <TIM_ITRx_SetConfig>
      break;
 8007a18:	e01c      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a26:	461a      	mov	r2, r3
 8007a28:	f000 fa96 	bl	8007f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2140      	movs	r1, #64	@ 0x40
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 faef 	bl	8008016 <TIM_ITRx_SetConfig>
      break;
 8007a38:	e00c      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f000 fae6 	bl	8008016 <TIM_ITRx_SetConfig>
      break;
 8007a4a:	e003      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a50:	e000      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a43      	ldr	r2, [pc, #268]	@ (8007bcc <TIM_Base_SetConfig+0x120>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d013      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aca:	d00f      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a40      	ldr	r2, [pc, #256]	@ (8007bd0 <TIM_Base_SetConfig+0x124>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00b      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a3f      	ldr	r2, [pc, #252]	@ (8007bd4 <TIM_Base_SetConfig+0x128>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d007      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a3e      	ldr	r2, [pc, #248]	@ (8007bd8 <TIM_Base_SetConfig+0x12c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a3d      	ldr	r2, [pc, #244]	@ (8007bdc <TIM_Base_SetConfig+0x130>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d108      	bne.n	8007afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a32      	ldr	r2, [pc, #200]	@ (8007bcc <TIM_Base_SetConfig+0x120>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d02b      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b0c:	d027      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a2f      	ldr	r2, [pc, #188]	@ (8007bd0 <TIM_Base_SetConfig+0x124>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d023      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a2e      	ldr	r2, [pc, #184]	@ (8007bd4 <TIM_Base_SetConfig+0x128>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d01f      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a2d      	ldr	r2, [pc, #180]	@ (8007bd8 <TIM_Base_SetConfig+0x12c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d01b      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2c      	ldr	r2, [pc, #176]	@ (8007bdc <TIM_Base_SetConfig+0x130>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d017      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2b      	ldr	r2, [pc, #172]	@ (8007be0 <TIM_Base_SetConfig+0x134>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2a      	ldr	r2, [pc, #168]	@ (8007be4 <TIM_Base_SetConfig+0x138>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00f      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a29      	ldr	r2, [pc, #164]	@ (8007be8 <TIM_Base_SetConfig+0x13c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00b      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a28      	ldr	r2, [pc, #160]	@ (8007bec <TIM_Base_SetConfig+0x140>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d007      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a27      	ldr	r2, [pc, #156]	@ (8007bf0 <TIM_Base_SetConfig+0x144>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d003      	beq.n	8007b5e <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a26      	ldr	r2, [pc, #152]	@ (8007bf4 <TIM_Base_SetConfig+0x148>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d108      	bne.n	8007b70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a0e      	ldr	r2, [pc, #56]	@ (8007bcc <TIM_Base_SetConfig+0x120>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d003      	beq.n	8007b9e <TIM_Base_SetConfig+0xf2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a10      	ldr	r2, [pc, #64]	@ (8007bdc <TIM_Base_SetConfig+0x130>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d103      	bne.n	8007ba6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f043 0204 	orr.w	r2, r3, #4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	601a      	str	r2, [r3, #0]
}
 8007bbe:	bf00      	nop
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	40010000 	.word	0x40010000
 8007bd0:	40000400 	.word	0x40000400
 8007bd4:	40000800 	.word	0x40000800
 8007bd8:	40000c00 	.word	0x40000c00
 8007bdc:	40010400 	.word	0x40010400
 8007be0:	40014000 	.word	0x40014000
 8007be4:	40014400 	.word	0x40014400
 8007be8:	40014800 	.word	0x40014800
 8007bec:	40001800 	.word	0x40001800
 8007bf0:	40001c00 	.word	0x40001c00
 8007bf4:	40002000 	.word	0x40002000

08007bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	f023 0201 	bic.w	r2, r3, #1
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f023 0302 	bic.w	r3, r3, #2
 8007c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a20      	ldr	r2, [pc, #128]	@ (8007cd0 <TIM_OC1_SetConfig+0xd8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_OC1_SetConfig+0x64>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a1f      	ldr	r2, [pc, #124]	@ (8007cd4 <TIM_OC1_SetConfig+0xdc>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d10c      	bne.n	8007c76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f023 0308 	bic.w	r3, r3, #8
 8007c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f023 0304 	bic.w	r3, r3, #4
 8007c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a15      	ldr	r2, [pc, #84]	@ (8007cd0 <TIM_OC1_SetConfig+0xd8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <TIM_OC1_SetConfig+0x8e>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a14      	ldr	r2, [pc, #80]	@ (8007cd4 <TIM_OC1_SetConfig+0xdc>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d111      	bne.n	8007caa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	621a      	str	r2, [r3, #32]
}
 8007cc4:	bf00      	nop
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	40010000 	.word	0x40010000
 8007cd4:	40010400 	.word	0x40010400

08007cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f023 0210 	bic.w	r2, r3, #16
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f023 0320 	bic.w	r3, r3, #32
 8007d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a22      	ldr	r2, [pc, #136]	@ (8007dbc <TIM_OC2_SetConfig+0xe4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_OC2_SetConfig+0x68>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a21      	ldr	r2, [pc, #132]	@ (8007dc0 <TIM_OC2_SetConfig+0xe8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10d      	bne.n	8007d5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a17      	ldr	r2, [pc, #92]	@ (8007dbc <TIM_OC2_SetConfig+0xe4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_OC2_SetConfig+0x94>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a16      	ldr	r2, [pc, #88]	@ (8007dc0 <TIM_OC2_SetConfig+0xe8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d113      	bne.n	8007d94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	621a      	str	r2, [r3, #32]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40010000 	.word	0x40010000
 8007dc0:	40010400 	.word	0x40010400

08007dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0303 	bic.w	r3, r3, #3
 8007dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a21      	ldr	r2, [pc, #132]	@ (8007ea4 <TIM_OC3_SetConfig+0xe0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_OC3_SetConfig+0x66>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a20      	ldr	r2, [pc, #128]	@ (8007ea8 <TIM_OC3_SetConfig+0xe4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d10d      	bne.n	8007e46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a16      	ldr	r2, [pc, #88]	@ (8007ea4 <TIM_OC3_SetConfig+0xe0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d003      	beq.n	8007e56 <TIM_OC3_SetConfig+0x92>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a15      	ldr	r2, [pc, #84]	@ (8007ea8 <TIM_OC3_SetConfig+0xe4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d113      	bne.n	8007e7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	621a      	str	r2, [r3, #32]
}
 8007e98:	bf00      	nop
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	40010000 	.word	0x40010000
 8007ea8:	40010400 	.word	0x40010400

08007eac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	031b      	lsls	r3, r3, #12
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a12      	ldr	r2, [pc, #72]	@ (8007f50 <TIM_OC4_SetConfig+0xa4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d003      	beq.n	8007f14 <TIM_OC4_SetConfig+0x68>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a11      	ldr	r2, [pc, #68]	@ (8007f54 <TIM_OC4_SetConfig+0xa8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d109      	bne.n	8007f28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	019b      	lsls	r3, r3, #6
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	40010000 	.word	0x40010000
 8007f54:	40010400 	.word	0x40010400

08007f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	f023 0201 	bic.w	r2, r3, #1
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f023 030a 	bic.w	r3, r3, #10
 8007f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b087      	sub	sp, #28
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	f023 0210 	bic.w	r2, r3, #16
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	031b      	lsls	r3, r3, #12
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ff2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	621a      	str	r2, [r3, #32]
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008016:	b480      	push	{r7}
 8008018:	b085      	sub	sp, #20
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800802c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4313      	orrs	r3, r2
 8008034:	f043 0307 	orr.w	r3, r3, #7
 8008038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	609a      	str	r2, [r3, #8]
}
 8008040:	bf00      	nop
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	021a      	lsls	r2, r3, #8
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	431a      	orrs	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	4313      	orrs	r3, r2
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4313      	orrs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	609a      	str	r2, [r3, #8]
}
 8008080:	bf00      	nop
 8008082:	371c      	adds	r7, #28
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	2201      	movs	r2, #1
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1a      	ldr	r2, [r3, #32]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	43db      	mvns	r3, r3
 80080ae:	401a      	ands	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	fa01 f303 	lsl.w	r3, r1, r3
 80080c4:	431a      	orrs	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e05a      	b.n	80081a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a21      	ldr	r2, [pc, #132]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d022      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813c:	d01d      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d018      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a1b      	ldr	r2, [pc, #108]	@ (80081bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1a      	ldr	r2, [pc, #104]	@ (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00e      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a18      	ldr	r2, [pc, #96]	@ (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d009      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a17      	ldr	r2, [pc, #92]	@ (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d004      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a15      	ldr	r2, [pc, #84]	@ (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d10c      	bne.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	4313      	orrs	r3, r2
 800818a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40010000 	.word	0x40010000
 80081b8:	40000400 	.word	0x40000400
 80081bc:	40000800 	.word	0x40000800
 80081c0:	40000c00 	.word	0x40000c00
 80081c4:	40010400 	.word	0x40010400
 80081c8:	40014000 	.word	0x40014000
 80081cc:	40001800 	.word	0x40001800

080081d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d101      	bne.n	80081ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e03d      	b.n	8008268 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e042      	b.n	8008334 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7f9 feda 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2224      	movs	r2, #36	@ 0x24
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fe0b 	bl	8008efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695a      	ldr	r2, [r3, #20]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	@ 0x28
 8008340:	af02      	add	r7, sp, #8
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	4613      	mov	r3, r2
 800834a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b20      	cmp	r3, #32
 800835a:	d175      	bne.n	8008448 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_UART_Transmit+0x2c>
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e06e      	b.n	800844a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2221      	movs	r2, #33	@ 0x21
 8008376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800837a:	f7fc ffe7 	bl	800534c <HAL_GetTick>
 800837e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008394:	d108      	bne.n	80083a8 <HAL_UART_Transmit+0x6c>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	e003      	b.n	80083b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083b0:	e02e      	b.n	8008410 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2200      	movs	r2, #0
 80083ba:	2180      	movs	r1, #128	@ 0x80
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fba9 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e03a      	b.n	800844a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3302      	adds	r3, #2
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e007      	b.n	8008402 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	3301      	adds	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1cb      	bne.n	80083b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2200      	movs	r2, #0
 8008422:	2140      	movs	r1, #64	@ 0x40
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 fb75 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e006      	b.n	800844a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008448:	2302      	movs	r3, #2
  }
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b08a      	sub	sp, #40	@ 0x28
 8008456:	af02      	add	r7, sp, #8
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	4613      	mov	r3, r2
 8008460:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b20      	cmp	r3, #32
 8008470:	f040 8081 	bne.w	8008576 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_UART_Receive+0x2e>
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e079      	b.n	8008578 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2222      	movs	r2, #34	@ 0x22
 800848e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008498:	f7fc ff58 	bl	800534c <HAL_GetTick>
 800849c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	88fa      	ldrh	r2, [r7, #6]
 80084a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	88fa      	ldrh	r2, [r7, #6]
 80084a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b2:	d108      	bne.n	80084c6 <HAL_UART_Receive+0x74>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80084bc:	2300      	movs	r3, #0
 80084be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	61bb      	str	r3, [r7, #24]
 80084c4:	e003      	b.n	80084ce <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80084ce:	e047      	b.n	8008560 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2200      	movs	r2, #0
 80084d8:	2120      	movs	r1, #32
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fb1a 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e042      	b.n	8008578 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10c      	bne.n	8008512 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008504:	b29a      	uxth	r2, r3
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	3302      	adds	r3, #2
 800850e:	61bb      	str	r3, [r7, #24]
 8008510:	e01f      	b.n	8008552 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800851a:	d007      	beq.n	800852c <HAL_UART_Receive+0xda>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10a      	bne.n	800853a <HAL_UART_Receive+0xe8>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	b2da      	uxtb	r2, r3
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	e008      	b.n	800854c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008546:	b2da      	uxtb	r2, r3
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	3301      	adds	r3, #1
 8008550:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008556:	b29b      	uxth	r3, r3
 8008558:	3b01      	subs	r3, #1
 800855a:	b29a      	uxth	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1b2      	bne.n	80084d0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2220      	movs	r2, #32
 800856e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	e000      	b.n	8008578 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008576:	2302      	movs	r3, #2
  }
}
 8008578:	4618      	mov	r0, r3
 800857a:	3720      	adds	r7, #32
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b0ba      	sub	sp, #232	@ 0xe8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b6:	f003 030f 	and.w	r3, r3, #15
 80085ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80085be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10f      	bne.n	80085e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <HAL_UART_IRQHandler+0x66>
 80085d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fbcd 	bl	8008d7e <UART_Receive_IT>
      return;
 80085e4:	e273      	b.n	8008ace <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 80de 	beq.w	80087ac <HAL_UART_IRQHandler+0x22c>
 80085f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d106      	bne.n	800860a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008600:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 80d1 	beq.w	80087ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00b      	beq.n	800862e <HAL_UART_IRQHandler+0xae>
 8008616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800861a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861e:	2b00      	cmp	r3, #0
 8008620:	d005      	beq.n	800862e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008626:	f043 0201 	orr.w	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800862e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008632:	f003 0304 	and.w	r3, r3, #4
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00b      	beq.n	8008652 <HAL_UART_IRQHandler+0xd2>
 800863a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d005      	beq.n	8008652 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800864a:	f043 0202 	orr.w	r2, r3, #2
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <HAL_UART_IRQHandler+0xf6>
 800865e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d005      	beq.n	8008676 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800866e:	f043 0204 	orr.w	r2, r3, #4
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d011      	beq.n	80086a6 <HAL_UART_IRQHandler+0x126>
 8008682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d105      	bne.n	800869a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800868e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d005      	beq.n	80086a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800869e:	f043 0208 	orr.w	r2, r3, #8
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 820a 	beq.w	8008ac4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d008      	beq.n	80086ce <HAL_UART_IRQHandler+0x14e>
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb58 	bl	8008d7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d8:	2b40      	cmp	r3, #64	@ 0x40
 80086da:	bf0c      	ite	eq
 80086dc:	2301      	moveq	r3, #1
 80086de:	2300      	movne	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ea:	f003 0308 	and.w	r3, r3, #8
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d103      	bne.n	80086fa <HAL_UART_IRQHandler+0x17a>
 80086f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d04f      	beq.n	800879a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa63 	bl	8008bc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870a:	2b40      	cmp	r3, #64	@ 0x40
 800870c:	d141      	bne.n	8008792 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3314      	adds	r3, #20
 8008714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800872c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3314      	adds	r3, #20
 8008736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800873a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800873e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1d9      	bne.n	800870e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d013      	beq.n	800878a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008766:	4a8a      	ldr	r2, [pc, #552]	@ (8008990 <HAL_UART_IRQHandler+0x410>)
 8008768:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800876e:	4618      	mov	r0, r3
 8008770:	f7fc ff9d 	bl	80056ae <HAL_DMA_Abort_IT>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d016      	beq.n	80087a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008788:	e00e      	b.n	80087a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9ac 	bl	8008ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	e00a      	b.n	80087a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9a8 	bl	8008ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	e006      	b.n	80087a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f9a4 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80087a6:	e18d      	b.n	8008ac4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a8:	bf00      	nop
    return;
 80087aa:	e18b      	b.n	8008ac4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	f040 8167 	bne.w	8008a84 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ba:	f003 0310 	and.w	r3, r3, #16
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8160 	beq.w	8008a84 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8159 	beq.w	8008a84 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087d2:	2300      	movs	r3, #0
 80087d4:	60bb      	str	r3, [r7, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60bb      	str	r3, [r7, #8]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	60bb      	str	r3, [r7, #8]
 80087e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f2:	2b40      	cmp	r3, #64	@ 0x40
 80087f4:	f040 80ce 	bne.w	8008994 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008804:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80a9 	beq.w	8008960 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008816:	429a      	cmp	r2, r3
 8008818:	f080 80a2 	bcs.w	8008960 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008822:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800882e:	f000 8088 	beq.w	8008942 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	330c      	adds	r3, #12
 8008838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800884c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	330c      	adds	r3, #12
 800885a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800885e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800886a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1d9      	bne.n	8008832 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3314      	adds	r3, #20
 8008884:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800888e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3314      	adds	r3, #20
 800889e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e1      	bne.n	800887e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3314      	adds	r3, #20
 80088c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3314      	adds	r3, #20
 80088da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e3      	bne.n	80088ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2220      	movs	r2, #32
 80088f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	330c      	adds	r3, #12
 8008906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008912:	f023 0310 	bic.w	r3, r3, #16
 8008916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	330c      	adds	r3, #12
 8008920:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008924:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008926:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800892a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e3      	bne.n	8008900 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893c:	4618      	mov	r0, r3
 800893e:	f7fc fe46 	bl	80055ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2202      	movs	r2, #2
 8008946:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008950:	b29b      	uxth	r3, r3
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	b29b      	uxth	r3, r3
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f8cf 	bl	8008afc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800895e:	e0b3      	b.n	8008ac8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008964:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008968:	429a      	cmp	r2, r3
 800896a:	f040 80ad 	bne.w	8008ac8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008978:	f040 80a6 	bne.w	8008ac8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8b7 	bl	8008afc <HAL_UARTEx_RxEventCallback>
      return;
 800898e:	e09b      	b.n	8008ac8 <HAL_UART_IRQHandler+0x548>
 8008990:	08008c8d 	.word	0x08008c8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800899c:	b29b      	uxth	r3, r3
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 808e 	beq.w	8008acc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80089b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 8089 	beq.w	8008acc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330c      	adds	r3, #12
 80089c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	330c      	adds	r3, #12
 80089da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80089de:	647a      	str	r2, [r7, #68]	@ 0x44
 80089e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e3      	bne.n	80089ba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	623b      	str	r3, [r7, #32]
   return(result);
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3314      	adds	r3, #20
 8008a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e3      	bne.n	80089f2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0310 	bic.w	r3, r3, #16
 8008a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	330c      	adds	r3, #12
 8008a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008a5c:	61fa      	str	r2, [r7, #28]
 8008a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	69b9      	ldr	r1, [r7, #24]
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	e841 2300 	strex	r3, r2, [r1]
 8008a68:	617b      	str	r3, [r7, #20]
   return(result);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e3      	bne.n	8008a38 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f83d 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a82:	e023      	b.n	8008acc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d009      	beq.n	8008aa4 <HAL_UART_IRQHandler+0x524>
 8008a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f906 	bl	8008cae <UART_Transmit_IT>
    return;
 8008aa2:	e014      	b.n	8008ace <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <HAL_UART_IRQHandler+0x54e>
 8008ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f946 	bl	8008d4e <UART_EndTransmit_IT>
    return;
 8008ac2:	e004      	b.n	8008ace <HAL_UART_IRQHandler+0x54e>
    return;
 8008ac4:	bf00      	nop
 8008ac6:	e002      	b.n	8008ace <HAL_UART_IRQHandler+0x54e>
      return;
 8008ac8:	bf00      	nop
 8008aca:	e000      	b.n	8008ace <HAL_UART_IRQHandler+0x54e>
      return;
 8008acc:	bf00      	nop
  }
}
 8008ace:	37e8      	adds	r7, #232	@ 0xe8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b24:	e03b      	b.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d037      	beq.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2e:	f7fc fc0d 	bl	800534c <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	6a3a      	ldr	r2, [r7, #32]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d302      	bcc.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e03a      	b.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d023      	beq.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b80      	cmp	r3, #128	@ 0x80
 8008b5a:	d020      	beq.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d01d      	beq.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d116      	bne.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 f81d 	bl	8008bc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2208      	movs	r2, #8
 8008b90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e00f      	b.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	bf0c      	ite	eq
 8008bae:	2301      	moveq	r3, #1
 8008bb0:	2300      	movne	r3, #0
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d0b4      	beq.n	8008b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b095      	sub	sp, #84	@ 0x54
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	330c      	adds	r3, #12
 8008bd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	330c      	adds	r3, #12
 8008bec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bee:	643a      	str	r2, [r7, #64]	@ 0x40
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e5      	bne.n	8008bce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3314      	adds	r3, #20
 8008c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3314      	adds	r3, #20
 8008c20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e5      	bne.n	8008c02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d119      	bne.n	8008c72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	330c      	adds	r3, #12
 8008c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f023 0310 	bic.w	r3, r3, #16
 8008c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	330c      	adds	r3, #12
 8008c5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c5e:	61ba      	str	r2, [r7, #24]
 8008c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6979      	ldr	r1, [r7, #20]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e5      	bne.n	8008c3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008c80:	bf00      	nop
 8008c82:	3754      	adds	r7, #84	@ 0x54
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7ff ff21 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b21      	cmp	r3, #33	@ 0x21
 8008cc0:	d13e      	bne.n	8008d40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cca:	d114      	bne.n	8008cf6 <UART_Transmit_IT+0x48>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d110      	bne.n	8008cf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	1c9a      	adds	r2, r3, #2
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	621a      	str	r2, [r3, #32]
 8008cf4:	e008      	b.n	8008d08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	1c59      	adds	r1, r3, #1
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6211      	str	r1, [r2, #32]
 8008d00:	781a      	ldrb	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4619      	mov	r1, r3
 8008d16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10f      	bne.n	8008d3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e000      	b.n	8008d42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d40:	2302      	movs	r3, #2
  }
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b082      	sub	sp, #8
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68da      	ldr	r2, [r3, #12]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff feb0 	bl	8008ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b08c      	sub	sp, #48	@ 0x30
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b22      	cmp	r3, #34	@ 0x22
 8008d98:	f040 80aa 	bne.w	8008ef0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008da4:	d115      	bne.n	8008dd2 <UART_Receive_IT+0x54>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d111      	bne.n	8008dd2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dca:	1c9a      	adds	r2, r3, #2
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	629a      	str	r2, [r3, #40]	@ 0x28
 8008dd0:	e024      	b.n	8008e1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008de0:	d007      	beq.n	8008df2 <UART_Receive_IT+0x74>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <UART_Receive_IT+0x82>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	e008      	b.n	8008e12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d15d      	bne.n	8008eec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0220 	bic.w	r2, r2, #32
 8008e3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	695a      	ldr	r2, [r3, #20]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0201 	bic.w	r2, r2, #1
 8008e5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2220      	movs	r2, #32
 8008e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d135      	bne.n	8008ee2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	330c      	adds	r3, #12
 8008e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	e853 3f00 	ldrex	r3, [r3]
 8008e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f023 0310 	bic.w	r3, r3, #16
 8008e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e9c:	623a      	str	r2, [r7, #32]
 8008e9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	69f9      	ldr	r1, [r7, #28]
 8008ea2:	6a3a      	ldr	r2, [r7, #32]
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e5      	bne.n	8008e7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0310 	and.w	r3, r3, #16
 8008eba:	2b10      	cmp	r3, #16
 8008ebc:	d10a      	bne.n	8008ed4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff fe0e 	bl	8008afc <HAL_UARTEx_RxEventCallback>
 8008ee0:	e002      	b.n	8008ee8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7f8 f866 	bl	8000fb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e002      	b.n	8008ef2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	e000      	b.n	8008ef2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ef0:	2302      	movs	r3, #2
  }
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3730      	adds	r7, #48	@ 0x30
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f00:	b0c0      	sub	sp, #256	@ 0x100
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f18:	68d9      	ldr	r1, [r3, #12]
 8008f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	ea40 0301 	orr.w	r3, r0, r1
 8008f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	431a      	orrs	r2, r3
 8008f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008f54:	f021 010c 	bic.w	r1, r1, #12
 8008f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f62:	430b      	orrs	r3, r1
 8008f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f76:	6999      	ldr	r1, [r3, #24]
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	ea40 0301 	orr.w	r3, r0, r1
 8008f82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	4b8f      	ldr	r3, [pc, #572]	@ (80091c8 <UART_SetConfig+0x2cc>)
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d005      	beq.n	8008f9c <UART_SetConfig+0xa0>
 8008f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	4b8d      	ldr	r3, [pc, #564]	@ (80091cc <UART_SetConfig+0x2d0>)
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d104      	bne.n	8008fa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f9c:	f7fd fb56 	bl	800664c <HAL_RCC_GetPCLK2Freq>
 8008fa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008fa4:	e003      	b.n	8008fae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fa6:	f7fd fb3d 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 8008faa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fb8:	f040 810c 	bne.w	80091d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008fca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008fce:	4622      	mov	r2, r4
 8008fd0:	462b      	mov	r3, r5
 8008fd2:	1891      	adds	r1, r2, r2
 8008fd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008fd6:	415b      	adcs	r3, r3
 8008fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008fde:	4621      	mov	r1, r4
 8008fe0:	eb12 0801 	adds.w	r8, r2, r1
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	eb43 0901 	adc.w	r9, r3, r1
 8008fea:	f04f 0200 	mov.w	r2, #0
 8008fee:	f04f 0300 	mov.w	r3, #0
 8008ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ffe:	4690      	mov	r8, r2
 8009000:	4699      	mov	r9, r3
 8009002:	4623      	mov	r3, r4
 8009004:	eb18 0303 	adds.w	r3, r8, r3
 8009008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800900c:	462b      	mov	r3, r5
 800900e:	eb49 0303 	adc.w	r3, r9, r3
 8009012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009022:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800902a:	460b      	mov	r3, r1
 800902c:	18db      	adds	r3, r3, r3
 800902e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009030:	4613      	mov	r3, r2
 8009032:	eb42 0303 	adc.w	r3, r2, r3
 8009036:	657b      	str	r3, [r7, #84]	@ 0x54
 8009038:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800903c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009040:	f7f7 fe22 	bl	8000c88 <__aeabi_uldivmod>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4b61      	ldr	r3, [pc, #388]	@ (80091d0 <UART_SetConfig+0x2d4>)
 800904a:	fba3 2302 	umull	r2, r3, r3, r2
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	011c      	lsls	r4, r3, #4
 8009052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009056:	2200      	movs	r2, #0
 8009058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800905c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009060:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009064:	4642      	mov	r2, r8
 8009066:	464b      	mov	r3, r9
 8009068:	1891      	adds	r1, r2, r2
 800906a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800906c:	415b      	adcs	r3, r3
 800906e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009070:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009074:	4641      	mov	r1, r8
 8009076:	eb12 0a01 	adds.w	sl, r2, r1
 800907a:	4649      	mov	r1, r9
 800907c:	eb43 0b01 	adc.w	fp, r3, r1
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	f04f 0300 	mov.w	r3, #0
 8009088:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800908c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009094:	4692      	mov	sl, r2
 8009096:	469b      	mov	fp, r3
 8009098:	4643      	mov	r3, r8
 800909a:	eb1a 0303 	adds.w	r3, sl, r3
 800909e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090a2:	464b      	mov	r3, r9
 80090a4:	eb4b 0303 	adc.w	r3, fp, r3
 80090a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80090bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090c0:	460b      	mov	r3, r1
 80090c2:	18db      	adds	r3, r3, r3
 80090c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80090c6:	4613      	mov	r3, r2
 80090c8:	eb42 0303 	adc.w	r3, r2, r3
 80090cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80090ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80090d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80090d6:	f7f7 fdd7 	bl	8000c88 <__aeabi_uldivmod>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4611      	mov	r1, r2
 80090e0:	4b3b      	ldr	r3, [pc, #236]	@ (80091d0 <UART_SetConfig+0x2d4>)
 80090e2:	fba3 2301 	umull	r2, r3, r3, r1
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	2264      	movs	r2, #100	@ 0x64
 80090ea:	fb02 f303 	mul.w	r3, r2, r3
 80090ee:	1acb      	subs	r3, r1, r3
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80090f6:	4b36      	ldr	r3, [pc, #216]	@ (80091d0 <UART_SetConfig+0x2d4>)
 80090f8:	fba3 2302 	umull	r2, r3, r3, r2
 80090fc:	095b      	lsrs	r3, r3, #5
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009104:	441c      	add	r4, r3
 8009106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800910a:	2200      	movs	r2, #0
 800910c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009110:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009114:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009118:	4642      	mov	r2, r8
 800911a:	464b      	mov	r3, r9
 800911c:	1891      	adds	r1, r2, r2
 800911e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009120:	415b      	adcs	r3, r3
 8009122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009128:	4641      	mov	r1, r8
 800912a:	1851      	adds	r1, r2, r1
 800912c:	6339      	str	r1, [r7, #48]	@ 0x30
 800912e:	4649      	mov	r1, r9
 8009130:	414b      	adcs	r3, r1
 8009132:	637b      	str	r3, [r7, #52]	@ 0x34
 8009134:	f04f 0200 	mov.w	r2, #0
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009140:	4659      	mov	r1, fp
 8009142:	00cb      	lsls	r3, r1, #3
 8009144:	4651      	mov	r1, sl
 8009146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800914a:	4651      	mov	r1, sl
 800914c:	00ca      	lsls	r2, r1, #3
 800914e:	4610      	mov	r0, r2
 8009150:	4619      	mov	r1, r3
 8009152:	4603      	mov	r3, r0
 8009154:	4642      	mov	r2, r8
 8009156:	189b      	adds	r3, r3, r2
 8009158:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800915c:	464b      	mov	r3, r9
 800915e:	460a      	mov	r2, r1
 8009160:	eb42 0303 	adc.w	r3, r2, r3
 8009164:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009174:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800917c:	460b      	mov	r3, r1
 800917e:	18db      	adds	r3, r3, r3
 8009180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009182:	4613      	mov	r3, r2
 8009184:	eb42 0303 	adc.w	r3, r2, r3
 8009188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800918a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800918e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009192:	f7f7 fd79 	bl	8000c88 <__aeabi_uldivmod>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4b0d      	ldr	r3, [pc, #52]	@ (80091d0 <UART_SetConfig+0x2d4>)
 800919c:	fba3 1302 	umull	r1, r3, r3, r2
 80091a0:	095b      	lsrs	r3, r3, #5
 80091a2:	2164      	movs	r1, #100	@ 0x64
 80091a4:	fb01 f303 	mul.w	r3, r1, r3
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	3332      	adds	r3, #50	@ 0x32
 80091ae:	4a08      	ldr	r2, [pc, #32]	@ (80091d0 <UART_SetConfig+0x2d4>)
 80091b0:	fba2 2303 	umull	r2, r3, r2, r3
 80091b4:	095b      	lsrs	r3, r3, #5
 80091b6:	f003 0207 	and.w	r2, r3, #7
 80091ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4422      	add	r2, r4
 80091c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80091c4:	e106      	b.n	80093d4 <UART_SetConfig+0x4d8>
 80091c6:	bf00      	nop
 80091c8:	40011000 	.word	0x40011000
 80091cc:	40011400 	.word	0x40011400
 80091d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80091de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80091e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80091e6:	4642      	mov	r2, r8
 80091e8:	464b      	mov	r3, r9
 80091ea:	1891      	adds	r1, r2, r2
 80091ec:	6239      	str	r1, [r7, #32]
 80091ee:	415b      	adcs	r3, r3
 80091f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80091f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091f6:	4641      	mov	r1, r8
 80091f8:	1854      	adds	r4, r2, r1
 80091fa:	4649      	mov	r1, r9
 80091fc:	eb43 0501 	adc.w	r5, r3, r1
 8009200:	f04f 0200 	mov.w	r2, #0
 8009204:	f04f 0300 	mov.w	r3, #0
 8009208:	00eb      	lsls	r3, r5, #3
 800920a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800920e:	00e2      	lsls	r2, r4, #3
 8009210:	4614      	mov	r4, r2
 8009212:	461d      	mov	r5, r3
 8009214:	4643      	mov	r3, r8
 8009216:	18e3      	adds	r3, r4, r3
 8009218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800921c:	464b      	mov	r3, r9
 800921e:	eb45 0303 	adc.w	r3, r5, r3
 8009222:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009232:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	f04f 0300 	mov.w	r3, #0
 800923e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009242:	4629      	mov	r1, r5
 8009244:	008b      	lsls	r3, r1, #2
 8009246:	4621      	mov	r1, r4
 8009248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800924c:	4621      	mov	r1, r4
 800924e:	008a      	lsls	r2, r1, #2
 8009250:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009254:	f7f7 fd18 	bl	8000c88 <__aeabi_uldivmod>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4b60      	ldr	r3, [pc, #384]	@ (80093e0 <UART_SetConfig+0x4e4>)
 800925e:	fba3 2302 	umull	r2, r3, r3, r2
 8009262:	095b      	lsrs	r3, r3, #5
 8009264:	011c      	lsls	r4, r3, #4
 8009266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800926a:	2200      	movs	r2, #0
 800926c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009270:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009274:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	1891      	adds	r1, r2, r2
 800927e:	61b9      	str	r1, [r7, #24]
 8009280:	415b      	adcs	r3, r3
 8009282:	61fb      	str	r3, [r7, #28]
 8009284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009288:	4641      	mov	r1, r8
 800928a:	1851      	adds	r1, r2, r1
 800928c:	6139      	str	r1, [r7, #16]
 800928e:	4649      	mov	r1, r9
 8009290:	414b      	adcs	r3, r1
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092a0:	4659      	mov	r1, fp
 80092a2:	00cb      	lsls	r3, r1, #3
 80092a4:	4651      	mov	r1, sl
 80092a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092aa:	4651      	mov	r1, sl
 80092ac:	00ca      	lsls	r2, r1, #3
 80092ae:	4610      	mov	r0, r2
 80092b0:	4619      	mov	r1, r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	4642      	mov	r2, r8
 80092b6:	189b      	adds	r3, r3, r2
 80092b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092bc:	464b      	mov	r3, r9
 80092be:	460a      	mov	r2, r1
 80092c0:	eb42 0303 	adc.w	r3, r2, r3
 80092c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	f04f 0300 	mov.w	r3, #0
 80092dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80092e0:	4649      	mov	r1, r9
 80092e2:	008b      	lsls	r3, r1, #2
 80092e4:	4641      	mov	r1, r8
 80092e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092ea:	4641      	mov	r1, r8
 80092ec:	008a      	lsls	r2, r1, #2
 80092ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80092f2:	f7f7 fcc9 	bl	8000c88 <__aeabi_uldivmod>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	4b38      	ldr	r3, [pc, #224]	@ (80093e0 <UART_SetConfig+0x4e4>)
 80092fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	2264      	movs	r2, #100	@ 0x64
 8009306:	fb02 f303 	mul.w	r3, r2, r3
 800930a:	1acb      	subs	r3, r1, r3
 800930c:	011b      	lsls	r3, r3, #4
 800930e:	3332      	adds	r3, #50	@ 0x32
 8009310:	4a33      	ldr	r2, [pc, #204]	@ (80093e0 <UART_SetConfig+0x4e4>)
 8009312:	fba2 2303 	umull	r2, r3, r2, r3
 8009316:	095b      	lsrs	r3, r3, #5
 8009318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800931c:	441c      	add	r4, r3
 800931e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009322:	2200      	movs	r2, #0
 8009324:	673b      	str	r3, [r7, #112]	@ 0x70
 8009326:	677a      	str	r2, [r7, #116]	@ 0x74
 8009328:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800932c:	4642      	mov	r2, r8
 800932e:	464b      	mov	r3, r9
 8009330:	1891      	adds	r1, r2, r2
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	415b      	adcs	r3, r3
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800933c:	4641      	mov	r1, r8
 800933e:	1851      	adds	r1, r2, r1
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	4649      	mov	r1, r9
 8009344:	414b      	adcs	r3, r1
 8009346:	607b      	str	r3, [r7, #4]
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	f04f 0300 	mov.w	r3, #0
 8009350:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009354:	4659      	mov	r1, fp
 8009356:	00cb      	lsls	r3, r1, #3
 8009358:	4651      	mov	r1, sl
 800935a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800935e:	4651      	mov	r1, sl
 8009360:	00ca      	lsls	r2, r1, #3
 8009362:	4610      	mov	r0, r2
 8009364:	4619      	mov	r1, r3
 8009366:	4603      	mov	r3, r0
 8009368:	4642      	mov	r2, r8
 800936a:	189b      	adds	r3, r3, r2
 800936c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800936e:	464b      	mov	r3, r9
 8009370:	460a      	mov	r2, r1
 8009372:	eb42 0303 	adc.w	r3, r2, r3
 8009376:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	663b      	str	r3, [r7, #96]	@ 0x60
 8009382:	667a      	str	r2, [r7, #100]	@ 0x64
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	f04f 0300 	mov.w	r3, #0
 800938c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009390:	4649      	mov	r1, r9
 8009392:	008b      	lsls	r3, r1, #2
 8009394:	4641      	mov	r1, r8
 8009396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800939a:	4641      	mov	r1, r8
 800939c:	008a      	lsls	r2, r1, #2
 800939e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80093a2:	f7f7 fc71 	bl	8000c88 <__aeabi_uldivmod>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <UART_SetConfig+0x4e4>)
 80093ac:	fba3 1302 	umull	r1, r3, r3, r2
 80093b0:	095b      	lsrs	r3, r3, #5
 80093b2:	2164      	movs	r1, #100	@ 0x64
 80093b4:	fb01 f303 	mul.w	r3, r1, r3
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	011b      	lsls	r3, r3, #4
 80093bc:	3332      	adds	r3, #50	@ 0x32
 80093be:	4a08      	ldr	r2, [pc, #32]	@ (80093e0 <UART_SetConfig+0x4e4>)
 80093c0:	fba2 2303 	umull	r2, r3, r2, r3
 80093c4:	095b      	lsrs	r3, r3, #5
 80093c6:	f003 020f 	and.w	r2, r3, #15
 80093ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4422      	add	r2, r4
 80093d2:	609a      	str	r2, [r3, #8]
}
 80093d4:	bf00      	nop
 80093d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80093da:	46bd      	mov	sp, r7
 80093dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093e0:	51eb851f 	.word	0x51eb851f

080093e4 <acos>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	ed2d 8b02 	vpush	{d8}
 80093ea:	ec55 4b10 	vmov	r4, r5, d0
 80093ee:	f000 fc27 	bl	8009c40 <__ieee754_acos>
 80093f2:	4622      	mov	r2, r4
 80093f4:	462b      	mov	r3, r5
 80093f6:	4620      	mov	r0, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	eeb0 8a40 	vmov.f32	s16, s0
 80093fe:	eef0 8a60 	vmov.f32	s17, s1
 8009402:	f7f7 fbb3 	bl	8000b6c <__aeabi_dcmpun>
 8009406:	b9a8      	cbnz	r0, 8009434 <acos+0x50>
 8009408:	ec45 4b10 	vmov	d0, r4, r5
 800940c:	f000 fa0c 	bl	8009828 <fabs>
 8009410:	4b0c      	ldr	r3, [pc, #48]	@ (8009444 <acos+0x60>)
 8009412:	ec51 0b10 	vmov	r0, r1, d0
 8009416:	2200      	movs	r2, #0
 8009418:	f7f7 fb9e 	bl	8000b58 <__aeabi_dcmpgt>
 800941c:	b150      	cbz	r0, 8009434 <acos+0x50>
 800941e:	f001 fead 	bl	800b17c <__errno>
 8009422:	ecbd 8b02 	vpop	{d8}
 8009426:	2321      	movs	r3, #33	@ 0x21
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800942e:	4806      	ldr	r0, [pc, #24]	@ (8009448 <acos+0x64>)
 8009430:	f000 ba76 	b.w	8009920 <nan>
 8009434:	eeb0 0a48 	vmov.f32	s0, s16
 8009438:	eef0 0a68 	vmov.f32	s1, s17
 800943c:	ecbd 8b02 	vpop	{d8}
 8009440:	bd38      	pop	{r3, r4, r5, pc}
 8009442:	bf00      	nop
 8009444:	3ff00000 	.word	0x3ff00000
 8009448:	0800c6dd 	.word	0x0800c6dd
 800944c:	00000000 	.word	0x00000000

08009450 <atan>:
 8009450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	ec55 4b10 	vmov	r4, r5, d0
 8009458:	4bbf      	ldr	r3, [pc, #764]	@ (8009758 <atan+0x308>)
 800945a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800945e:	429e      	cmp	r6, r3
 8009460:	46ab      	mov	fp, r5
 8009462:	d918      	bls.n	8009496 <atan+0x46>
 8009464:	4bbd      	ldr	r3, [pc, #756]	@ (800975c <atan+0x30c>)
 8009466:	429e      	cmp	r6, r3
 8009468:	d801      	bhi.n	800946e <atan+0x1e>
 800946a:	d109      	bne.n	8009480 <atan+0x30>
 800946c:	b144      	cbz	r4, 8009480 <atan+0x30>
 800946e:	4622      	mov	r2, r4
 8009470:	462b      	mov	r3, r5
 8009472:	4620      	mov	r0, r4
 8009474:	4629      	mov	r1, r5
 8009476:	f7f6 ff29 	bl	80002cc <__adddf3>
 800947a:	4604      	mov	r4, r0
 800947c:	460d      	mov	r5, r1
 800947e:	e006      	b.n	800948e <atan+0x3e>
 8009480:	f1bb 0f00 	cmp.w	fp, #0
 8009484:	f340 812b 	ble.w	80096de <atan+0x28e>
 8009488:	a597      	add	r5, pc, #604	@ (adr r5, 80096e8 <atan+0x298>)
 800948a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800948e:	ec45 4b10 	vmov	d0, r4, r5
 8009492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009496:	4bb2      	ldr	r3, [pc, #712]	@ (8009760 <atan+0x310>)
 8009498:	429e      	cmp	r6, r3
 800949a:	d813      	bhi.n	80094c4 <atan+0x74>
 800949c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80094a0:	429e      	cmp	r6, r3
 80094a2:	d80c      	bhi.n	80094be <atan+0x6e>
 80094a4:	a392      	add	r3, pc, #584	@ (adr r3, 80096f0 <atan+0x2a0>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	4620      	mov	r0, r4
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7f6 ff0d 	bl	80002cc <__adddf3>
 80094b2:	4bac      	ldr	r3, [pc, #688]	@ (8009764 <atan+0x314>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	f7f7 fb4f 	bl	8000b58 <__aeabi_dcmpgt>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d1e7      	bne.n	800948e <atan+0x3e>
 80094be:	f04f 3aff 	mov.w	sl, #4294967295
 80094c2:	e029      	b.n	8009518 <atan+0xc8>
 80094c4:	f000 f9b0 	bl	8009828 <fabs>
 80094c8:	4ba7      	ldr	r3, [pc, #668]	@ (8009768 <atan+0x318>)
 80094ca:	429e      	cmp	r6, r3
 80094cc:	ec55 4b10 	vmov	r4, r5, d0
 80094d0:	f200 80bc 	bhi.w	800964c <atan+0x1fc>
 80094d4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80094d8:	429e      	cmp	r6, r3
 80094da:	f200 809e 	bhi.w	800961a <atan+0x1ca>
 80094de:	4622      	mov	r2, r4
 80094e0:	462b      	mov	r3, r5
 80094e2:	4620      	mov	r0, r4
 80094e4:	4629      	mov	r1, r5
 80094e6:	f7f6 fef1 	bl	80002cc <__adddf3>
 80094ea:	4b9e      	ldr	r3, [pc, #632]	@ (8009764 <atan+0x314>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	f7f6 feeb 	bl	80002c8 <__aeabi_dsub>
 80094f2:	2200      	movs	r2, #0
 80094f4:	4606      	mov	r6, r0
 80094f6:	460f      	mov	r7, r1
 80094f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80094fc:	4620      	mov	r0, r4
 80094fe:	4629      	mov	r1, r5
 8009500:	f7f6 fee4 	bl	80002cc <__adddf3>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4630      	mov	r0, r6
 800950a:	4639      	mov	r1, r7
 800950c:	f7f7 f9be 	bl	800088c <__aeabi_ddiv>
 8009510:	f04f 0a00 	mov.w	sl, #0
 8009514:	4604      	mov	r4, r0
 8009516:	460d      	mov	r5, r1
 8009518:	4622      	mov	r2, r4
 800951a:	462b      	mov	r3, r5
 800951c:	4620      	mov	r0, r4
 800951e:	4629      	mov	r1, r5
 8009520:	f7f7 f88a 	bl	8000638 <__aeabi_dmul>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4680      	mov	r8, r0
 800952a:	4689      	mov	r9, r1
 800952c:	f7f7 f884 	bl	8000638 <__aeabi_dmul>
 8009530:	a371      	add	r3, pc, #452	@ (adr r3, 80096f8 <atan+0x2a8>)
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	4606      	mov	r6, r0
 8009538:	460f      	mov	r7, r1
 800953a:	f7f7 f87d 	bl	8000638 <__aeabi_dmul>
 800953e:	a370      	add	r3, pc, #448	@ (adr r3, 8009700 <atan+0x2b0>)
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f7f6 fec2 	bl	80002cc <__adddf3>
 8009548:	4632      	mov	r2, r6
 800954a:	463b      	mov	r3, r7
 800954c:	f7f7 f874 	bl	8000638 <__aeabi_dmul>
 8009550:	a36d      	add	r3, pc, #436	@ (adr r3, 8009708 <atan+0x2b8>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f6 feb9 	bl	80002cc <__adddf3>
 800955a:	4632      	mov	r2, r6
 800955c:	463b      	mov	r3, r7
 800955e:	f7f7 f86b 	bl	8000638 <__aeabi_dmul>
 8009562:	a36b      	add	r3, pc, #428	@ (adr r3, 8009710 <atan+0x2c0>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f6 feb0 	bl	80002cc <__adddf3>
 800956c:	4632      	mov	r2, r6
 800956e:	463b      	mov	r3, r7
 8009570:	f7f7 f862 	bl	8000638 <__aeabi_dmul>
 8009574:	a368      	add	r3, pc, #416	@ (adr r3, 8009718 <atan+0x2c8>)
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	f7f6 fea7 	bl	80002cc <__adddf3>
 800957e:	4632      	mov	r2, r6
 8009580:	463b      	mov	r3, r7
 8009582:	f7f7 f859 	bl	8000638 <__aeabi_dmul>
 8009586:	a366      	add	r3, pc, #408	@ (adr r3, 8009720 <atan+0x2d0>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	f7f6 fe9e 	bl	80002cc <__adddf3>
 8009590:	4642      	mov	r2, r8
 8009592:	464b      	mov	r3, r9
 8009594:	f7f7 f850 	bl	8000638 <__aeabi_dmul>
 8009598:	a363      	add	r3, pc, #396	@ (adr r3, 8009728 <atan+0x2d8>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	4680      	mov	r8, r0
 80095a0:	4689      	mov	r9, r1
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	f7f7 f847 	bl	8000638 <__aeabi_dmul>
 80095aa:	a361      	add	r3, pc, #388	@ (adr r3, 8009730 <atan+0x2e0>)
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	f7f6 fe8a 	bl	80002c8 <__aeabi_dsub>
 80095b4:	4632      	mov	r2, r6
 80095b6:	463b      	mov	r3, r7
 80095b8:	f7f7 f83e 	bl	8000638 <__aeabi_dmul>
 80095bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8009738 <atan+0x2e8>)
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f7f6 fe81 	bl	80002c8 <__aeabi_dsub>
 80095c6:	4632      	mov	r2, r6
 80095c8:	463b      	mov	r3, r7
 80095ca:	f7f7 f835 	bl	8000638 <__aeabi_dmul>
 80095ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8009740 <atan+0x2f0>)
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f7f6 fe78 	bl	80002c8 <__aeabi_dsub>
 80095d8:	4632      	mov	r2, r6
 80095da:	463b      	mov	r3, r7
 80095dc:	f7f7 f82c 	bl	8000638 <__aeabi_dmul>
 80095e0:	a359      	add	r3, pc, #356	@ (adr r3, 8009748 <atan+0x2f8>)
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	f7f6 fe6f 	bl	80002c8 <__aeabi_dsub>
 80095ea:	4632      	mov	r2, r6
 80095ec:	463b      	mov	r3, r7
 80095ee:	f7f7 f823 	bl	8000638 <__aeabi_dmul>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4640      	mov	r0, r8
 80095f8:	4649      	mov	r1, r9
 80095fa:	f7f6 fe67 	bl	80002cc <__adddf3>
 80095fe:	4622      	mov	r2, r4
 8009600:	462b      	mov	r3, r5
 8009602:	f7f7 f819 	bl	8000638 <__aeabi_dmul>
 8009606:	f1ba 3fff 	cmp.w	sl, #4294967295
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	d148      	bne.n	80096a2 <atan+0x252>
 8009610:	4620      	mov	r0, r4
 8009612:	4629      	mov	r1, r5
 8009614:	f7f6 fe58 	bl	80002c8 <__aeabi_dsub>
 8009618:	e72f      	b.n	800947a <atan+0x2a>
 800961a:	4b52      	ldr	r3, [pc, #328]	@ (8009764 <atan+0x314>)
 800961c:	2200      	movs	r2, #0
 800961e:	4620      	mov	r0, r4
 8009620:	4629      	mov	r1, r5
 8009622:	f7f6 fe51 	bl	80002c8 <__aeabi_dsub>
 8009626:	4b4f      	ldr	r3, [pc, #316]	@ (8009764 <atan+0x314>)
 8009628:	4606      	mov	r6, r0
 800962a:	460f      	mov	r7, r1
 800962c:	2200      	movs	r2, #0
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	f7f6 fe4b 	bl	80002cc <__adddf3>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4630      	mov	r0, r6
 800963c:	4639      	mov	r1, r7
 800963e:	f7f7 f925 	bl	800088c <__aeabi_ddiv>
 8009642:	f04f 0a01 	mov.w	sl, #1
 8009646:	4604      	mov	r4, r0
 8009648:	460d      	mov	r5, r1
 800964a:	e765      	b.n	8009518 <atan+0xc8>
 800964c:	4b47      	ldr	r3, [pc, #284]	@ (800976c <atan+0x31c>)
 800964e:	429e      	cmp	r6, r3
 8009650:	d21c      	bcs.n	800968c <atan+0x23c>
 8009652:	4b47      	ldr	r3, [pc, #284]	@ (8009770 <atan+0x320>)
 8009654:	2200      	movs	r2, #0
 8009656:	4620      	mov	r0, r4
 8009658:	4629      	mov	r1, r5
 800965a:	f7f6 fe35 	bl	80002c8 <__aeabi_dsub>
 800965e:	4b44      	ldr	r3, [pc, #272]	@ (8009770 <atan+0x320>)
 8009660:	4606      	mov	r6, r0
 8009662:	460f      	mov	r7, r1
 8009664:	2200      	movs	r2, #0
 8009666:	4620      	mov	r0, r4
 8009668:	4629      	mov	r1, r5
 800966a:	f7f6 ffe5 	bl	8000638 <__aeabi_dmul>
 800966e:	4b3d      	ldr	r3, [pc, #244]	@ (8009764 <atan+0x314>)
 8009670:	2200      	movs	r2, #0
 8009672:	f7f6 fe2b 	bl	80002cc <__adddf3>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	4630      	mov	r0, r6
 800967c:	4639      	mov	r1, r7
 800967e:	f7f7 f905 	bl	800088c <__aeabi_ddiv>
 8009682:	f04f 0a02 	mov.w	sl, #2
 8009686:	4604      	mov	r4, r0
 8009688:	460d      	mov	r5, r1
 800968a:	e745      	b.n	8009518 <atan+0xc8>
 800968c:	4622      	mov	r2, r4
 800968e:	462b      	mov	r3, r5
 8009690:	4938      	ldr	r1, [pc, #224]	@ (8009774 <atan+0x324>)
 8009692:	2000      	movs	r0, #0
 8009694:	f7f7 f8fa 	bl	800088c <__aeabi_ddiv>
 8009698:	f04f 0a03 	mov.w	sl, #3
 800969c:	4604      	mov	r4, r0
 800969e:	460d      	mov	r5, r1
 80096a0:	e73a      	b.n	8009518 <atan+0xc8>
 80096a2:	4b35      	ldr	r3, [pc, #212]	@ (8009778 <atan+0x328>)
 80096a4:	4e35      	ldr	r6, [pc, #212]	@ (800977c <atan+0x32c>)
 80096a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 fe0b 	bl	80002c8 <__aeabi_dsub>
 80096b2:	4622      	mov	r2, r4
 80096b4:	462b      	mov	r3, r5
 80096b6:	f7f6 fe07 	bl	80002c8 <__aeabi_dsub>
 80096ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80096c6:	f7f6 fdff 	bl	80002c8 <__aeabi_dsub>
 80096ca:	f1bb 0f00 	cmp.w	fp, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	460d      	mov	r5, r1
 80096d2:	f6bf aedc 	bge.w	800948e <atan+0x3e>
 80096d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096da:	461d      	mov	r5, r3
 80096dc:	e6d7      	b.n	800948e <atan+0x3e>
 80096de:	a51c      	add	r5, pc, #112	@ (adr r5, 8009750 <atan+0x300>)
 80096e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096e4:	e6d3      	b.n	800948e <atan+0x3e>
 80096e6:	bf00      	nop
 80096e8:	54442d18 	.word	0x54442d18
 80096ec:	3ff921fb 	.word	0x3ff921fb
 80096f0:	8800759c 	.word	0x8800759c
 80096f4:	7e37e43c 	.word	0x7e37e43c
 80096f8:	e322da11 	.word	0xe322da11
 80096fc:	3f90ad3a 	.word	0x3f90ad3a
 8009700:	24760deb 	.word	0x24760deb
 8009704:	3fa97b4b 	.word	0x3fa97b4b
 8009708:	a0d03d51 	.word	0xa0d03d51
 800970c:	3fb10d66 	.word	0x3fb10d66
 8009710:	c54c206e 	.word	0xc54c206e
 8009714:	3fb745cd 	.word	0x3fb745cd
 8009718:	920083ff 	.word	0x920083ff
 800971c:	3fc24924 	.word	0x3fc24924
 8009720:	5555550d 	.word	0x5555550d
 8009724:	3fd55555 	.word	0x3fd55555
 8009728:	2c6a6c2f 	.word	0x2c6a6c2f
 800972c:	bfa2b444 	.word	0xbfa2b444
 8009730:	52defd9a 	.word	0x52defd9a
 8009734:	3fadde2d 	.word	0x3fadde2d
 8009738:	af749a6d 	.word	0xaf749a6d
 800973c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009740:	fe231671 	.word	0xfe231671
 8009744:	3fbc71c6 	.word	0x3fbc71c6
 8009748:	9998ebc4 	.word	0x9998ebc4
 800974c:	3fc99999 	.word	0x3fc99999
 8009750:	54442d18 	.word	0x54442d18
 8009754:	bff921fb 	.word	0xbff921fb
 8009758:	440fffff 	.word	0x440fffff
 800975c:	7ff00000 	.word	0x7ff00000
 8009760:	3fdbffff 	.word	0x3fdbffff
 8009764:	3ff00000 	.word	0x3ff00000
 8009768:	3ff2ffff 	.word	0x3ff2ffff
 800976c:	40038000 	.word	0x40038000
 8009770:	3ff80000 	.word	0x3ff80000
 8009774:	bff00000 	.word	0xbff00000
 8009778:	0800c710 	.word	0x0800c710
 800977c:	0800c730 	.word	0x0800c730

08009780 <cos>:
 8009780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009782:	ec53 2b10 	vmov	r2, r3, d0
 8009786:	4826      	ldr	r0, [pc, #152]	@ (8009820 <cos+0xa0>)
 8009788:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800978c:	4281      	cmp	r1, r0
 800978e:	d806      	bhi.n	800979e <cos+0x1e>
 8009790:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009818 <cos+0x98>
 8009794:	b005      	add	sp, #20
 8009796:	f85d eb04 	ldr.w	lr, [sp], #4
 800979a:	f000 b8cd 	b.w	8009938 <__kernel_cos>
 800979e:	4821      	ldr	r0, [pc, #132]	@ (8009824 <cos+0xa4>)
 80097a0:	4281      	cmp	r1, r0
 80097a2:	d908      	bls.n	80097b6 <cos+0x36>
 80097a4:	4610      	mov	r0, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	f7f6 fd8e 	bl	80002c8 <__aeabi_dsub>
 80097ac:	ec41 0b10 	vmov	d0, r0, r1
 80097b0:	b005      	add	sp, #20
 80097b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80097b6:	4668      	mov	r0, sp
 80097b8:	f000 fc9e 	bl	800a0f8 <__ieee754_rem_pio2>
 80097bc:	f000 0003 	and.w	r0, r0, #3
 80097c0:	2801      	cmp	r0, #1
 80097c2:	d00b      	beq.n	80097dc <cos+0x5c>
 80097c4:	2802      	cmp	r0, #2
 80097c6:	d015      	beq.n	80097f4 <cos+0x74>
 80097c8:	b9d8      	cbnz	r0, 8009802 <cos+0x82>
 80097ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097ce:	ed9d 0b00 	vldr	d0, [sp]
 80097d2:	f000 f8b1 	bl	8009938 <__kernel_cos>
 80097d6:	ec51 0b10 	vmov	r0, r1, d0
 80097da:	e7e7      	b.n	80097ac <cos+0x2c>
 80097dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097e0:	ed9d 0b00 	vldr	d0, [sp]
 80097e4:	f000 f970 	bl	8009ac8 <__kernel_sin>
 80097e8:	ec53 2b10 	vmov	r2, r3, d0
 80097ec:	4610      	mov	r0, r2
 80097ee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80097f2:	e7db      	b.n	80097ac <cos+0x2c>
 80097f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097f8:	ed9d 0b00 	vldr	d0, [sp]
 80097fc:	f000 f89c 	bl	8009938 <__kernel_cos>
 8009800:	e7f2      	b.n	80097e8 <cos+0x68>
 8009802:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009806:	ed9d 0b00 	vldr	d0, [sp]
 800980a:	2001      	movs	r0, #1
 800980c:	f000 f95c 	bl	8009ac8 <__kernel_sin>
 8009810:	e7e1      	b.n	80097d6 <cos+0x56>
 8009812:	bf00      	nop
 8009814:	f3af 8000 	nop.w
	...
 8009820:	3fe921fb 	.word	0x3fe921fb
 8009824:	7fefffff 	.word	0x7fefffff

08009828 <fabs>:
 8009828:	ec51 0b10 	vmov	r0, r1, d0
 800982c:	4602      	mov	r2, r0
 800982e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009832:	ec43 2b10 	vmov	d0, r2, r3
 8009836:	4770      	bx	lr

08009838 <sin>:
 8009838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800983a:	ec53 2b10 	vmov	r2, r3, d0
 800983e:	4826      	ldr	r0, [pc, #152]	@ (80098d8 <sin+0xa0>)
 8009840:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009844:	4281      	cmp	r1, r0
 8009846:	d807      	bhi.n	8009858 <sin+0x20>
 8009848:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80098d0 <sin+0x98>
 800984c:	2000      	movs	r0, #0
 800984e:	b005      	add	sp, #20
 8009850:	f85d eb04 	ldr.w	lr, [sp], #4
 8009854:	f000 b938 	b.w	8009ac8 <__kernel_sin>
 8009858:	4820      	ldr	r0, [pc, #128]	@ (80098dc <sin+0xa4>)
 800985a:	4281      	cmp	r1, r0
 800985c:	d908      	bls.n	8009870 <sin+0x38>
 800985e:	4610      	mov	r0, r2
 8009860:	4619      	mov	r1, r3
 8009862:	f7f6 fd31 	bl	80002c8 <__aeabi_dsub>
 8009866:	ec41 0b10 	vmov	d0, r0, r1
 800986a:	b005      	add	sp, #20
 800986c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009870:	4668      	mov	r0, sp
 8009872:	f000 fc41 	bl	800a0f8 <__ieee754_rem_pio2>
 8009876:	f000 0003 	and.w	r0, r0, #3
 800987a:	2801      	cmp	r0, #1
 800987c:	d00c      	beq.n	8009898 <sin+0x60>
 800987e:	2802      	cmp	r0, #2
 8009880:	d011      	beq.n	80098a6 <sin+0x6e>
 8009882:	b9e8      	cbnz	r0, 80098c0 <sin+0x88>
 8009884:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009888:	ed9d 0b00 	vldr	d0, [sp]
 800988c:	2001      	movs	r0, #1
 800988e:	f000 f91b 	bl	8009ac8 <__kernel_sin>
 8009892:	ec51 0b10 	vmov	r0, r1, d0
 8009896:	e7e6      	b.n	8009866 <sin+0x2e>
 8009898:	ed9d 1b02 	vldr	d1, [sp, #8]
 800989c:	ed9d 0b00 	vldr	d0, [sp]
 80098a0:	f000 f84a 	bl	8009938 <__kernel_cos>
 80098a4:	e7f5      	b.n	8009892 <sin+0x5a>
 80098a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098aa:	ed9d 0b00 	vldr	d0, [sp]
 80098ae:	2001      	movs	r0, #1
 80098b0:	f000 f90a 	bl	8009ac8 <__kernel_sin>
 80098b4:	ec53 2b10 	vmov	r2, r3, d0
 80098b8:	4610      	mov	r0, r2
 80098ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80098be:	e7d2      	b.n	8009866 <sin+0x2e>
 80098c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098c4:	ed9d 0b00 	vldr	d0, [sp]
 80098c8:	f000 f836 	bl	8009938 <__kernel_cos>
 80098cc:	e7f2      	b.n	80098b4 <sin+0x7c>
 80098ce:	bf00      	nop
	...
 80098d8:	3fe921fb 	.word	0x3fe921fb
 80098dc:	7fefffff 	.word	0x7fefffff

080098e0 <sqrtf>:
 80098e0:	b508      	push	{r3, lr}
 80098e2:	ed2d 8b02 	vpush	{d8}
 80098e6:	eeb0 8a40 	vmov.f32	s16, s0
 80098ea:	f000 f821 	bl	8009930 <__ieee754_sqrtf>
 80098ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80098f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f6:	d60c      	bvs.n	8009912 <sqrtf+0x32>
 80098f8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009918 <sqrtf+0x38>
 80098fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009904:	d505      	bpl.n	8009912 <sqrtf+0x32>
 8009906:	f001 fc39 	bl	800b17c <__errno>
 800990a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800990e:	2321      	movs	r3, #33	@ 0x21
 8009910:	6003      	str	r3, [r0, #0]
 8009912:	ecbd 8b02 	vpop	{d8}
 8009916:	bd08      	pop	{r3, pc}
	...

08009920 <nan>:
 8009920:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009928 <nan+0x8>
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	00000000 	.word	0x00000000
 800992c:	7ff80000 	.word	0x7ff80000

08009930 <__ieee754_sqrtf>:
 8009930:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009934:	4770      	bx	lr
	...

08009938 <__kernel_cos>:
 8009938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ec57 6b10 	vmov	r6, r7, d0
 8009940:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009944:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009948:	ed8d 1b00 	vstr	d1, [sp]
 800994c:	d206      	bcs.n	800995c <__kernel_cos+0x24>
 800994e:	4630      	mov	r0, r6
 8009950:	4639      	mov	r1, r7
 8009952:	f7f7 f921 	bl	8000b98 <__aeabi_d2iz>
 8009956:	2800      	cmp	r0, #0
 8009958:	f000 8088 	beq.w	8009a6c <__kernel_cos+0x134>
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	f7f6 fe68 	bl	8000638 <__aeabi_dmul>
 8009968:	4b51      	ldr	r3, [pc, #324]	@ (8009ab0 <__kernel_cos+0x178>)
 800996a:	2200      	movs	r2, #0
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	f7f6 fe62 	bl	8000638 <__aeabi_dmul>
 8009974:	a340      	add	r3, pc, #256	@ (adr r3, 8009a78 <__kernel_cos+0x140>)
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	4682      	mov	sl, r0
 800997c:	468b      	mov	fp, r1
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f6 fe59 	bl	8000638 <__aeabi_dmul>
 8009986:	a33e      	add	r3, pc, #248	@ (adr r3, 8009a80 <__kernel_cos+0x148>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f6 fc9e 	bl	80002cc <__adddf3>
 8009990:	4622      	mov	r2, r4
 8009992:	462b      	mov	r3, r5
 8009994:	f7f6 fe50 	bl	8000638 <__aeabi_dmul>
 8009998:	a33b      	add	r3, pc, #236	@ (adr r3, 8009a88 <__kernel_cos+0x150>)
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	f7f6 fc93 	bl	80002c8 <__aeabi_dsub>
 80099a2:	4622      	mov	r2, r4
 80099a4:	462b      	mov	r3, r5
 80099a6:	f7f6 fe47 	bl	8000638 <__aeabi_dmul>
 80099aa:	a339      	add	r3, pc, #228	@ (adr r3, 8009a90 <__kernel_cos+0x158>)
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f7f6 fc8c 	bl	80002cc <__adddf3>
 80099b4:	4622      	mov	r2, r4
 80099b6:	462b      	mov	r3, r5
 80099b8:	f7f6 fe3e 	bl	8000638 <__aeabi_dmul>
 80099bc:	a336      	add	r3, pc, #216	@ (adr r3, 8009a98 <__kernel_cos+0x160>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fc81 	bl	80002c8 <__aeabi_dsub>
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	f7f6 fe35 	bl	8000638 <__aeabi_dmul>
 80099ce:	a334      	add	r3, pc, #208	@ (adr r3, 8009aa0 <__kernel_cos+0x168>)
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	f7f6 fc7a 	bl	80002cc <__adddf3>
 80099d8:	4622      	mov	r2, r4
 80099da:	462b      	mov	r3, r5
 80099dc:	f7f6 fe2c 	bl	8000638 <__aeabi_dmul>
 80099e0:	4622      	mov	r2, r4
 80099e2:	462b      	mov	r3, r5
 80099e4:	f7f6 fe28 	bl	8000638 <__aeabi_dmul>
 80099e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099ec:	4604      	mov	r4, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f6 fe20 	bl	8000638 <__aeabi_dmul>
 80099f8:	460b      	mov	r3, r1
 80099fa:	4602      	mov	r2, r0
 80099fc:	4629      	mov	r1, r5
 80099fe:	4620      	mov	r0, r4
 8009a00:	f7f6 fc62 	bl	80002c8 <__aeabi_dsub>
 8009a04:	4b2b      	ldr	r3, [pc, #172]	@ (8009ab4 <__kernel_cos+0x17c>)
 8009a06:	4598      	cmp	r8, r3
 8009a08:	4606      	mov	r6, r0
 8009a0a:	460f      	mov	r7, r1
 8009a0c:	d810      	bhi.n	8009a30 <__kernel_cos+0xf8>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4650      	mov	r0, sl
 8009a14:	4659      	mov	r1, fp
 8009a16:	f7f6 fc57 	bl	80002c8 <__aeabi_dsub>
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4926      	ldr	r1, [pc, #152]	@ (8009ab8 <__kernel_cos+0x180>)
 8009a1e:	4602      	mov	r2, r0
 8009a20:	2000      	movs	r0, #0
 8009a22:	f7f6 fc51 	bl	80002c8 <__aeabi_dsub>
 8009a26:	ec41 0b10 	vmov	d0, r0, r1
 8009a2a:	b003      	add	sp, #12
 8009a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a30:	4b22      	ldr	r3, [pc, #136]	@ (8009abc <__kernel_cos+0x184>)
 8009a32:	4921      	ldr	r1, [pc, #132]	@ (8009ab8 <__kernel_cos+0x180>)
 8009a34:	4598      	cmp	r8, r3
 8009a36:	bf8c      	ite	hi
 8009a38:	4d21      	ldrhi	r5, [pc, #132]	@ (8009ac0 <__kernel_cos+0x188>)
 8009a3a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009a3e:	2400      	movs	r4, #0
 8009a40:	4622      	mov	r2, r4
 8009a42:	462b      	mov	r3, r5
 8009a44:	2000      	movs	r0, #0
 8009a46:	f7f6 fc3f 	bl	80002c8 <__aeabi_dsub>
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	4689      	mov	r9, r1
 8009a50:	462b      	mov	r3, r5
 8009a52:	4650      	mov	r0, sl
 8009a54:	4659      	mov	r1, fp
 8009a56:	f7f6 fc37 	bl	80002c8 <__aeabi_dsub>
 8009a5a:	4632      	mov	r2, r6
 8009a5c:	463b      	mov	r3, r7
 8009a5e:	f7f6 fc33 	bl	80002c8 <__aeabi_dsub>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4640      	mov	r0, r8
 8009a68:	4649      	mov	r1, r9
 8009a6a:	e7da      	b.n	8009a22 <__kernel_cos+0xea>
 8009a6c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009aa8 <__kernel_cos+0x170>
 8009a70:	e7db      	b.n	8009a2a <__kernel_cos+0xf2>
 8009a72:	bf00      	nop
 8009a74:	f3af 8000 	nop.w
 8009a78:	be8838d4 	.word	0xbe8838d4
 8009a7c:	bda8fae9 	.word	0xbda8fae9
 8009a80:	bdb4b1c4 	.word	0xbdb4b1c4
 8009a84:	3e21ee9e 	.word	0x3e21ee9e
 8009a88:	809c52ad 	.word	0x809c52ad
 8009a8c:	3e927e4f 	.word	0x3e927e4f
 8009a90:	19cb1590 	.word	0x19cb1590
 8009a94:	3efa01a0 	.word	0x3efa01a0
 8009a98:	16c15177 	.word	0x16c15177
 8009a9c:	3f56c16c 	.word	0x3f56c16c
 8009aa0:	5555554c 	.word	0x5555554c
 8009aa4:	3fa55555 	.word	0x3fa55555
 8009aa8:	00000000 	.word	0x00000000
 8009aac:	3ff00000 	.word	0x3ff00000
 8009ab0:	3fe00000 	.word	0x3fe00000
 8009ab4:	3fd33332 	.word	0x3fd33332
 8009ab8:	3ff00000 	.word	0x3ff00000
 8009abc:	3fe90000 	.word	0x3fe90000
 8009ac0:	3fd20000 	.word	0x3fd20000
 8009ac4:	00000000 	.word	0x00000000

08009ac8 <__kernel_sin>:
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	ec55 4b10 	vmov	r4, r5, d0
 8009ad0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009ada:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009ade:	4680      	mov	r8, r0
 8009ae0:	d205      	bcs.n	8009aee <__kernel_sin+0x26>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	f7f7 f857 	bl	8000b98 <__aeabi_d2iz>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d052      	beq.n	8009b94 <__kernel_sin+0xcc>
 8009aee:	4622      	mov	r2, r4
 8009af0:	462b      	mov	r3, r5
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7f6 fd9f 	bl	8000638 <__aeabi_dmul>
 8009afa:	4682      	mov	sl, r0
 8009afc:	468b      	mov	fp, r1
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4620      	mov	r0, r4
 8009b04:	4629      	mov	r1, r5
 8009b06:	f7f6 fd97 	bl	8000638 <__aeabi_dmul>
 8009b0a:	a342      	add	r3, pc, #264	@ (adr r3, 8009c14 <__kernel_sin+0x14c>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	e9cd 0100 	strd	r0, r1, [sp]
 8009b14:	4650      	mov	r0, sl
 8009b16:	4659      	mov	r1, fp
 8009b18:	f7f6 fd8e 	bl	8000638 <__aeabi_dmul>
 8009b1c:	a33f      	add	r3, pc, #252	@ (adr r3, 8009c1c <__kernel_sin+0x154>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f7f6 fbd1 	bl	80002c8 <__aeabi_dsub>
 8009b26:	4652      	mov	r2, sl
 8009b28:	465b      	mov	r3, fp
 8009b2a:	f7f6 fd85 	bl	8000638 <__aeabi_dmul>
 8009b2e:	a33d      	add	r3, pc, #244	@ (adr r3, 8009c24 <__kernel_sin+0x15c>)
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	f7f6 fbca 	bl	80002cc <__adddf3>
 8009b38:	4652      	mov	r2, sl
 8009b3a:	465b      	mov	r3, fp
 8009b3c:	f7f6 fd7c 	bl	8000638 <__aeabi_dmul>
 8009b40:	a33a      	add	r3, pc, #232	@ (adr r3, 8009c2c <__kernel_sin+0x164>)
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f7f6 fbbf 	bl	80002c8 <__aeabi_dsub>
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	465b      	mov	r3, fp
 8009b4e:	f7f6 fd73 	bl	8000638 <__aeabi_dmul>
 8009b52:	a338      	add	r3, pc, #224	@ (adr r3, 8009c34 <__kernel_sin+0x16c>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 fbb8 	bl	80002cc <__adddf3>
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	460f      	mov	r7, r1
 8009b60:	f1b8 0f00 	cmp.w	r8, #0
 8009b64:	d11b      	bne.n	8009b9e <__kernel_sin+0xd6>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	f7f6 fd63 	bl	8000638 <__aeabi_dmul>
 8009b72:	a325      	add	r3, pc, #148	@ (adr r3, 8009c08 <__kernel_sin+0x140>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f7f6 fba6 	bl	80002c8 <__aeabi_dsub>
 8009b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b80:	f7f6 fd5a 	bl	8000638 <__aeabi_dmul>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4620      	mov	r0, r4
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	f7f6 fb9e 	bl	80002cc <__adddf3>
 8009b90:	4604      	mov	r4, r0
 8009b92:	460d      	mov	r5, r1
 8009b94:	ec45 4b10 	vmov	d0, r4, r5
 8009b98:	b005      	add	sp, #20
 8009b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c10 <__kernel_sin+0x148>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f7f6 fd47 	bl	8000638 <__aeabi_dmul>
 8009baa:	4632      	mov	r2, r6
 8009bac:	4680      	mov	r8, r0
 8009bae:	4689      	mov	r9, r1
 8009bb0:	463b      	mov	r3, r7
 8009bb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bb6:	f7f6 fd3f 	bl	8000638 <__aeabi_dmul>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	f7f6 fb81 	bl	80002c8 <__aeabi_dsub>
 8009bc6:	4652      	mov	r2, sl
 8009bc8:	465b      	mov	r3, fp
 8009bca:	f7f6 fd35 	bl	8000638 <__aeabi_dmul>
 8009bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bd2:	f7f6 fb79 	bl	80002c8 <__aeabi_dsub>
 8009bd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c08 <__kernel_sin+0x140>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	4606      	mov	r6, r0
 8009bde:	460f      	mov	r7, r1
 8009be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009be4:	f7f6 fd28 	bl	8000638 <__aeabi_dmul>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4630      	mov	r0, r6
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f7f6 fb6c 	bl	80002cc <__adddf3>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	f7f6 fb64 	bl	80002c8 <__aeabi_dsub>
 8009c00:	e7c6      	b.n	8009b90 <__kernel_sin+0xc8>
 8009c02:	bf00      	nop
 8009c04:	f3af 8000 	nop.w
 8009c08:	55555549 	.word	0x55555549
 8009c0c:	3fc55555 	.word	0x3fc55555
 8009c10:	3fe00000 	.word	0x3fe00000
 8009c14:	5acfd57c 	.word	0x5acfd57c
 8009c18:	3de5d93a 	.word	0x3de5d93a
 8009c1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c20:	3e5ae5e6 	.word	0x3e5ae5e6
 8009c24:	57b1fe7d 	.word	0x57b1fe7d
 8009c28:	3ec71de3 	.word	0x3ec71de3
 8009c2c:	19c161d5 	.word	0x19c161d5
 8009c30:	3f2a01a0 	.word	0x3f2a01a0
 8009c34:	1110f8a6 	.word	0x1110f8a6
 8009c38:	3f811111 	.word	0x3f811111
 8009c3c:	00000000 	.word	0x00000000

08009c40 <__ieee754_acos>:
 8009c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	ec55 4b10 	vmov	r4, r5, d0
 8009c48:	49b7      	ldr	r1, [pc, #732]	@ (8009f28 <__ieee754_acos+0x2e8>)
 8009c4a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009c4e:	428b      	cmp	r3, r1
 8009c50:	d919      	bls.n	8009c86 <__ieee754_acos+0x46>
 8009c52:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8009c56:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009c5a:	4323      	orrs	r3, r4
 8009c5c:	d106      	bne.n	8009c6c <__ieee754_acos+0x2c>
 8009c5e:	2d00      	cmp	r5, #0
 8009c60:	f340 8210 	ble.w	800a084 <__ieee754_acos+0x444>
 8009c64:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8009eb8 <__ieee754_acos+0x278>
 8009c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	462b      	mov	r3, r5
 8009c70:	4620      	mov	r0, r4
 8009c72:	4629      	mov	r1, r5
 8009c74:	f7f6 fb28 	bl	80002c8 <__aeabi_dsub>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	f7f6 fe06 	bl	800088c <__aeabi_ddiv>
 8009c80:	ec41 0b10 	vmov	d0, r0, r1
 8009c84:	e7f0      	b.n	8009c68 <__ieee754_acos+0x28>
 8009c86:	49a9      	ldr	r1, [pc, #676]	@ (8009f2c <__ieee754_acos+0x2ec>)
 8009c88:	428b      	cmp	r3, r1
 8009c8a:	f200 8085 	bhi.w	8009d98 <__ieee754_acos+0x158>
 8009c8e:	4aa8      	ldr	r2, [pc, #672]	@ (8009f30 <__ieee754_acos+0x2f0>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	f240 81fa 	bls.w	800a08a <__ieee754_acos+0x44a>
 8009c96:	4622      	mov	r2, r4
 8009c98:	462b      	mov	r3, r5
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	f7f6 fccb 	bl	8000638 <__aeabi_dmul>
 8009ca2:	a387      	add	r3, pc, #540	@ (adr r3, 8009ec0 <__ieee754_acos+0x280>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	4606      	mov	r6, r0
 8009caa:	460f      	mov	r7, r1
 8009cac:	f7f6 fcc4 	bl	8000638 <__aeabi_dmul>
 8009cb0:	a385      	add	r3, pc, #532	@ (adr r3, 8009ec8 <__ieee754_acos+0x288>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7f6 fb09 	bl	80002cc <__adddf3>
 8009cba:	4632      	mov	r2, r6
 8009cbc:	463b      	mov	r3, r7
 8009cbe:	f7f6 fcbb 	bl	8000638 <__aeabi_dmul>
 8009cc2:	a383      	add	r3, pc, #524	@ (adr r3, 8009ed0 <__ieee754_acos+0x290>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f7f6 fafe 	bl	80002c8 <__aeabi_dsub>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	f7f6 fcb2 	bl	8000638 <__aeabi_dmul>
 8009cd4:	a380      	add	r3, pc, #512	@ (adr r3, 8009ed8 <__ieee754_acos+0x298>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	f7f6 faf7 	bl	80002cc <__adddf3>
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f7f6 fca9 	bl	8000638 <__aeabi_dmul>
 8009ce6:	a37e      	add	r3, pc, #504	@ (adr r3, 8009ee0 <__ieee754_acos+0x2a0>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 faec 	bl	80002c8 <__aeabi_dsub>
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	f7f6 fca0 	bl	8000638 <__aeabi_dmul>
 8009cf8:	a37b      	add	r3, pc, #492	@ (adr r3, 8009ee8 <__ieee754_acos+0x2a8>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fae5 	bl	80002cc <__adddf3>
 8009d02:	4632      	mov	r2, r6
 8009d04:	463b      	mov	r3, r7
 8009d06:	f7f6 fc97 	bl	8000638 <__aeabi_dmul>
 8009d0a:	a379      	add	r3, pc, #484	@ (adr r3, 8009ef0 <__ieee754_acos+0x2b0>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	4680      	mov	r8, r0
 8009d12:	4689      	mov	r9, r1
 8009d14:	4630      	mov	r0, r6
 8009d16:	4639      	mov	r1, r7
 8009d18:	f7f6 fc8e 	bl	8000638 <__aeabi_dmul>
 8009d1c:	a376      	add	r3, pc, #472	@ (adr r3, 8009ef8 <__ieee754_acos+0x2b8>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fad1 	bl	80002c8 <__aeabi_dsub>
 8009d26:	4632      	mov	r2, r6
 8009d28:	463b      	mov	r3, r7
 8009d2a:	f7f6 fc85 	bl	8000638 <__aeabi_dmul>
 8009d2e:	a374      	add	r3, pc, #464	@ (adr r3, 8009f00 <__ieee754_acos+0x2c0>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 faca 	bl	80002cc <__adddf3>
 8009d38:	4632      	mov	r2, r6
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	f7f6 fc7c 	bl	8000638 <__aeabi_dmul>
 8009d40:	a371      	add	r3, pc, #452	@ (adr r3, 8009f08 <__ieee754_acos+0x2c8>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fabf 	bl	80002c8 <__aeabi_dsub>
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	463b      	mov	r3, r7
 8009d4e:	f7f6 fc73 	bl	8000638 <__aeabi_dmul>
 8009d52:	4b78      	ldr	r3, [pc, #480]	@ (8009f34 <__ieee754_acos+0x2f4>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	f7f6 fab9 	bl	80002cc <__adddf3>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4640      	mov	r0, r8
 8009d60:	4649      	mov	r1, r9
 8009d62:	f7f6 fd93 	bl	800088c <__aeabi_ddiv>
 8009d66:	4622      	mov	r2, r4
 8009d68:	462b      	mov	r3, r5
 8009d6a:	f7f6 fc65 	bl	8000638 <__aeabi_dmul>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	a167      	add	r1, pc, #412	@ (adr r1, 8009f10 <__ieee754_acos+0x2d0>)
 8009d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d78:	f7f6 faa6 	bl	80002c8 <__aeabi_dsub>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4620      	mov	r0, r4
 8009d82:	4629      	mov	r1, r5
 8009d84:	f7f6 faa0 	bl	80002c8 <__aeabi_dsub>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	a162      	add	r1, pc, #392	@ (adr r1, 8009f18 <__ieee754_acos+0x2d8>)
 8009d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d92:	f7f6 fa99 	bl	80002c8 <__aeabi_dsub>
 8009d96:	e773      	b.n	8009c80 <__ieee754_acos+0x40>
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	f280 80cf 	bge.w	8009f3c <__ieee754_acos+0x2fc>
 8009d9e:	4b65      	ldr	r3, [pc, #404]	@ (8009f34 <__ieee754_acos+0x2f4>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7f6 fa91 	bl	80002cc <__adddf3>
 8009daa:	4b63      	ldr	r3, [pc, #396]	@ (8009f38 <__ieee754_acos+0x2f8>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	f7f6 fc43 	bl	8000638 <__aeabi_dmul>
 8009db2:	a343      	add	r3, pc, #268	@ (adr r3, 8009ec0 <__ieee754_acos+0x280>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4604      	mov	r4, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	f7f6 fc3c 	bl	8000638 <__aeabi_dmul>
 8009dc0:	a341      	add	r3, pc, #260	@ (adr r3, 8009ec8 <__ieee754_acos+0x288>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fa81 	bl	80002cc <__adddf3>
 8009dca:	4622      	mov	r2, r4
 8009dcc:	462b      	mov	r3, r5
 8009dce:	f7f6 fc33 	bl	8000638 <__aeabi_dmul>
 8009dd2:	a33f      	add	r3, pc, #252	@ (adr r3, 8009ed0 <__ieee754_acos+0x290>)
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	f7f6 fa76 	bl	80002c8 <__aeabi_dsub>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	462b      	mov	r3, r5
 8009de0:	f7f6 fc2a 	bl	8000638 <__aeabi_dmul>
 8009de4:	a33c      	add	r3, pc, #240	@ (adr r3, 8009ed8 <__ieee754_acos+0x298>)
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	f7f6 fa6f 	bl	80002cc <__adddf3>
 8009dee:	4622      	mov	r2, r4
 8009df0:	462b      	mov	r3, r5
 8009df2:	f7f6 fc21 	bl	8000638 <__aeabi_dmul>
 8009df6:	a33a      	add	r3, pc, #232	@ (adr r3, 8009ee0 <__ieee754_acos+0x2a0>)
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	f7f6 fa64 	bl	80002c8 <__aeabi_dsub>
 8009e00:	4622      	mov	r2, r4
 8009e02:	462b      	mov	r3, r5
 8009e04:	f7f6 fc18 	bl	8000638 <__aeabi_dmul>
 8009e08:	a337      	add	r3, pc, #220	@ (adr r3, 8009ee8 <__ieee754_acos+0x2a8>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	f7f6 fa5d 	bl	80002cc <__adddf3>
 8009e12:	4622      	mov	r2, r4
 8009e14:	462b      	mov	r3, r5
 8009e16:	f7f6 fc0f 	bl	8000638 <__aeabi_dmul>
 8009e1a:	a335      	add	r3, pc, #212	@ (adr r3, 8009ef0 <__ieee754_acos+0x2b0>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	4606      	mov	r6, r0
 8009e22:	460f      	mov	r7, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fc06 	bl	8000638 <__aeabi_dmul>
 8009e2c:	a332      	add	r3, pc, #200	@ (adr r3, 8009ef8 <__ieee754_acos+0x2b8>)
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f7f6 fa49 	bl	80002c8 <__aeabi_dsub>
 8009e36:	4622      	mov	r2, r4
 8009e38:	462b      	mov	r3, r5
 8009e3a:	f7f6 fbfd 	bl	8000638 <__aeabi_dmul>
 8009e3e:	a330      	add	r3, pc, #192	@ (adr r3, 8009f00 <__ieee754_acos+0x2c0>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	f7f6 fa42 	bl	80002cc <__adddf3>
 8009e48:	4622      	mov	r2, r4
 8009e4a:	462b      	mov	r3, r5
 8009e4c:	f7f6 fbf4 	bl	8000638 <__aeabi_dmul>
 8009e50:	a32d      	add	r3, pc, #180	@ (adr r3, 8009f08 <__ieee754_acos+0x2c8>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 fa37 	bl	80002c8 <__aeabi_dsub>
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	462b      	mov	r3, r5
 8009e5e:	f7f6 fbeb 	bl	8000638 <__aeabi_dmul>
 8009e62:	4b34      	ldr	r3, [pc, #208]	@ (8009f34 <__ieee754_acos+0x2f4>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	f7f6 fa31 	bl	80002cc <__adddf3>
 8009e6a:	ec45 4b10 	vmov	d0, r4, r5
 8009e6e:	4680      	mov	r8, r0
 8009e70:	4689      	mov	r9, r1
 8009e72:	f000 fb3d 	bl	800a4f0 <__ieee754_sqrt>
 8009e76:	ec55 4b10 	vmov	r4, r5, d0
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	4630      	mov	r0, r6
 8009e80:	4639      	mov	r1, r7
 8009e82:	f7f6 fd03 	bl	800088c <__aeabi_ddiv>
 8009e86:	4622      	mov	r2, r4
 8009e88:	462b      	mov	r3, r5
 8009e8a:	f7f6 fbd5 	bl	8000638 <__aeabi_dmul>
 8009e8e:	a320      	add	r3, pc, #128	@ (adr r3, 8009f10 <__ieee754_acos+0x2d0>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f7f6 fa18 	bl	80002c8 <__aeabi_dsub>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	f7f6 fa16 	bl	80002cc <__adddf3>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	f7f6 fa12 	bl	80002cc <__adddf3>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	a11c      	add	r1, pc, #112	@ (adr r1, 8009f20 <__ieee754_acos+0x2e0>)
 8009eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb2:	e76e      	b.n	8009d92 <__ieee754_acos+0x152>
 8009eb4:	f3af 8000 	nop.w
	...
 8009ec0:	0dfdf709 	.word	0x0dfdf709
 8009ec4:	3f023de1 	.word	0x3f023de1
 8009ec8:	7501b288 	.word	0x7501b288
 8009ecc:	3f49efe0 	.word	0x3f49efe0
 8009ed0:	b5688f3b 	.word	0xb5688f3b
 8009ed4:	3fa48228 	.word	0x3fa48228
 8009ed8:	0e884455 	.word	0x0e884455
 8009edc:	3fc9c155 	.word	0x3fc9c155
 8009ee0:	03eb6f7d 	.word	0x03eb6f7d
 8009ee4:	3fd4d612 	.word	0x3fd4d612
 8009ee8:	55555555 	.word	0x55555555
 8009eec:	3fc55555 	.word	0x3fc55555
 8009ef0:	b12e9282 	.word	0xb12e9282
 8009ef4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009ef8:	1b8d0159 	.word	0x1b8d0159
 8009efc:	3fe6066c 	.word	0x3fe6066c
 8009f00:	9c598ac8 	.word	0x9c598ac8
 8009f04:	40002ae5 	.word	0x40002ae5
 8009f08:	1c8a2d4b 	.word	0x1c8a2d4b
 8009f0c:	40033a27 	.word	0x40033a27
 8009f10:	33145c07 	.word	0x33145c07
 8009f14:	3c91a626 	.word	0x3c91a626
 8009f18:	54442d18 	.word	0x54442d18
 8009f1c:	3ff921fb 	.word	0x3ff921fb
 8009f20:	54442d18 	.word	0x54442d18
 8009f24:	400921fb 	.word	0x400921fb
 8009f28:	3fefffff 	.word	0x3fefffff
 8009f2c:	3fdfffff 	.word	0x3fdfffff
 8009f30:	3c600000 	.word	0x3c600000
 8009f34:	3ff00000 	.word	0x3ff00000
 8009f38:	3fe00000 	.word	0x3fe00000
 8009f3c:	4622      	mov	r2, r4
 8009f3e:	462b      	mov	r3, r5
 8009f40:	496b      	ldr	r1, [pc, #428]	@ (800a0f0 <__ieee754_acos+0x4b0>)
 8009f42:	2000      	movs	r0, #0
 8009f44:	f7f6 f9c0 	bl	80002c8 <__aeabi_dsub>
 8009f48:	4b6a      	ldr	r3, [pc, #424]	@ (800a0f4 <__ieee754_acos+0x4b4>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f7f6 fb74 	bl	8000638 <__aeabi_dmul>
 8009f50:	4604      	mov	r4, r0
 8009f52:	460d      	mov	r5, r1
 8009f54:	ec45 4b10 	vmov	d0, r4, r5
 8009f58:	f000 faca 	bl	800a4f0 <__ieee754_sqrt>
 8009f5c:	a34c      	add	r3, pc, #304	@ (adr r3, 800a090 <__ieee754_acos+0x450>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	ec59 8b10 	vmov	r8, r9, d0
 8009f6a:	f7f6 fb65 	bl	8000638 <__aeabi_dmul>
 8009f6e:	a34a      	add	r3, pc, #296	@ (adr r3, 800a098 <__ieee754_acos+0x458>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f7f6 f9aa 	bl	80002cc <__adddf3>
 8009f78:	4622      	mov	r2, r4
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	f7f6 fb5c 	bl	8000638 <__aeabi_dmul>
 8009f80:	a347      	add	r3, pc, #284	@ (adr r3, 800a0a0 <__ieee754_acos+0x460>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f99f 	bl	80002c8 <__aeabi_dsub>
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	462b      	mov	r3, r5
 8009f8e:	f7f6 fb53 	bl	8000638 <__aeabi_dmul>
 8009f92:	a345      	add	r3, pc, #276	@ (adr r3, 800a0a8 <__ieee754_acos+0x468>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f7f6 f998 	bl	80002cc <__adddf3>
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	462b      	mov	r3, r5
 8009fa0:	f7f6 fb4a 	bl	8000638 <__aeabi_dmul>
 8009fa4:	a342      	add	r3, pc, #264	@ (adr r3, 800a0b0 <__ieee754_acos+0x470>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7f6 f98d 	bl	80002c8 <__aeabi_dsub>
 8009fae:	4622      	mov	r2, r4
 8009fb0:	462b      	mov	r3, r5
 8009fb2:	f7f6 fb41 	bl	8000638 <__aeabi_dmul>
 8009fb6:	a340      	add	r3, pc, #256	@ (adr r3, 800a0b8 <__ieee754_acos+0x478>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 f986 	bl	80002cc <__adddf3>
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	f7f6 fb38 	bl	8000638 <__aeabi_dmul>
 8009fc8:	a33d      	add	r3, pc, #244	@ (adr r3, 800a0c0 <__ieee754_acos+0x480>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	4682      	mov	sl, r0
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	f7f6 fb2f 	bl	8000638 <__aeabi_dmul>
 8009fda:	a33b      	add	r3, pc, #236	@ (adr r3, 800a0c8 <__ieee754_acos+0x488>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 f972 	bl	80002c8 <__aeabi_dsub>
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	f7f6 fb26 	bl	8000638 <__aeabi_dmul>
 8009fec:	a338      	add	r3, pc, #224	@ (adr r3, 800a0d0 <__ieee754_acos+0x490>)
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f7f6 f96b 	bl	80002cc <__adddf3>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	f7f6 fb1d 	bl	8000638 <__aeabi_dmul>
 8009ffe:	a336      	add	r3, pc, #216	@ (adr r3, 800a0d8 <__ieee754_acos+0x498>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 f960 	bl	80002c8 <__aeabi_dsub>
 800a008:	4622      	mov	r2, r4
 800a00a:	462b      	mov	r3, r5
 800a00c:	f7f6 fb14 	bl	8000638 <__aeabi_dmul>
 800a010:	4b37      	ldr	r3, [pc, #220]	@ (800a0f0 <__ieee754_acos+0x4b0>)
 800a012:	2200      	movs	r2, #0
 800a014:	f7f6 f95a 	bl	80002cc <__adddf3>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4650      	mov	r0, sl
 800a01e:	4659      	mov	r1, fp
 800a020:	f7f6 fc34 	bl	800088c <__aeabi_ddiv>
 800a024:	4642      	mov	r2, r8
 800a026:	464b      	mov	r3, r9
 800a028:	f7f6 fb06 	bl	8000638 <__aeabi_dmul>
 800a02c:	2600      	movs	r6, #0
 800a02e:	4682      	mov	sl, r0
 800a030:	468b      	mov	fp, r1
 800a032:	4632      	mov	r2, r6
 800a034:	464b      	mov	r3, r9
 800a036:	4630      	mov	r0, r6
 800a038:	4649      	mov	r1, r9
 800a03a:	f7f6 fafd 	bl	8000638 <__aeabi_dmul>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4620      	mov	r0, r4
 800a044:	4629      	mov	r1, r5
 800a046:	f7f6 f93f 	bl	80002c8 <__aeabi_dsub>
 800a04a:	4632      	mov	r2, r6
 800a04c:	4604      	mov	r4, r0
 800a04e:	460d      	mov	r5, r1
 800a050:	464b      	mov	r3, r9
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 f939 	bl	80002cc <__adddf3>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4620      	mov	r0, r4
 800a060:	4629      	mov	r1, r5
 800a062:	f7f6 fc13 	bl	800088c <__aeabi_ddiv>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4650      	mov	r0, sl
 800a06c:	4659      	mov	r1, fp
 800a06e:	f7f6 f92d 	bl	80002cc <__adddf3>
 800a072:	4632      	mov	r2, r6
 800a074:	464b      	mov	r3, r9
 800a076:	f7f6 f929 	bl	80002cc <__adddf3>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	f7f6 f925 	bl	80002cc <__adddf3>
 800a082:	e5fd      	b.n	8009c80 <__ieee754_acos+0x40>
 800a084:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a0e0 <__ieee754_acos+0x4a0>
 800a088:	e5ee      	b.n	8009c68 <__ieee754_acos+0x28>
 800a08a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800a0e8 <__ieee754_acos+0x4a8>
 800a08e:	e5eb      	b.n	8009c68 <__ieee754_acos+0x28>
 800a090:	0dfdf709 	.word	0x0dfdf709
 800a094:	3f023de1 	.word	0x3f023de1
 800a098:	7501b288 	.word	0x7501b288
 800a09c:	3f49efe0 	.word	0x3f49efe0
 800a0a0:	b5688f3b 	.word	0xb5688f3b
 800a0a4:	3fa48228 	.word	0x3fa48228
 800a0a8:	0e884455 	.word	0x0e884455
 800a0ac:	3fc9c155 	.word	0x3fc9c155
 800a0b0:	03eb6f7d 	.word	0x03eb6f7d
 800a0b4:	3fd4d612 	.word	0x3fd4d612
 800a0b8:	55555555 	.word	0x55555555
 800a0bc:	3fc55555 	.word	0x3fc55555
 800a0c0:	b12e9282 	.word	0xb12e9282
 800a0c4:	3fb3b8c5 	.word	0x3fb3b8c5
 800a0c8:	1b8d0159 	.word	0x1b8d0159
 800a0cc:	3fe6066c 	.word	0x3fe6066c
 800a0d0:	9c598ac8 	.word	0x9c598ac8
 800a0d4:	40002ae5 	.word	0x40002ae5
 800a0d8:	1c8a2d4b 	.word	0x1c8a2d4b
 800a0dc:	40033a27 	.word	0x40033a27
 800a0e0:	54442d18 	.word	0x54442d18
 800a0e4:	400921fb 	.word	0x400921fb
 800a0e8:	54442d18 	.word	0x54442d18
 800a0ec:	3ff921fb 	.word	0x3ff921fb
 800a0f0:	3ff00000 	.word	0x3ff00000
 800a0f4:	3fe00000 	.word	0x3fe00000

0800a0f8 <__ieee754_rem_pio2>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	ec57 6b10 	vmov	r6, r7, d0
 800a100:	4bc5      	ldr	r3, [pc, #788]	@ (800a418 <__ieee754_rem_pio2+0x320>)
 800a102:	b08d      	sub	sp, #52	@ 0x34
 800a104:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a108:	4598      	cmp	r8, r3
 800a10a:	4604      	mov	r4, r0
 800a10c:	9704      	str	r7, [sp, #16]
 800a10e:	d807      	bhi.n	800a120 <__ieee754_rem_pio2+0x28>
 800a110:	2200      	movs	r2, #0
 800a112:	2300      	movs	r3, #0
 800a114:	ed80 0b00 	vstr	d0, [r0]
 800a118:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a11c:	2500      	movs	r5, #0
 800a11e:	e028      	b.n	800a172 <__ieee754_rem_pio2+0x7a>
 800a120:	4bbe      	ldr	r3, [pc, #760]	@ (800a41c <__ieee754_rem_pio2+0x324>)
 800a122:	4598      	cmp	r8, r3
 800a124:	d878      	bhi.n	800a218 <__ieee754_rem_pio2+0x120>
 800a126:	9b04      	ldr	r3, [sp, #16]
 800a128:	4dbd      	ldr	r5, [pc, #756]	@ (800a420 <__ieee754_rem_pio2+0x328>)
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	4630      	mov	r0, r6
 800a12e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a3e0 <__ieee754_rem_pio2+0x2e8>)
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	4639      	mov	r1, r7
 800a136:	dd38      	ble.n	800a1aa <__ieee754_rem_pio2+0xb2>
 800a138:	f7f6 f8c6 	bl	80002c8 <__aeabi_dsub>
 800a13c:	45a8      	cmp	r8, r5
 800a13e:	4606      	mov	r6, r0
 800a140:	460f      	mov	r7, r1
 800a142:	d01a      	beq.n	800a17a <__ieee754_rem_pio2+0x82>
 800a144:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a3e8 <__ieee754_rem_pio2+0x2f0>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	f7f6 f8bd 	bl	80002c8 <__aeabi_dsub>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4680      	mov	r8, r0
 800a154:	4689      	mov	r9, r1
 800a156:	4630      	mov	r0, r6
 800a158:	4639      	mov	r1, r7
 800a15a:	f7f6 f8b5 	bl	80002c8 <__aeabi_dsub>
 800a15e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a3e8 <__ieee754_rem_pio2+0x2f0>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f7f6 f8b0 	bl	80002c8 <__aeabi_dsub>
 800a168:	e9c4 8900 	strd	r8, r9, [r4]
 800a16c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a170:	2501      	movs	r5, #1
 800a172:	4628      	mov	r0, r5
 800a174:	b00d      	add	sp, #52	@ 0x34
 800a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17a:	a39d      	add	r3, pc, #628	@ (adr r3, 800a3f0 <__ieee754_rem_pio2+0x2f8>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f6 f8a2 	bl	80002c8 <__aeabi_dsub>
 800a184:	a39c      	add	r3, pc, #624	@ (adr r3, 800a3f8 <__ieee754_rem_pio2+0x300>)
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	4606      	mov	r6, r0
 800a18c:	460f      	mov	r7, r1
 800a18e:	f7f6 f89b 	bl	80002c8 <__aeabi_dsub>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4680      	mov	r8, r0
 800a198:	4689      	mov	r9, r1
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	f7f6 f893 	bl	80002c8 <__aeabi_dsub>
 800a1a2:	a395      	add	r3, pc, #596	@ (adr r3, 800a3f8 <__ieee754_rem_pio2+0x300>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	e7dc      	b.n	800a164 <__ieee754_rem_pio2+0x6c>
 800a1aa:	f7f6 f88f 	bl	80002cc <__adddf3>
 800a1ae:	45a8      	cmp	r8, r5
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	460f      	mov	r7, r1
 800a1b4:	d018      	beq.n	800a1e8 <__ieee754_rem_pio2+0xf0>
 800a1b6:	a38c      	add	r3, pc, #560	@ (adr r3, 800a3e8 <__ieee754_rem_pio2+0x2f0>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	f7f6 f886 	bl	80002cc <__adddf3>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 f87c 	bl	80002c8 <__aeabi_dsub>
 800a1d0:	a385      	add	r3, pc, #532	@ (adr r3, 800a3e8 <__ieee754_rem_pio2+0x2f0>)
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	f7f6 f879 	bl	80002cc <__adddf3>
 800a1da:	f04f 35ff 	mov.w	r5, #4294967295
 800a1de:	e9c4 8900 	strd	r8, r9, [r4]
 800a1e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1e6:	e7c4      	b.n	800a172 <__ieee754_rem_pio2+0x7a>
 800a1e8:	a381      	add	r3, pc, #516	@ (adr r3, 800a3f0 <__ieee754_rem_pio2+0x2f8>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	f7f6 f86d 	bl	80002cc <__adddf3>
 800a1f2:	a381      	add	r3, pc, #516	@ (adr r3, 800a3f8 <__ieee754_rem_pio2+0x300>)
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	460f      	mov	r7, r1
 800a1fc:	f7f6 f866 	bl	80002cc <__adddf3>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4680      	mov	r8, r0
 800a206:	4689      	mov	r9, r1
 800a208:	4630      	mov	r0, r6
 800a20a:	4639      	mov	r1, r7
 800a20c:	f7f6 f85c 	bl	80002c8 <__aeabi_dsub>
 800a210:	a379      	add	r3, pc, #484	@ (adr r3, 800a3f8 <__ieee754_rem_pio2+0x300>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	e7de      	b.n	800a1d6 <__ieee754_rem_pio2+0xde>
 800a218:	4b82      	ldr	r3, [pc, #520]	@ (800a424 <__ieee754_rem_pio2+0x32c>)
 800a21a:	4598      	cmp	r8, r3
 800a21c:	f200 80d1 	bhi.w	800a3c2 <__ieee754_rem_pio2+0x2ca>
 800a220:	f7ff fb02 	bl	8009828 <fabs>
 800a224:	ec57 6b10 	vmov	r6, r7, d0
 800a228:	a375      	add	r3, pc, #468	@ (adr r3, 800a400 <__ieee754_rem_pio2+0x308>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	4630      	mov	r0, r6
 800a230:	4639      	mov	r1, r7
 800a232:	f7f6 fa01 	bl	8000638 <__aeabi_dmul>
 800a236:	4b7c      	ldr	r3, [pc, #496]	@ (800a428 <__ieee754_rem_pio2+0x330>)
 800a238:	2200      	movs	r2, #0
 800a23a:	f7f6 f847 	bl	80002cc <__adddf3>
 800a23e:	f7f6 fcab 	bl	8000b98 <__aeabi_d2iz>
 800a242:	4605      	mov	r5, r0
 800a244:	f7f6 f98e 	bl	8000564 <__aeabi_i2d>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a250:	a363      	add	r3, pc, #396	@ (adr r3, 800a3e0 <__ieee754_rem_pio2+0x2e8>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f7f6 f9ef 	bl	8000638 <__aeabi_dmul>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4630      	mov	r0, r6
 800a260:	4639      	mov	r1, r7
 800a262:	f7f6 f831 	bl	80002c8 <__aeabi_dsub>
 800a266:	a360      	add	r3, pc, #384	@ (adr r3, 800a3e8 <__ieee754_rem_pio2+0x2f0>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	4682      	mov	sl, r0
 800a26e:	468b      	mov	fp, r1
 800a270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a274:	f7f6 f9e0 	bl	8000638 <__aeabi_dmul>
 800a278:	2d1f      	cmp	r5, #31
 800a27a:	4606      	mov	r6, r0
 800a27c:	460f      	mov	r7, r1
 800a27e:	dc0c      	bgt.n	800a29a <__ieee754_rem_pio2+0x1a2>
 800a280:	4b6a      	ldr	r3, [pc, #424]	@ (800a42c <__ieee754_rem_pio2+0x334>)
 800a282:	1e6a      	subs	r2, r5, #1
 800a284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a288:	4543      	cmp	r3, r8
 800a28a:	d006      	beq.n	800a29a <__ieee754_rem_pio2+0x1a2>
 800a28c:	4632      	mov	r2, r6
 800a28e:	463b      	mov	r3, r7
 800a290:	4650      	mov	r0, sl
 800a292:	4659      	mov	r1, fp
 800a294:	f7f6 f818 	bl	80002c8 <__aeabi_dsub>
 800a298:	e00e      	b.n	800a2b8 <__ieee754_rem_pio2+0x1c0>
 800a29a:	463b      	mov	r3, r7
 800a29c:	4632      	mov	r2, r6
 800a29e:	4650      	mov	r0, sl
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	f7f6 f811 	bl	80002c8 <__aeabi_dsub>
 800a2a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a2aa:	9305      	str	r3, [sp, #20]
 800a2ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a2b4:	2b10      	cmp	r3, #16
 800a2b6:	dc02      	bgt.n	800a2be <__ieee754_rem_pio2+0x1c6>
 800a2b8:	e9c4 0100 	strd	r0, r1, [r4]
 800a2bc:	e039      	b.n	800a332 <__ieee754_rem_pio2+0x23a>
 800a2be:	a34c      	add	r3, pc, #304	@ (adr r3, 800a3f0 <__ieee754_rem_pio2+0x2f8>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c8:	f7f6 f9b6 	bl	8000638 <__aeabi_dmul>
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	4659      	mov	r1, fp
 800a2d8:	f7f5 fff6 	bl	80002c8 <__aeabi_dsub>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4680      	mov	r8, r0
 800a2e2:	4689      	mov	r9, r1
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	4659      	mov	r1, fp
 800a2e8:	f7f5 ffee 	bl	80002c8 <__aeabi_dsub>
 800a2ec:	4632      	mov	r2, r6
 800a2ee:	463b      	mov	r3, r7
 800a2f0:	f7f5 ffea 	bl	80002c8 <__aeabi_dsub>
 800a2f4:	a340      	add	r3, pc, #256	@ (adr r3, 800a3f8 <__ieee754_rem_pio2+0x300>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	460f      	mov	r7, r1
 800a2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a302:	f7f6 f999 	bl	8000638 <__aeabi_dmul>
 800a306:	4632      	mov	r2, r6
 800a308:	463b      	mov	r3, r7
 800a30a:	f7f5 ffdd 	bl	80002c8 <__aeabi_dsub>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4606      	mov	r6, r0
 800a314:	460f      	mov	r7, r1
 800a316:	4640      	mov	r0, r8
 800a318:	4649      	mov	r1, r9
 800a31a:	f7f5 ffd5 	bl	80002c8 <__aeabi_dsub>
 800a31e:	9a05      	ldr	r2, [sp, #20]
 800a320:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	2b31      	cmp	r3, #49	@ 0x31
 800a328:	dc20      	bgt.n	800a36c <__ieee754_rem_pio2+0x274>
 800a32a:	e9c4 0100 	strd	r0, r1, [r4]
 800a32e:	46c2      	mov	sl, r8
 800a330:	46cb      	mov	fp, r9
 800a332:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a336:	4650      	mov	r0, sl
 800a338:	4642      	mov	r2, r8
 800a33a:	464b      	mov	r3, r9
 800a33c:	4659      	mov	r1, fp
 800a33e:	f7f5 ffc3 	bl	80002c8 <__aeabi_dsub>
 800a342:	463b      	mov	r3, r7
 800a344:	4632      	mov	r2, r6
 800a346:	f7f5 ffbf 	bl	80002c8 <__aeabi_dsub>
 800a34a:	9b04      	ldr	r3, [sp, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a352:	f6bf af0e 	bge.w	800a172 <__ieee754_rem_pio2+0x7a>
 800a356:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a35a:	6063      	str	r3, [r4, #4]
 800a35c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a360:	f8c4 8000 	str.w	r8, [r4]
 800a364:	60a0      	str	r0, [r4, #8]
 800a366:	60e3      	str	r3, [r4, #12]
 800a368:	426d      	negs	r5, r5
 800a36a:	e702      	b.n	800a172 <__ieee754_rem_pio2+0x7a>
 800a36c:	a326      	add	r3, pc, #152	@ (adr r3, 800a408 <__ieee754_rem_pio2+0x310>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a376:	f7f6 f95f 	bl	8000638 <__aeabi_dmul>
 800a37a:	4606      	mov	r6, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4640      	mov	r0, r8
 800a384:	4649      	mov	r1, r9
 800a386:	f7f5 ff9f 	bl	80002c8 <__aeabi_dsub>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4682      	mov	sl, r0
 800a390:	468b      	mov	fp, r1
 800a392:	4640      	mov	r0, r8
 800a394:	4649      	mov	r1, r9
 800a396:	f7f5 ff97 	bl	80002c8 <__aeabi_dsub>
 800a39a:	4632      	mov	r2, r6
 800a39c:	463b      	mov	r3, r7
 800a39e:	f7f5 ff93 	bl	80002c8 <__aeabi_dsub>
 800a3a2:	a31b      	add	r3, pc, #108	@ (adr r3, 800a410 <__ieee754_rem_pio2+0x318>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	460f      	mov	r7, r1
 800a3ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3b0:	f7f6 f942 	bl	8000638 <__aeabi_dmul>
 800a3b4:	4632      	mov	r2, r6
 800a3b6:	463b      	mov	r3, r7
 800a3b8:	f7f5 ff86 	bl	80002c8 <__aeabi_dsub>
 800a3bc:	4606      	mov	r6, r0
 800a3be:	460f      	mov	r7, r1
 800a3c0:	e764      	b.n	800a28c <__ieee754_rem_pio2+0x194>
 800a3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a430 <__ieee754_rem_pio2+0x338>)
 800a3c4:	4598      	cmp	r8, r3
 800a3c6:	d935      	bls.n	800a434 <__ieee754_rem_pio2+0x33c>
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	463b      	mov	r3, r7
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f7f5 ff7a 	bl	80002c8 <__aeabi_dsub>
 800a3d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a3d8:	e9c4 0100 	strd	r0, r1, [r4]
 800a3dc:	e69e      	b.n	800a11c <__ieee754_rem_pio2+0x24>
 800a3de:	bf00      	nop
 800a3e0:	54400000 	.word	0x54400000
 800a3e4:	3ff921fb 	.word	0x3ff921fb
 800a3e8:	1a626331 	.word	0x1a626331
 800a3ec:	3dd0b461 	.word	0x3dd0b461
 800a3f0:	1a600000 	.word	0x1a600000
 800a3f4:	3dd0b461 	.word	0x3dd0b461
 800a3f8:	2e037073 	.word	0x2e037073
 800a3fc:	3ba3198a 	.word	0x3ba3198a
 800a400:	6dc9c883 	.word	0x6dc9c883
 800a404:	3fe45f30 	.word	0x3fe45f30
 800a408:	2e000000 	.word	0x2e000000
 800a40c:	3ba3198a 	.word	0x3ba3198a
 800a410:	252049c1 	.word	0x252049c1
 800a414:	397b839a 	.word	0x397b839a
 800a418:	3fe921fb 	.word	0x3fe921fb
 800a41c:	4002d97b 	.word	0x4002d97b
 800a420:	3ff921fb 	.word	0x3ff921fb
 800a424:	413921fb 	.word	0x413921fb
 800a428:	3fe00000 	.word	0x3fe00000
 800a42c:	0800c750 	.word	0x0800c750
 800a430:	7fefffff 	.word	0x7fefffff
 800a434:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a438:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a43c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a440:	4630      	mov	r0, r6
 800a442:	460f      	mov	r7, r1
 800a444:	f7f6 fba8 	bl	8000b98 <__aeabi_d2iz>
 800a448:	f7f6 f88c 	bl	8000564 <__aeabi_i2d>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	4630      	mov	r0, r6
 800a452:	4639      	mov	r1, r7
 800a454:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a458:	f7f5 ff36 	bl	80002c8 <__aeabi_dsub>
 800a45c:	4b22      	ldr	r3, [pc, #136]	@ (800a4e8 <__ieee754_rem_pio2+0x3f0>)
 800a45e:	2200      	movs	r2, #0
 800a460:	f7f6 f8ea 	bl	8000638 <__aeabi_dmul>
 800a464:	460f      	mov	r7, r1
 800a466:	4606      	mov	r6, r0
 800a468:	f7f6 fb96 	bl	8000b98 <__aeabi_d2iz>
 800a46c:	f7f6 f87a 	bl	8000564 <__aeabi_i2d>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4630      	mov	r0, r6
 800a476:	4639      	mov	r1, r7
 800a478:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a47c:	f7f5 ff24 	bl	80002c8 <__aeabi_dsub>
 800a480:	4b19      	ldr	r3, [pc, #100]	@ (800a4e8 <__ieee754_rem_pio2+0x3f0>)
 800a482:	2200      	movs	r2, #0
 800a484:	f7f6 f8d8 	bl	8000638 <__aeabi_dmul>
 800a488:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a48c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a490:	f04f 0803 	mov.w	r8, #3
 800a494:	2600      	movs	r6, #0
 800a496:	2700      	movs	r7, #0
 800a498:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	46c2      	mov	sl, r8
 800a4a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4a6:	f7f6 fb2f 	bl	8000b08 <__aeabi_dcmpeq>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d1f4      	bne.n	800a498 <__ieee754_rem_pio2+0x3a0>
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	@ (800a4ec <__ieee754_rem_pio2+0x3f4>)
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	462a      	mov	r2, r5
 800a4b8:	4653      	mov	r3, sl
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	a806      	add	r0, sp, #24
 800a4be:	f000 f8ef 	bl	800a6a0 <__kernel_rem_pio2>
 800a4c2:	9b04      	ldr	r3, [sp, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	f6bf ae53 	bge.w	800a172 <__ieee754_rem_pio2+0x7a>
 800a4cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a4d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4d4:	e9c4 2300 	strd	r2, r3, [r4]
 800a4d8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a4dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a4e4:	e740      	b.n	800a368 <__ieee754_rem_pio2+0x270>
 800a4e6:	bf00      	nop
 800a4e8:	41700000 	.word	0x41700000
 800a4ec:	0800c7d0 	.word	0x0800c7d0

0800a4f0 <__ieee754_sqrt>:
 800a4f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	4a66      	ldr	r2, [pc, #408]	@ (800a690 <__ieee754_sqrt+0x1a0>)
 800a4f6:	ec55 4b10 	vmov	r4, r5, d0
 800a4fa:	43aa      	bics	r2, r5
 800a4fc:	462b      	mov	r3, r5
 800a4fe:	4621      	mov	r1, r4
 800a500:	d110      	bne.n	800a524 <__ieee754_sqrt+0x34>
 800a502:	4622      	mov	r2, r4
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f6 f896 	bl	8000638 <__aeabi_dmul>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4620      	mov	r0, r4
 800a512:	4629      	mov	r1, r5
 800a514:	f7f5 feda 	bl	80002cc <__adddf3>
 800a518:	4604      	mov	r4, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	ec45 4b10 	vmov	d0, r4, r5
 800a520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a524:	2d00      	cmp	r5, #0
 800a526:	dc0e      	bgt.n	800a546 <__ieee754_sqrt+0x56>
 800a528:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a52c:	4322      	orrs	r2, r4
 800a52e:	d0f5      	beq.n	800a51c <__ieee754_sqrt+0x2c>
 800a530:	b19d      	cbz	r5, 800a55a <__ieee754_sqrt+0x6a>
 800a532:	4622      	mov	r2, r4
 800a534:	4620      	mov	r0, r4
 800a536:	4629      	mov	r1, r5
 800a538:	f7f5 fec6 	bl	80002c8 <__aeabi_dsub>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	f7f6 f9a4 	bl	800088c <__aeabi_ddiv>
 800a544:	e7e8      	b.n	800a518 <__ieee754_sqrt+0x28>
 800a546:	152a      	asrs	r2, r5, #20
 800a548:	d115      	bne.n	800a576 <__ieee754_sqrt+0x86>
 800a54a:	2000      	movs	r0, #0
 800a54c:	e009      	b.n	800a562 <__ieee754_sqrt+0x72>
 800a54e:	0acb      	lsrs	r3, r1, #11
 800a550:	3a15      	subs	r2, #21
 800a552:	0549      	lsls	r1, r1, #21
 800a554:	2b00      	cmp	r3, #0
 800a556:	d0fa      	beq.n	800a54e <__ieee754_sqrt+0x5e>
 800a558:	e7f7      	b.n	800a54a <__ieee754_sqrt+0x5a>
 800a55a:	462a      	mov	r2, r5
 800a55c:	e7fa      	b.n	800a554 <__ieee754_sqrt+0x64>
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	3001      	adds	r0, #1
 800a562:	02dc      	lsls	r4, r3, #11
 800a564:	d5fb      	bpl.n	800a55e <__ieee754_sqrt+0x6e>
 800a566:	1e44      	subs	r4, r0, #1
 800a568:	1b12      	subs	r2, r2, r4
 800a56a:	f1c0 0420 	rsb	r4, r0, #32
 800a56e:	fa21 f404 	lsr.w	r4, r1, r4
 800a572:	4323      	orrs	r3, r4
 800a574:	4081      	lsls	r1, r0
 800a576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a57a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a57e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a582:	07d2      	lsls	r2, r2, #31
 800a584:	bf5c      	itt	pl
 800a586:	005b      	lslpl	r3, r3, #1
 800a588:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a58c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a590:	bf58      	it	pl
 800a592:	0049      	lslpl	r1, r1, #1
 800a594:	2600      	movs	r6, #0
 800a596:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a59a:	107f      	asrs	r7, r7, #1
 800a59c:	0049      	lsls	r1, r1, #1
 800a59e:	2016      	movs	r0, #22
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a5a6:	1915      	adds	r5, r2, r4
 800a5a8:	429d      	cmp	r5, r3
 800a5aa:	bfde      	ittt	le
 800a5ac:	192a      	addle	r2, r5, r4
 800a5ae:	1b5b      	suble	r3, r3, r5
 800a5b0:	1936      	addle	r6, r6, r4
 800a5b2:	0fcd      	lsrs	r5, r1, #31
 800a5b4:	3801      	subs	r0, #1
 800a5b6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a5ba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a5be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a5c2:	d1f0      	bne.n	800a5a6 <__ieee754_sqrt+0xb6>
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	2420      	movs	r4, #32
 800a5c8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	eb0c 0e00 	add.w	lr, ip, r0
 800a5d2:	dc02      	bgt.n	800a5da <__ieee754_sqrt+0xea>
 800a5d4:	d113      	bne.n	800a5fe <__ieee754_sqrt+0x10e>
 800a5d6:	458e      	cmp	lr, r1
 800a5d8:	d811      	bhi.n	800a5fe <__ieee754_sqrt+0x10e>
 800a5da:	f1be 0f00 	cmp.w	lr, #0
 800a5de:	eb0e 000c 	add.w	r0, lr, ip
 800a5e2:	da3f      	bge.n	800a664 <__ieee754_sqrt+0x174>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	db3d      	blt.n	800a664 <__ieee754_sqrt+0x174>
 800a5e8:	f102 0801 	add.w	r8, r2, #1
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	458e      	cmp	lr, r1
 800a5f0:	bf88      	it	hi
 800a5f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a5f6:	eba1 010e 	sub.w	r1, r1, lr
 800a5fa:	4465      	add	r5, ip
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a602:	3c01      	subs	r4, #1
 800a604:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a608:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a60c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a610:	d1dc      	bne.n	800a5cc <__ieee754_sqrt+0xdc>
 800a612:	4319      	orrs	r1, r3
 800a614:	d01b      	beq.n	800a64e <__ieee754_sqrt+0x15e>
 800a616:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a694 <__ieee754_sqrt+0x1a4>
 800a61a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a698 <__ieee754_sqrt+0x1a8>
 800a61e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a622:	e9db 2300 	ldrd	r2, r3, [fp]
 800a626:	f7f5 fe4f 	bl	80002c8 <__aeabi_dsub>
 800a62a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4640      	mov	r0, r8
 800a634:	4649      	mov	r1, r9
 800a636:	f7f6 fa7b 	bl	8000b30 <__aeabi_dcmple>
 800a63a:	b140      	cbz	r0, 800a64e <__ieee754_sqrt+0x15e>
 800a63c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a640:	e9da 0100 	ldrd	r0, r1, [sl]
 800a644:	e9db 2300 	ldrd	r2, r3, [fp]
 800a648:	d10e      	bne.n	800a668 <__ieee754_sqrt+0x178>
 800a64a:	3601      	adds	r6, #1
 800a64c:	4625      	mov	r5, r4
 800a64e:	1073      	asrs	r3, r6, #1
 800a650:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a654:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a658:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a65c:	086b      	lsrs	r3, r5, #1
 800a65e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a662:	e759      	b.n	800a518 <__ieee754_sqrt+0x28>
 800a664:	4690      	mov	r8, r2
 800a666:	e7c1      	b.n	800a5ec <__ieee754_sqrt+0xfc>
 800a668:	f7f5 fe30 	bl	80002cc <__adddf3>
 800a66c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4640      	mov	r0, r8
 800a676:	4649      	mov	r1, r9
 800a678:	f7f6 fa50 	bl	8000b1c <__aeabi_dcmplt>
 800a67c:	b120      	cbz	r0, 800a688 <__ieee754_sqrt+0x198>
 800a67e:	1cab      	adds	r3, r5, #2
 800a680:	bf08      	it	eq
 800a682:	3601      	addeq	r6, #1
 800a684:	3502      	adds	r5, #2
 800a686:	e7e2      	b.n	800a64e <__ieee754_sqrt+0x15e>
 800a688:	1c6b      	adds	r3, r5, #1
 800a68a:	f023 0501 	bic.w	r5, r3, #1
 800a68e:	e7de      	b.n	800a64e <__ieee754_sqrt+0x15e>
 800a690:	7ff00000 	.word	0x7ff00000
 800a694:	0800c8e0 	.word	0x0800c8e0
 800a698:	0800c8d8 	.word	0x0800c8d8
 800a69c:	00000000 	.word	0x00000000

0800a6a0 <__kernel_rem_pio2>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	ed2d 8b02 	vpush	{d8}
 800a6a8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a6ac:	f112 0f14 	cmn.w	r2, #20
 800a6b0:	9306      	str	r3, [sp, #24]
 800a6b2:	9104      	str	r1, [sp, #16]
 800a6b4:	4bc2      	ldr	r3, [pc, #776]	@ (800a9c0 <__kernel_rem_pio2+0x320>)
 800a6b6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a6b8:	9008      	str	r0, [sp, #32]
 800a6ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	9b06      	ldr	r3, [sp, #24]
 800a6c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a6c6:	bfa8      	it	ge
 800a6c8:	1ed4      	subge	r4, r2, #3
 800a6ca:	9305      	str	r3, [sp, #20]
 800a6cc:	bfb2      	itee	lt
 800a6ce:	2400      	movlt	r4, #0
 800a6d0:	2318      	movge	r3, #24
 800a6d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a6d6:	f06f 0317 	mvn.w	r3, #23
 800a6da:	fb04 3303 	mla	r3, r4, r3, r3
 800a6de:	eb03 0b02 	add.w	fp, r3, r2
 800a6e2:	9b00      	ldr	r3, [sp, #0]
 800a6e4:	9a05      	ldr	r2, [sp, #20]
 800a6e6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800a9b0 <__kernel_rem_pio2+0x310>
 800a6ea:	eb03 0802 	add.w	r8, r3, r2
 800a6ee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a6f0:	1aa7      	subs	r7, r4, r2
 800a6f2:	ae20      	add	r6, sp, #128	@ 0x80
 800a6f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a6f8:	2500      	movs	r5, #0
 800a6fa:	4545      	cmp	r5, r8
 800a6fc:	dd12      	ble.n	800a724 <__kernel_rem_pio2+0x84>
 800a6fe:	9b06      	ldr	r3, [sp, #24]
 800a700:	aa20      	add	r2, sp, #128	@ 0x80
 800a702:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a706:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a70a:	2700      	movs	r7, #0
 800a70c:	9b00      	ldr	r3, [sp, #0]
 800a70e:	429f      	cmp	r7, r3
 800a710:	dc2e      	bgt.n	800a770 <__kernel_rem_pio2+0xd0>
 800a712:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800a9b0 <__kernel_rem_pio2+0x310>
 800a716:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a71a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a71e:	46a8      	mov	r8, r5
 800a720:	2600      	movs	r6, #0
 800a722:	e01b      	b.n	800a75c <__kernel_rem_pio2+0xbc>
 800a724:	42ef      	cmn	r7, r5
 800a726:	d407      	bmi.n	800a738 <__kernel_rem_pio2+0x98>
 800a728:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a72c:	f7f5 ff1a 	bl	8000564 <__aeabi_i2d>
 800a730:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a734:	3501      	adds	r5, #1
 800a736:	e7e0      	b.n	800a6fa <__kernel_rem_pio2+0x5a>
 800a738:	ec51 0b18 	vmov	r0, r1, d8
 800a73c:	e7f8      	b.n	800a730 <__kernel_rem_pio2+0x90>
 800a73e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a742:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a746:	f7f5 ff77 	bl	8000638 <__aeabi_dmul>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a752:	f7f5 fdbb 	bl	80002cc <__adddf3>
 800a756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a75a:	3601      	adds	r6, #1
 800a75c:	9b05      	ldr	r3, [sp, #20]
 800a75e:	429e      	cmp	r6, r3
 800a760:	dded      	ble.n	800a73e <__kernel_rem_pio2+0x9e>
 800a762:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a766:	3701      	adds	r7, #1
 800a768:	ecaa 7b02 	vstmia	sl!, {d7}
 800a76c:	3508      	adds	r5, #8
 800a76e:	e7cd      	b.n	800a70c <__kernel_rem_pio2+0x6c>
 800a770:	9b00      	ldr	r3, [sp, #0]
 800a772:	f8dd 8000 	ldr.w	r8, [sp]
 800a776:	aa0c      	add	r2, sp, #48	@ 0x30
 800a778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a77c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a77e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a780:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a784:	9309      	str	r3, [sp, #36]	@ 0x24
 800a786:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a78a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a78c:	ab98      	add	r3, sp, #608	@ 0x260
 800a78e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a792:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a796:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a79a:	ac0c      	add	r4, sp, #48	@ 0x30
 800a79c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a79e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a7a2:	46a1      	mov	r9, r4
 800a7a4:	46c2      	mov	sl, r8
 800a7a6:	f1ba 0f00 	cmp.w	sl, #0
 800a7aa:	dc77      	bgt.n	800a89c <__kernel_rem_pio2+0x1fc>
 800a7ac:	4658      	mov	r0, fp
 800a7ae:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a7b2:	f000 fac5 	bl	800ad40 <scalbn>
 800a7b6:	ec57 6b10 	vmov	r6, r7, d0
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f5 ff38 	bl	8000638 <__aeabi_dmul>
 800a7c8:	ec41 0b10 	vmov	d0, r0, r1
 800a7cc:	f000 fb34 	bl	800ae38 <floor>
 800a7d0:	4b7c      	ldr	r3, [pc, #496]	@ (800a9c4 <__kernel_rem_pio2+0x324>)
 800a7d2:	ec51 0b10 	vmov	r0, r1, d0
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f7f5 ff2e 	bl	8000638 <__aeabi_dmul>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	f7f5 fd70 	bl	80002c8 <__aeabi_dsub>
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	f7f6 f9d4 	bl	8000b98 <__aeabi_d2iz>
 800a7f0:	9002      	str	r0, [sp, #8]
 800a7f2:	f7f5 feb7 	bl	8000564 <__aeabi_i2d>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7f5 fd63 	bl	80002c8 <__aeabi_dsub>
 800a802:	f1bb 0f00 	cmp.w	fp, #0
 800a806:	4606      	mov	r6, r0
 800a808:	460f      	mov	r7, r1
 800a80a:	dd6c      	ble.n	800a8e6 <__kernel_rem_pio2+0x246>
 800a80c:	f108 31ff 	add.w	r1, r8, #4294967295
 800a810:	ab0c      	add	r3, sp, #48	@ 0x30
 800a812:	9d02      	ldr	r5, [sp, #8]
 800a814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a818:	f1cb 0018 	rsb	r0, fp, #24
 800a81c:	fa43 f200 	asr.w	r2, r3, r0
 800a820:	4415      	add	r5, r2
 800a822:	4082      	lsls	r2, r0
 800a824:	1a9b      	subs	r3, r3, r2
 800a826:	aa0c      	add	r2, sp, #48	@ 0x30
 800a828:	9502      	str	r5, [sp, #8]
 800a82a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a82e:	f1cb 0217 	rsb	r2, fp, #23
 800a832:	fa43 f902 	asr.w	r9, r3, r2
 800a836:	f1b9 0f00 	cmp.w	r9, #0
 800a83a:	dd64      	ble.n	800a906 <__kernel_rem_pio2+0x266>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	2200      	movs	r2, #0
 800a840:	3301      	adds	r3, #1
 800a842:	9302      	str	r3, [sp, #8]
 800a844:	4615      	mov	r5, r2
 800a846:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a84a:	4590      	cmp	r8, r2
 800a84c:	f300 80a1 	bgt.w	800a992 <__kernel_rem_pio2+0x2f2>
 800a850:	f1bb 0f00 	cmp.w	fp, #0
 800a854:	dd07      	ble.n	800a866 <__kernel_rem_pio2+0x1c6>
 800a856:	f1bb 0f01 	cmp.w	fp, #1
 800a85a:	f000 80c1 	beq.w	800a9e0 <__kernel_rem_pio2+0x340>
 800a85e:	f1bb 0f02 	cmp.w	fp, #2
 800a862:	f000 80c8 	beq.w	800a9f6 <__kernel_rem_pio2+0x356>
 800a866:	f1b9 0f02 	cmp.w	r9, #2
 800a86a:	d14c      	bne.n	800a906 <__kernel_rem_pio2+0x266>
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	4955      	ldr	r1, [pc, #340]	@ (800a9c8 <__kernel_rem_pio2+0x328>)
 800a872:	2000      	movs	r0, #0
 800a874:	f7f5 fd28 	bl	80002c8 <__aeabi_dsub>
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	2d00      	cmp	r5, #0
 800a87e:	d042      	beq.n	800a906 <__kernel_rem_pio2+0x266>
 800a880:	4658      	mov	r0, fp
 800a882:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800a9b8 <__kernel_rem_pio2+0x318>
 800a886:	f000 fa5b 	bl	800ad40 <scalbn>
 800a88a:	4630      	mov	r0, r6
 800a88c:	4639      	mov	r1, r7
 800a88e:	ec53 2b10 	vmov	r2, r3, d0
 800a892:	f7f5 fd19 	bl	80002c8 <__aeabi_dsub>
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	e034      	b.n	800a906 <__kernel_rem_pio2+0x266>
 800a89c:	4b4b      	ldr	r3, [pc, #300]	@ (800a9cc <__kernel_rem_pio2+0x32c>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a4:	f7f5 fec8 	bl	8000638 <__aeabi_dmul>
 800a8a8:	f7f6 f976 	bl	8000b98 <__aeabi_d2iz>
 800a8ac:	f7f5 fe5a 	bl	8000564 <__aeabi_i2d>
 800a8b0:	4b47      	ldr	r3, [pc, #284]	@ (800a9d0 <__kernel_rem_pio2+0x330>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	460f      	mov	r7, r1
 800a8b8:	f7f5 febe 	bl	8000638 <__aeabi_dmul>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c4:	f7f5 fd00 	bl	80002c8 <__aeabi_dsub>
 800a8c8:	f7f6 f966 	bl	8000b98 <__aeabi_d2iz>
 800a8cc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a8d0:	f849 0b04 	str.w	r0, [r9], #4
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f7f5 fcf8 	bl	80002cc <__adddf3>
 800a8dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8e4:	e75f      	b.n	800a7a6 <__kernel_rem_pio2+0x106>
 800a8e6:	d107      	bne.n	800a8f8 <__kernel_rem_pio2+0x258>
 800a8e8:	f108 33ff 	add.w	r3, r8, #4294967295
 800a8ec:	aa0c      	add	r2, sp, #48	@ 0x30
 800a8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8f2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a8f6:	e79e      	b.n	800a836 <__kernel_rem_pio2+0x196>
 800a8f8:	4b36      	ldr	r3, [pc, #216]	@ (800a9d4 <__kernel_rem_pio2+0x334>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f7f6 f922 	bl	8000b44 <__aeabi_dcmpge>
 800a900:	2800      	cmp	r0, #0
 800a902:	d143      	bne.n	800a98c <__kernel_rem_pio2+0x2ec>
 800a904:	4681      	mov	r9, r0
 800a906:	2200      	movs	r2, #0
 800a908:	2300      	movs	r3, #0
 800a90a:	4630      	mov	r0, r6
 800a90c:	4639      	mov	r1, r7
 800a90e:	f7f6 f8fb 	bl	8000b08 <__aeabi_dcmpeq>
 800a912:	2800      	cmp	r0, #0
 800a914:	f000 80c1 	beq.w	800aa9a <__kernel_rem_pio2+0x3fa>
 800a918:	f108 33ff 	add.w	r3, r8, #4294967295
 800a91c:	2200      	movs	r2, #0
 800a91e:	9900      	ldr	r1, [sp, #0]
 800a920:	428b      	cmp	r3, r1
 800a922:	da70      	bge.n	800aa06 <__kernel_rem_pio2+0x366>
 800a924:	2a00      	cmp	r2, #0
 800a926:	f000 808b 	beq.w	800aa40 <__kernel_rem_pio2+0x3a0>
 800a92a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a92e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a930:	f1ab 0b18 	sub.w	fp, fp, #24
 800a934:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0f6      	beq.n	800a92a <__kernel_rem_pio2+0x28a>
 800a93c:	4658      	mov	r0, fp
 800a93e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800a9b8 <__kernel_rem_pio2+0x318>
 800a942:	f000 f9fd 	bl	800ad40 <scalbn>
 800a946:	f108 0301 	add.w	r3, r8, #1
 800a94a:	00da      	lsls	r2, r3, #3
 800a94c:	9205      	str	r2, [sp, #20]
 800a94e:	ec55 4b10 	vmov	r4, r5, d0
 800a952:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a954:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800a9cc <__kernel_rem_pio2+0x32c>
 800a958:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a95c:	4646      	mov	r6, r8
 800a95e:	f04f 0a00 	mov.w	sl, #0
 800a962:	2e00      	cmp	r6, #0
 800a964:	f280 80d1 	bge.w	800ab0a <__kernel_rem_pio2+0x46a>
 800a968:	4644      	mov	r4, r8
 800a96a:	2c00      	cmp	r4, #0
 800a96c:	f2c0 80ff 	blt.w	800ab6e <__kernel_rem_pio2+0x4ce>
 800a970:	4b19      	ldr	r3, [pc, #100]	@ (800a9d8 <__kernel_rem_pio2+0x338>)
 800a972:	461f      	mov	r7, r3
 800a974:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a976:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a97a:	9306      	str	r3, [sp, #24]
 800a97c:	f04f 0a00 	mov.w	sl, #0
 800a980:	f04f 0b00 	mov.w	fp, #0
 800a984:	2600      	movs	r6, #0
 800a986:	eba8 0504 	sub.w	r5, r8, r4
 800a98a:	e0e4      	b.n	800ab56 <__kernel_rem_pio2+0x4b6>
 800a98c:	f04f 0902 	mov.w	r9, #2
 800a990:	e754      	b.n	800a83c <__kernel_rem_pio2+0x19c>
 800a992:	f854 3b04 	ldr.w	r3, [r4], #4
 800a996:	bb0d      	cbnz	r5, 800a9dc <__kernel_rem_pio2+0x33c>
 800a998:	b123      	cbz	r3, 800a9a4 <__kernel_rem_pio2+0x304>
 800a99a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a99e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	3201      	adds	r2, #1
 800a9a6:	461d      	mov	r5, r3
 800a9a8:	e74f      	b.n	800a84a <__kernel_rem_pio2+0x1aa>
 800a9aa:	bf00      	nop
 800a9ac:	f3af 8000 	nop.w
	...
 800a9bc:	3ff00000 	.word	0x3ff00000
 800a9c0:	0800c928 	.word	0x0800c928
 800a9c4:	40200000 	.word	0x40200000
 800a9c8:	3ff00000 	.word	0x3ff00000
 800a9cc:	3e700000 	.word	0x3e700000
 800a9d0:	41700000 	.word	0x41700000
 800a9d4:	3fe00000 	.word	0x3fe00000
 800a9d8:	0800c8e8 	.word	0x0800c8e8
 800a9dc:	1acb      	subs	r3, r1, r3
 800a9de:	e7de      	b.n	800a99e <__kernel_rem_pio2+0x2fe>
 800a9e0:	f108 32ff 	add.w	r2, r8, #4294967295
 800a9e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800a9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a9ee:	a90c      	add	r1, sp, #48	@ 0x30
 800a9f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a9f4:	e737      	b.n	800a866 <__kernel_rem_pio2+0x1c6>
 800a9f6:	f108 32ff 	add.w	r2, r8, #4294967295
 800a9fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800a9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aa04:	e7f3      	b.n	800a9ee <__kernel_rem_pio2+0x34e>
 800aa06:	a90c      	add	r1, sp, #48	@ 0x30
 800aa08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	e785      	b.n	800a91e <__kernel_rem_pio2+0x27e>
 800aa12:	3401      	adds	r4, #1
 800aa14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aa18:	2a00      	cmp	r2, #0
 800aa1a:	d0fa      	beq.n	800aa12 <__kernel_rem_pio2+0x372>
 800aa1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa22:	eb0d 0503 	add.w	r5, sp, r3
 800aa26:	9b06      	ldr	r3, [sp, #24]
 800aa28:	aa20      	add	r2, sp, #128	@ 0x80
 800aa2a:	4443      	add	r3, r8
 800aa2c:	f108 0701 	add.w	r7, r8, #1
 800aa30:	3d98      	subs	r5, #152	@ 0x98
 800aa32:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800aa36:	4444      	add	r4, r8
 800aa38:	42bc      	cmp	r4, r7
 800aa3a:	da04      	bge.n	800aa46 <__kernel_rem_pio2+0x3a6>
 800aa3c:	46a0      	mov	r8, r4
 800aa3e:	e6a2      	b.n	800a786 <__kernel_rem_pio2+0xe6>
 800aa40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa42:	2401      	movs	r4, #1
 800aa44:	e7e6      	b.n	800aa14 <__kernel_rem_pio2+0x374>
 800aa46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa48:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800aa4c:	f7f5 fd8a 	bl	8000564 <__aeabi_i2d>
 800aa50:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800ad10 <__kernel_rem_pio2+0x670>
 800aa54:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aa58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa60:	46b2      	mov	sl, r6
 800aa62:	f04f 0800 	mov.w	r8, #0
 800aa66:	9b05      	ldr	r3, [sp, #20]
 800aa68:	4598      	cmp	r8, r3
 800aa6a:	dd05      	ble.n	800aa78 <__kernel_rem_pio2+0x3d8>
 800aa6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa70:	3701      	adds	r7, #1
 800aa72:	eca5 7b02 	vstmia	r5!, {d7}
 800aa76:	e7df      	b.n	800aa38 <__kernel_rem_pio2+0x398>
 800aa78:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800aa7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aa80:	f7f5 fdda 	bl	8000638 <__aeabi_dmul>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa8c:	f7f5 fc1e 	bl	80002cc <__adddf3>
 800aa90:	f108 0801 	add.w	r8, r8, #1
 800aa94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa98:	e7e5      	b.n	800aa66 <__kernel_rem_pio2+0x3c6>
 800aa9a:	f1cb 0000 	rsb	r0, fp, #0
 800aa9e:	ec47 6b10 	vmov	d0, r6, r7
 800aaa2:	f000 f94d 	bl	800ad40 <scalbn>
 800aaa6:	ec55 4b10 	vmov	r4, r5, d0
 800aaaa:	4b9b      	ldr	r3, [pc, #620]	@ (800ad18 <__kernel_rem_pio2+0x678>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	4620      	mov	r0, r4
 800aab0:	4629      	mov	r1, r5
 800aab2:	f7f6 f847 	bl	8000b44 <__aeabi_dcmpge>
 800aab6:	b300      	cbz	r0, 800aafa <__kernel_rem_pio2+0x45a>
 800aab8:	4b98      	ldr	r3, [pc, #608]	@ (800ad1c <__kernel_rem_pio2+0x67c>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	4620      	mov	r0, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	f7f5 fdba 	bl	8000638 <__aeabi_dmul>
 800aac4:	f7f6 f868 	bl	8000b98 <__aeabi_d2iz>
 800aac8:	4606      	mov	r6, r0
 800aaca:	f7f5 fd4b 	bl	8000564 <__aeabi_i2d>
 800aace:	4b92      	ldr	r3, [pc, #584]	@ (800ad18 <__kernel_rem_pio2+0x678>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	f7f5 fdb1 	bl	8000638 <__aeabi_dmul>
 800aad6:	460b      	mov	r3, r1
 800aad8:	4602      	mov	r2, r0
 800aada:	4629      	mov	r1, r5
 800aadc:	4620      	mov	r0, r4
 800aade:	f7f5 fbf3 	bl	80002c8 <__aeabi_dsub>
 800aae2:	f7f6 f859 	bl	8000b98 <__aeabi_d2iz>
 800aae6:	ab0c      	add	r3, sp, #48	@ 0x30
 800aae8:	f10b 0b18 	add.w	fp, fp, #24
 800aaec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800aaf0:	f108 0801 	add.w	r8, r8, #1
 800aaf4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800aaf8:	e720      	b.n	800a93c <__kernel_rem_pio2+0x29c>
 800aafa:	4620      	mov	r0, r4
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7f6 f84b 	bl	8000b98 <__aeabi_d2iz>
 800ab02:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ab08:	e718      	b.n	800a93c <__kernel_rem_pio2+0x29c>
 800ab0a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab10:	f7f5 fd28 	bl	8000564 <__aeabi_i2d>
 800ab14:	4622      	mov	r2, r4
 800ab16:	462b      	mov	r3, r5
 800ab18:	f7f5 fd8e 	bl	8000638 <__aeabi_dmul>
 800ab1c:	4652      	mov	r2, sl
 800ab1e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ab22:	465b      	mov	r3, fp
 800ab24:	4620      	mov	r0, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	f7f5 fd86 	bl	8000638 <__aeabi_dmul>
 800ab2c:	3e01      	subs	r6, #1
 800ab2e:	4604      	mov	r4, r0
 800ab30:	460d      	mov	r5, r1
 800ab32:	e716      	b.n	800a962 <__kernel_rem_pio2+0x2c2>
 800ab34:	9906      	ldr	r1, [sp, #24]
 800ab36:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ab3a:	9106      	str	r1, [sp, #24]
 800ab3c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ab40:	f7f5 fd7a 	bl	8000638 <__aeabi_dmul>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4650      	mov	r0, sl
 800ab4a:	4659      	mov	r1, fp
 800ab4c:	f7f5 fbbe 	bl	80002cc <__adddf3>
 800ab50:	3601      	adds	r6, #1
 800ab52:	4682      	mov	sl, r0
 800ab54:	468b      	mov	fp, r1
 800ab56:	9b00      	ldr	r3, [sp, #0]
 800ab58:	429e      	cmp	r6, r3
 800ab5a:	dc01      	bgt.n	800ab60 <__kernel_rem_pio2+0x4c0>
 800ab5c:	42ae      	cmp	r6, r5
 800ab5e:	dde9      	ble.n	800ab34 <__kernel_rem_pio2+0x494>
 800ab60:	ab48      	add	r3, sp, #288	@ 0x120
 800ab62:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ab66:	e9c5 ab00 	strd	sl, fp, [r5]
 800ab6a:	3c01      	subs	r4, #1
 800ab6c:	e6fd      	b.n	800a96a <__kernel_rem_pio2+0x2ca>
 800ab6e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	dc0b      	bgt.n	800ab8c <__kernel_rem_pio2+0x4ec>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	dc35      	bgt.n	800abe4 <__kernel_rem_pio2+0x544>
 800ab78:	d059      	beq.n	800ac2e <__kernel_rem_pio2+0x58e>
 800ab7a:	9b02      	ldr	r3, [sp, #8]
 800ab7c:	f003 0007 	and.w	r0, r3, #7
 800ab80:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ab84:	ecbd 8b02 	vpop	{d8}
 800ab88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d1f3      	bne.n	800ab7a <__kernel_rem_pio2+0x4da>
 800ab92:	9b05      	ldr	r3, [sp, #20]
 800ab94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ab98:	eb0d 0403 	add.w	r4, sp, r3
 800ab9c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800aba0:	4625      	mov	r5, r4
 800aba2:	46c2      	mov	sl, r8
 800aba4:	f1ba 0f00 	cmp.w	sl, #0
 800aba8:	dc69      	bgt.n	800ac7e <__kernel_rem_pio2+0x5de>
 800abaa:	4645      	mov	r5, r8
 800abac:	2d01      	cmp	r5, #1
 800abae:	f300 8087 	bgt.w	800acc0 <__kernel_rem_pio2+0x620>
 800abb2:	9c05      	ldr	r4, [sp, #20]
 800abb4:	ab48      	add	r3, sp, #288	@ 0x120
 800abb6:	441c      	add	r4, r3
 800abb8:	2000      	movs	r0, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	f1b8 0f01 	cmp.w	r8, #1
 800abc0:	f300 809c 	bgt.w	800acfc <__kernel_rem_pio2+0x65c>
 800abc4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800abc8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800abcc:	f1b9 0f00 	cmp.w	r9, #0
 800abd0:	f040 80a6 	bne.w	800ad20 <__kernel_rem_pio2+0x680>
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	e9c3 5600 	strd	r5, r6, [r3]
 800abda:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800abde:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800abe2:	e7ca      	b.n	800ab7a <__kernel_rem_pio2+0x4da>
 800abe4:	9d05      	ldr	r5, [sp, #20]
 800abe6:	ab48      	add	r3, sp, #288	@ 0x120
 800abe8:	441d      	add	r5, r3
 800abea:	4644      	mov	r4, r8
 800abec:	2000      	movs	r0, #0
 800abee:	2100      	movs	r1, #0
 800abf0:	2c00      	cmp	r4, #0
 800abf2:	da35      	bge.n	800ac60 <__kernel_rem_pio2+0x5c0>
 800abf4:	f1b9 0f00 	cmp.w	r9, #0
 800abf8:	d038      	beq.n	800ac6c <__kernel_rem_pio2+0x5cc>
 800abfa:	4602      	mov	r2, r0
 800abfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac00:	9c04      	ldr	r4, [sp, #16]
 800ac02:	e9c4 2300 	strd	r2, r3, [r4]
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ac0e:	f7f5 fb5b 	bl	80002c8 <__aeabi_dsub>
 800ac12:	ad4a      	add	r5, sp, #296	@ 0x128
 800ac14:	2401      	movs	r4, #1
 800ac16:	45a0      	cmp	r8, r4
 800ac18:	da2b      	bge.n	800ac72 <__kernel_rem_pio2+0x5d2>
 800ac1a:	f1b9 0f00 	cmp.w	r9, #0
 800ac1e:	d002      	beq.n	800ac26 <__kernel_rem_pio2+0x586>
 800ac20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac24:	4619      	mov	r1, r3
 800ac26:	9b04      	ldr	r3, [sp, #16]
 800ac28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ac2c:	e7a5      	b.n	800ab7a <__kernel_rem_pio2+0x4da>
 800ac2e:	9c05      	ldr	r4, [sp, #20]
 800ac30:	ab48      	add	r3, sp, #288	@ 0x120
 800ac32:	441c      	add	r4, r3
 800ac34:	2000      	movs	r0, #0
 800ac36:	2100      	movs	r1, #0
 800ac38:	f1b8 0f00 	cmp.w	r8, #0
 800ac3c:	da09      	bge.n	800ac52 <__kernel_rem_pio2+0x5b2>
 800ac3e:	f1b9 0f00 	cmp.w	r9, #0
 800ac42:	d002      	beq.n	800ac4a <__kernel_rem_pio2+0x5aa>
 800ac44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac48:	4619      	mov	r1, r3
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	e9c3 0100 	strd	r0, r1, [r3]
 800ac50:	e793      	b.n	800ab7a <__kernel_rem_pio2+0x4da>
 800ac52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac56:	f7f5 fb39 	bl	80002cc <__adddf3>
 800ac5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac5e:	e7eb      	b.n	800ac38 <__kernel_rem_pio2+0x598>
 800ac60:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ac64:	f7f5 fb32 	bl	80002cc <__adddf3>
 800ac68:	3c01      	subs	r4, #1
 800ac6a:	e7c1      	b.n	800abf0 <__kernel_rem_pio2+0x550>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	e7c6      	b.n	800ac00 <__kernel_rem_pio2+0x560>
 800ac72:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ac76:	f7f5 fb29 	bl	80002cc <__adddf3>
 800ac7a:	3401      	adds	r4, #1
 800ac7c:	e7cb      	b.n	800ac16 <__kernel_rem_pio2+0x576>
 800ac7e:	ed35 7b02 	vldmdb	r5!, {d7}
 800ac82:	ed8d 7b00 	vstr	d7, [sp]
 800ac86:	ed95 7b02 	vldr	d7, [r5, #8]
 800ac8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac8e:	ec53 2b17 	vmov	r2, r3, d7
 800ac92:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac96:	f7f5 fb19 	bl	80002cc <__adddf3>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4606      	mov	r6, r0
 800aca0:	460f      	mov	r7, r1
 800aca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca6:	f7f5 fb0f 	bl	80002c8 <__aeabi_dsub>
 800acaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acae:	f7f5 fb0d 	bl	80002cc <__adddf3>
 800acb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acb6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800acba:	e9c5 6700 	strd	r6, r7, [r5]
 800acbe:	e771      	b.n	800aba4 <__kernel_rem_pio2+0x504>
 800acc0:	ed34 7b02 	vldmdb	r4!, {d7}
 800acc4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800acc8:	ec51 0b17 	vmov	r0, r1, d7
 800accc:	4652      	mov	r2, sl
 800acce:	465b      	mov	r3, fp
 800acd0:	ed8d 7b00 	vstr	d7, [sp]
 800acd4:	f7f5 fafa 	bl	80002cc <__adddf3>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4606      	mov	r6, r0
 800acde:	460f      	mov	r7, r1
 800ace0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ace4:	f7f5 faf0 	bl	80002c8 <__aeabi_dsub>
 800ace8:	4652      	mov	r2, sl
 800acea:	465b      	mov	r3, fp
 800acec:	f7f5 faee 	bl	80002cc <__adddf3>
 800acf0:	3d01      	subs	r5, #1
 800acf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acf6:	e9c4 6700 	strd	r6, r7, [r4]
 800acfa:	e757      	b.n	800abac <__kernel_rem_pio2+0x50c>
 800acfc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad00:	f7f5 fae4 	bl	80002cc <__adddf3>
 800ad04:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad08:	e758      	b.n	800abbc <__kernel_rem_pio2+0x51c>
 800ad0a:	bf00      	nop
 800ad0c:	f3af 8000 	nop.w
	...
 800ad18:	41700000 	.word	0x41700000
 800ad1c:	3e700000 	.word	0x3e700000
 800ad20:	9b04      	ldr	r3, [sp, #16]
 800ad22:	9a04      	ldr	r2, [sp, #16]
 800ad24:	601d      	str	r5, [r3, #0]
 800ad26:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800ad2a:	605c      	str	r4, [r3, #4]
 800ad2c:	609f      	str	r7, [r3, #8]
 800ad2e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800ad32:	60d3      	str	r3, [r2, #12]
 800ad34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad38:	6110      	str	r0, [r2, #16]
 800ad3a:	6153      	str	r3, [r2, #20]
 800ad3c:	e71d      	b.n	800ab7a <__kernel_rem_pio2+0x4da>
 800ad3e:	bf00      	nop

0800ad40 <scalbn>:
 800ad40:	b570      	push	{r4, r5, r6, lr}
 800ad42:	ec55 4b10 	vmov	r4, r5, d0
 800ad46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	462b      	mov	r3, r5
 800ad4e:	b991      	cbnz	r1, 800ad76 <scalbn+0x36>
 800ad50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ad54:	4323      	orrs	r3, r4
 800ad56:	d03b      	beq.n	800add0 <scalbn+0x90>
 800ad58:	4b33      	ldr	r3, [pc, #204]	@ (800ae28 <scalbn+0xe8>)
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f7f5 fc6a 	bl	8000638 <__aeabi_dmul>
 800ad64:	4b31      	ldr	r3, [pc, #196]	@ (800ae2c <scalbn+0xec>)
 800ad66:	429e      	cmp	r6, r3
 800ad68:	4604      	mov	r4, r0
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	da0f      	bge.n	800ad8e <scalbn+0x4e>
 800ad6e:	a326      	add	r3, pc, #152	@ (adr r3, 800ae08 <scalbn+0xc8>)
 800ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad74:	e01e      	b.n	800adb4 <scalbn+0x74>
 800ad76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ad7a:	4291      	cmp	r1, r2
 800ad7c:	d10b      	bne.n	800ad96 <scalbn+0x56>
 800ad7e:	4622      	mov	r2, r4
 800ad80:	4620      	mov	r0, r4
 800ad82:	4629      	mov	r1, r5
 800ad84:	f7f5 faa2 	bl	80002cc <__adddf3>
 800ad88:	4604      	mov	r4, r0
 800ad8a:	460d      	mov	r5, r1
 800ad8c:	e020      	b.n	800add0 <scalbn+0x90>
 800ad8e:	460b      	mov	r3, r1
 800ad90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ad94:	3936      	subs	r1, #54	@ 0x36
 800ad96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ad9a:	4296      	cmp	r6, r2
 800ad9c:	dd0d      	ble.n	800adba <scalbn+0x7a>
 800ad9e:	2d00      	cmp	r5, #0
 800ada0:	a11b      	add	r1, pc, #108	@ (adr r1, 800ae10 <scalbn+0xd0>)
 800ada2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ada6:	da02      	bge.n	800adae <scalbn+0x6e>
 800ada8:	a11b      	add	r1, pc, #108	@ (adr r1, 800ae18 <scalbn+0xd8>)
 800adaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adae:	a318      	add	r3, pc, #96	@ (adr r3, 800ae10 <scalbn+0xd0>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	f7f5 fc40 	bl	8000638 <__aeabi_dmul>
 800adb8:	e7e6      	b.n	800ad88 <scalbn+0x48>
 800adba:	1872      	adds	r2, r6, r1
 800adbc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800adc0:	428a      	cmp	r2, r1
 800adc2:	dcec      	bgt.n	800ad9e <scalbn+0x5e>
 800adc4:	2a00      	cmp	r2, #0
 800adc6:	dd06      	ble.n	800add6 <scalbn+0x96>
 800adc8:	f36f 531e 	bfc	r3, #20, #11
 800adcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800add0:	ec45 4b10 	vmov	d0, r4, r5
 800add4:	bd70      	pop	{r4, r5, r6, pc}
 800add6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800adda:	da08      	bge.n	800adee <scalbn+0xae>
 800addc:	2d00      	cmp	r5, #0
 800adde:	a10a      	add	r1, pc, #40	@ (adr r1, 800ae08 <scalbn+0xc8>)
 800ade0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade4:	dac3      	bge.n	800ad6e <scalbn+0x2e>
 800ade6:	a10e      	add	r1, pc, #56	@ (adr r1, 800ae20 <scalbn+0xe0>)
 800ade8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adec:	e7bf      	b.n	800ad6e <scalbn+0x2e>
 800adee:	3236      	adds	r2, #54	@ 0x36
 800adf0:	f36f 531e 	bfc	r3, #20, #11
 800adf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800adf8:	4620      	mov	r0, r4
 800adfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ae30 <scalbn+0xf0>)
 800adfc:	4629      	mov	r1, r5
 800adfe:	2200      	movs	r2, #0
 800ae00:	e7d8      	b.n	800adb4 <scalbn+0x74>
 800ae02:	bf00      	nop
 800ae04:	f3af 8000 	nop.w
 800ae08:	c2f8f359 	.word	0xc2f8f359
 800ae0c:	01a56e1f 	.word	0x01a56e1f
 800ae10:	8800759c 	.word	0x8800759c
 800ae14:	7e37e43c 	.word	0x7e37e43c
 800ae18:	8800759c 	.word	0x8800759c
 800ae1c:	fe37e43c 	.word	0xfe37e43c
 800ae20:	c2f8f359 	.word	0xc2f8f359
 800ae24:	81a56e1f 	.word	0x81a56e1f
 800ae28:	43500000 	.word	0x43500000
 800ae2c:	ffff3cb0 	.word	0xffff3cb0
 800ae30:	3c900000 	.word	0x3c900000
 800ae34:	00000000 	.word	0x00000000

0800ae38 <floor>:
 800ae38:	ec51 0b10 	vmov	r0, r1, d0
 800ae3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae44:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ae48:	2e13      	cmp	r6, #19
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	4680      	mov	r8, r0
 800ae50:	dc34      	bgt.n	800aebc <floor+0x84>
 800ae52:	2e00      	cmp	r6, #0
 800ae54:	da17      	bge.n	800ae86 <floor+0x4e>
 800ae56:	a332      	add	r3, pc, #200	@ (adr r3, 800af20 <floor+0xe8>)
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f7f5 fa36 	bl	80002cc <__adddf3>
 800ae60:	2200      	movs	r2, #0
 800ae62:	2300      	movs	r3, #0
 800ae64:	f7f5 fe78 	bl	8000b58 <__aeabi_dcmpgt>
 800ae68:	b150      	cbz	r0, 800ae80 <floor+0x48>
 800ae6a:	2c00      	cmp	r4, #0
 800ae6c:	da55      	bge.n	800af1a <floor+0xe2>
 800ae6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ae72:	432c      	orrs	r4, r5
 800ae74:	2500      	movs	r5, #0
 800ae76:	42ac      	cmp	r4, r5
 800ae78:	4c2b      	ldr	r4, [pc, #172]	@ (800af28 <floor+0xf0>)
 800ae7a:	bf08      	it	eq
 800ae7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ae80:	4621      	mov	r1, r4
 800ae82:	4628      	mov	r0, r5
 800ae84:	e023      	b.n	800aece <floor+0x96>
 800ae86:	4f29      	ldr	r7, [pc, #164]	@ (800af2c <floor+0xf4>)
 800ae88:	4137      	asrs	r7, r6
 800ae8a:	ea01 0307 	and.w	r3, r1, r7
 800ae8e:	4303      	orrs	r3, r0
 800ae90:	d01d      	beq.n	800aece <floor+0x96>
 800ae92:	a323      	add	r3, pc, #140	@ (adr r3, 800af20 <floor+0xe8>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 fa18 	bl	80002cc <__adddf3>
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f7f5 fe5a 	bl	8000b58 <__aeabi_dcmpgt>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d0eb      	beq.n	800ae80 <floor+0x48>
 800aea8:	2c00      	cmp	r4, #0
 800aeaa:	bfbe      	ittt	lt
 800aeac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800aeb0:	4133      	asrlt	r3, r6
 800aeb2:	18e4      	addlt	r4, r4, r3
 800aeb4:	ea24 0407 	bic.w	r4, r4, r7
 800aeb8:	2500      	movs	r5, #0
 800aeba:	e7e1      	b.n	800ae80 <floor+0x48>
 800aebc:	2e33      	cmp	r6, #51	@ 0x33
 800aebe:	dd0a      	ble.n	800aed6 <floor+0x9e>
 800aec0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800aec4:	d103      	bne.n	800aece <floor+0x96>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	f7f5 f9ff 	bl	80002cc <__adddf3>
 800aece:	ec41 0b10 	vmov	d0, r0, r1
 800aed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800aeda:	f04f 37ff 	mov.w	r7, #4294967295
 800aede:	40df      	lsrs	r7, r3
 800aee0:	4207      	tst	r7, r0
 800aee2:	d0f4      	beq.n	800aece <floor+0x96>
 800aee4:	a30e      	add	r3, pc, #56	@ (adr r3, 800af20 <floor+0xe8>)
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	f7f5 f9ef 	bl	80002cc <__adddf3>
 800aeee:	2200      	movs	r2, #0
 800aef0:	2300      	movs	r3, #0
 800aef2:	f7f5 fe31 	bl	8000b58 <__aeabi_dcmpgt>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d0c2      	beq.n	800ae80 <floor+0x48>
 800aefa:	2c00      	cmp	r4, #0
 800aefc:	da0a      	bge.n	800af14 <floor+0xdc>
 800aefe:	2e14      	cmp	r6, #20
 800af00:	d101      	bne.n	800af06 <floor+0xce>
 800af02:	3401      	adds	r4, #1
 800af04:	e006      	b.n	800af14 <floor+0xdc>
 800af06:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800af0a:	2301      	movs	r3, #1
 800af0c:	40b3      	lsls	r3, r6
 800af0e:	441d      	add	r5, r3
 800af10:	4545      	cmp	r5, r8
 800af12:	d3f6      	bcc.n	800af02 <floor+0xca>
 800af14:	ea25 0507 	bic.w	r5, r5, r7
 800af18:	e7b2      	b.n	800ae80 <floor+0x48>
 800af1a:	2500      	movs	r5, #0
 800af1c:	462c      	mov	r4, r5
 800af1e:	e7af      	b.n	800ae80 <floor+0x48>
 800af20:	8800759c 	.word	0x8800759c
 800af24:	7e37e43c 	.word	0x7e37e43c
 800af28:	bff00000 	.word	0xbff00000
 800af2c:	000fffff 	.word	0x000fffff

0800af30 <malloc>:
 800af30:	4b02      	ldr	r3, [pc, #8]	@ (800af3c <malloc+0xc>)
 800af32:	4601      	mov	r1, r0
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	f000 b82d 	b.w	800af94 <_malloc_r>
 800af3a:	bf00      	nop
 800af3c:	2000000c 	.word	0x2000000c

0800af40 <free>:
 800af40:	4b02      	ldr	r3, [pc, #8]	@ (800af4c <free+0xc>)
 800af42:	4601      	mov	r1, r0
 800af44:	6818      	ldr	r0, [r3, #0]
 800af46:	f000 b953 	b.w	800b1f0 <_free_r>
 800af4a:	bf00      	nop
 800af4c:	2000000c 	.word	0x2000000c

0800af50 <sbrk_aligned>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	4e0f      	ldr	r6, [pc, #60]	@ (800af90 <sbrk_aligned+0x40>)
 800af54:	460c      	mov	r4, r1
 800af56:	6831      	ldr	r1, [r6, #0]
 800af58:	4605      	mov	r5, r0
 800af5a:	b911      	cbnz	r1, 800af62 <sbrk_aligned+0x12>
 800af5c:	f000 f8fe 	bl	800b15c <_sbrk_r>
 800af60:	6030      	str	r0, [r6, #0]
 800af62:	4621      	mov	r1, r4
 800af64:	4628      	mov	r0, r5
 800af66:	f000 f8f9 	bl	800b15c <_sbrk_r>
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	d103      	bne.n	800af76 <sbrk_aligned+0x26>
 800af6e:	f04f 34ff 	mov.w	r4, #4294967295
 800af72:	4620      	mov	r0, r4
 800af74:	bd70      	pop	{r4, r5, r6, pc}
 800af76:	1cc4      	adds	r4, r0, #3
 800af78:	f024 0403 	bic.w	r4, r4, #3
 800af7c:	42a0      	cmp	r0, r4
 800af7e:	d0f8      	beq.n	800af72 <sbrk_aligned+0x22>
 800af80:	1a21      	subs	r1, r4, r0
 800af82:	4628      	mov	r0, r5
 800af84:	f000 f8ea 	bl	800b15c <_sbrk_r>
 800af88:	3001      	adds	r0, #1
 800af8a:	d1f2      	bne.n	800af72 <sbrk_aligned+0x22>
 800af8c:	e7ef      	b.n	800af6e <sbrk_aligned+0x1e>
 800af8e:	bf00      	nop
 800af90:	20000974 	.word	0x20000974

0800af94 <_malloc_r>:
 800af94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af98:	1ccd      	adds	r5, r1, #3
 800af9a:	f025 0503 	bic.w	r5, r5, #3
 800af9e:	3508      	adds	r5, #8
 800afa0:	2d0c      	cmp	r5, #12
 800afa2:	bf38      	it	cc
 800afa4:	250c      	movcc	r5, #12
 800afa6:	2d00      	cmp	r5, #0
 800afa8:	4606      	mov	r6, r0
 800afaa:	db01      	blt.n	800afb0 <_malloc_r+0x1c>
 800afac:	42a9      	cmp	r1, r5
 800afae:	d904      	bls.n	800afba <_malloc_r+0x26>
 800afb0:	230c      	movs	r3, #12
 800afb2:	6033      	str	r3, [r6, #0]
 800afb4:	2000      	movs	r0, #0
 800afb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b090 <_malloc_r+0xfc>
 800afbe:	f000 f869 	bl	800b094 <__malloc_lock>
 800afc2:	f8d8 3000 	ldr.w	r3, [r8]
 800afc6:	461c      	mov	r4, r3
 800afc8:	bb44      	cbnz	r4, 800b01c <_malloc_r+0x88>
 800afca:	4629      	mov	r1, r5
 800afcc:	4630      	mov	r0, r6
 800afce:	f7ff ffbf 	bl	800af50 <sbrk_aligned>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	4604      	mov	r4, r0
 800afd6:	d158      	bne.n	800b08a <_malloc_r+0xf6>
 800afd8:	f8d8 4000 	ldr.w	r4, [r8]
 800afdc:	4627      	mov	r7, r4
 800afde:	2f00      	cmp	r7, #0
 800afe0:	d143      	bne.n	800b06a <_malloc_r+0xd6>
 800afe2:	2c00      	cmp	r4, #0
 800afe4:	d04b      	beq.n	800b07e <_malloc_r+0xea>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	4639      	mov	r1, r7
 800afea:	4630      	mov	r0, r6
 800afec:	eb04 0903 	add.w	r9, r4, r3
 800aff0:	f000 f8b4 	bl	800b15c <_sbrk_r>
 800aff4:	4581      	cmp	r9, r0
 800aff6:	d142      	bne.n	800b07e <_malloc_r+0xea>
 800aff8:	6821      	ldr	r1, [r4, #0]
 800affa:	1a6d      	subs	r5, r5, r1
 800affc:	4629      	mov	r1, r5
 800affe:	4630      	mov	r0, r6
 800b000:	f7ff ffa6 	bl	800af50 <sbrk_aligned>
 800b004:	3001      	adds	r0, #1
 800b006:	d03a      	beq.n	800b07e <_malloc_r+0xea>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	442b      	add	r3, r5
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	f8d8 3000 	ldr.w	r3, [r8]
 800b012:	685a      	ldr	r2, [r3, #4]
 800b014:	bb62      	cbnz	r2, 800b070 <_malloc_r+0xdc>
 800b016:	f8c8 7000 	str.w	r7, [r8]
 800b01a:	e00f      	b.n	800b03c <_malloc_r+0xa8>
 800b01c:	6822      	ldr	r2, [r4, #0]
 800b01e:	1b52      	subs	r2, r2, r5
 800b020:	d420      	bmi.n	800b064 <_malloc_r+0xd0>
 800b022:	2a0b      	cmp	r2, #11
 800b024:	d917      	bls.n	800b056 <_malloc_r+0xc2>
 800b026:	1961      	adds	r1, r4, r5
 800b028:	42a3      	cmp	r3, r4
 800b02a:	6025      	str	r5, [r4, #0]
 800b02c:	bf18      	it	ne
 800b02e:	6059      	strne	r1, [r3, #4]
 800b030:	6863      	ldr	r3, [r4, #4]
 800b032:	bf08      	it	eq
 800b034:	f8c8 1000 	streq.w	r1, [r8]
 800b038:	5162      	str	r2, [r4, r5]
 800b03a:	604b      	str	r3, [r1, #4]
 800b03c:	4630      	mov	r0, r6
 800b03e:	f000 f82f 	bl	800b0a0 <__malloc_unlock>
 800b042:	f104 000b 	add.w	r0, r4, #11
 800b046:	1d23      	adds	r3, r4, #4
 800b048:	f020 0007 	bic.w	r0, r0, #7
 800b04c:	1ac2      	subs	r2, r0, r3
 800b04e:	bf1c      	itt	ne
 800b050:	1a1b      	subne	r3, r3, r0
 800b052:	50a3      	strne	r3, [r4, r2]
 800b054:	e7af      	b.n	800afb6 <_malloc_r+0x22>
 800b056:	6862      	ldr	r2, [r4, #4]
 800b058:	42a3      	cmp	r3, r4
 800b05a:	bf0c      	ite	eq
 800b05c:	f8c8 2000 	streq.w	r2, [r8]
 800b060:	605a      	strne	r2, [r3, #4]
 800b062:	e7eb      	b.n	800b03c <_malloc_r+0xa8>
 800b064:	4623      	mov	r3, r4
 800b066:	6864      	ldr	r4, [r4, #4]
 800b068:	e7ae      	b.n	800afc8 <_malloc_r+0x34>
 800b06a:	463c      	mov	r4, r7
 800b06c:	687f      	ldr	r7, [r7, #4]
 800b06e:	e7b6      	b.n	800afde <_malloc_r+0x4a>
 800b070:	461a      	mov	r2, r3
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	42a3      	cmp	r3, r4
 800b076:	d1fb      	bne.n	800b070 <_malloc_r+0xdc>
 800b078:	2300      	movs	r3, #0
 800b07a:	6053      	str	r3, [r2, #4]
 800b07c:	e7de      	b.n	800b03c <_malloc_r+0xa8>
 800b07e:	230c      	movs	r3, #12
 800b080:	6033      	str	r3, [r6, #0]
 800b082:	4630      	mov	r0, r6
 800b084:	f000 f80c 	bl	800b0a0 <__malloc_unlock>
 800b088:	e794      	b.n	800afb4 <_malloc_r+0x20>
 800b08a:	6005      	str	r5, [r0, #0]
 800b08c:	e7d6      	b.n	800b03c <_malloc_r+0xa8>
 800b08e:	bf00      	nop
 800b090:	20000978 	.word	0x20000978

0800b094 <__malloc_lock>:
 800b094:	4801      	ldr	r0, [pc, #4]	@ (800b09c <__malloc_lock+0x8>)
 800b096:	f000 b89b 	b.w	800b1d0 <__retarget_lock_acquire_recursive>
 800b09a:	bf00      	nop
 800b09c:	20000ab8 	.word	0x20000ab8

0800b0a0 <__malloc_unlock>:
 800b0a0:	4801      	ldr	r0, [pc, #4]	@ (800b0a8 <__malloc_unlock+0x8>)
 800b0a2:	f000 b896 	b.w	800b1d2 <__retarget_lock_release_recursive>
 800b0a6:	bf00      	nop
 800b0a8:	20000ab8 	.word	0x20000ab8

0800b0ac <sniprintf>:
 800b0ac:	b40c      	push	{r2, r3}
 800b0ae:	b530      	push	{r4, r5, lr}
 800b0b0:	4b18      	ldr	r3, [pc, #96]	@ (800b114 <sniprintf+0x68>)
 800b0b2:	1e0c      	subs	r4, r1, #0
 800b0b4:	681d      	ldr	r5, [r3, #0]
 800b0b6:	b09d      	sub	sp, #116	@ 0x74
 800b0b8:	da08      	bge.n	800b0cc <sniprintf+0x20>
 800b0ba:	238b      	movs	r3, #139	@ 0x8b
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c2:	b01d      	add	sp, #116	@ 0x74
 800b0c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0c8:	b002      	add	sp, #8
 800b0ca:	4770      	bx	lr
 800b0cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b0d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b0da:	bf14      	ite	ne
 800b0dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0e0:	4623      	moveq	r3, r4
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	9307      	str	r3, [sp, #28]
 800b0e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0ea:	9002      	str	r0, [sp, #8]
 800b0ec:	9006      	str	r0, [sp, #24]
 800b0ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b0f4:	ab21      	add	r3, sp, #132	@ 0x84
 800b0f6:	a902      	add	r1, sp, #8
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	9301      	str	r3, [sp, #4]
 800b0fc:	f000 f91e 	bl	800b33c <_svfiprintf_r>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	bfbc      	itt	lt
 800b104:	238b      	movlt	r3, #139	@ 0x8b
 800b106:	602b      	strlt	r3, [r5, #0]
 800b108:	2c00      	cmp	r4, #0
 800b10a:	d0da      	beq.n	800b0c2 <sniprintf+0x16>
 800b10c:	9b02      	ldr	r3, [sp, #8]
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	e7d6      	b.n	800b0c2 <sniprintf+0x16>
 800b114:	2000000c 	.word	0x2000000c

0800b118 <memmove>:
 800b118:	4288      	cmp	r0, r1
 800b11a:	b510      	push	{r4, lr}
 800b11c:	eb01 0402 	add.w	r4, r1, r2
 800b120:	d902      	bls.n	800b128 <memmove+0x10>
 800b122:	4284      	cmp	r4, r0
 800b124:	4623      	mov	r3, r4
 800b126:	d807      	bhi.n	800b138 <memmove+0x20>
 800b128:	1e43      	subs	r3, r0, #1
 800b12a:	42a1      	cmp	r1, r4
 800b12c:	d008      	beq.n	800b140 <memmove+0x28>
 800b12e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b132:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b136:	e7f8      	b.n	800b12a <memmove+0x12>
 800b138:	4402      	add	r2, r0
 800b13a:	4601      	mov	r1, r0
 800b13c:	428a      	cmp	r2, r1
 800b13e:	d100      	bne.n	800b142 <memmove+0x2a>
 800b140:	bd10      	pop	{r4, pc}
 800b142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b14a:	e7f7      	b.n	800b13c <memmove+0x24>

0800b14c <memset>:
 800b14c:	4402      	add	r2, r0
 800b14e:	4603      	mov	r3, r0
 800b150:	4293      	cmp	r3, r2
 800b152:	d100      	bne.n	800b156 <memset+0xa>
 800b154:	4770      	bx	lr
 800b156:	f803 1b01 	strb.w	r1, [r3], #1
 800b15a:	e7f9      	b.n	800b150 <memset+0x4>

0800b15c <_sbrk_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d06      	ldr	r5, [pc, #24]	@ (800b178 <_sbrk_r+0x1c>)
 800b160:	2300      	movs	r3, #0
 800b162:	4604      	mov	r4, r0
 800b164:	4608      	mov	r0, r1
 800b166:	602b      	str	r3, [r5, #0]
 800b168:	f7f7 f9d2 	bl	8002510 <_sbrk>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d102      	bne.n	800b176 <_sbrk_r+0x1a>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	b103      	cbz	r3, 800b176 <_sbrk_r+0x1a>
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	20000ab4 	.word	0x20000ab4

0800b17c <__errno>:
 800b17c:	4b01      	ldr	r3, [pc, #4]	@ (800b184 <__errno+0x8>)
 800b17e:	6818      	ldr	r0, [r3, #0]
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	2000000c 	.word	0x2000000c

0800b188 <__libc_init_array>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	4d0d      	ldr	r5, [pc, #52]	@ (800b1c0 <__libc_init_array+0x38>)
 800b18c:	4c0d      	ldr	r4, [pc, #52]	@ (800b1c4 <__libc_init_array+0x3c>)
 800b18e:	1b64      	subs	r4, r4, r5
 800b190:	10a4      	asrs	r4, r4, #2
 800b192:	2600      	movs	r6, #0
 800b194:	42a6      	cmp	r6, r4
 800b196:	d109      	bne.n	800b1ac <__libc_init_array+0x24>
 800b198:	4d0b      	ldr	r5, [pc, #44]	@ (800b1c8 <__libc_init_array+0x40>)
 800b19a:	4c0c      	ldr	r4, [pc, #48]	@ (800b1cc <__libc_init_array+0x44>)
 800b19c:	f000 fb8c 	bl	800b8b8 <_init>
 800b1a0:	1b64      	subs	r4, r4, r5
 800b1a2:	10a4      	asrs	r4, r4, #2
 800b1a4:	2600      	movs	r6, #0
 800b1a6:	42a6      	cmp	r6, r4
 800b1a8:	d105      	bne.n	800b1b6 <__libc_init_array+0x2e>
 800b1aa:	bd70      	pop	{r4, r5, r6, pc}
 800b1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b0:	4798      	blx	r3
 800b1b2:	3601      	adds	r6, #1
 800b1b4:	e7ee      	b.n	800b194 <__libc_init_array+0xc>
 800b1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ba:	4798      	blx	r3
 800b1bc:	3601      	adds	r6, #1
 800b1be:	e7f2      	b.n	800b1a6 <__libc_init_array+0x1e>
 800b1c0:	0800c940 	.word	0x0800c940
 800b1c4:	0800c940 	.word	0x0800c940
 800b1c8:	0800c940 	.word	0x0800c940
 800b1cc:	0800c944 	.word	0x0800c944

0800b1d0 <__retarget_lock_acquire_recursive>:
 800b1d0:	4770      	bx	lr

0800b1d2 <__retarget_lock_release_recursive>:
 800b1d2:	4770      	bx	lr

0800b1d4 <memcpy>:
 800b1d4:	440a      	add	r2, r1
 800b1d6:	4291      	cmp	r1, r2
 800b1d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1dc:	d100      	bne.n	800b1e0 <memcpy+0xc>
 800b1de:	4770      	bx	lr
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	d1f9      	bne.n	800b1e2 <memcpy+0xe>
 800b1ee:	bd10      	pop	{r4, pc}

0800b1f0 <_free_r>:
 800b1f0:	b538      	push	{r3, r4, r5, lr}
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	d041      	beq.n	800b27c <_free_r+0x8c>
 800b1f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1fc:	1f0c      	subs	r4, r1, #4
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	bfb8      	it	lt
 800b202:	18e4      	addlt	r4, r4, r3
 800b204:	f7ff ff46 	bl	800b094 <__malloc_lock>
 800b208:	4a1d      	ldr	r2, [pc, #116]	@ (800b280 <_free_r+0x90>)
 800b20a:	6813      	ldr	r3, [r2, #0]
 800b20c:	b933      	cbnz	r3, 800b21c <_free_r+0x2c>
 800b20e:	6063      	str	r3, [r4, #4]
 800b210:	6014      	str	r4, [r2, #0]
 800b212:	4628      	mov	r0, r5
 800b214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b218:	f7ff bf42 	b.w	800b0a0 <__malloc_unlock>
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	d908      	bls.n	800b232 <_free_r+0x42>
 800b220:	6820      	ldr	r0, [r4, #0]
 800b222:	1821      	adds	r1, r4, r0
 800b224:	428b      	cmp	r3, r1
 800b226:	bf01      	itttt	eq
 800b228:	6819      	ldreq	r1, [r3, #0]
 800b22a:	685b      	ldreq	r3, [r3, #4]
 800b22c:	1809      	addeq	r1, r1, r0
 800b22e:	6021      	streq	r1, [r4, #0]
 800b230:	e7ed      	b.n	800b20e <_free_r+0x1e>
 800b232:	461a      	mov	r2, r3
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	b10b      	cbz	r3, 800b23c <_free_r+0x4c>
 800b238:	42a3      	cmp	r3, r4
 800b23a:	d9fa      	bls.n	800b232 <_free_r+0x42>
 800b23c:	6811      	ldr	r1, [r2, #0]
 800b23e:	1850      	adds	r0, r2, r1
 800b240:	42a0      	cmp	r0, r4
 800b242:	d10b      	bne.n	800b25c <_free_r+0x6c>
 800b244:	6820      	ldr	r0, [r4, #0]
 800b246:	4401      	add	r1, r0
 800b248:	1850      	adds	r0, r2, r1
 800b24a:	4283      	cmp	r3, r0
 800b24c:	6011      	str	r1, [r2, #0]
 800b24e:	d1e0      	bne.n	800b212 <_free_r+0x22>
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	6053      	str	r3, [r2, #4]
 800b256:	4408      	add	r0, r1
 800b258:	6010      	str	r0, [r2, #0]
 800b25a:	e7da      	b.n	800b212 <_free_r+0x22>
 800b25c:	d902      	bls.n	800b264 <_free_r+0x74>
 800b25e:	230c      	movs	r3, #12
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	e7d6      	b.n	800b212 <_free_r+0x22>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	1821      	adds	r1, r4, r0
 800b268:	428b      	cmp	r3, r1
 800b26a:	bf04      	itt	eq
 800b26c:	6819      	ldreq	r1, [r3, #0]
 800b26e:	685b      	ldreq	r3, [r3, #4]
 800b270:	6063      	str	r3, [r4, #4]
 800b272:	bf04      	itt	eq
 800b274:	1809      	addeq	r1, r1, r0
 800b276:	6021      	streq	r1, [r4, #0]
 800b278:	6054      	str	r4, [r2, #4]
 800b27a:	e7ca      	b.n	800b212 <_free_r+0x22>
 800b27c:	bd38      	pop	{r3, r4, r5, pc}
 800b27e:	bf00      	nop
 800b280:	20000978 	.word	0x20000978

0800b284 <__ssputs_r>:
 800b284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b288:	688e      	ldr	r6, [r1, #8]
 800b28a:	461f      	mov	r7, r3
 800b28c:	42be      	cmp	r6, r7
 800b28e:	680b      	ldr	r3, [r1, #0]
 800b290:	4682      	mov	sl, r0
 800b292:	460c      	mov	r4, r1
 800b294:	4690      	mov	r8, r2
 800b296:	d82d      	bhi.n	800b2f4 <__ssputs_r+0x70>
 800b298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b29c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b2a0:	d026      	beq.n	800b2f0 <__ssputs_r+0x6c>
 800b2a2:	6965      	ldr	r5, [r4, #20]
 800b2a4:	6909      	ldr	r1, [r1, #16]
 800b2a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2aa:	eba3 0901 	sub.w	r9, r3, r1
 800b2ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2b2:	1c7b      	adds	r3, r7, #1
 800b2b4:	444b      	add	r3, r9
 800b2b6:	106d      	asrs	r5, r5, #1
 800b2b8:	429d      	cmp	r5, r3
 800b2ba:	bf38      	it	cc
 800b2bc:	461d      	movcc	r5, r3
 800b2be:	0553      	lsls	r3, r2, #21
 800b2c0:	d527      	bpl.n	800b312 <__ssputs_r+0x8e>
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7ff fe66 	bl	800af94 <_malloc_r>
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	b360      	cbz	r0, 800b326 <__ssputs_r+0xa2>
 800b2cc:	6921      	ldr	r1, [r4, #16]
 800b2ce:	464a      	mov	r2, r9
 800b2d0:	f7ff ff80 	bl	800b1d4 <memcpy>
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2de:	81a3      	strh	r3, [r4, #12]
 800b2e0:	6126      	str	r6, [r4, #16]
 800b2e2:	6165      	str	r5, [r4, #20]
 800b2e4:	444e      	add	r6, r9
 800b2e6:	eba5 0509 	sub.w	r5, r5, r9
 800b2ea:	6026      	str	r6, [r4, #0]
 800b2ec:	60a5      	str	r5, [r4, #8]
 800b2ee:	463e      	mov	r6, r7
 800b2f0:	42be      	cmp	r6, r7
 800b2f2:	d900      	bls.n	800b2f6 <__ssputs_r+0x72>
 800b2f4:	463e      	mov	r6, r7
 800b2f6:	6820      	ldr	r0, [r4, #0]
 800b2f8:	4632      	mov	r2, r6
 800b2fa:	4641      	mov	r1, r8
 800b2fc:	f7ff ff0c 	bl	800b118 <memmove>
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	1b9b      	subs	r3, r3, r6
 800b304:	60a3      	str	r3, [r4, #8]
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	4433      	add	r3, r6
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	2000      	movs	r0, #0
 800b30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b312:	462a      	mov	r2, r5
 800b314:	f000 fa9a 	bl	800b84c <_realloc_r>
 800b318:	4606      	mov	r6, r0
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d1e0      	bne.n	800b2e0 <__ssputs_r+0x5c>
 800b31e:	6921      	ldr	r1, [r4, #16]
 800b320:	4650      	mov	r0, sl
 800b322:	f7ff ff65 	bl	800b1f0 <_free_r>
 800b326:	230c      	movs	r3, #12
 800b328:	f8ca 3000 	str.w	r3, [sl]
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b332:	81a3      	strh	r3, [r4, #12]
 800b334:	f04f 30ff 	mov.w	r0, #4294967295
 800b338:	e7e9      	b.n	800b30e <__ssputs_r+0x8a>
	...

0800b33c <_svfiprintf_r>:
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	4698      	mov	r8, r3
 800b342:	898b      	ldrh	r3, [r1, #12]
 800b344:	061b      	lsls	r3, r3, #24
 800b346:	b09d      	sub	sp, #116	@ 0x74
 800b348:	4607      	mov	r7, r0
 800b34a:	460d      	mov	r5, r1
 800b34c:	4614      	mov	r4, r2
 800b34e:	d510      	bpl.n	800b372 <_svfiprintf_r+0x36>
 800b350:	690b      	ldr	r3, [r1, #16]
 800b352:	b973      	cbnz	r3, 800b372 <_svfiprintf_r+0x36>
 800b354:	2140      	movs	r1, #64	@ 0x40
 800b356:	f7ff fe1d 	bl	800af94 <_malloc_r>
 800b35a:	6028      	str	r0, [r5, #0]
 800b35c:	6128      	str	r0, [r5, #16]
 800b35e:	b930      	cbnz	r0, 800b36e <_svfiprintf_r+0x32>
 800b360:	230c      	movs	r3, #12
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	b01d      	add	sp, #116	@ 0x74
 800b36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36e:	2340      	movs	r3, #64	@ 0x40
 800b370:	616b      	str	r3, [r5, #20]
 800b372:	2300      	movs	r3, #0
 800b374:	9309      	str	r3, [sp, #36]	@ 0x24
 800b376:	2320      	movs	r3, #32
 800b378:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b37c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b380:	2330      	movs	r3, #48	@ 0x30
 800b382:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b520 <_svfiprintf_r+0x1e4>
 800b386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b38a:	f04f 0901 	mov.w	r9, #1
 800b38e:	4623      	mov	r3, r4
 800b390:	469a      	mov	sl, r3
 800b392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b396:	b10a      	cbz	r2, 800b39c <_svfiprintf_r+0x60>
 800b398:	2a25      	cmp	r2, #37	@ 0x25
 800b39a:	d1f9      	bne.n	800b390 <_svfiprintf_r+0x54>
 800b39c:	ebba 0b04 	subs.w	fp, sl, r4
 800b3a0:	d00b      	beq.n	800b3ba <_svfiprintf_r+0x7e>
 800b3a2:	465b      	mov	r3, fp
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7ff ff6b 	bl	800b284 <__ssputs_r>
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f000 80a7 	beq.w	800b502 <_svfiprintf_r+0x1c6>
 800b3b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3b6:	445a      	add	r2, fp
 800b3b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f000 809f 	beq.w	800b502 <_svfiprintf_r+0x1c6>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ce:	f10a 0a01 	add.w	sl, sl, #1
 800b3d2:	9304      	str	r3, [sp, #16]
 800b3d4:	9307      	str	r3, [sp, #28]
 800b3d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3da:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3dc:	4654      	mov	r4, sl
 800b3de:	2205      	movs	r2, #5
 800b3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e4:	484e      	ldr	r0, [pc, #312]	@ (800b520 <_svfiprintf_r+0x1e4>)
 800b3e6:	f7f4 ff1b 	bl	8000220 <memchr>
 800b3ea:	9a04      	ldr	r2, [sp, #16]
 800b3ec:	b9d8      	cbnz	r0, 800b426 <_svfiprintf_r+0xea>
 800b3ee:	06d0      	lsls	r0, r2, #27
 800b3f0:	bf44      	itt	mi
 800b3f2:	2320      	movmi	r3, #32
 800b3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3f8:	0711      	lsls	r1, r2, #28
 800b3fa:	bf44      	itt	mi
 800b3fc:	232b      	movmi	r3, #43	@ 0x2b
 800b3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b402:	f89a 3000 	ldrb.w	r3, [sl]
 800b406:	2b2a      	cmp	r3, #42	@ 0x2a
 800b408:	d015      	beq.n	800b436 <_svfiprintf_r+0xfa>
 800b40a:	9a07      	ldr	r2, [sp, #28]
 800b40c:	4654      	mov	r4, sl
 800b40e:	2000      	movs	r0, #0
 800b410:	f04f 0c0a 	mov.w	ip, #10
 800b414:	4621      	mov	r1, r4
 800b416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b41a:	3b30      	subs	r3, #48	@ 0x30
 800b41c:	2b09      	cmp	r3, #9
 800b41e:	d94b      	bls.n	800b4b8 <_svfiprintf_r+0x17c>
 800b420:	b1b0      	cbz	r0, 800b450 <_svfiprintf_r+0x114>
 800b422:	9207      	str	r2, [sp, #28]
 800b424:	e014      	b.n	800b450 <_svfiprintf_r+0x114>
 800b426:	eba0 0308 	sub.w	r3, r0, r8
 800b42a:	fa09 f303 	lsl.w	r3, r9, r3
 800b42e:	4313      	orrs	r3, r2
 800b430:	9304      	str	r3, [sp, #16]
 800b432:	46a2      	mov	sl, r4
 800b434:	e7d2      	b.n	800b3dc <_svfiprintf_r+0xa0>
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	1d19      	adds	r1, r3, #4
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	9103      	str	r1, [sp, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	bfbb      	ittet	lt
 800b442:	425b      	neglt	r3, r3
 800b444:	f042 0202 	orrlt.w	r2, r2, #2
 800b448:	9307      	strge	r3, [sp, #28]
 800b44a:	9307      	strlt	r3, [sp, #28]
 800b44c:	bfb8      	it	lt
 800b44e:	9204      	strlt	r2, [sp, #16]
 800b450:	7823      	ldrb	r3, [r4, #0]
 800b452:	2b2e      	cmp	r3, #46	@ 0x2e
 800b454:	d10a      	bne.n	800b46c <_svfiprintf_r+0x130>
 800b456:	7863      	ldrb	r3, [r4, #1]
 800b458:	2b2a      	cmp	r3, #42	@ 0x2a
 800b45a:	d132      	bne.n	800b4c2 <_svfiprintf_r+0x186>
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	1d1a      	adds	r2, r3, #4
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	9203      	str	r2, [sp, #12]
 800b464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b468:	3402      	adds	r4, #2
 800b46a:	9305      	str	r3, [sp, #20]
 800b46c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b530 <_svfiprintf_r+0x1f4>
 800b470:	7821      	ldrb	r1, [r4, #0]
 800b472:	2203      	movs	r2, #3
 800b474:	4650      	mov	r0, sl
 800b476:	f7f4 fed3 	bl	8000220 <memchr>
 800b47a:	b138      	cbz	r0, 800b48c <_svfiprintf_r+0x150>
 800b47c:	9b04      	ldr	r3, [sp, #16]
 800b47e:	eba0 000a 	sub.w	r0, r0, sl
 800b482:	2240      	movs	r2, #64	@ 0x40
 800b484:	4082      	lsls	r2, r0
 800b486:	4313      	orrs	r3, r2
 800b488:	3401      	adds	r4, #1
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b490:	4824      	ldr	r0, [pc, #144]	@ (800b524 <_svfiprintf_r+0x1e8>)
 800b492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b496:	2206      	movs	r2, #6
 800b498:	f7f4 fec2 	bl	8000220 <memchr>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d036      	beq.n	800b50e <_svfiprintf_r+0x1d2>
 800b4a0:	4b21      	ldr	r3, [pc, #132]	@ (800b528 <_svfiprintf_r+0x1ec>)
 800b4a2:	bb1b      	cbnz	r3, 800b4ec <_svfiprintf_r+0x1b0>
 800b4a4:	9b03      	ldr	r3, [sp, #12]
 800b4a6:	3307      	adds	r3, #7
 800b4a8:	f023 0307 	bic.w	r3, r3, #7
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	9303      	str	r3, [sp, #12]
 800b4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b2:	4433      	add	r3, r6
 800b4b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4b6:	e76a      	b.n	800b38e <_svfiprintf_r+0x52>
 800b4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4bc:	460c      	mov	r4, r1
 800b4be:	2001      	movs	r0, #1
 800b4c0:	e7a8      	b.n	800b414 <_svfiprintf_r+0xd8>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	3401      	adds	r4, #1
 800b4c6:	9305      	str	r3, [sp, #20]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	f04f 0c0a 	mov.w	ip, #10
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4d4:	3a30      	subs	r2, #48	@ 0x30
 800b4d6:	2a09      	cmp	r2, #9
 800b4d8:	d903      	bls.n	800b4e2 <_svfiprintf_r+0x1a6>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0c6      	beq.n	800b46c <_svfiprintf_r+0x130>
 800b4de:	9105      	str	r1, [sp, #20]
 800b4e0:	e7c4      	b.n	800b46c <_svfiprintf_r+0x130>
 800b4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e7f0      	b.n	800b4ce <_svfiprintf_r+0x192>
 800b4ec:	ab03      	add	r3, sp, #12
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	462a      	mov	r2, r5
 800b4f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b52c <_svfiprintf_r+0x1f0>)
 800b4f4:	a904      	add	r1, sp, #16
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	f3af 8000 	nop.w
 800b4fc:	1c42      	adds	r2, r0, #1
 800b4fe:	4606      	mov	r6, r0
 800b500:	d1d6      	bne.n	800b4b0 <_svfiprintf_r+0x174>
 800b502:	89ab      	ldrh	r3, [r5, #12]
 800b504:	065b      	lsls	r3, r3, #25
 800b506:	f53f af2d 	bmi.w	800b364 <_svfiprintf_r+0x28>
 800b50a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b50c:	e72c      	b.n	800b368 <_svfiprintf_r+0x2c>
 800b50e:	ab03      	add	r3, sp, #12
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	462a      	mov	r2, r5
 800b514:	4b05      	ldr	r3, [pc, #20]	@ (800b52c <_svfiprintf_r+0x1f0>)
 800b516:	a904      	add	r1, sp, #16
 800b518:	4638      	mov	r0, r7
 800b51a:	f000 f879 	bl	800b610 <_printf_i>
 800b51e:	e7ed      	b.n	800b4fc <_svfiprintf_r+0x1c0>
 800b520:	0800c6d8 	.word	0x0800c6d8
 800b524:	0800c6e2 	.word	0x0800c6e2
 800b528:	00000000 	.word	0x00000000
 800b52c:	0800b285 	.word	0x0800b285
 800b530:	0800c6de 	.word	0x0800c6de

0800b534 <_printf_common>:
 800b534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b538:	4616      	mov	r6, r2
 800b53a:	4698      	mov	r8, r3
 800b53c:	688a      	ldr	r2, [r1, #8]
 800b53e:	690b      	ldr	r3, [r1, #16]
 800b540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b544:	4293      	cmp	r3, r2
 800b546:	bfb8      	it	lt
 800b548:	4613      	movlt	r3, r2
 800b54a:	6033      	str	r3, [r6, #0]
 800b54c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b550:	4607      	mov	r7, r0
 800b552:	460c      	mov	r4, r1
 800b554:	b10a      	cbz	r2, 800b55a <_printf_common+0x26>
 800b556:	3301      	adds	r3, #1
 800b558:	6033      	str	r3, [r6, #0]
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	0699      	lsls	r1, r3, #26
 800b55e:	bf42      	ittt	mi
 800b560:	6833      	ldrmi	r3, [r6, #0]
 800b562:	3302      	addmi	r3, #2
 800b564:	6033      	strmi	r3, [r6, #0]
 800b566:	6825      	ldr	r5, [r4, #0]
 800b568:	f015 0506 	ands.w	r5, r5, #6
 800b56c:	d106      	bne.n	800b57c <_printf_common+0x48>
 800b56e:	f104 0a19 	add.w	sl, r4, #25
 800b572:	68e3      	ldr	r3, [r4, #12]
 800b574:	6832      	ldr	r2, [r6, #0]
 800b576:	1a9b      	subs	r3, r3, r2
 800b578:	42ab      	cmp	r3, r5
 800b57a:	dc26      	bgt.n	800b5ca <_printf_common+0x96>
 800b57c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b580:	6822      	ldr	r2, [r4, #0]
 800b582:	3b00      	subs	r3, #0
 800b584:	bf18      	it	ne
 800b586:	2301      	movne	r3, #1
 800b588:	0692      	lsls	r2, r2, #26
 800b58a:	d42b      	bmi.n	800b5e4 <_printf_common+0xb0>
 800b58c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b590:	4641      	mov	r1, r8
 800b592:	4638      	mov	r0, r7
 800b594:	47c8      	blx	r9
 800b596:	3001      	adds	r0, #1
 800b598:	d01e      	beq.n	800b5d8 <_printf_common+0xa4>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	6922      	ldr	r2, [r4, #16]
 800b59e:	f003 0306 	and.w	r3, r3, #6
 800b5a2:	2b04      	cmp	r3, #4
 800b5a4:	bf02      	ittt	eq
 800b5a6:	68e5      	ldreq	r5, [r4, #12]
 800b5a8:	6833      	ldreq	r3, [r6, #0]
 800b5aa:	1aed      	subeq	r5, r5, r3
 800b5ac:	68a3      	ldr	r3, [r4, #8]
 800b5ae:	bf0c      	ite	eq
 800b5b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5b4:	2500      	movne	r5, #0
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	bfc4      	itt	gt
 800b5ba:	1a9b      	subgt	r3, r3, r2
 800b5bc:	18ed      	addgt	r5, r5, r3
 800b5be:	2600      	movs	r6, #0
 800b5c0:	341a      	adds	r4, #26
 800b5c2:	42b5      	cmp	r5, r6
 800b5c4:	d11a      	bne.n	800b5fc <_printf_common+0xc8>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	e008      	b.n	800b5dc <_printf_common+0xa8>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	4652      	mov	r2, sl
 800b5ce:	4641      	mov	r1, r8
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	47c8      	blx	r9
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d103      	bne.n	800b5e0 <_printf_common+0xac>
 800b5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e0:	3501      	adds	r5, #1
 800b5e2:	e7c6      	b.n	800b572 <_printf_common+0x3e>
 800b5e4:	18e1      	adds	r1, r4, r3
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	2030      	movs	r0, #48	@ 0x30
 800b5ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5ee:	4422      	add	r2, r4
 800b5f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5f8:	3302      	adds	r3, #2
 800b5fa:	e7c7      	b.n	800b58c <_printf_common+0x58>
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	4622      	mov	r2, r4
 800b600:	4641      	mov	r1, r8
 800b602:	4638      	mov	r0, r7
 800b604:	47c8      	blx	r9
 800b606:	3001      	adds	r0, #1
 800b608:	d0e6      	beq.n	800b5d8 <_printf_common+0xa4>
 800b60a:	3601      	adds	r6, #1
 800b60c:	e7d9      	b.n	800b5c2 <_printf_common+0x8e>
	...

0800b610 <_printf_i>:
 800b610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	7e0f      	ldrb	r7, [r1, #24]
 800b616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b618:	2f78      	cmp	r7, #120	@ 0x78
 800b61a:	4691      	mov	r9, r2
 800b61c:	4680      	mov	r8, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	469a      	mov	sl, r3
 800b622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b626:	d807      	bhi.n	800b638 <_printf_i+0x28>
 800b628:	2f62      	cmp	r7, #98	@ 0x62
 800b62a:	d80a      	bhi.n	800b642 <_printf_i+0x32>
 800b62c:	2f00      	cmp	r7, #0
 800b62e:	f000 80d1 	beq.w	800b7d4 <_printf_i+0x1c4>
 800b632:	2f58      	cmp	r7, #88	@ 0x58
 800b634:	f000 80b8 	beq.w	800b7a8 <_printf_i+0x198>
 800b638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b63c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b640:	e03a      	b.n	800b6b8 <_printf_i+0xa8>
 800b642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b646:	2b15      	cmp	r3, #21
 800b648:	d8f6      	bhi.n	800b638 <_printf_i+0x28>
 800b64a:	a101      	add	r1, pc, #4	@ (adr r1, 800b650 <_printf_i+0x40>)
 800b64c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b650:	0800b6a9 	.word	0x0800b6a9
 800b654:	0800b6bd 	.word	0x0800b6bd
 800b658:	0800b639 	.word	0x0800b639
 800b65c:	0800b639 	.word	0x0800b639
 800b660:	0800b639 	.word	0x0800b639
 800b664:	0800b639 	.word	0x0800b639
 800b668:	0800b6bd 	.word	0x0800b6bd
 800b66c:	0800b639 	.word	0x0800b639
 800b670:	0800b639 	.word	0x0800b639
 800b674:	0800b639 	.word	0x0800b639
 800b678:	0800b639 	.word	0x0800b639
 800b67c:	0800b7bb 	.word	0x0800b7bb
 800b680:	0800b6e7 	.word	0x0800b6e7
 800b684:	0800b775 	.word	0x0800b775
 800b688:	0800b639 	.word	0x0800b639
 800b68c:	0800b639 	.word	0x0800b639
 800b690:	0800b7dd 	.word	0x0800b7dd
 800b694:	0800b639 	.word	0x0800b639
 800b698:	0800b6e7 	.word	0x0800b6e7
 800b69c:	0800b639 	.word	0x0800b639
 800b6a0:	0800b639 	.word	0x0800b639
 800b6a4:	0800b77d 	.word	0x0800b77d
 800b6a8:	6833      	ldr	r3, [r6, #0]
 800b6aa:	1d1a      	adds	r2, r3, #4
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6032      	str	r2, [r6, #0]
 800b6b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e09c      	b.n	800b7f6 <_printf_i+0x1e6>
 800b6bc:	6833      	ldr	r3, [r6, #0]
 800b6be:	6820      	ldr	r0, [r4, #0]
 800b6c0:	1d19      	adds	r1, r3, #4
 800b6c2:	6031      	str	r1, [r6, #0]
 800b6c4:	0606      	lsls	r6, r0, #24
 800b6c6:	d501      	bpl.n	800b6cc <_printf_i+0xbc>
 800b6c8:	681d      	ldr	r5, [r3, #0]
 800b6ca:	e003      	b.n	800b6d4 <_printf_i+0xc4>
 800b6cc:	0645      	lsls	r5, r0, #25
 800b6ce:	d5fb      	bpl.n	800b6c8 <_printf_i+0xb8>
 800b6d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6d4:	2d00      	cmp	r5, #0
 800b6d6:	da03      	bge.n	800b6e0 <_printf_i+0xd0>
 800b6d8:	232d      	movs	r3, #45	@ 0x2d
 800b6da:	426d      	negs	r5, r5
 800b6dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6e0:	4858      	ldr	r0, [pc, #352]	@ (800b844 <_printf_i+0x234>)
 800b6e2:	230a      	movs	r3, #10
 800b6e4:	e011      	b.n	800b70a <_printf_i+0xfa>
 800b6e6:	6821      	ldr	r1, [r4, #0]
 800b6e8:	6833      	ldr	r3, [r6, #0]
 800b6ea:	0608      	lsls	r0, r1, #24
 800b6ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6f0:	d402      	bmi.n	800b6f8 <_printf_i+0xe8>
 800b6f2:	0649      	lsls	r1, r1, #25
 800b6f4:	bf48      	it	mi
 800b6f6:	b2ad      	uxthmi	r5, r5
 800b6f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6fa:	4852      	ldr	r0, [pc, #328]	@ (800b844 <_printf_i+0x234>)
 800b6fc:	6033      	str	r3, [r6, #0]
 800b6fe:	bf14      	ite	ne
 800b700:	230a      	movne	r3, #10
 800b702:	2308      	moveq	r3, #8
 800b704:	2100      	movs	r1, #0
 800b706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b70a:	6866      	ldr	r6, [r4, #4]
 800b70c:	60a6      	str	r6, [r4, #8]
 800b70e:	2e00      	cmp	r6, #0
 800b710:	db05      	blt.n	800b71e <_printf_i+0x10e>
 800b712:	6821      	ldr	r1, [r4, #0]
 800b714:	432e      	orrs	r6, r5
 800b716:	f021 0104 	bic.w	r1, r1, #4
 800b71a:	6021      	str	r1, [r4, #0]
 800b71c:	d04b      	beq.n	800b7b6 <_printf_i+0x1a6>
 800b71e:	4616      	mov	r6, r2
 800b720:	fbb5 f1f3 	udiv	r1, r5, r3
 800b724:	fb03 5711 	mls	r7, r3, r1, r5
 800b728:	5dc7      	ldrb	r7, [r0, r7]
 800b72a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b72e:	462f      	mov	r7, r5
 800b730:	42bb      	cmp	r3, r7
 800b732:	460d      	mov	r5, r1
 800b734:	d9f4      	bls.n	800b720 <_printf_i+0x110>
 800b736:	2b08      	cmp	r3, #8
 800b738:	d10b      	bne.n	800b752 <_printf_i+0x142>
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	07df      	lsls	r7, r3, #31
 800b73e:	d508      	bpl.n	800b752 <_printf_i+0x142>
 800b740:	6923      	ldr	r3, [r4, #16]
 800b742:	6861      	ldr	r1, [r4, #4]
 800b744:	4299      	cmp	r1, r3
 800b746:	bfde      	ittt	le
 800b748:	2330      	movle	r3, #48	@ 0x30
 800b74a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b74e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b752:	1b92      	subs	r2, r2, r6
 800b754:	6122      	str	r2, [r4, #16]
 800b756:	f8cd a000 	str.w	sl, [sp]
 800b75a:	464b      	mov	r3, r9
 800b75c:	aa03      	add	r2, sp, #12
 800b75e:	4621      	mov	r1, r4
 800b760:	4640      	mov	r0, r8
 800b762:	f7ff fee7 	bl	800b534 <_printf_common>
 800b766:	3001      	adds	r0, #1
 800b768:	d14a      	bne.n	800b800 <_printf_i+0x1f0>
 800b76a:	f04f 30ff 	mov.w	r0, #4294967295
 800b76e:	b004      	add	sp, #16
 800b770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	f043 0320 	orr.w	r3, r3, #32
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	4832      	ldr	r0, [pc, #200]	@ (800b848 <_printf_i+0x238>)
 800b77e:	2778      	movs	r7, #120	@ 0x78
 800b780:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	6831      	ldr	r1, [r6, #0]
 800b788:	061f      	lsls	r7, r3, #24
 800b78a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b78e:	d402      	bmi.n	800b796 <_printf_i+0x186>
 800b790:	065f      	lsls	r7, r3, #25
 800b792:	bf48      	it	mi
 800b794:	b2ad      	uxthmi	r5, r5
 800b796:	6031      	str	r1, [r6, #0]
 800b798:	07d9      	lsls	r1, r3, #31
 800b79a:	bf44      	itt	mi
 800b79c:	f043 0320 	orrmi.w	r3, r3, #32
 800b7a0:	6023      	strmi	r3, [r4, #0]
 800b7a2:	b11d      	cbz	r5, 800b7ac <_printf_i+0x19c>
 800b7a4:	2310      	movs	r3, #16
 800b7a6:	e7ad      	b.n	800b704 <_printf_i+0xf4>
 800b7a8:	4826      	ldr	r0, [pc, #152]	@ (800b844 <_printf_i+0x234>)
 800b7aa:	e7e9      	b.n	800b780 <_printf_i+0x170>
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	f023 0320 	bic.w	r3, r3, #32
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	e7f6      	b.n	800b7a4 <_printf_i+0x194>
 800b7b6:	4616      	mov	r6, r2
 800b7b8:	e7bd      	b.n	800b736 <_printf_i+0x126>
 800b7ba:	6833      	ldr	r3, [r6, #0]
 800b7bc:	6825      	ldr	r5, [r4, #0]
 800b7be:	6961      	ldr	r1, [r4, #20]
 800b7c0:	1d18      	adds	r0, r3, #4
 800b7c2:	6030      	str	r0, [r6, #0]
 800b7c4:	062e      	lsls	r6, r5, #24
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	d501      	bpl.n	800b7ce <_printf_i+0x1be>
 800b7ca:	6019      	str	r1, [r3, #0]
 800b7cc:	e002      	b.n	800b7d4 <_printf_i+0x1c4>
 800b7ce:	0668      	lsls	r0, r5, #25
 800b7d0:	d5fb      	bpl.n	800b7ca <_printf_i+0x1ba>
 800b7d2:	8019      	strh	r1, [r3, #0]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	6123      	str	r3, [r4, #16]
 800b7d8:	4616      	mov	r6, r2
 800b7da:	e7bc      	b.n	800b756 <_printf_i+0x146>
 800b7dc:	6833      	ldr	r3, [r6, #0]
 800b7de:	1d1a      	adds	r2, r3, #4
 800b7e0:	6032      	str	r2, [r6, #0]
 800b7e2:	681e      	ldr	r6, [r3, #0]
 800b7e4:	6862      	ldr	r2, [r4, #4]
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7f4 fd19 	bl	8000220 <memchr>
 800b7ee:	b108      	cbz	r0, 800b7f4 <_printf_i+0x1e4>
 800b7f0:	1b80      	subs	r0, r0, r6
 800b7f2:	6060      	str	r0, [r4, #4]
 800b7f4:	6863      	ldr	r3, [r4, #4]
 800b7f6:	6123      	str	r3, [r4, #16]
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7fe:	e7aa      	b.n	800b756 <_printf_i+0x146>
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	4632      	mov	r2, r6
 800b804:	4649      	mov	r1, r9
 800b806:	4640      	mov	r0, r8
 800b808:	47d0      	blx	sl
 800b80a:	3001      	adds	r0, #1
 800b80c:	d0ad      	beq.n	800b76a <_printf_i+0x15a>
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	079b      	lsls	r3, r3, #30
 800b812:	d413      	bmi.n	800b83c <_printf_i+0x22c>
 800b814:	68e0      	ldr	r0, [r4, #12]
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	4298      	cmp	r0, r3
 800b81a:	bfb8      	it	lt
 800b81c:	4618      	movlt	r0, r3
 800b81e:	e7a6      	b.n	800b76e <_printf_i+0x15e>
 800b820:	2301      	movs	r3, #1
 800b822:	4632      	mov	r2, r6
 800b824:	4649      	mov	r1, r9
 800b826:	4640      	mov	r0, r8
 800b828:	47d0      	blx	sl
 800b82a:	3001      	adds	r0, #1
 800b82c:	d09d      	beq.n	800b76a <_printf_i+0x15a>
 800b82e:	3501      	adds	r5, #1
 800b830:	68e3      	ldr	r3, [r4, #12]
 800b832:	9903      	ldr	r1, [sp, #12]
 800b834:	1a5b      	subs	r3, r3, r1
 800b836:	42ab      	cmp	r3, r5
 800b838:	dcf2      	bgt.n	800b820 <_printf_i+0x210>
 800b83a:	e7eb      	b.n	800b814 <_printf_i+0x204>
 800b83c:	2500      	movs	r5, #0
 800b83e:	f104 0619 	add.w	r6, r4, #25
 800b842:	e7f5      	b.n	800b830 <_printf_i+0x220>
 800b844:	0800c6e9 	.word	0x0800c6e9
 800b848:	0800c6fa 	.word	0x0800c6fa

0800b84c <_realloc_r>:
 800b84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b850:	4607      	mov	r7, r0
 800b852:	4614      	mov	r4, r2
 800b854:	460d      	mov	r5, r1
 800b856:	b921      	cbnz	r1, 800b862 <_realloc_r+0x16>
 800b858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b85c:	4611      	mov	r1, r2
 800b85e:	f7ff bb99 	b.w	800af94 <_malloc_r>
 800b862:	b92a      	cbnz	r2, 800b870 <_realloc_r+0x24>
 800b864:	f7ff fcc4 	bl	800b1f0 <_free_r>
 800b868:	4625      	mov	r5, r4
 800b86a:	4628      	mov	r0, r5
 800b86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b870:	f000 f81a 	bl	800b8a8 <_malloc_usable_size_r>
 800b874:	4284      	cmp	r4, r0
 800b876:	4606      	mov	r6, r0
 800b878:	d802      	bhi.n	800b880 <_realloc_r+0x34>
 800b87a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b87e:	d8f4      	bhi.n	800b86a <_realloc_r+0x1e>
 800b880:	4621      	mov	r1, r4
 800b882:	4638      	mov	r0, r7
 800b884:	f7ff fb86 	bl	800af94 <_malloc_r>
 800b888:	4680      	mov	r8, r0
 800b88a:	b908      	cbnz	r0, 800b890 <_realloc_r+0x44>
 800b88c:	4645      	mov	r5, r8
 800b88e:	e7ec      	b.n	800b86a <_realloc_r+0x1e>
 800b890:	42b4      	cmp	r4, r6
 800b892:	4622      	mov	r2, r4
 800b894:	4629      	mov	r1, r5
 800b896:	bf28      	it	cs
 800b898:	4632      	movcs	r2, r6
 800b89a:	f7ff fc9b 	bl	800b1d4 <memcpy>
 800b89e:	4629      	mov	r1, r5
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	f7ff fca5 	bl	800b1f0 <_free_r>
 800b8a6:	e7f1      	b.n	800b88c <_realloc_r+0x40>

0800b8a8 <_malloc_usable_size_r>:
 800b8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ac:	1f18      	subs	r0, r3, #4
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	bfbc      	itt	lt
 800b8b2:	580b      	ldrlt	r3, [r1, r0]
 800b8b4:	18c0      	addlt	r0, r0, r3
 800b8b6:	4770      	bx	lr

0800b8b8 <_init>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr

0800b8c4 <_fini>:
 800b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c6:	bf00      	nop
 800b8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ca:	bc08      	pop	{r3}
 800b8cc:	469e      	mov	lr, r3
 800b8ce:	4770      	bx	lr
